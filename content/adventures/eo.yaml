adventures:
    story:
        name: Rakonto
        default_save_name: Rakonto
        description: Rakonto
        levels:
            1:
                story_text: |
                    En la 1-a nivelo vi povas krei rakonton kun malsama ĉeffiguro, kiun vi mem enigas.

                    En la unua linio, uzu `{ask}` kaj demandu, kiu estos la ĉeffiguro de la rakonto.

                    Post tiu unua linio, komencu per `{print}` se la frazo bezonas esti presita.
                    Vi uzas `{echo}` se vi volas, ke via ĉeffiguro estu ĉe la fino de la frazo.
                example_code: |
                    ```
                    {ask} La ĉefrolulo de ĉi tiu rakonto estas
                    {print} La ĉefrolulo nun promenas en la arbaro
                    {echo} Li timetas
                    {print} Li aŭdas ĉie frenezajn bruojn
                    {print} Li timas, ke ĉi tie estas hantata arbaro
                    ```
                story_text_2: |
                    ### Ekzercio
                    Kreu vian propran rakonton per almenaŭ 6 linioj de kodo.
                    Tiu rakonto ne povas esti la sama ol la ekzemplkodo.
                    Uzu almenaŭ unu komandon `{ask}` kaj `{echo}`.
                    Povas temi pri kion ajn vi ŝatas.
                    Se vi ne havas inspiron, povas temi pri iri kinejen, pri sporta matĉo, aŭ pri tago en la bestoĝardeno.
            2:
                story_text: |
                    En nivelo 2 vi povas fari vian rakonton pli amuza. La nomo de via ĉeffiguro nun povas esti ie ajn en la frazo.

                    Vi ja devas programi iom krome por tio. Vi devas nun nomi vian ĉeffiguron unue.

                    Vi tiam povas meti tiun nomon ie ajn en frazon.
                example_code: |-
                    ```
                    nomo {is} {ask} Kio estas la nomo de la ĉefrolulo?
                    {print} nomo nun kuras en la arbaro
                    {print} nomo timetas
                    {print} Subite li aŭdas frenezan bruon…
                    {sleep}
                    {print} nomo timas, ke ĉi tie estas hantata arbaro
                    ```
                story_text_2: |
                    ### Exercise
                    Now it's time to add variables to your own story that you've made in the previous level.
                    Go to 'My programs', look for your level 1 story adventure and copy the code. Paste the code in your input screen in this level.

                    This code won't work in this level, because you have not used variables yet.
                    Change the `{ask}` commands and `{echo}` commands in your code to the correct form that you've learned in this level.

                    **Extra** Add a sleep command to your code to build up tension in your story.
            3:
                story_text: |
                    En Nivelo 3, oni povas igi sian rakonton pli amuza. Oni povas uzi hazardecon por iu ajn monstro, besto aŭ alia obstaklo, jene:
                example_code: |
                    ```
                    bestoj {is} 🦔, 🐿, 🦉, 🦇
                    {print} Li nun aŭdas la sonon de bestoj {at} {random}
                    ```
                story_text_2: |
                    La komando `{add}` ankaŭ povas esti utila en via rakonto.
                example_code_2: |
                    ```
                    {print} Li aŭdas sonon
                    bestoj {is} 🐿, 🦔, 🦇, 🦉
                    besto {is} {ask} Kio estas ĝi laŭ via opinio?
                    {add} besto {to_list} bestoj
                    {print} ĝi estis bestoj {at} {random}
                    ```
                story_text_3: |
                    Jen ekzemplo de la komando `{remove}` en via rakonto
                example_code_3: |
                    ```
                    {print} Lia tornistro fariĝis tro peza.
                    {print} Ene estis botelo da akvo, lanterno kaj briko.
                    sako {is} akvo, lanterno, briko
                    forĵetoto {is} {ask} Kiun li forĵetu?
                    {remove} forĵetoto {from} sako
                    ```
            4:
                story_text: |
                    ### Exercise
                    Copy the example code and finish it by adding quotation marks on the blanks in lines 1 and 2.
                    The blanks in line 3 and 4 should not be replaced by quotation marks, but a `{sleep}` and a `{clear}` command. Can you make it work?

                    ### Exercise 2
                    Go back to the previous level and copy your story code. Make the code work in this level by adding quotation marks in the right spots.
                    Mind: The variables in your own story should be outside of the quotation marks. Just like the second line of the example code. In that line the variable name is placed outside of the quotation marks.
                example_code: |
                    ```
                    name {is} {ask} _ What is your name? _
                    {print}  _ The main character is called _ name
                    _
                    _
                    {print} name  _ is now going to walk in the woods _
                    {print} name _ is a bit scared _
                    animals {is} 🦔, 🐿, 🦉, 🦇
                    {print} _ He hears the sound of a _ animals {at} {random}
                    {print} name _ is afraid this is a haunted forest _
                    ```
            5:
                story_text: |
                    En ĉi tiu nivelo vi povas programi malsamajn finaĵojn, kiuj faros vian rakonton eĉ pli amuza.

                    Pensu pri du finaĵoj por via rakonto, ekzemple:

                    - La princino promenas tra la arbaro
                    - Ŝi renkontas monstron

                    - Feliĉa fino: Ŝi prenas sian glavon kaj la monstro rapide forkuras
                    - Malbona Fino: La monstro manĝas la princinon

                    Vi ankaŭ povas certigi, ke nomo povas esti enigita denove. Tio funkcias same kiel en la antaŭaj niveloj. Vi povas kombini tion per `{if}`, kaj tiam vi jam faris tutan programon!
                example_code: |
                    ```
                    nomo {is} {ask} 'Who is walking in the forest?'
                    {print} nomo 'walks through the forest'
                    {print} nomo 'renkontas monstron'
                    fino {is} {ask} 'Would you like a good or a bad ending?'
                    {if} fino {is} bona {print} nomo 'takes the sword and the monster quickly runs away'
                    {else} {print} nomo 'estis manĝita de monstro'
                    ```
            7:
                story_text: |
                    En rakonto, iu diras vortojn plurajn fojojn. Ekzemple, kiam iu vokas helpon aŭ kantas kanton.
                    Vi povas meti tiajn ripetojn en vian rakonton, en ĉi tiu nivelo per `{repeat}`.
                example_code: |
                    ```
                    {print} 'La princo petadis por helpo.'
                    {repeat} 5 {times} {print} 'Helpon!'
                    {print} 'Kial neniu helpas min?'
                    ```
            8:
                story_text: |
                    En ĉi tiu nivelo, vi povas uzi plurajn liniojn en viaj `{if}`-komandoj; tiel, vi povas plibonigi vian ĝojan aŭ malĝojan finon!
                example_code: |
                    ```
                    {print} 'HO NE! La tiranosaŭro alproksimiĝas!'
                    fino = {ask} 'Ĉu vi volas ĝojan aŭ malĝojan finon?'
                    {if} fino {is} ĝoja
                        {print} 'Ĝustatempe Rikardo resaltas en la tempomaŝinon!'
                        {print} 'Miĥaelo tajpas la kodon kaj…'
                        {print} '💥ZAP!💥'
                        {print} 'Ili estas reen en sia garaĝo'
                    {else}
                        {print} 'Miĥaelo krias: «VENU RIKARDO! KURU PLI RAPIDE!»'
                        {print} 'Sed Rikardo estas tro malrapida…'
                        {print} 'La tiranosaŭro proksimiĝas kaj manĝas lin per unu mordego!🦖'
                    ```
            9:
                story_text: |
                    En ĉi tiu nivelo vi povas uzi nestadon por meti {if}, {repeat} aŭ {for} komandojn en aliajn {if}, {repeat} aŭ {for}. Ĉi tio donas al vi multajn eblojn kaj vere helpas vin fari vian rakonton interaga.
                example_code: |
                    ```
                    {print} 'Robertino promenas urbocentre'
                    loko = {ask} 'Ĉu Robertino iras en butikon, aŭ ĉu ŝi iras hejmen?'
                    {if} loko {is} butiko
                        {print} 'Ŝi eniras la butikon.'
                        {print} 'Robertino vidas interesan libron'
                        libro = {ask} 'Ĉu Robertino aĉetas la libron?'
                        {if} libro {is} jes
                            {print} 'Robertino aĉetas la libron kaj iras hejmen'
                        {else}
                            {print} 'Robertino eliras la butikon kaj iras hejmen'
                    {else}
                        {print} 'Robertino iras hejmen'
                    ```
            10:
                story_text: |
                    En ĉi tiu nivelo, vi povas uzi la komandon `{for}` en via rakonto. Tiel vi povas facile programi la infanlibron «Bruna urso, bruna urso, kion vi vidas?».
                example_code: |
                    ```
                    bestoj = birdo, ŝafo, rano, anaso, infaneto
                    {print} 'bruna urso'
                    {print} 'bruna urso'
                    {print} 'Kion vi vidas?'
                    {for} besto {in} bestoj
                        {print} 'Mi vidas ' besto 'n rigardantan min'
                        {print} besto
                        {print} besto
                        {print} 'Kion vi vidas?'
                    {print} 'Mi vidas ĉiujn bestojn, kiuj rigardas min!'
                    ```
            12:
                story_text: En ĉi tiu nivelo, oni povas uzi la citilojn por konservi plurajn vortojn en variablo.
                example_code: |
                    ```
                    nomo = 'La Reĝino de Anglio'
                    {print} nomo ' estis manĝanta pecon da kuko, kiam subite…'
                    ```
            13:
                story_text: |
                    Uzante la komandojn `{and}` kaj `{or}`, oni povas mallongigi siajn rakontojn. Ekzemple, rigardu la jenan rakonton pri drakoj.
                example_code: |
                    ```
                    glavo = 'perdita'
                    ludo = 'daŭranta'
                    {print} 'Nia heroo promenas tra la arbaro'
                    {print} 'La vojo forkiĝas en du vojojn'
                    {for} i {in} {range} 0 {to} 2
                        {if} ludo {is} 'daŭranta'
                            vojo = {ask} 'Kiun vojon ŝi elektu?'
                            {if} vojo {is} 'maldekstra' {and} glavo {is} 'trovita'
                                {print} 'Nia heroo renkontas drakon!'
                                {print} 'Feliĉe nia heroo havas glavon por venki la beston!'
                                ludo = 'finita'
                            {if} vojo {is} 'maldekstra' {and} glavo {is} 'perdita'
                                {print} 'Nia heroo trovas drakon, sed ŝi ne havas armilojn!'
                                {print} 'Nian heroon venkas la drako…'
                                {print} 'Provu denove'
                                ludo = 'finita'
                            {if} vojo {is} 'dekstra' {and} glavo {is} 'trovita'
                                {print} 'Vi jam trovis la glavon. Ĉi tie restas nenio.'
                                {print} 'Ŝi reiras'
                            {if} vojo {is} 'dekstra' {and} glavo {is} 'perdita'
                                {print} 'Nia heroo trovas glavon'
                                {print} 'Ĉi tio povus esti tre oportuna'
                                glavo = 'trovita'
                    ```
            15:
                story_text: |
                    Uzante la buklon `{while}`, oni povas igi siajn rakontojn pli interesaj. Ekzemple, oni povas uzi `{while} ludo {is} 'daŭranta'` por ke oni povu ludi ĝis la ludo finiĝos.
                    Aŭ oni povas uzi `{while} glavo {is} 'perdita'` por ke la ludanto ne povu daŭrigi sen trovi ion.

                    ### Exercise
                    The example code shows you how to use the `{while}` loop in a story. Now **think of your own scenario** in which the player has to find something before they can continue.
                example_code: |
                    ```
                    ŝlosilo = 'perdita'
                    {print} 'Vi staras en via ĝardeno, kaj vi perdis vian ŝlosilon.'
                    {print} 'Kie vi volas serĉi ĝin?'
                    {print} 'Vi povas elekti unu el: arbo, florbedo, roko, poŝtkesto'
                    {while} ŝlosilo == 'perdita'
                        loko = {ask} 'Kie vi volas serĉi ĝin?'
                        {if} loko == 'florbedo'
                            {print} 'Jen ĝi troviĝas!'
                            ŝlosilo = 'trovita'
                        {else}
                            {print} 'Ne, ĝi ne estas ĉe la ' loko
                    {print} 'Nun vi povas eniri la domon!'
                    ```
            18:
                story_text: |
                    We are going to print another story, but now we have to use brackets with `{print}`.

                    ### Exercise 1
                    Create a story of at least 5 sentences. You don't have to use 'name' just yet.
                example_code: |
                    ```
                    {print}('Welcome to this story!')
                    ```
                story_text_2: |
                    ### Exercise 2
                    We have already prepared an `{input}` for you. First, use the `name` variable in your story.
                    Then add a second `{ask}` and use that variable as well.
                    Tip: Remember the commas in a `{print}` between text and variables!
                example_code_2: |
                    ```
                    naam = {input}("What's your name?")
                    {print}('Welcome to this story!')
                    ```
    add_remove_command:
        name: '{add} {to} & {remove} {from}'
        default_save_name: add_remove_command
        description: introducing add to and remove from
        levels:
            3:
                story_text: |
                    ## Add to
                    You can add items to the list with the `{add} {to_list}` command. To add an item to a list you can simply type: `{add} penguin {to} animals` or you can use the `{ask}` command like in the example code.
                example_code: |
                    ```
                    animals {is} dog, cat, kangaroo
                    like {is} {ask} What is your favorite animal?
                    {add} like {to_list} animals
                    {print} I choose animals {at} {random}
                    ```
                story_text_2: |
                    ## Remove from
                    If you can add items to a list, of course you can also take them off. This is done with the `{remove} {from}` command.
                example_code_2: |
                    ```
                    animals {is} dog, cat, kangaroo
                    dislike {is} {ask} What animal do you not like?
                    {remove} dislike {from} animals
                    {print} I choose animals {at} {random}
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the new commands in this virtual restaurant. Add the flavor the player is hpoing for to the list and remove the flavors they are allergic to.
                example_code_3: |
                    ```
                    {print} Mystery milkshake
                    flavors {is} strawberry, chocolate, vanilla
                    hope {is} {ask} What flavor are you hoping for?
                    _
                    allergies {is} {ask} Are you allergic to any flavors?
                    _
                    {print} You get a flavors {at} {random} milkshake
                    ```
    and_or_command:
        name: '{and} & {or}'
        default_save_name: and or
        description: introducing and or
        levels:
            13:
                story_text: |-
                    We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two `{if}`s but can use `{and}` and `{or}`.

                    If you use `{and}`, both statements, left and right of the `{and}` need to be true. We can also use `{or}`. Then only one statement needs to be correct.
                example_code: |
                    ```
                    name = {ask} 'what is your name?'
                    age = {ask} 'what is your age?'
                    {if} name {is} 'Hedy' {and} age {is} 2
                        {print} 'You are the real Hedy!'
                    ```
    ask_command:
        name: '{ask}'
        default_save_name: ask_command
        description: Introduction ask command
        levels:
            1:
                story_text: |
                    ## The ask command
                    Now that you can use the `{print}` command, you are ready to learn the next command: `{ask}`. With the `{ask}` command, you can ask a question. Check it out:
                example_code: |
                    ```
                    {print} Hello!
                    {ask} What is your name?
                    ```
                story_text_2: |
                    ## The echo command
                    If you want the computer to repeat the answer, you can use the `{echo}` command. The answer will then be echoed back at the end of the sentence, so in this example after hello.
                example_code_2: |
                    ```
                    {print} Hello!
                    {ask} What is your name?
                    {echo} hello
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the `{ask}` and `{echo}` commands. Firstly, fill in the blanks to make this program work.
                    Then ask 2 more questions using the `{ask}` command, after each `{ask}` use an `{echo}` to print the answer on the screen.
                example_code_3: |
                    ```
                    _ How are you doing?
                    _
                    ```
            2:
                story_text: |
                    ## The ask command
                    Now that we can use **variables** in our codes, we no longer need the `{echo}` command.
                    We can use variables to store the answers to our questions and this way we can use the answer to multiple questions in our codes.
                    Check it out:

                    This way your code is becoming interactive!
                example_code: |
                    ```
                    name {is} {ask} What is your name?
                    {print} Hello name
                    age {is} {ask} How old are you?
                    {print} name is age years old.
                    ```
                story_text_2: |
                    ### Exercise
                    In the previous tab you have practised with setting variables with the `{is}` command.
                    You have created at least 3 variables and used them with a print command.
                    Now, instead of setting the variables we want you to make the variables interactive, like we did in our example.

                    Copy your code from the previous tab and make the variables interactive by using `{ask}` commands.
                example_code_2: |
                    ```
                    favorite_animal {is} {ask} What is your favorite animal?
                    {print} I like favorite_animal
                    ```
            18:
                story_text: The final change we will need to make to get Python code is changing `{ask}` into `{input}`.
                example_code: |
                    ```
                    {print}('My name is Hedy!')
                    name = {input}('What is your name?')
                    {print}('So your name is ', name)
                    ```
    blackjack:
        name: Nigra fanto
        default_save_name: Nigra fanto
        description: Provu alproksimiĝi al 21 laŭeble
        levels:
            17:
                story_text: |
                    Nigra fanto estas simpla kartludo, dum kiu oni provas alproksimiĝi laŭeble al 21 poentoj. Vi ricevas du kartojn. Ĉiu karto valoras sian numeran valoron, kaj la vizaĝkartoj (fanto, damo kaj reĝo) valoras 10 poentojn.
                    La aso valoras aŭ 1 aŭ 11 poentojn (vi povas elekti). La kazinisto, via kontraŭulo, ankaŭ ricevas du kartojn.
                    Se vi volas, vi povas akiri alian karton, kaj ĝiaj poentoj estos aldonitaj al via totalo. La kazinisto ankaŭ povas preni alian karton.
                    Sed atentu ne akiri pli ol 21 poentojn, ĉar se vi tion faros, vi perdos!
                    La ludanto, kiu plej alproksimiĝos al 21, ne superante 21, gajnos!

                    ### Exercise
                    In this adventure we code the first part of our Blackjack game. We'll create a function to calculate how many points a card is worth.

                    ***Set the variables***
                    Start by making a list of all the cards, from 2 to Ace. Next make a list of the face cards, so Jack, Queen and King. Then pick a random card from the list of cards to be card_1.

                    ***Create a function to calculate the points***
                    Create a function that calculates how many points a card is worth.
                    All the face cards are worth 10 points, the Ace is worth 11 and all the other cards are worth their numeral.
                    Return the variable `points` at the end of the function.

                    ***Test the function***
                    Test if your function is working properly. Finish the first print command by filling in which card you've drawn. Then finish the second line by calling the function with card_1.
                    Run the code a couple of times. Are you happy with the results? Great! Then you can remove the testing part and move on the the next tab!
                example_code: |
                    ```
                    {print} 'BLACKJACK'

                    # Set these variables
                    cards = _
                    face_cards = _
                    card_1 =

                    # Create a function to calculate the points
                    {define} calculate_points {with} card:
                        {if} card {in} face_cards:
                            points = _
                        {elif} _
                            _
                        {else}:
                            _
                        _ points

                    # Test your function
                    {print} 'Your card is a ' _
                    {print} 'That is worth ' _ ' points'.
                    ```
    blackjack_2:
        name: Blackjack 2
        default_save_name: Blackjack_2
        description: Blackjack part 2
        levels:
            17:
                story_text: |
                    ### Exercise
                    In this adventure we code the second part of our Blackjack game.

                    ***Paste your code from the previous adventure***
                    In the previous adventure you've started a list of variables and created a function to calculate how many points a card is worth. Copy your code and paste it here. Mind that you don't need the testing part, so if you haven't removed that yet, please do so now.

                    ***Add more variables***
                    You have already set the lists `cards` and `face_cards` and the variable `card_1`. Underneath those variables create 3 more variables: `card_2`, dealer_card_1` and `dealer_card_2`. These variables are all set to a random card from the list of cards.

                    ***Add up points***
                    To calculate how many points you have scored we call the function with card 1 and we do it again for card 2. Then we add both these scores together to get your total.
                    Do the same thing for the dealers points, but be sure to use the dealer's cards and not your own!

                    ***2 Aces***
                    You're doing great! Almost all scores can be calculated now. There is only one exception: 2 Aces. If you get 2 Aces, your total is 12 points and not 22 (because 22 points would be losing!). This of course also goes for the dealer.

                    ***Show the score***
                    Lastly, you want to tell the program to tell you which cards you have drawn and how many points that is. Then show which cards the dealer has and how many points they have.

                    ***Continue in the next tab***
                    Great! You have finished this part of the game! Copy your code and go to the next tab to learn how to ask for an extra card and to declare a winner.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Add these variables to the list of variables
                    card_2 = _
                    dealer_card_1 = _
                    dealer_card_2 = _

                    # Add up your points
                    your_points_1 = {call} _ {with} card_1
                    your_points_2 = _
                    your_total = _

                    # Add up the dealers points
                    dealer_points_1 = _
                    _
                    _

                    # 2 Aces
                    {if} card_1 == 'Ace' {and} _
                        your_total = 12
                    {if} dealer_card_1 _
                        dealer_total = _

                    # Show the score
                    {print} 'You have drawn a ' _ ' and a ' _ '. That is ' _ ' points'
                    {print} 'The dealer has drawn a ' _ ' and a ' _ '. That is ' _ ' points'
                    ```
    blackjack_3:
        name: Blackjack 3
        default_save_name: Blackjack_3
        description: Blackjack part 3
        levels:
            17:
                story_text: |
                    In the previous tabs you have learned how to draw 2 random cards for yourself and for the dealer and to calculate how many points you both got.
                    In this adventure we add the option to ask for an extra card for both you and the dealer.

                    ### Exercise
                    ***Paste your code from the previous adventure*** Firstly, copy your code from the previous tab and paste it here.

                    ***Extra card for you*** If you want, you can get an extra card to get your total as close to 21 as possible. First ask the player if they want an extra card.
                    If they do, pick a random card and print what they have drawn. If the card is not an Ace, you can call the function and add the points to your total.
                    In case the card is an Ace, you can't use the function, because the Ace can be either 1 point or 11 points, depending on how many points you already have earned.
                    If your total is less than 11, you want the ace to be 11 points (because this is closest to 21). So you add 11 points to your total.
                    If the total is more than or equal to 11, you want the ace to be 1 point (because you don't want more than 21 points). So you add 1 point to your total.
                    Lastly, print your new total of points.

                    ***Extra card for the dealer*** The dealer can also get an extra card. The dealer doesn't need to be asked, because they always get an extra card if their total is less than 17.
                    Copy the 'Extra card for you code' and paste it in the dealers section. Then change it to fit the dealer picking an extra card and getting points added to their total.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Extra card for you
                    hit = {ask} _
                    {if} hit == 'yes':
                        card_3 = _
                        {print} _
                        {if} card_3 _ 'Ace':
                            your_points_3 = _
                            your_total = _
                        {else}:
                           {if} your_total _
                                _
                            {else}:
                                _
                        {print} _

                    # Extra card for the dealer
                    {if} dealer_total < 17
                    _
                    ```
    blackjack_4:
        name: Blackjack 4
        default_save_name: Blackjack_4
        description: Blackjack part 4
        levels:
            17:
                story_text: |
                    In the last 3 adventures you have alsmost created a working blackjack game! The only thing left to do is to decide a winner!

                    ### Exercise
                    ***Paste your code from the previous adventure*** Start by pasting the code that you've made so far into your programming field.

                    ***Decide a winner***
                    Firstly, if you and the dealer have an equal amount of points, it's a draw.
                    Secondly, if the dealer has more than 21 points and you don't, you are the winner.
                    Thirdly, if both you and the dealer have less than 22 points, we have to see who came closest to 21. We do that by comparing who has the highest score. Is your total higher than the dealer's total, then you are the winner. If not, the dealer wins.
                    Lastly, in all other scenarios (e.g. you have more than 21 points and the dealer doesn't, or you both have more than 21 points) you are the loser.

                    ***Enjoy the game!***
                    Does your game work properly? Amazing! You have done a great job! Enjoy your game!
                    If it doesn't work right away, no worries, you might have made a mistake. Just keep calm and bebug your code using the ladybug button.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Decide a winner
                    {if} _
                        {print} 'Its a draw! Play again!'
                    {elif} _
                        {print} 'You win!'
                    {elif} _ :
                        {if} _:
                            {print} _
                        {else}:
                            {print} _
                    {else}:
                        _
                    ```
    calculator:
        name: Kalkulilo
        default_save_name: Kalkulilo
        description: Krei kalkulilon
        levels:
            6:
                story_text: |
                    Nun, ĉar vi povas kalkuli, vi ankaŭ povas verki programon por ekzerci vin al matematikaj kalkuloj. Vi povas mem fari la kalkulojn, ekzemple:
                example_code: |
                    ```
                    ĝusta_respondo = 11 * 27
                    respondo = {ask} 'Kiom estas 11 multiplikite per 27?'
                    {if} respondo {is} ĝusta_respondo {print} 'Bone!'
                    {else} {print} 'Malĝuste! Jen la ĝusta respondo: ' ĝusta_respondo
                    ```
                story_text_2: |
                    Vi ankaŭ povas lasi la komputilon fari hazardajn sumojn memstare uzante hazardajn.
                    Jen kiel vi elektas kelkajn tabelojn por ekzerciĝi, kaj el tio vi ĉiam ricevas malsaman sumon:
                example_code_2: |
                    ```
                    tabeloj = 4, 5, 6, 8
                    nombroj = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    tabelo = tabeloj {at} {random}
                    nombro = nombroj {at} {random}
                    ĝusta_respondo = tabelo * nombro
                    respondo = {ask} 'Kiom estas ' tabelo ' multiplikite per ' nombro '?'
                    {if} respondo {is} ĝusta_respondo {print} 'Bone!'
                    {else} {print} 'Malĝuste! La ĝusta respondo estas ' ĝusta_respondo
                    ```
                story_text_3: |
                    You can also let the computer do random calculations on its own using {random}.
                example_code_3: |
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number_1 = _
                    number_2 = _
                    correct_answer = number_1 * number_2
                    given_answer = 'What is ' number_1 ' times ' number_2 '?'
                    {if} _
                    {else} _
            9:
                story_text: |
                    En antaŭaj niveloj, vi lernis kiel verki kalkulilon. En ĉi tiu nivelo, vi povas apliki tiun kodon por verki matematikan ludeton jene…
                example_code: |
                    ```
                    poentaro = 0
                    {repeat} 10 {times}
                        nombroj = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        nombro1 = nombroj {at} {random}
                        nombro2 = nombroj {at} {random}
                        ĝusta_respondo = nombro1 * nombro2
                        {print} 'Kiom estas ' nombro1 ' multiplikite per ' nombro2 '?'
                        respondo = {ask} 'Tajpu vian respondon ĉi tie…'
                        {print} 'Jen via respondo:' respondo
                        {if} respondo {is} ĝusta_respondo
                            poentaro = poentaro + 1
                    {print} 'Bonege! Jen via poentaro: ' poentaro '/10!'
                    ```
            10:
                story_text: |
                    This calculator game helps you practise your tables of multiplication!
                    ### Exercise
                    Fill in the blanks. We want this program to ask the player these questions:
                    ```
                    How much is 1 times 1?
                    How much is 1 times 2?
                    How much is 1 times 3?
                    How much is 2 times 1?
                    How much is 2 times 2?
                    How much is 2 times 3?
                    How much is 3 times 1?
                    How much is 3 times 2?
                    How much is 3 times 3?
                    _
                    ```
                example_code: |
                    ```
                    numbers = 1, 2, 3
                    {for} _
                        {for} _
                            answer = {ask} _
                            correct = number_1 * number_2
                            {if} answer {is} correct
                                {print} 'Great job!'
                            {else}
                                {print} 'That is wrong. The right answer is ' correct
                    ```
            11:
                story_text: |
                    With a `{for}` you can simplify tables of multiplication practise program.

                    ### Exercise 1
                    Improve the example code such that it prints a nice multiplication table: <br> "1 times 10 is 10", "2 times 10 is 20", etc.

                    ### Exercise 2
                    Go back to your level 10 multiplication code, and modify it so that it uses a `{for}` and `{range}`.
                example_code: |
                    ```
                    number = 10
                    {for} i {in} {range} 1 to 10
                        {print} i * number
                    ```
            12:
                story_text: |
                    Nun oni povas verki kalkulilon, kiu funkcias por decimalaj frakcioj.
                example_code: |
                    ```
                    nombro1 = {ask} 'Kio estas la unua nombro?'
                    nombro2 = {ask} 'Kio estas la dua nombro?'
                    respondo = nombro1 + nombro2
                    {print} nombro1 ' plus ' nombro2 ' estas ' respondo
                    ```
            13:
                story_text: |
                    ### Exercise 1
                    Let's make the practice program a bit harder. The player now has to answers two questions correctly. Fill out the blanks to complete the program.

                    ### Exercise 2
                    Sometimes, calculations have multiple correct answers. For example, 10 can be divided by 5 and by 2. So the question 'What number divides 10?' can be answered by 2 and by 5.
                    Ask for a calculation that has multiple correct answers, ask the player to answer it, and determine if it is correct using `{or}`.
                    Empty the programming field and create your own solution.
                example_code: |
                    ```
                    answer1 = {ask} 'What is 10 times 7?'
                    answer2 = {ask} 'What is 6 times 7?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
            14:
                story_text: |
                    In this adventure you will build a calculator that calculates your mean grade for you. If you get your calculator to work, you can move on to the next adventure, which allows you to add two extra features.

                    ### Exercise 1
                    Fill in the blanks to get the calculator to work.
                    * Start with the fourth line, add a question to figure out what grade the student got.
                    * In the fifth line you'll want to calculate the total of all grades, so the total = total + grade.
                    * Then we get to set the return value. We want to return the mean, so the total devided by the amount of tests (4).
                    * Lastly we finish the code by calling the function in line 8.

                    Did you get it? Awesome! Would you like to add even more to your calculator? **This adventure continues in the next tab!**
                example_code: |
                    ```
                    {define} calculate_mean_grade
                        total = 0
                        {for} i {in} {range} 1 {to} 4
                            grade = {ask} _
                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
                    ```

                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
            15:
                story_text: |
                    You can add the `{while}` loop to the calculator game you've learned to make in a previous level.
                    This makes sure the player can't continue to the next question if they answer incorrectly.

                    ### Exercise
                    Add the `{while}` loop in the function, ask the player what number_1 times number_2 is and print their answer.
                    Then `{call}` the function.
                example_code: |
                    ```
                    {define} new_question
                        numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        number_1 = numbers {at} {random}
                        number_2 = numbers {at} {random}
                        correct = number_1 * number_2
                        answer = 0
                        _
                        _
                        _
                        {print} 'Well done!'

                    {print} 'Give 10 correct answers to win!'
                    {for} i {in} {range} 1 {to} 10
                        _
                    {print} 'You win!'
                    ```
    calculator_2:
        name: Calculator 2
        default_save_name: Calculator 2
        description: Calculator 2
        levels:
            14:
                story_text: |
                    ### Exercise 2
                    **This is the second part of this adventure.** The adventure starts in the previous tab.
                    Of course, you don't always want to calculate the mean of 4 tests. You might want to calculate the mean of 10 tests or only 2...
                    We can fix this problem by adding the argument and variable 'amount_of_tests'.
                    * Start a new line on line 3. Set the amount_of_tests argument by asking the student how many tests they have made.
                    * Change the 4 in line 4 to the new argument amount_of_tests.
                    * Lastly, change the 4 in line 6 to amount_of_tests

                    Try out your new program. Does it work?

                    ### Exercise 3
                    Did you want to make your program even better? Great! In the previous program you could only calculate the mean grade of 1 subject, but it would be better if you could calculate the mean grade for all subjects you want!
                    We won't tell you how to do it, but we will give you one tip: Start your code in line 1 with: define calculate_mean_grade with subject.
                example_code: |
                    ```
                    # Use your own code from the previous adventure.
                    ```
    clear_command:
        name: '{clear}'
        default_save_name: clear_command
        description: clear command
        levels:
            4:
                story_text: |
                    Time for a new command! With `{clear}` you can clear all the text form your output screen. This way you can prevent your screen getting too full of text.
                    Beware! If you are using a `{clear}` command, you might need to use a `{sleep}` above it. Otherwise Hedy will clear your screen without giving you the time to read as you can see in the example!
                example_code: |
                    ```
                    {print} '3'
                    {clear}
                    {print} '2'
                    {clear}
                    {print} '1'
                    {clear}
                    {print} 'wait for it...'
                    {sleep} 3
                    {clear}
                    {print} 'SURPRISE!'
                    ```
    debugging:
        name: debugging
        default_save_name: debugging
        description: debugging adventure
        levels:
            1:
                story_text: |-
                    Welcome to a debugging adventure. Debugging a code means getting rid of mistakes in the code.
                    That means that in these debugging adventures, we will show you code that does not work yet.
                    You will have to figure out what's wrong and correct the mistakes.

                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} I love programming
                    Do you love programming too?
                    {echo}
                    {print} What are your hobbies?
                    {echo} Your hobbies are
                    ```
            2:
                story_text: |-
                    Welcome to a debugging adventure. Debugging a code means getting rid of mistakes in the code.
                    That means that in these debugging adventures, we will give you a code that does not work yet.
                    You will have to figure out what's wrong and correct the mistakes.

                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    destination {ask} Where are you going on holidays?
                    {print} The flight to dstination leaves at 3 pm.
                    {ask} Did you check in your luggage yet?
                    {echo}
                    {print} Let me print your boarding pass for you.
                    {sleep}
                    Here you go! Have a nice trip!
                    ```
            3:
                story_text: |-
                    Welcome to a debugging adventure. Debugging a code means getting rid of mistakes in the code.
                    That means that in these debugging adventures, we will give you a code that does not work yet.
                    You will have to figure out what's wrong and correct the mistakes.

                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    movie_choices {is} dracula, fast and furious, home alone, barbie
                    chosen_movie {is} movies {at} {random}
                    {print} Tonight we will watch chosen _movies
                    like {ask} Do you like that movie?
                    {print} Tomorrow we will watch something else.
                    {add} chosen_movie {to} movie_choices
                    {print} Tomorrow we will watch tomorrows_movie
                    tomorrows_movie {is} movie_choices {at} {random}
                    I'll go get the popcorn! {print}
                    ```
            4:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to the online library!
                    {ask} What genre of books do you like?
                    {print} You like genre
                    author {is} {ask} 'Who's your favorite author?'
                    {print} 'author is your favorite author'
                    {print} Hmmm... i think you should try... books {at} {random}
                    ```
            5:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} Welcome to Swimming Pool Hedy!
                    class {is} {ask} 'Are you here to join a class today?'
                    {if} class yes
                    {print} 'Great! You're joining a class!
                    {print} {else} 'You will not be joining a class'
                    discount {is} 'Do you have a discount code?'
                    {if} discount {is} yes
                    discount_answer {is} {ask} 'What's your discount code?'
                    discount_codes = Senior4231, Student8786, NewMember6709
                    {if} discount_answer {is} {in} discount_cods
                    {print} 'That will be $3,50'
                    'That will be $5,50'
                    {print} 'Have a nice swim!'
                    ```
            6:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Vending machine'
                    chosen_product = {ask} 'Please select a product'
                    1_dollar_products = coke orange juice water
                    2_dollar_products = chocolate, cookie, museli bar
                    3dollar_prodcuts = potato chips, beef jerky, banana bread
                    {if} chosen {is} {in} 1_dollar_products
                    price = 1
                    {if} chosen_product {is} 2_dollar_products
                    price = 2
                    {else} chosen_product {in} 3_dollar_products
                    price = 3
                    amount_of_products = '{ask} How many of ' chosen_product would you like to have?'
                    total = price + amount_of_product
                    {print} 'That will be $' price 'please'
                    ```
            7:
                story_text: |-
                    ### Exercise
                    Surprise! This program looks more like an output than a code. And yet, we don't want you to just add `{print}` commands in front of each line.
                    Fix this program to turn it into the nursery rhyme 'Brother John (Frère Jaques)' by using the {repeat} command of course!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    Are you sleeping?
                    Brother John!
                    Morning bells are ringing!
                    Ding, dang, dong!
                    ```
            8:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to Manicures and Pedicures by Hedy'
                    bodypart = {ask} 'Are you getting your fingernails or toenails done today? Or both?'
                    {if} bodyparts {is} both
                            {print} That will be $25'
                            price = 25
                        {else}
                            {print} That will be $18'
                            price = 18
                    color = {ask} What color would you like?
                    sparkles = {ask} 'Would you like some sparkles with that?'
                    {if} sparkles {is} yes
                        {print} 'We charge $3 extra for that'
                    price = price + 3
                    {else} {print} 'No sparkles' {print} 'So no extra charge'
                    {sleep} 5
                    {print} 'All done! That will be $' price ' please!'
                    {print} 'Thank you! Byebye!'
                    ```
            9:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to our sandwich shop'
                    amount 'How many sandwiches would you like to buy?'
                    {repeat} amount {times}
                    {ask} {is} {ask} 'What kind or bread would you like your sandwich to be?'
                    types_of_bread {is} white, wheat, rye, garlic, gluten free
                    {if} chosen_bread in types_of_bread
                    {print} 'Lovely!'
                    {else}
                    'I'm sorry we don't sell that'
                    topping {is} {ask} 'What kind of topping would you like?'
                    sauce {is} {ask} 'What kind of sauce would you like?'
                    {print} One chosen_bread with topping and sauce.
                    price = amount * 6
                    {print} 'That will be 'price dollar' please'
                    ```

                    price = amount * 6
                    {print} 'That will be 'price dollar' please'
            10:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    names = Muad Hasan Samira Noura
                    activities = fly a kite, go swimming, go hiking, catch tan in the sun
                    {for} name {is} names
                    {print} At the beach name loves to activity at random
                    ```
            11:
                story_text: |-
                    ### Exercise
                    Debug this calender program. The output of this program is supposed to look like a list of dates.
                    For example:

                    ```
                    Hedy calender
                    Here are all the days of November
                    November 1
                    November 2
                    November 3
                    ```
                    And so on.

                    Mind that you have to test your code extra carefully for the month February, because the amount of days in this month changes in leap years.
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    print 'Hedy calender'
                    months_with_31 days = January, March, May, July, September, October, December
                    months_with_30_days = April, June, August, November
                    month = ask 'Which month would you like to see?'
                    if month in months_with_31_days
                        days = 31
                        if month in months_with30_days
                            days = 30
                    if month = February
                        leap_years = 2020, 2024, 2028, 2036, 2040, 2044, 2028
                        year = ask 'What year is it?'
                    if year in leap_years
                        days = 29
                    else
                        days = 28

                    print 'Here are all the days of ' moth
                    for i in range 1 to days
                        print month i
                    ```
            12:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define greet
                    greetings = 'Hello', 'Hi there', 'Goodevening'
                        print greetings at random

                    define take_order
                        food = ask 'What would you like to eat?'
                        print 'One food'
                        drink = 'What would you like to drink?'
                        print 'One ' drink
                        more = ask 'Would you like anything else?'
                            if more is 'no'
                        print 'Alright'
                            else
                            print 'And ' more
                    print 'Thank you'

                    print 'Welcome to our restaurant'
                    people = ask 'How many people are in your party tonight?'
                    for i in range 0 to people
                        call greet_costumer
                    ```
            13:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    defin movie_recommendation with name
                        action_movies == 'Die Hard', 'Fast and Furious', 'Inglorious Bastards'
                        romance_movies = 'Love Actually', 'The Notebook', 'Titanic'
                        comedy_movies = 'Mr Bean' 'Barbie''Deadpool'
                        kids_movies = 'Minions', 'Paddington', 'Encanto'
                        if name is 'Camila' or name is 'Manuel'
                            recommended_movie = kids_movie at random
                        if name is 'Pedro' or 'Gabriella'
                                mood = ask 'What you in the mood for?'
                            if mood is 'action'
                                recommended_movie = comedy_movies at random
                            if mood is 'romance'
                                recommended_movie = romance_movies
                        if mood is 'comedy'
                                recommended_movie = comedy_movies at random

                    print 'I would recommend ' recommended_movie ' for ' name

                    name = ask 'Who is watching?'
                    recommendation = ask 'Would you like a recommendation?'
                    if recommendaion is 'yes'
                    print movie_recommendation with name
                    else
                    print 'No problem!'
                    ```
            14:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define calculate_heartbeat
                        print 'Press your fingertips gently against the side of your neck'
                        print '(just under your jawline)'
                        print 'Count the number of beats you feel for 15 seconds'
                        beats == ask 'How many beats do you feel in 15 seconds?'
                        heartbeat = beats*4
                        print 'Your heartbeat is ' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print 'Your heartbeat seems fine'
                        else
                            if heartbeat > 60
                                print 'Your heartbeat seems to be too low'
                            if heartbeat < 100
                                print 'Your heartbeat seems to be too high'
                            print 'You might want to contact a medical professional'

                    measure_heartbeat = ask 'Would you like to measure your heartbeat?'
                    if measure_heartbeat = 'yes'
                        call measure_heartbeat
                    else
                        'no problem'
                    ```

                        print '(just under your jawline)'
                        print 'Count the number of beats you feel for 15 seconds'
                        beats == ask 'How many beats do you feel in 15 seconds?'
                        heartbeat = beats*4
                        print 'Your heartbeat is ' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print 'Your heartbeat seems fine'
                        else
                            if heartbeat > 60
                                print 'Your heartbeat seems to be too low'
                            if heartbeat < 100
                                print 'Your heartbeat seems to be too high'
                            print 'You might want to contact a medical professional'

                    measure_heartbeat = ask 'Would you like to measure your heartbeat?'
                    if measure_heartbeat = 'yes'
                        call measure_heartbeat
                    else
                        'no problem'
            15:
                story_text: |-
                    ### Exercise
                    Debug this random children's story. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    names = 'Tanya', 'Romy', 'Kayla', 'Aldrin', 'Ali'
                    verbs='walking', 'skipping', 'cycling', 'driving', 'running'
                    locations = 'on a mountaintop', 'in the supermarket', 'to the swimming pool'
                    hiding_spots = 'behind a tree', under a table', in a box'
                    sounds = 'a trumpet', 'a car crash', 'thunder'
                    causes_of_noise = 'a television', 'a kid with firecrackers', 'a magic elephant', 'a dream'

                    chosen_ name = names at random
                    chosen_verb = verbs at random
                    chosen_location = 'locations at random'
                    chosen_sounds = noises at random
                    chosen_spot = hiding_spots random
                    chosen_causes = causes_of_noise at random

                    print chosen_name ' was ' chosen_verb ' ' chosen_location
                    print 'when they suddenly heard a sound like ' sounds at random
                    print chosen_name ' looked around, but they couldn't discover where the noise came from'
                    print chosen_name ' hid ' chosen_spot'
                    print 'They tried to look around, but couldn't see anything from there'
                    hidden = 'yes'
                    while hidden = 'yes'
                        print chosen_name 'still didn't see anything'
                    answer = ask 'does ' chosen_name ' move from their hiding spot?'
                        if answer = 'yes'
                            hidden == 'no'
                    print 'chosen_name moved from' chosen_spot
                    print 'And then they saw it was just' chosen_cause
                    print chosen_name 'laughed and went on with their day'
                    print The End
                    ```
            16:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                    Tip: Make sure that you only see your score once in the end.
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    country = ['The Netherlands', 'Poland', 'Turkey', 'Zimbabwe', 'Thailand', 'Brasil', 'Peru', 'Australia', 'India', 'Romania' ]
                    capitals = 'Amsterdam', 'Warshaw' 'Istanbul', 'Harare', 'Bangkok', 'Brasilia', 'Lima', 'Canberra', 'New Delhi', 'Bucharest'
                    score = 0
                    for i in range 0 to 10
                        answer = ask 'What's the capital of ' countries[i]
                        correct = capital[i]
                        if answer = correct
                            print 'Correct!'
                        score = score + 1
                        else
                            print 'Wrong,' capitals[i] 'in the capital of' countries[i]
                        print 'You scored ' score ' out of 10'

                    ```
            17:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define food_order
                        toppings = ask 'pepperoni, tuna, veggie or cheese?'
                        size = ask 'big, medium or small?'
                        number_of_pizza = ask 'How many these pizzas would you like?'

                        print 'YOU ORDERED'
                        print number_of_pizzas ' size  ' topping ' pizza'

                    define drinks_order
                        drink = ask 'water, coke, icetea, lemonade or coffee?'
                        number_of_drinks = ask 'How many of these drinks would you like?'

                        print 'YOU ORDERED'
                        print number_of_drinks ' ' drink

                    'Welcome to Hedy pizza'
                    more_food = ask 'Would you like to order a pizza?'
                    while more_food = 'yes'
                        return food_order
                        more_food = ask 'Would you like to order a pizza?'
                    more_drinks = ask 'Would you like to order some drinks?'
                    while more_drinks == 'yes'
                        call drink_order
                        more_drinks == ask 'Would you like to order more drinks?'


                    print 'Thanks for ordering!'
                    ```
            18:
                story_text: |-
                    ### Exercise
                    Debug this Old MacDonald program from level 16. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    for i in range 1 to 3
                        animal = animals[i]
                        sound = sounds[i]
                        print 'Old MacDonald had a farm'
                        print 'E I E I O!'
                        print 'and on that farm he had a ' animal
                        print 'E I E I O!'
                        print 'with a ' sound sound ' here'
                        print 'and a ' sound sound ' there'
                        print 'here a ' sound
                        print 'there a ' sound
                        print 'everywhere a ' sound sound
                    ```
    default:
        name: Enkonduko
        default_save_name: enkonduko
        description: Klarigo pri nivelo
        levels:
            1:
                story_text: |
                    En Nivelo 1 vi povas uzi la komandojn `{print}`, `{ask}` kaj `{echo}`.
                    Tajpu vian kodon en la programan kampon. Aŭ premu la verdan butonon en la ekzempla kodbloko, kaj la kodo tajpiĝos por vi!
                    Provu mem la kodon per la verda butono «Ruli kodon» sub la programa kampo.

                    Vi povas presi tekston al la ekrano per la komando `{print}`.
                example_code: |
                    ```
                    {print} Hello world!
                    ```
            2:
                story_text: |
                    Congratulations! You've reached level 2. Hopefully you've already made some awesome codes!
                    In the first level you might've notice that the `{echo}` command can only save one bit of information at a time.
                    For example in the restaurant adventure, you could echo what the costumer wanted to eat, or what they wanted to drink, but not both in one sentence.

                    That changes in level 2. In level 2 you'll learn to work with variables, that allow you to save multiple pieces of information and print them in any place you want.
                    So let's go to the next tab!
                example_code: |
                    **Warning! This code does not work!**
                    In Hedy commands will change sometimes. `{echo}` for example only works in level 1. In this level you'll learn a better way to echo answers back.
                    ```
                    {print} Welcome at Hedy's
                    {ask} What would you like to eat?
                    {echo} So you want
                    {ask} what would you like to drink?
                    {echo} So you want
                    ```
            3:
                story_text: |
                    En Nivelo 3, oni povas fari liston. Oni povas lasi la komputilon elekti hazardaĵon el la listo. Oni faras tion per `{at} {random}`.
            4:
                story_text: |
                    En Nivelo 4, `{ask}` kaj `{print}` ŝanĝiĝis.

                    Oni devas meti presotan tekston inter citiloj.

                    Tio utilas, ĉar nun oni povas presi ĉiajn ajn vortojn. Kaj simile pri tiuj vortoj, kiujn oni konservas per `{is}`.

                    Preskaŭ ĉiuj programlingvoj ankaŭ uzas citilojn por presado; tiel ni proksimiĝas al vera programado!
                example_code: |
                    ```
                    {print} 'Oni devas uzi citilojn ekde nun!'
                    respondo {is} {ask} 'Kion oni bezonas uzi ekde nun?'
                    {print} 'Oni devas uzi ' respondo 'n'
                    ```
            5:
                story_text: |
                    En Nivelo 5 estas io nova, la `{if}`! Per la `{if}`, oni povas elekti inter du malsamaj opcioj.
                    La jena kodo presos «bone», se vi tajpos «Hedy» kiel nomon, kaj «ba!», se vi tajpos ion alian.
                    `{ask}` kaj `{print}` daŭre funkcias kiel en Nivelo 4.
                example_code: |
                    ```
                    nomo {is} {ask} 'kio estas via nomo?'
                    {if} nomo {is} Hedy {print} 'bone' {else} {print} 'ba!'
                    ```
            6:
                story_text: |
                    En ĉi tiu nivelo, vi lernas ion novan: vi povas nun ankaŭ kalkuli.

                    La pluso estas facila; vi skribas ĝin simile al matematiko: `5 + 5` ekzemple. La minuso ankaŭ funkcias bone, jen `5 - 5`.

                    La multipliko estas iom malsamaj, ĉar ne ekzistas la multipliko-signo en via klavaro. Nu, serĉu; ĝi vere ne ekzistas!
                    Tial oni multiplikas per la asterisko (ofte la klavo 8 kun la majuskliga klavo): `5 * 5`. Legu tion kiel «5 multiplikite per 5», por helpi la memoradon.
                example_code: |
                    ```
                    {print} '5 plus 5 estas ' 5 + 5
                    {print} '5 minus 5 estas ' 5 - 5
                    {print} '5 multiplikite per 5 estas ' 5 * 5
                    ```
            7:
                story_text: |
                    Nivelo 7 enkondukas la komandon `{repeat}`. `{repeat}` povas esti uzata por ruli unu linion da kodo plurfoje.
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy estas amuza!'
                    ```
            8:
                story_text: |
                    `{ask}` kaj `{print}` ankoraŭ funkcias kiel vi konas ilin. Sed `{if}`, `{else}` kaj `{repeat}` ŝanĝiĝis!
                    Vi nun povas ekzekuti grupojn de kodo kune, sed vi devos *deŝovi* la kodon.
                    Tio signifas meti kvar spacojn ĉe la komenco de la linio. Vi ankaŭ devos deŝovi kiam vi nur volas krei blokon de unu linio.
                example_code: |
                    Jen kiel la komando `{repeat}` funkcias nun:
                    ```
                    {repeat} 5 {times}
                        {print} 'Saluton ĉiuj'
                        {print} 'Jen ĉio ripetota 5 fojojn'
                    ```
                    Jen kiel la komandoj `{if}` kaj `{else}` funkcias nun:

                    ```
                    nomo {is} {ask} 'Kio estas via nomo?'
                    {if} nomo {is} Hedy
                        {print} 'Bonvenon Hedy'
                        {print} 'Vi povas ludi per via komputilo!'
                    {else}
                        {print} 'ENTRUDULO!'
                        {print} 'Vi ne rajtas uzi ĉi tiun komputilon!'
                    ```
            9:
                story_text: |
                    En ĉi tiu nivelo, oni povas ne nur uzi plurajn liniojn kun `{if}` kaj `{repeat}`, sed oni ankaŭ povas kunmeti ilin!
                    La jena ekzemplo enhavas `{if}`-blokon ene de `{repeat}`-bloko. La mala ordo estas ankaŭ permesata, kaj ankaŭ `{if}` ene de `{if}` kaj `{repeat}` ene de `{repeat}`.
                    Provu tion!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        manĝaĵo = {ask} 'Kion vi volas manĝi?'
                        {if} manĝaĵo {is} pico
                            {print} 'bone!'
                        {else}
                            {print} 'vi preferu picon'
                    ```
            10:
                story_text: |-
                    En ĉi tiu nivelo, ni lernas novan kodon nomitan `{for}`. Per `{for}` oni povas fari liston kaj uzi ĉiujn elementojn.
                    `{for}` kreas blokon simile al `{repeat}` kaj `{if}`; do ĉiuj linioj en la bloko devas komenci per spacetoj.
                example_code: |
                    ```
                    bestoj {is} hundo, kato, fiŝo
                    {for} besto {in} bestoj
                      {print} 'Mi amas ' besto 'n'
                    ```
            11:
                story_text: |
                    You have reached level 11, you're doing great! In the higher levels, Hedy is focussing more and more on teaching you the programming language Python.
                    In Python there is no `{repeat}` command, but there is a command that works like {repeat}. Are you curious to find out how to say `{repeat}` in Python language? Quickly go on to find out!
            12:
                story_text: |-
                    **Decimalaj frakcioj**
                    Ĝis nun, Hedy ne permesis decimalajn frakciojn kiel «1.5», sed nun ĝi ja permesas tiujn. Notu, ke komputiloj uzas la punkton `.` (ne la komon `,`) por decimalaj frakcioj.
                example_code: |
                    ```
                    {print} 'Du kaj duono plus du kaj duono estas…'
                    {print} 2.5 + 2.5
                    ```
            13:
                story_text: Ni nun lernos `{and}` kaj `{or}`! Se oni volas kontroli du kondiĉojn, oni ne devas uzi du `{if}`-ojn sed povas uzi `{and}` kaj `{or}`. Se oni uzas `{and}`, ambaŭ kondiĉoj, maldekstra kaj dekstra de la `{and}`, devas esti veraj. Oni ankaŭ povas uzi `{or}`. Tiam nur unu kondiĉo devas esti vera.
                example_code: |
                    ```
                    nomo = {ask} 'kio estas via nomo?'
                    aĝo = {ask} 'kia estas via aĝo?'
                    {if} nomo {is} 'Hedy' {and} aĝo {is} 2
                        {print} 'Vi estas la vera Hedy!'
                    ```
            14:
                story_text: |
                    Ni lernos pli da novaj sintaksaĵoj. Vi eble jam konas ilin pro matematiko: la `<` kaj `>`.
                    La `<` kontrolas, ĉu la unua nombro estas pli malgranda ol la dua: ekzemple `aĝo < 12` kontrolas, ĉu `aĝo` estas pli malgranda ol `12`.
                    Se vi volas kontroli, ĉu la unua nombro estas pli malgranda aŭ egala al la dua, vi povas uzi `<=`: ekzemple, `aĝo <= 11`.
                    La `>` kontrolas, ĉu la unua nombro estas pli granda ol la dua: ekzemple, `poentaro > 10` kontrolas, ĉu `poentaro` estas pli granda ol `10`.
                    Se oni volas kontroli, ĉu la unua nombro estas pli granda aŭ egala al la dua, oni povas uzi `>=`: ekzemple, `poentaro >= 11`.
                    Oni uzas tiujn komparojn en `{if}` jene:
                example_code: |
                    ```
                    aĝo = {ask} 'Kian aĝon vi havas?'
                    {if} aĝo > 12
                        {print} 'Vi estas pli aĝa ol mi!'
                    ```

                    {if} aĝo < 13
                        {print} 'Vi estas malpli aĝa ol mi!'
                    {else}
                        {print} 'Vi estas pli aĝa ol mi!'
            15:
                story_text: |-
                    Ni lernas novan iteracion, `{while}`! Tio daŭrigas la iteracion tiel longe, kiel la aserto estas vera.
                    Do ne forgesu ŝanĝi la valoron en la iteracio.

                    La ekzempla kodo daŭre ruliĝas ĝis ĝusta respondo estos donita.
                    Se la ĝusta respondo neniam estos donita, la iteracio neniam finiĝos!
                example_code: |
                    ```
                    respondo = 0
                    {while} respondo != 25
                        respondo = {ask} 'Kio estas 5 multiplikite per 5?'
                    {print} 'Jen la ĝusta respondo'
                    ```
            16:
                story_text: |-
                    Ni faros listojn laŭ la maniero de Python, kun rektaj krampoj ĉirkaŭ la listoj! Ni ankaŭ konservas la citilojn ĉirkaŭ ĉiu ero, kiel ni lernis en antaŭaj niveloj.
                    Vi povas ankaŭ uzi la rektajn krampojn por indiki lokon en la listoj.
                example_code: |
                    ```
                    amikoj = ['Amano', 'Benjameno', 'Cecilio']
                    bonŝancaj_numeroj = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} 'la bonŝanca numero de ' amikoj[i]
                        {print} 'estas ' bonŝancaj_numeroj[i]
                    ```
            17:
                story_text: |-
                    Nun ni iom ŝanĝos la regulojn pri la deŝovo. Ĉiufoje kiam oni bezonas deŝovon, oni uzu dupunkton `:` ĉe la fino de la linio antaŭ la deŝovo.

                    En ĉi tiu nivelo, oni povas ankaŭ uzi novan komandon: `{elif}`. `{elif}` estas mallongigo de ``{else} {if}``, kaj oni bezonas ĝin kiam oni volas havi 3 (aŭ pli da) opciojn.
                    Jen:
            18:
                story_text: |-
                    Ni alvenis al vera Python-kodo! Tio signifas, ke ni devas uzi rondajn krampojn kun {print} kaj {range} de nun.
                    {print}('Mia nomo estas ', nomo)
    dice:
        name: Ĵetkuboj
        default_save_name: Ĵetkuboj
        description: Fari viajn proprajn ĵetkubojn
        levels:
            3:
                story_text: |
                    En ĉi tiu nivelo, oni povas elekti el listo. Per tio, oni povas igi la komputilon elekti unu flankon de ĵetkubo.
                    Rigardu tiujn ludojn, kiujn vi havas en via ŝranko hejme.
                    Ĉu ekzistas ludoj uzantaj (specialajn) ĵetkubojn? Vi ankaŭ povas kopii ĝin per ĉi tiu kodo.
                    Ekzemple, la ĵetkubo de la ludo Lumbrikoj kun la numeroj 1 ĝis 5 kaj lumbriko sur ĝi.

                    ![Ĵetkubo de Lumbrikoj montrante la numerojn 1 ĝis 5 kaj lumbrikon](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    elektoj {is} 1, 2, 3, 4, 5, lumbriko
                    {print} elektoj {at} {random}
                    ```
                story_text_2: |
                    ### Exercise
                    The dice in the example above are dice for a specific game. Can you make normal dice?
                    Or other special dice from a different game?
                example_code_2: |
                    ```
                    choices {is} _
                    ```
            4:
                story_text: |
                    En ĉi tiu nivelo ni povas fari frazojn kun la die valoro en la frazo, kun citaĵoj kompreneble.
                    Ĉi-foje la ekzempla kodo ne estas tute kompleta. Ĉu vi povas fini la kodon?
            5:
                story_text: |
                    You can also make a die again in this level using the `{if}`.
                    Complete the sample code so that the code says "You can stop throwing" once you have thrown an earthworm.

                    But maybe you want to recreate a die from a completely different game. That's fine too! Then make up your own reaction. Eg 'yes' for 6 and 'pity' for something {else}.
                example_code: |
                    ```
                    elektoj {is} 1, 2, 3, 4, 5, lumbriko
                    ĵeto {is} _
                    {print} 'la rezulto de via ĵeto estas' _
                    {if} _ {is} lumbriko {print} 'You can stop throwing.' _ {print} 'You have to hear it again!'
                    ```
            6:
                story_text: |
                    Vi ankaŭ povas igi Lumbrikon morti denove en ĉi tio, sed nun vi ankaŭ povas kalkuli kiom da poentoj estis rulitaj.
                    Vi eble scias, ke la vermo nombras 5 poentojn por Earthworms. Nun post ruliĝo vi povas tuj kalkuli kiom da poentoj vi ĵetis.
                    Jen la kodo por kalkuli poentojn por unu ĵetkubo:
                example_code: |
                    ```
                    elektoj = 1, 2, 3, 4, 5, lumbriko
                    poentaro = 0
                    ĵeto = elektoj {at} {random}
                    {print} 'la rezulto de via ĵeto estas' ĵeto
                    {if} ĵeto {is} lumbriko poentaro = poentaro + 5 {else} poentaro = poentaro + ĵeto
                    {print} 'those are' poentaro ' point'
                    ```
                    Can you make the code so that you get the total score for 8 dice? To do that, you have to cut and paste some lines of the code.
                example_code_2: |
                    Ĉu vi sukcesis kalkuli la poentaron por 8 ĵetkuboj? Tio postulis multe da tranĉado kaj algluado, ĉu ne? Ni faciligos tion en la nivelo 7!
            7:
                story_text: |
                    Vi ankaŭ povas fari ĵetkubon denove en la nivelo 5. Per la kodo `{repeat}` vi povas facile ruliĝi tutan manon da ĵetkuboj.
                    Provu fini la ekzemplan kodon! La strekoj devus enhavi plurajn komandojn kaj signojn.

                    Sed eble vi volas fari tute alian ĵetkubon. Kompreneble vi povas!
                example_code: |
                    ```
                    elektoj = 1, 2, 3, 4, 5, lumbriko
                    {repeat} _ _ {print} _ _ _
                    ```
            10:
                story_text: |
                    Ĉu la ĵetado de la ĵetkuboj daŭras tro longe? En ĉi tiu nivelo, vi povas lasi Hedy ĵeti ĉiujn ĵetkubojn samtempe!
                example_code: |
                    ```
                    ludantoj = Anno, Johano, Jiŝajo
                    elektoj = 1, 2, 3, 4, 5, 6
                    {for} ludanto {in} ludantoj
                        {print} 'La rezulto de la ĵeto de ' ludanto ' estas ' elektoj {at} {random}
                        {sleep}
                    ```
            15:
                story_text: |
                    ### Exercise
                    In this level you can create a little game in which you'll have to throw 6 as fast as possible.
                    We have started the code, it's up to you to get the game to work!

                    Firstly, add a `{while}` loop that checks if 6 has been thrown or not.
                    As long as you haven't thrown 6 already, throw the dice on a random number.
                    Print what the player has thrown.
                    Add a try to the amount of tries
                    Wait a second before you throw again, or - in case you've thrown a 6 - before the game ends.
                example_code: |
                    ```
                    options = 1, 2, 3, 4, 5, 6
                    {print} 'Throw 6 as fast as you can!'
                    thrown = 0
                    tries = 0
                    _
                    _
                    _
                    _
                    _
                    {print} 'Yes! You have thrown 6 in ' tries ' tries.'
                    ```
    dishes:
        name: Lavi telerojn?
        default_save_name: Telerlavado
        description: Komputile elektu la lavonton de la teleroj (Komencu je Nivelo 2)
        levels:
            3:
                story_text: |
                    Ĉu vi ĉiam malkonsentas hejme pri kiu hodiaŭ devos lavi la telerojn aŭ malplenigi la rubujon?
                    Do vi povas lasi la komputilon elekti tre juste. Vi povas programi tion en ĉi tiu nivelo!
                    Vi unue faru liston de la familianoj. Poste elektu el la listo per `{at} {random}`.
                example_code: |
                    ```
                    homoj {is} panjo, paĉjo, Emilio, Sofio
                    {print} homoj {at} {random}
                    ```
                story_text_2: |
                    Ĉu vi ne emas prepari la telerojn mem? Haki la programon por forigi vian nomon de la listo.
            4:
                story_text: |
                    Per citiloj vi povas fari vian vazlavadon planadon pli bela.
                    Ĉi-foje la ekzempla kodo ne estas tute kompleta.

                    Ĉu vi povas kompletigi la kodon plenigante la vakojn? Ĉiu malplena devas esti anstataŭigita per unu vorto de simbolo.

                    Konsilo: Ne forgesu la citilojn!
                example_code: |
                    ```
                    homoj {is} panjo, paĉjo, Emilio, Sofio
                    {print} _ la telerojn lavu _
                    {sleep}
                    {print} homoj {at} _
                    ```
            5:
                story_text: |
                    Per la `{if}` vi nun povas amuziĝi pli kun elekto en la programo. Vi povas havi vian programon respondi al la elekto kiun la komputilo faris.

                    Ĉu vi povas fini la kodon por ke ĝi presiĝu «domaĝe» kiam estas via vico kaj alie «jes!»?
                    Ne forgesu la citaĵojn!
                example_code: |
                    ```
                    homoj {is} panjo, paĉjo, Emilio, Sofio
                    lavonto {is} homoj {at} {random}
                    {if} lavonto {is} Sofio {print} _ domaĝe ke mi devas lavadi _ {else} {print} 'feliĉe neniuj teleroj ĉar' _ 'jam lavas'
                    ```
            6:
                story_text: |
                    Kiom ofte ĉiuj lavos la telerojn? Ĉu tio estas justa? Vi povas kalkuli tion en ĉi tiu nivelo.
                example_code: |
                    ```
                    homoj = panjo, paĉjo, Emilio, Sofio
                    emilio_lavoj = 0
                    lavonto = homoj {at} {random}
                    {print} 'La lavonto estas' lavonto
                    {if} lavonto {is} Emilio emilio_lavoj = emilio_lavoj + 1
                    {print} 'Emilio lavos la telerojn ĉi-semajne' emilio_lavoj 'fojojn'
                    ```

                    Now you can copy lines 3 to 5 a few times (e.g. 7 times for a whole week) to calculate for a whole week again.
                    Do you make the code for the whole week?
                story_text_2: |
                    Se vi estas ege malbonŝanca, la antaŭa programo eble elektos vin al la pladoj por la tuta semajno! Tio ne estas justa!
                    Por krei pli justan sistemon vi povas uzi la komandon `{remove}` por forigi la elektitan personon el la listo. Tiel vi ne devas refari la pladojn ĝis ĉiuj havas turnon.

                    Lundo kaj mardo estas pretaj por vi! Ĉu vi povas aldoni la reston de la semajno?
                    Kaj... ĉu vi povas elpensi solvon por kiam via listo estas malplena?
                example_code_2: |
                    ```
                    homoj = panjo, paĉjo, Emilio, Sofio
                    lavonto = homoj {at} {random}
                    {print} 'Lunde la telerojn lavos: ' lavonto
                    {remove} lavonto {from} homoj
                    lavonto = homoj {at} {random}
                    {print} 'Marde la telerojn lavos: ' lavonto
                    {remove} lavonto {from} homoj
                    lavonto = homoj {at} {random}
                    ```
            7:
                story_text: |
                    Per `{repeat}` oni povas ripeti pecojn da kodo. Vi povas uzi tion por determini la telerlavontojn por tuta semajno.
                example_code: |
                    ```
                    homoj = panjo, paĉjo, Emilio, Sofio
                    {repeat} _ _ {print} 'la lavonto estas' _
                    ```
            10:
                story_text: |
                    En ĉi tiu nivelo, vi povas fari eĉ pli bonan lavadhoraron.
                example_code: |
                    ```
                    tagoj = Lundo, Mardo, Merkolo, Ĵaŭdo, Vendredo, Sabato, Dimanĉo
                    nomoj = panjo, paĉjo, Emilio, Sofio
                    {for} tago {in} tagoj
                        {print} nomoj {at} {random} ' lavas telerojn je ' tago
                    ```
    elif_command:
        name: '{elif}'
        default_save_name: elif
        description: elif
        levels:
            17:
                story_text: |
                    In this level you can also use a new command: `{elif}`. `{elif}` is a combination of the keywords `{else}` and `{if}` and you need it when you want to make 3 (or more!) options.
                    Check it out!
                example_code: |
                    ```
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
                    ```
    for_command:
        name: '{for}'
        default_save_name: for
        description: for command
        levels:
            10:
                story_text: |-
                    ## For
                    In this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.
                    `{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with 4 spaces.
                example_code: |
                    ```
                    animals = dog, cat, blobfish
                    {for} animal {in} animals
                        {print} 'I love ' animal
                    ```
                story_text_2: |
                    ### Exercise
                    Finish this code by adding `{for} action {in} actions` to line 2.
                example_code_2: |
                    ```
                    actions = clap your hands, stomp your feet, shout Hurray!
                    _
                        {repeat} 2 {times}
                            {print} 'If youre happy and you know it, ' action
                            {sleep} 2
                        {print} 'If youre happy and you know it, and you really want to show it'
                        {print} 'If youre happy and you know it, ' action
                        {sleep} 3
                    ```
            11:
                story_text: |-
                    In this level, we add a new form of the `{for}`. In earlier levels, we used `{for}` with a list, but we can also use `{for}` with numbers.
                    We do that by adding a variable name, followed by  `{in}` `{range}`. We then write the number to start at, `{to}` and the number to end at.
                    Try the example to see what happens! In this level again, you will need to use indentations in lines below the `{for}` statements.
                example_code: |
                    ```
                    {for} counter {in} {range} 1 {to} 10
                        {print} counter
                    {print} 'Ready or not. Here I come!'
                    ```
            17:
                story_text: |
                    Now we are going to change indentation a little bit. Every time that we need an indentation, we need `:` at the line before the indentation.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Ready or not, here I come!'
                    ```
            18:
                story_text: |
                    Lastly, we'll turn `{for} i {in} {range} 1 to 5` into real Python code, like this:
                example_code: |
                    ```
                    {for} i {in} {range}(1,5):
                        {print} (i)
                    ```
    fortune:
        name: Aŭguristo
        default_save_name: Aŭguristo
        description: Igu Hedy aŭguri la estontecon
        levels:
            1:
                story_text: |
                    Ĉu vi iam estis en karnavalo kaj antaŭdiris vian estontecon de aŭguristo? Aŭ ĉu vi iam ludis kun magia ok pilko?
                    Tiam vi verŝajne scias, ke ili vere ne povas antaŭdiri vian estontecon, sed estas tamen amuze ludi!

                    En la venontaj niveloj vi povas lerni kiel krei vian propran aŭguran maŝinon!
                    En nivelo 1 vi povas komenci facile lasante Hedy prezenti sin kiel aŭguristo kaj lasi ŝin {echo} la respondojn de la ludantoj.
                    Jene:
                example_code: |
                    ```
                    {print} Saluton, mi estas Hedy la aŭguristo!
                    {ask} Kiu vi estas?
                    {print} Mi rigardu mian kristalan globon
                    {print} Mi vidas… mi vidas…
                    {echo} Via nomo estas
                    ```
                story_text_2: |
                    ### Exercise
                    Hedy now only tells you your name. Can you expand the code so that Hedy can predict more things about you?
                    Obviously, Hedy isn't a very good fortune teller yet, as she can only repeat the answers that were given by the players!
                    Take a look in level 2 to improve your fortune teller.
            3:
                story_text: |
                    In the previous levels you've created your first fortune telling machine, but Hedy couldn't really predict anything, only {echo}.
                    In this level you can use a variable and the `{at} {random}` command to really let Hedy choose an answer for you. Check out this code for instance:
                example_code: |
                    En ĉi tiu ekzemplo, la ludanto povas demandi Hedy ĉu-demandon, kaj Hedy elektos hazardan respondon por vi.
                    ```
                    {print} Mi estas Hedy la aŭguristo!
                    demando {is} {ask} Kion vi volas ekscii?
                    {print} Jen tio, kion vi volas ekscii: demando
                    respondoj {is} jes, ne, eble
                    {print} Laŭ mia kristala globo…
                    {sleep} 2
                    {print} respondoj {at} {random}
                    ```
                story_text_2: |
                    Nun, Hedy povas respondi nur «jes», «ne» aŭ «eble». Ĉu vi povas doni al Hedy pliajn eblajn respondojn, kiel «certe» aŭ «demandu denove»? <!--{ask}-->
            4:
                story_text: |
                    ### Exercise
                    We have removed all the quotation marks from this example code, can you add them in all the right places?

                    ### Exercise 2
                    Go back to the previous level and copy your fortune teller code. Make the code work in this level by adding quotation marks in the right spots.
                example_code: |
                    ```
                    _ Add the quotation marks to this code _
                    {print} Im Hedy the fortune teller!
                    question {is} {ask} What do you want to know?
                    {print} This is your question:  question
                    answers {is} yes, no, maybe
                    {print} My crystal ball says...
                    {sleep} 2
                    {print} answers {at} {random}
                    ```
            5:
                story_text: |
                    In this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!
                    By using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.
                    Check out this example to find out how.
                example_code: |
                    ```
                    {print} 'Mi estas Hedy la aŭguristo!'
                    {print} 'Mi povas aŭguri, ĉu vi gajnos la loterion morgaŭ!'
                    homo {is} {ask} 'Kiu vi estas?'
                    {if} homo {is} Hedy {print} 'Vi certe gajnos!🤩' {else} {print} 'Misfortune, aliulo gajnos!😭'
                    ```
            6:
                story_text: |
                    In this level you can use math in your predictions as a fortune teller. This allows you to make up (silly) formulas to calculate the future.
                    For example you could calculate how rich you'll get or how many kids you will have when you grow up.
                example_code: |
                    ```
                    {print} 'Mi estas Hedy la aŭguristo!'
                    {print} 'I can predict how many kids youll get when you grow up!'
                    aĝo = {ask} 'Kia estas via aĝo?'
                    gefratoj = {ask} 'Kiom da gefratoj vi havas?'
                    alto = {ask} 'Kiom alta vi estas centimetre?'
                    infanoj = alto / aĝo
                    infanoj = infanoj - gefratoj
                    {print} 'Vi havos…'
                    {sleep}
                    {print} infanoj ' infanojn!'
                    ```

                    If the previous example wasn't silly enough for you, take a look at this one!

                    ```
                    {print} 'Mi estas Hedy la aŭguristo!'
                    {print} 'I will predict how smart you are!'
                    futbalo = {ask} 'On a scale 1-10 how much do you love football?'
                    bananoj = {ask} 'How many bananas did you eat this week?'
                    higieno = {ask} 'How many times did you wash your hands today?'
                    rezulto = bananoj + higieno
                    rezulto = rezulto * futbalo
                    {print} 'You are ' rezulto ' percent smart.'
                    ```
            7:
                story_text: |
                    En ĉi tiu nivelo, oni povas uzi la komandon `{repeat}` por igi vian komputilon aŭguri plurfoje.
                example_code: |
                    ```
                    {print} 'Mi estas Hedy la aŭguristo!'
                    {print} 'Vi povas demandi tri fojojn!'
                    {repeat} 3 {times} demando = {ask} 'Kion vi volas ekscii?'
                    respondo = jes, ne, eble
                    {repeat} 3 {times} {print} 'Laŭ mia kristala globo… ' respondo {at} {random}
                    ```
            8:
                story_text: |
                    In the previous levels you've learned how to use repeat to make the fortune teller answer 3 questions in a row, but we had a problem with printing the questions.
                    Now that problem is solved, because of the new way of using the repeat command.
                    In the next example you can have your fortune teller {ask} 3 questions and also print them!
                example_code: |
                    ```
                    {print} 'Mi estas Hedy la aŭguristo!'
                    {print} 'You can {ask} me 3 questions.'
                    respondoj = jes, ne, eble
                    {repeat} 3 {times}
                       demando = {ask} 'What do you want to know?'
                       {print} demando
                       {sleep}
                       {print} 'Laŭ mia kristala globo…' respondoj {at} {random}
                    ```
            10:
                story_text: |
                    En ĉi tiu nivelo, vi lernos kiel programi la ludon MASH (domego, apartamento, barako, domo). En ĉi tiu ludo vi povas aŭguri por ĉiuj ludantoj samtempe, kiel aspektos iliaj estontecoj.
                example_code: |
                    ```
                    domoj = domego, apartamento, barako, domo
                    amoj = neniu, reĝo, najbaro, vera amanto
                    dorlotbestoj = hundo, kato, elefanto
                    nomoj = Johanino, Rikardo, Jakobo
                    {for} nomo {in} nomoj
                        {print} nomo ' loĝos en ' domoj {at} {random}
                        {print} nomo ' edz(in)iĝos kun ' amoj {at} {random}
                        {print} nomo ' ricevos ' dorlotbestoj {at} {random} 'n kiel sian dorlotbeston.'
                        {sleep}
                    ```
            12:
                story_text: |
                    En ĉi tiu nivelo, vi povas montri plurvortajn aŭguraĵojn jene:
                example_code: |
                    ```
                    fortunes = 'you will be rich', 'you will fall in love', 'you will slip on a banana peel'
                    {print} 'I will take a look in my crystall ball for your future.'
                    {print} 'I see... I see...'
                    {sleep}
                    {print} fortunes {at} {random}
                    ```
    functions:
        name: functions
        default_save_name: functions
        description: functions
        levels:
            12:
                story_text: |
                    In this level you'll learn how to use **functions**. A function is a block of code you can easily use multiple times. Using functions helps us organize pieces of code that we can use again and again.
                    To create a function, use `{define}` and give the function a name. Then put all the lines you want in the function in a indented block under the `{define}` line.
                    Leave one empty line in your code to make it look nice and neat. Great job! You have created a function!

                    Now, whenever we need that block of code, we just use <code>{call}</code> with the function's name to call it up! We don't have to type that block of code again.

                    Check out this example code of a game of Twister. The function 'turn' contains a block of code that chooses which limb should go where.

                    ### Exercise
                    Finish this code by setting the 2 variables chosen_limb and chosen_color.
                    Then, choose how many times you want to call the function to give the twister spinner a spin.

                    ### Exercise 2
                    Improve your code by adding a variable called 'people'. Use the variable to give all the players their own command in the game.
                    For example: 'Ahmed, right hand on green' or 'Jessica, left foot on yellow'.
                example_code: |
                    ```
                    sides = 'left', 'right'
                    limbs = 'hand', 'foot'
                    colors = 'red', 'blue', 'green', 'yellow'

                    {define} turn
                        chosen_side = sides {at} {random}
                        chosen_limb = limbs _
                        chosen_color = colors _
                        {print} chosen_side ' ' chosen_limb ' on ' chosen_color

                    {print} 'Lets play a game of Twister!'
                    {for} i {in} {range} 1 to _
                        {call} turn
                        {sleep} 2
                    ```
            13:
                story_text: |
                    Now that you've learned how to use functions, you'll learn how to use a function with an argument.
                    An **argument** is a variable that is used within a function. It is not used outside the function.

                    For example in this code we've programmed the first verse of the song 'My Bonnie is over the ocean'.
                    In this example code the argument `place` is used. Place is a variable that is only used in the function, so an argument.
                    To use `place` we have programmed the line `define song with place`.
                    When the function is called, computer will replace the argument `place`, with the piece of text after `call song with`.

                    ### Exercise
                    The next verse of this song goes:

                    Last night as I lay on my pillow
                    Last night as I lay on my bed
                    Last night as I lay on my pillow
                    I dreamed that my Bonnie is dead

                    Can you program this verse in the same way as the example?
                example_code: |
                    ```
                    {define} song {with} place
                        {print} 'My Bonnie is over the ' place

                    {call} song {with} 'ocean'
                    {call} song {with} 'sea'
                    {call} song {with} 'ocean'
                    ```
            14:
                story_text: |
                    In the previous levels you have learned to create functions and use arguments with them. Another great use of a function is to let it calculate something for you.
                    You can give the function a calculation and it will give you the answer of the calculation. This answer is called a **return value**.

                    For example, in this code the function calculate_new_price will calculate the new price of any item. It will give you the new price as a return value.

                    ### Exercise
                    Finish this code. We have already made the variable new_price for you, you only need to set it.
                    You should finish the line of code by calling the function that calculates the new price.
                example_code: |
                    ```
                    {define} calculate_new_price {with} amount, percentage
                        percentage = percentage / 100
                        discount_amount = amount * percentage
                        return amount - discount_amount

                    old_price = {ask} 'How much is on the price tag?'
                    discount = {ask} 'What percentage is the discount?'

                    new_price = _ calculate_new_price {with} old_price, _
                    {print} 'The new price is ' new_price ' dollar'
                    ```
            18:
                story_text: |
                    Let's make functions the Pythons way! To define a function, we no longer use:

                    `{define} name_function {with} argument_1, argument_2:`

                    but we use:

                    `{def} name_function(argument_1, argument_2):`.


                    If you don't want to use arguments, you just leave the space between the parantheses empty.
                    To call a function, we don't need the `{call}` command anymore. You just type the name of the function.
                example_code: |
                    ```
                    {def} calculate_score(answer, correct_answer):
                        {if} answer == correct_answer:
                            score = 1
                        {elif} answer == '?':
                            score = 0
                        {else}:
                            score = -1
                        {return} score

                    answer = {input} ('Where can you find the Eiffel Tower?')
                    correct_answer = 'Paris'
                    score = calculate_score(answer, correct_answer)
                    {print} ('Your score is... ', score)
                    ```
    guess_my_number:
        name: Guess my number
        default_save_name: guess my number
        description: guess my number
        levels:
            14:
                story_text: |
                    In this level you can program the game 'Guess my number'

                    ### Exercise
                    Fill in the correct symbols on the blanks to get the game to work.
                example_code: |
                    ```
                    {print} 'Guess my number'
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number = numbers {at} {random}
                    game = 'on'
                    {for} i {in} {range} 1 {to} 10
                        {if} game == 'on'
                            guess = {ask} 'Which number do you think it is?'
                            {if} guess _ number
                                {print} 'Lower!'
                            {if} guess _ number
                                {print} 'Higher!'
                            {if} guess _ number
                                {print} 'You win!'
                                game = 'over'
                    ```
    hangman:
        name: Hangman
        default_save_name: Hangman
        description: Guess the word
        levels:
            17:
                story_text: |
                    In this adventure we program a game of hangman. First we make some preparations, then we program the game and in the third part we add a drawing with the turtle.

                    ### Exercise
                    ***Set the variables*** In this game of hangman, Player 1 chooses an answer and Player 2 has to guess the letters in this answer.
                    To let the computer know all the letters in the word, we will turn the answer into a list of letters. We also do this with the guesses Player 2 makes.
                    We will start the game with 2 empty lists. We have made an empty list for the variable answer for you. Now make an empty list for guessed_letters as well.
                    Then we fill in how many mistakes were made. At the start of the game, this should be 0.
                    The variable `amount_letters` tells us how many letters are in the answer. Ask Player 1 to tell us how many letters their word has.
                    Lastly we tell the computer if the game is over. We use the variable `game_over` and set it to `False`.

                    ***Choosing the answer*** We want Player 1 to be able to choose the answer. We'll ask them, as many times as necessary, what the next letter is.
                    Then we add that letter to the answer. Lastly, we add an empty _ to the list of guessed letters, so we get as many _s as there are letters in the answer.

                    ***Player 2's turn***
                    Tell Player 2 its their turn. Then tell Player 2 how many letters there are in the answer. Finally, print the list of `guessed_letters`.

                    ***Go to the next tab*** Now that all the starting variables are set, we can start programming the game itself. Check out the next tab to learn how!
                example_code: |
                    ```
                    print 'Hangman!'

                    # Set the variables
                    answer = []
                    guessed_letters = _
                    mistakes_made = _
                    amount_letters = {ask} _
                    _ = 'False'

                    # Choosing the answer
                    {for} _
                        letter = {ask} 'Player 1, what is letter ' i '?'
                        _
                        {add} '_' {to} _

                    # Player 2 turn
                    print _
                    print _
                    print guessed_letters
                    ```
    hangman_2:
        name: Hangman 2
        default_save_name: Hangman_2
        description: Hangman 2
        levels:
            17:
                story_text: |
                    Now it's time to program the hangman game.

                    ### Exercise

                    ***Paste your code*** Copy your code from the previous tab and paste the code in the programming field.

                    ***The game*** This games continues playing until Player 2 is game over. Fill in the while command accordingly. Now, Player 2 is allowed to guess a letter, so ask Player 2 to guess a letter.
                    We need to check if their answer is correct, so check if their `guess` is (somewhere) in the (list) `answer`. Then we let the computer figure out which of the letter(s) is the guess. We have already programmed that part for you.
                    Next we want to compliment the player for finding a correct letter and we want to print the list `guessed_letters`, so the player can see their progress.

                    The next part we're going to program is what happens when the player has guessed all of the letters. So if their list of `guessed_letters` is the same as our list `answer`.
                    If the lists are the same, congratulate Player 2 with their victory and set the variable `game_over` to `True`.

                    Next we'll program what happens when Player 2 guesses wrong (so the `{else}` command). First, tell the player that their guess was wrong. Then increase the `mistakes_made` variable by 1.

                    For the last part we'll program what happens when Player 2 has made 10 mistakes. We'll print that Player 1 has won the game. Then we'll print the correct answer. And finally, we'll set our `game_over` variable to `True`, so the game stops.

                    ***Go to the next tab*** Amazing work! Your game is playable, but wouldn't it be fun if the hangman was actually drawn when Player 2 makes a mistake..?
                example_code: |
                    ```
                    # Paste your code here

                    # The game
                    {while} game_over _
                        guess = _
                        {if} _
                            {for} i {in} {range} 1 {to} amount_letters:
                                if answer[i] == guess:
                                    guessed_letters[i] = guess
                            {print} _
                            {if} guessed_letters == _:
                                {print} _
                                game_over = _
                        {else}:
                            {print} _
                            mistakes_made _
                            {if} _ == 10:
                                {print} _
                                {print} _
                                _
                    ```
    hangman_3:
        name: Hangman 3
        default_save_name: Hangman_3
        description: Hangman 3
        levels:
            17:
                story_text: |
                    In a game of hangman the mistakes are shown by drawing a part of the hangman each time a mistake has been made.
                    We now add those drawings with our turtle!

                    ### Exercise
                    ***Create a function that draws the hangman*** Create a function that draws the hangman in 10 steps. We have already made step 1 for you.

                    ***Test the function*** Test the function by calling the function with 10. If you are happy with the function, remove the line that calls the function for now. We will call the function when the player makes a mistake.

                    ***Paste your hangman game under your function*** Go back to the previous tab and copy your hangman game. Paste the game underneath your function.

                    ***Call the function when the player makes a mistake*** Under the line `mistakes_made = mistakes_made + 1` we will call the function. We want the turtle to take the same amount of steps as the player has made mistakes, so we call the function with `mistakes_made` as argument.

                    ***Enjoy your game!***
                    <div class="w-full flex flex-row gap-2">
                        The hangman could look like this <img src="https://github.com/hedyorg/hedy/assets/80678586/d385b691-5701-4342-b5d9-dfae1589c129" width="100">
                    </div>
                example_code: |
                    ```
                    # Create a function that draws the hangman
                    {define} draw_hangman {with} step:
                        {if} step == 1:
                            {color} white
                            {forward} -100
                            {turn} 90
                            {forward} -50
                            {color} black
                            {forward} 100
                            {forward} -50

                        {if} step == 2:
                            _
                    # Paste your hangman game here

                    ```
    harry_potter:
        name: Harry Potter
        default_save_name: Harry Potter
        description: Harry Potter adventures
        levels:
            10:
                story_text: |
                    ### Exercise
                    We can also make a Harry Potter themed fortune teller. Fill in blanks such that 9 lines are printed.
                    **Extra** Change the theme of the fortune teller into something else, such as your favorite book, film or tv show.
                example_code: |
                    ```
                    houses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    subjects = potions, defence against the dark arts, charms, transfiguration
                    fears = Voldemort, spiders, failing your OWL test
                    names = Harry, Ron, Hermione
                    _
                    _ {print} name ' is placed in ' houses {at} {random}
                    _ {print} name ' is great at ' subjects {at} {random}
                    _ {print} name 's greatest fear is ' fears {at} {random}
                    ```
    haunted:
        name: Hantata domo
        default_save_name: Hantata domo
        description: Eskapu el la hantata domo
        levels:
            1:
                story_text: |
                    En ĉi tiu aventuro vi laboras por krei ludon, en kiu vi devas eskapi el hantita domo elektante la ĝustan pordon.
                    Se vi elektas la ĝustan pordon vi pluvivos, sed se ne terura monstro povus...

                    En Nivelo 1, ni komencas nian fantomludon inventante timigan rakonton kaj demandas al la ludanto kiun monstron ili vidos en la hantita domo.
                example_code: |
                    ```
                    {print} Kiel mi alvenis ĉi tien?
                    {print} Mi memoras, ke mia amiko diris al mi iri en la malnovan domegon...
                    {print} kaj subite ĉio nigriĝis.
                    {print} Sed kiel mi finiĝis sur la planko...?
                    {print} Mia kapo doloras kiel mi estis trafita de basbalbatilo!
                    {print} Kio estas tiu sono?
                    {print} Ho ne! Mi sentas, ke mi ne estas sola en ĉi tiu domo!
                    {print} Mi devas eliri de ĉi tie!
                    {print} Estas 3 pordoj antaŭ mi..
                    {ask} Kiun pordon mi elektu?
                    {echo} Mi elektas pordon
                    {print} ...?
                    ```
                story_text_2: |
                    Ĉu vi povas fini la timigan rakonton? Aŭ elpensu vian propran fantomdoman rakonton?
            2:
                story_text: |
                    En ĉi tiu hantata domo, vi povas montri viajn monstrojn per vinjetosignoj. Kompreneble vi ankaŭ povas uzi vortojn.
                example_code: |
                    ```
                    monstro_1 {is} 👻
                    monstro_2 {is} 🤡
                    monstro_3 {is} 👶
                    {print} Vi eniras la hantatan domon.
                    {print} Subite vi vidas monstro_1
                    {print} Vi kuras en la alian ĉambron, sed monstro_2 atendas vin tie!
                    {print} Ho ne! Rapidu al la kuirejo.
                    {print} Sed dum vi eniras monstro_3 atakas vin!
                    ```
                story_text_2: |
                    ### Exercise
                    In the example above the monsters are predetermined. So each time you run your code, the output is the same.
                    Can you add `{ask}` commands to make the haunted house interactive and have the players choose the monsters they come across?
                example_code_2: |
                    ```
                    monster_1 {is} _
                    monster_2 {is} _
                    monster_3 {is} _
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room, but a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
            3:
                story_text: |
                    In the previous levels you've made an introduction to your haunted house game, but as you might have noticed the story would always have a dreadful end.
                    In this level you can make your story more interactive by changing the outcome of the game; sometimes you'll get eaten, sometimes you'll escape!
                    Let Hedy decide randomly!
                example_code: |
                    ```
                    _ Escape from the haunted house!
                    _ There are 3 doors in front of you...
                    _ _ _ Which door do you choose?
                    _ You picked door ... choice
                    monsters _ a zombie, a vampire, NOTHING YOUVE ESCAPED
                    _ You see...
                    {sleep}
                    _ _ _ _
                    ```
            4:
                story_text: |
                    En ĉi tiu nivelo vi lernas kiel uzi citilojn en viaj ludoj.
                    Ĉu vi povas igi vian Hantatan Domon rulebla en Nivelo 4?
                example_code: |
                    ```
                    {print} _Escape from the haunted house!_
                    {print} _There are 3 doors in front of you..._
                    choice {is} {ask} _Which door do you choose?_
                    {print} _You picked door ..._ choice
                    monsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED
                    {print} _You see..._
                    {sleep}
                    {print} monsters {at} {random}
                     ```
            5:
                story_text: |
                    Up until this level the haunted house game always asked the player to choose a door, but as you might have noticed, they didn't really have to answer correctly.
                    If the player filled in a completely random answer, the game would still work and the player might even win (despite not picking a door).
                    In this level you can only win the game by picking the same door Hedy picked randomly.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house!'
                    {print} 'There are 3 doors in front of you...'
                    doors {is} 1, 2, 3
                    monsters {is} werewolf, mummy, vampire, zombie
                    chosen_door {is} {ask} 'Which door do you choose?'
                    {print} 'You chose door...' chosen_door
                    {sleep}
                    correct_door {is} doors {at} {random}
                    {if} chosen_door {is} correct_door {print} 'Great! Youve escaped!'
                    {else} {print} 'Oh no! You are being eaten by a...' monsters {at} {random}
                    ```
            9:
                story_text: |
                    In this level you can use nesting, which allows you to make the haunted house even more interactive!

                    ### Exercise
                    Now it's very hard to win this game, can you make it easier to win?
                    For example by only having 1 wrong door and 2 correct doors instead of 1 correct door and 2 wrong ones?
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    ludanto = vivanta
                    pordoj = 1, 2, 3
                    monstroj = kadavromonstro, vampiro, araneego
                    {repeat} 3 {times}
                        {if} ludanto {is} vivanta
                            ĝusta_pordo {is} pordoj {at} {random}
                            {print} 'Jen tri pordoj antaŭ vi…'
                            elektita_pordo = {ask} 'Kiun pordon elekti?'
                            {if} elektita_pordo {is} ĝusta_pordo
                                {print} 'Neniu monstro ĉi tie!'
                            {else}
                                {print} 'Vin manĝas ' monstroj {at} {random}
                                ludanto = mortinta
                        {else}
                            {print} 'FINO'
                    {if} ludanto {is} vivanta
                        {print} 'Bonege! Vi pretervivis!'
                    ```
            11:
                story_text: |
                    In this level we've changed the repeat command and we've added a line to our haunted house that tells the player in which room they are.
                example_code: |
                    ```
                    {print} 'Eskapu el la Hantata Domo!'
                    ludanto {is} vivanta
                    pordoj = 1, 2, 3
                    monstroj = kadavromonstro, vampiro, araneego
                    {for} i {in} {range} 1 {to} 3
                        {if} ludanto {is} vivanta
                            ĝusta_pordo = pordoj {at} {random}
                            {print} 'Ĉambro ' i
                            {print} 'Jen tri pordoj antaŭ vi…'
                            elektita_pordo = {ask} 'Kiun pordon vi elektos?'
                            {if} elektita_pordo {is} ĝusta_pordo
                                {print} 'Neniu monstro ĉi tie!'
                            {else}
                                {print} 'Vin formanĝas ' monstroj {at} {random}
                                ludanto = mortinta
                        {else}
                            {print} 'FINO'
                    {if} ludanto {is} vivanta
                        {print} 'Bonege! Vi pretervivis!'
                    ```
            14:
                story_text: |
                    ### Exercise
                    In this level you can use the `<` and `>` symbol to introduce lives to your game.
                    Make sure the player loses a life when they come across the wrong monster and that the game stops if you have no lives left.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house'
                    lives = 3
                    doors = 1, 2, 3
                    monsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'
                    {for} i {in} {range} 1 {to} 10
                        {if} lives _
                            good_door = doors {at} {random}
                            monster = monsters {at} {random}
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} good_door == chosen_door
                                {print} 'You have chosen the correct door'
                            {else}
                                {print} 'You see...' monster
                                {if} monster == 'a sleeping 3 headed dog'
                                    {print} 'Pffieuw.... Its asleep'
                                {else}
                                    {print} 'You lose one life'
                                    lives = _
                        {else}
                            {print} 'GAME OVER'
                    ```
            16:
                story_text: |
                    ### Exercise
                    This haunted house game uses the connection between the lists you can use in this level.
                    For example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.
                    Check out the code and fill in  `weapons[i]`, `monsters[i]` , `bad_fate[i]`, `good_fate[i]`, `hint[i]` on the correct blanks to get the code to work!
                example_code: |
                    ```
                    numbers = [1, 2, 3]
                    i = numbers[{random}]
                    hint = ['growling', 'a cackling laugh', 'fluttering batwings']
                    monsters = ['zombie', 'witch', 'vampire']
                    bad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']
                    good_fate = ['You throw the ham. The zombie is distracted and starts eating it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']
                    weapons = ['ham', 'lighter', 'garlic']
                    {print} 'You are standing in front of an old mansion'
                    {print} 'Something is not right here'
                    {print} 'You hear ' _
                    {print} 'You are going to explore it'
                    {print} 'You enter the kitchen and see a lighter, a raw ham and a garlic.'
                    your_weapon = {ask} 'What do you bring with you?'
                    {print} 'With your ' your_weapon ' you enter the living room'
                    {print} 'There you find a ' _
                    needed_weapon = _
                    {if} your_weapon == needed_weapon
                        {print} 'You use your ' your_weapon
                        {print} _
                        {print} 'YOU WIN!'
                    {else}
                        {print} 'You have chosen the wrong weapon...'
                        {print} _
                        {print} 'GAME OVER'
                    ```
    hotel:
        name: hotel
        default_save_name: hotel
        description: hotel
        levels:
            13:
                story_text: |
                    In the previous adventure you have learned how to use an argument in a function, and you've learned how to combine it with an {ask}.
                    You might have wondered why you would use functions, because the functions in the example were only one line of code.
                    Now we will show you what a bigger function looks like and we will use multiple agruments now as well. You'll see how much better it is to use a function once the function gets bigger.
                    Here is an example of a function with arguments combined with {ask} commands.
                example_code: |
                    ```
                    {define} welcome_message {with} title, last_name, country, room_number
                        {print} 'Welcome to Hotel Hedy, ' title ' ' last_name
                        nice_trip {is} {ask} 'Did you have a nice trip from, ' country '?'
                        {if} nice_trip {is} 'yes'
                            {print} 'Lovely!'
                        {else}
                            {print} 'Sorry to hear that.'
                            {print} 'Hopefully you can take a nice rest in you room.'
                        {print} 'Your room number is ' room_number

                    {print} 'Hello. Please fill in your information to check in.'
                    title = {ask} 'What is your title (mr, mrs, ms, dr, etc.)?'
                    name = {ask} 'What is you last name?'
                    homecountry = {ask} 'What country do you come from?'

                    {call} welcome_message {with} title, name, homecountry, 105
                    ```

                    title = {ask} 'What is your title (mr, mrs, ms, dr, etc.)?'
                    name = {ask} 'What is you last name?'
                    homecountry = {ask} 'What country do you come from?'

                    {call} welcome_message {with} title, name, homecountry, 105
    if_command:
        name: '{if} & {else}'
        default_save_name: if_command
        description: Introducing the if command
        levels:
            5:
                story_text: |
                    ## If... else....
                    In level 5 there is something new, the `{if}`! With the `{if}` you can choose between two different options.
                    This code prints nice if you enter Hedy as a name, and boo! if you enter something else.
                    `{ask}` and `{print}` still work like they did in level 4.
                example_code: |
                    ```
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'
                    ```
                story_text_2: |
                    Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:
                example_code_2: |
                    ```
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice'
                    {else} {print} 'boo!'
                    ```
                story_text_3: |
                    ### Exercise
                    Try to create your own code with `{if}` and `{else}`. You can use the example code if you want.
                example_code_3: |
                    ```
                    answer {is} {ask} '2 + 2 = ?'
                    _ _ _ 4 _ 'Great job!'
                    _ _ 'No 2 + 2 = 4'
                    ```
            8:
                story_text: |
                    ## If... Else...
                    You have learned to repeat a block of lines of code after a `{repeat}` command.
                    Now you can also use indentation to make blocks after a {if} or {else} command.
                    Check out the example code.

                    ### Exercise
                    Add an {else} command to the example code. Make a block of line using indentation. You do this by starting each line with 4 spaces.
                example_code: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name {is} Hedy
                        {print} 'Welcome Hedy'
                        {print} 'You can play on your computer!'
                    ```
            9:
                story_text: |
                    In this level you can also put an {if} command inside another {if} command.
                example_code: |
                    ```
                    continue = {ask} 'Do you want to continue?'
                    {if} continue = yes
                        sure = {ask} 'Are you sure?'
                        {if} sure {is} yes
                            {print} 'We will continue'
                        {else}
                            {print} 'You are not sure'
                    {else}
                        {print} 'You do not want to continue'
                    ```
    in_command:
        name: '{in}'
        default_save_name: in_command
        description: Introducing the in command
        levels:
            5:
                story_text: |
                    ## Lists
                    When we want to check if something is in a list, we can now use the `{in}` command.
                    This code prints pretty! if you choose green or yellow, and meh otherwise.
                example_code: |
                    ```
                    pretty_colors {is} green, yellow
                    favorite_color {is} {ask} 'What is your favorite color?'
                    {if} favorite_color {in} pretty_colors {print} 'pretty!'
                    {else} {print} 'meh'
                    ```
                story_text_2: |
                    ### Exercise
                    Finish the example code by filling in the blanks with commands that you've learned.
                    When you've finished the code, try to create a code of your own and use a question that you've thought of yourself.
                example_code_2: |
                    ```
                    animals is dog, cow, sheep
                    answer is ask 'What is your favorite animal?'
                    _ answer _ animals _ 'Mine too!'
                    _ _ 'My favorite animals are dogs, cows and sheep'
                    ```
    is_command:
        name: '{is}'
        default_save_name: is_command
        description: introducing is command
        levels:
            2:
                story_text: |
                    ## Variables
                    You can name a word with `{is}`. This is called a **variable**. In this example we made a variable called name and a variable called age. You can use the word name anywhere in your code and it will be replaced by Hedy, like this:
                example_code: |
                    ```
                    name {is} Hedy
                    age {is} 15
                    {print} name is age years old
                    ```
                story_text_2: |
                    ### Exercise
                    Time to make your own variables!
                    In the example code we made an example of the variable `favorite_animal`. In line 1 the variable is set, and in line 2 we haved used the variable in a print command.
                    Firstly, finish our example by filling in your favorite animal in the blanks. Then make at least 3 of these codes yourself. Pick a variable, and set the variable with the {is} command. Then use it with a {print} command, just like we did.
                example_code_2: |
                    ```
                    favorite_animal {is} _
                    {print} I like favorite_animal
                    ```
            6:
                story_text: |
                    We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:
                example_code: |
                    ```
                    name = Hedy
                    answer = 20 + 4
                    ```
            14:
                story_text: |
                    We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.
                    The `<` checks if the first number is smaller than the second, for example age `<` 12 checks if age is smaller than 12.
                    If you want to check if the first number is smaller or equal to the second, you can use `<=`, for example age `<=` 11.
                    The `>` checks if the first number is bigger than the second, for example points `>` 10 checks if points is larger than 10.
                    If you want to check if the first number is bigger or equal to the second, you can use `>=`, for example points `>=` 11.
                    You use these comparisons in an `{if}`, like this:
                example_code: |
                    ```
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
                    ```
                story_text_2: |
                    From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:
                example_code_2: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name == 'Hedy'
                        {print} 'You are cool!'
                    ```
                story_text_3: |
                    You can also compare if something is *not* equal to something else using `!=` like this:
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name != 'Hedy'
                        {print} 'You are not Hedy'
                    ```

                    {if} age < 13
                        {print} 'You are younger than me!'
                    {else}
                        {print} 'You are older than me!'
    language:
        name: Lingvo
        default_save_name: Lingvo
        description: Praktiku vortojn de fremda lingvo
        levels:
            5:
                story_text: |
                    Faru vian propran programon por ekzerci vian vortprovizon en nova lingvo.
                example_code: |
                    ```
                    {print} 'Lernu la francan!'
                    kato {is} {ask} '🐱'
                    {if} kato {is} chat {print} 'Bonege!'
                    {else} {print} 'Ne, kato estas chat'
                    rano {is} {ask} '🐸'
                    {if} rano {is} grenouille {print} 'Bonege!'
                    {else} {print} 'Ne, rano estas grenouille'
                    ```
            16:
                story_text: |
                    ### Exercise
                    Take a look at the example code. This is a program to practise French vocabulary. Now make your own program to practice your vocabulary in a new language.
                    If you don't know any other languages, you can use Google translate or you can use emojis and your native language.
                example_code: |
                    ```
                    francaj_vortoj = ['bonjour', 'ordinateur', 'pomme de terre']
                    traduko = ['saluton', 'komputilo', 'terpomo']
                    poentaro = 0
                    {for} i {in} {range} 1 {to} 3
                        respondo = {ask} 'Kion signifas ' francaj_vortoj[i] '?'
                        ĝusta = traduko[i]
                        {if} respondo == ĝusta
                            {print} 'Ĝuste!'
                            poentaro = poentaro + 1
                        {else}
                            {print} 'Malĝuste, ' francaj_vortoj[i] ' signifas la jenon: ' traduko[i]
                    {print} 'Vi respondis ' poentaro ' fojojn ĝuste.'
                    ```
    maths:
        name: maths
        default_save_name: maths
        description: Introducing maths
        levels:
            6:
                story_text: |
                    In this level you learn something new: you can now also calculate.

                    The plus is easy, you write it like with math: `5 + 5` for example. The minus also works fine, it is `5 - 5`.

                    The times is a bit different, because there is no times symbol on your keyboard. Just search, there really isn't!
                    That is why we multiply with the asterisk above 8: `5 * 5`. Read that as "5 times 5" that helps you remember it best.
                example_code: |
                    ```
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 minus 5 is ' 5 - 5
                    {print} '5 times 5 is ' 5 * 5
                    ```
            12:
                story_text: |-
                    **Decimal numbers**
                    So far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.
                example_code: |
                    ```
                    {print} 'Two and a half plus two and a half is...'
                    {print} 2.5 + 2.5
                    ```
                story_text_2: |-
                    **Maths with words**
                    In this level you can also do addition with words like this:
                example_code_2: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```

                    {print} 2.5 + 2.5
    music:
        name: music
        default_save_name: music
        description: Play a tune!
        levels:
            1:
                story_text: |-
                    In this level you'll learn how to use the `{play}` command to play a tune!

                    Type `{play}` followed by the note you want to play. The scale goes C-D-E-F-G-A-B.
                    As you can see there are 7 different letters, but we can play more than just 7 notes.
                    Type a number between 1 and 10 behind the letter to choose the scale, for example after B4 comes C5.
                    C1 is the lowest note you can play, C10 is the highest.

                    ### Exercise
                    Try out the example code and then play around with it! Can you create your own melody?
                    In the next level you'll learn how to play some existing songs.
                example_code: |-
                    ```
                    {play} C4
                    {play} D4
                    {play} E4
                    {play} F4
                    {play} G4
                    {play} A4
                    {play} B4
                    {play} C5
                    ```
            2:
                story_text: |
                    ### Exercise
                    Finish the songs! We have started the codes for some melodies.
                example_code: |
                    ```
                    {print} Old Mac Donald had a farm
                    {play} C5
                    {play} C5
                    {play} C5
                    {play} G4
                    {play} A4
                    {play} A4
                    {play} G4
                    ```
                story_text_2: As you can see, you can also use the `{sleep}` command to add a little pause in the song.
                example_code_2: |
                    ```
                    {print} Twinkle Twinkle Little Star
                    {play} C
                    {play} C
                    {play} G
                    {play} G
                    {play} A
                    {play} A
                    {play} G
                    {sleep} 1
                    {play} F
                    {play} F
                    ```
            3:
                story_text: |
                    Create a random melody!

                    ### Exercise
                    The example code creates a random melody, but it's very short and not many notes are used.
                    Add more notes to the list and create a longer melody by copying the last line a couple more times.
                example_code: |
                    ```
                    notes {is} A4, B4, C4
                    {play} notes {at} {random}
                    {play} notes {at} {random}
                    {play} notes {at} {random}
                    ```
            4:
                story_text: |
                    Use the `{clear}` command to create a karaoke machine!

                    ### Exercise
                    Finish the karaoke version of 'Mary had a little lamb'.
                    Then, create a karaoke version of any song you'd like!
                example_code: |
                    ```
                    {print} 'Mary had a little lamb'
                    {play} E
                    {play} D
                    {play} C
                    {play} D
                    {play} E
                    {play} E
                    {play} E
                    {clear}
                    {print} 'Little lamb, little lamb'
                    {play} D
                    {play} D
                    {play} D
                    {play} E
                    {play} E
                    {play} E
                    {clear}
                    {print} 'Mary had a little lamb'
                    {play} E
                    ```
            5:
                story_text: |
                    You don't always have to use the `{play}` command to play a whole song, sometimes you just want to play one note.
                    For example, if you want to make a quiz, you can play a happy high note if the answer is right and a sad low note if the answer is wrong.

                    ### Exercise
                    Finish the first question by adding a line of code that plays a C3 note if the wrong answer is given.
                    Then think of 3 more questions to add to this quiz.
                example_code: |
                    ```
                    answer {is} {ask} 'What is the capital of Zimbabwe?'
                    {if} answer {is} Harare {play} C6
                    _
                    ```
            6:
                story_text: "Instead of playing notes, you can also play numbers now. Simply type `{play} 1` for the lowest note, `{play} 70` for the highest note, or anything in between.\n\n### Exercise\n This calls for musical maths! Try out the example code a couple of times with different starting numbers. \nThen, see if you can compose a song using the numbers.\n"
                example_code: |
                    ```
                    number = {ask} 'Say a starting number between 1 and 67'
                    {print} number
                    {play} number
                    number = number + 1
                    {print} number
                    {play} number
                    number = number + 1
                    {print} number
                    {play} number
                    ```
            7:
                story_text: |
                    Using the `{repeat}` command can make your codes for melodies a lot shorter!

                    ### Exercise
                    Finish the code for Twinkle Twinkle Little Star by using the `{repeat}`command.
                    Then go back to the songs you've made in the previous levels. Can you shorten those codes too?
                example_code: |
                    ```
                    {print} 'Twinkle Twinkle Little Star'
                    {repeat} 2 {times} {play} C4
                    {repeat} 2 {times} {play} G4
                    _
                    ```
            8:
                story_text: |
                    Now that we can use the `{repeat}` command for multiple lines, we can make songs even more easily!

                    ### Exercise
                    Finish the song of Brother John (Frère Jacques). Don't forget to use `{repeat}`!
                example_code: |
                    ```
                    {print} 'Brother John'
                    {repeat} 2 {times}
                        {play} C
                        {play} D
                        {play} E
                        {play} C
                    {repeat} 2 {times}
                        {play} E
                        {play} F
                        {play} G
                        {sleep} 1
                    ```
            9:
                story_text: |
                    From this level on you can - among other things - use a {repeat} command inside a {repeat} command.
                    That makes songs like 'Happy birthday' even shorter!

                    ### Exercise
                    Finish the song!
                example_code: |
                    ```
                    first_time = yes
                    {repeat} 2 {times}
                        {repeat} 2 {times}
                            {play} C
                        {play} D
                        {play} C
                        {if} first_time {is} yes
                            {play} F
                            {play} E
                            first_time {is} no
                        {else}
                            _
                    ```
            12:
                story_text: |
                    Use functions in your songs! As you can see in the example code, you can make a function for each line of Twinkle Twinkle Little Star. Once you've programmed the first three lines, all you have to do is call the functions in the order you want them played in.

                    ### Exercise
                    Finish the song of Twinkle Twinkle Little Star.
                    Then look back at all the songs you've programmed in the levels before, can you make those codes better and shorter using functions too?
                example_code: |
                    ```
                    {define} first_line
                        {play} C
                        {play} C
                        {play} G
                        {play} G
                        {play} A
                        {play} A
                        {play} G
                        {sleep}

                    {define} second_line
                        {play} F
                        {play} F
                        {play} E
                        {play} E
                        {play} D
                        {play} D
                        {play} C
                        {sleep}

                    {define} third_line
                        {play} G
                        {play} G
                        {play} F
                        {play} F
                        {play} E
                        {play} E
                        {play} D
                        {sleep}

                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    ```
            13:
                story_text: |
                    You can use a function with an argument for songs that have line that are almost the same, but slightly different each time.
                    One example is the song 'Yankee Doodle'. The first 4 notes of the first lines are the same, but each time they are followed by a different couple of notes.

                    ### Exercise
                    Can you finish the song of Yankee Doodle?
                    Can you think of another song to program this way?
                example_code: |
                    ```
                    {print} 'Yankee Doodle'
                    {define} _ {with} note_1, note_2, note_3
                        {play} C4
                        {play} C4
                        {play} D4
                        {play} E4
                        {play} _
                        {play} _
                        {play} _

                    {call} line_1 {with} 29, 31, 30
                    {call} line_1 {with} 29, 28, 0
                    {call} line_1 {with} 32, 31, 30

                    {play} C4
                    {play} B3
                    {play} G3
                    {play} A3
                    {play} B3
                    {play} C4
                    {play} C4
                    ```
            14:
                story_text: |
                    You can program music for fun, but you can also use the musical notes to make something useful like a fire alarm!

                    ### Exercise
                    Make sure the fire alarm rings when there is a fire!
                example_code: |
                    ```
                    {define} fire_alarm
                        {print} 'FIRE!'
                        note = 40
                        {for} i {in} {range} 1 {to} 100
                            {if} note _ 50
                                note = note + 5
                                {play} _
                            {else}
                                note = 40

                    fire = {ask} 'Is there a fire?'
                    {if} fire _ 'yes'
                        {call} fire_alarm
                    ```
            15:
                story_text: |
                    **Warning** This adventure can become extremely annoying!
                    We can also use the {while} command to repeat a song forever.

                    ### Exercise
                    Finish the never-ending song.
                example_code: |
                    ```
                    {define} song
                        {play} _

                    yes_or_no = {ask} 'Do you want to hear my never-ending song?'
                    {while} yes_or_no = 'yes'
                        {call} song
                        {print} '🥳'
                    ```
            16:
                story_text: |
                    Upgrade your Old MacDonald code!

                    ### Exercise
                    Take your code from the 'Sing a Song' adventure and add musical notes to it!
                    You can make a function for each line in the song and call that function after the line is printed.
                    We defined the first line for you and called it in the code. Can you finish the whole song?
                example_code: |
                    ```
                    {define} line_1
                        {for} i {in} {range} 1 {to} 3
                            {play} G
                        {play} D
                        {for} i {in} {range} 1 {to} 2
                            {play} E
                        {play} D

                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    for i in range 1 to 3
                        animal = animals[i]
                        sound = sounds[i]
                        print 'Old MacDonald had a farm'
                        call line_1
                        print 'E I E I O!'
                        _
                    ```
            17:
                story_text: |
                    You can use the {elif} to create different options.

                    ### Exercise
                    Firstly, add colons to get the code to work.
                    Then finish this code by adding at least 2 other songs for other moods. For example a happy song and an angry song.
                example_code: |
                    ```
                    {define} scary_song
                        {for} i {in} {range} 1 {to} 3
                            {play} G
                        {play} E
                        {sleep} 2
                        {for} i {in} {range} 1 {to} 3
                            {play} F
                        {play} D

                    mood = {ask} 'Which emotion are you feeling?'
                    {if} mood {is} 'fear'
                        {call} scary_song
                    {elif} _
                    ```
            18:
                story_text: |
                    ### Exercise
                    Even in this last level of Hedy we can make some music! Be careful of all the syntax that is needed now.
                    Take a good look at how the functions are defined and called upon in the example code.
                    Finish the song!
                example_code: |
                    ```
                    {def} line_1():
                        {for} i {in} {range}(1, 5):
                            {play} A
                        {play} D
                        {play} F
                        {play} A

                    {def} line_2():
                        {for} i {in} {range}(1, 5):
                            {play} G
                        {play} C
                        {play} E
                        {play} G

                    {def} line_3():
                    _

                    {print} ('The drunken sailor')
                    {print} ('What shall we do with the drunken sailor?')
                    line_1()
                    line_2()
                    line_3()
                    {print} ('Early in the morning')
                    ```
    parrot:
        name: Papago
        default_save_name: Papago
        description: Kreu vian propran Interretan dorlotpapagon, kiu kopios vin!
        levels:
            1:
                story_text: |
                    Kreu vian propran Interretan dorlotpapagon, kiu kopios vin!
                example_code: |
                    ```
                    {print} Mi estas Hedy la papago
                    {ask} kio estas via nomo?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### Exercise
                    Can you make the parrot ask a different question? Fill in the blanks in the example!
                example_code_2: |
                    ```
                    {print} Im Hedy the parrot
                    {ask} _
                    {echo}
                    {echo}
            2:
                story_text: |
                    Kreu vian propran Interretan dorlotpapagon, kiu kopios vin!
                example_code: |
                    ```
                    {print} Mi estas Hedy la papago
                    nomo {is} {ask} kio estas via nomo?
                    {print} nomo
                    {sleep}
                    {print} grak
                    {sleep}
                    {print} nomo
                    ```
                story_text_2: |
                    ### Exercise
                    You can use variables to make the parrot say more than only your name. Can you complete this code?
            3:
                story_text: |
                    Instruu al via papago novan vorton per `{add}`.
                example_code: |
                    ```
                    vortoj {is} grak, Hedy
                    {print} Trejnu vian papagon!
                    nova_vorto {is} {ask} Kiun vorton instrui?
                    {add} nova_vorto {to_list} vortoj
                    {print} 🧒 Diru nova_vorto , Hedy!
                    {print} 🦜 vortoj {at} {random}
                    ```
            4:
                story_text: |
                    In this level we have to use quotation marks with the commands `{ask}` and `{print}`.
                    Can you complete the code by adding quotation marks?
                example_code: |
                    ```
                    words {is} squawk, Hedy
                    {print} _ Train your parrot! _
                    new_word {is} {ask} _ Which word do you want to teach them? _
                    {add} new_word {to_list} words
                    {print} _ 🧒 Say _ new_word _, Hedy!_
                    {print} _ 🦜 _ words {at} {random}
                    ```
            5:
                story_text: |
                    Rekompencu vian papagon, se ĝi diras la ĝustan vorton!
                example_code: |
                    ```
                    vortoj {is} grak, Hedy
                    {print} 'Trejnu vian papagon!'
                    nova_vorto {is} {ask} 'Kiun vorton instrui?'
                    {add} nova_vorto {to_list} vortoj
                    dirita_vorto {is} vortoj {at} {random}
                    {print} '🧒 Diru «' nova_vorto '», Hedy!'
                    {print} '🦜 ' dirita_vorto
                    {if} dirita_vorto {is} nova_vorto {print} '🧒 Bonege, Hedy! 🍪'
                    {else} {print} '🧒 Ne, Hedy! Diru «' nova_vorto '»'
                    ```
    piggybank:
        name: Ŝparujo
        default_save_name: Ŝparujo
        description: Kalkulu vian poŝmonon!
        levels:
            12:
                story_text: |
                    In this adventure you learn how to make a digital piggy bank, to calculate how much money you have and how long you need to save up to buy what you want!
                example_code: |
                    ```
                    {print} 'The digital piggy bank'
                    wish = {ask} 'What would you like to buy?'
                    price = {ask} 'How much does that cost?'
                    saved = {ask} 'How much money have you saved already?'
                    allowance = {ask} 'How much pocket money do you get per week?'
                    to_save = price - saved
                    weeks = to_save / allowance
                    {print} 'You can buy a ' wish ' in ' weeks ' weeks.'
                    ```
            14:
                story_text: |
                    ### Exercise
                    In this level you can let Hedy tell you if you have saved up enough money!
                    Finish this code by filling in the blanks!
                example_code: |
                    ```
                    _ calculate_budget with wish, money, allowance
                        to_save = wish - money
                        weeks = to_save / allowance
                        {if} wish _ money
                            {print} 'You need to save up some more!'
                            {print} 'Youll need ' weeks ' more weeks.'
                        {else}
                            {print} 'Great! You have enough'
                            {print} 'Lets go shopping!'

                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'

                    {call} calculate_budget with _, _, _
                    ```
    pressit:
        name: Key presses
        default_save_name: Pressed
        description: Try linking a keyboard key to a command!
        levels:
            5:
                story_text: |
                    In this level there is another new keyword: `{pressed}`!
                    With `{pressed}` you can use keys on your keyboard to control what lines are used.

                    ### Exercise
                    Look at the example and add one more line of code that reacts to a key press.
                example_code: |
                    ```
                    {print} 'Do you want a good (g) or bad (b) ending?'
                    {if} g {is} {pressed} {print} 'They lived happily ever after ❤'
                    {else} {print} 'The prince was eaten by a hippopotamus 😭'
                    ```
                story_text_2: |
                    You can also link turtle commands to keys.

                    ### Exercise
                    Copy the lines a few times so you can create a larger drawing.
                example_code_2: |
                    ```
                    {if} y {is} {pressed} {forward} 15
                    {else} {turn} 90
                    ```
            7:
                story_text: |
                    Now that you have learned about `{repeat}`, we can press keys multiple times.
                    You can use it to make the turtle walk forward and turn.

                    ### Exercise
                    The code you have seen in level 5 only checks the key once. Copy the example code and add a `{repeat}` to it, so that you can press the keys many times.
                    Use this code to draw something nice.
                example_code: |
                    ```
                    {if} x {is} {pressed} {forward} 15 {else} {turn} 90
                    ```
            9:
                story_text: |
                    Now that you know how to combine statements, you can create a touch type tool with `{pressed}`.

                    ### Exercise
                    Finish the code. Each time a random letter should be chosen, which you have to press. You get a point for a correct press, and and two points deduction for a wrong press.
                    **(extra)** Clear the screen after each letter, and show the user how many points they have scored.
                example_code: |
                    ```
                    points = 0
                    letters = a, b, c, d, e
                    {repeat} 10 {times}
                        letter = _ _ _
                        {print} 'Press the letter ' letter
                        {if} letter {is} {pressed}
                        _
                        _
                        _
                    ```
    print_command:
        name: '{print}'
        default_save_name: print
        description: Introduction print command
        levels:
            1:
                story_text: |
                    ## The print command
                    You can print text to the screen using the `{print}` command.
                example_code: |
                    ```
                    {print} Hi there, programmer!
                    {print} Welcome to Hedy!
                    ```
                story_text_2: |
                    ### Exercise
                    In Hedy you will find exercises in every adventure. An exercise allows you to practise the new commands and concepts, and lets you give your own twist to the example codes.
                    In this exercise you will see a pink blank space. You have to fill something in the place of the blank space before the code can be run.

                    Fill in the `{print}` command in the blank space and then add five more lines of code. Each line has to start with a `{print}` command.
                    Have fun!
                example_code_2: |
                    ```
                    _ Hello!
                    ```
            18:
                story_text: |-
                    We arrived at real Python code! That means we need to use parentheses with `{print}` and `{range}` from now on.
                    It also means you can use Hedy code from this level in any Python environment as long as you use the English commands. If you haven't until now, you can switch the toggle in the commands menu to do so.
                example_code: |
                    ```
                    {print}('Hello!')
                    {for} i {in} {range}(1, 10):
                        {print}('This is line ', i)
                    ```
                story_text_2: If you want to print more than one item, you need to separate them by commas.
                example_code_2: |
                    ```
                    temperature = 25
                    {print}('It is ', temperature, ' degrees outside')
                    ```

                    {print}('My name is ', name)
    quizmaster:
        name: Kvizmajstro
        default_save_name: Kvizmajstro
        description: Faru vian propran kvizon!
        levels:
            14:
                story_text: |
                    En ĉi tiu aventuro vi povas fari vian propran kvizon! Plenigu la vakojn, aldonu pliajn demandojn kaj ĝuu vian propran kvizon!
                    Vi povas fari kvizon pri ĉio, kion vi ŝatas: via ŝatokupo, via plej ŝatata besto, via plej ŝatata libro aŭ io ajn!
                example_code: |
                    ```
                    {print} 'Faru vian propran kvizon'
                    poentoj_a = 0
                    poentoj_b = 0
                    {print} 'Demando'
                    {print} 'Respondopcio A'
                    {print} 'Respondopcio B'
                    respondo = {ask} 'Kiu respondo?'
                    {if} respondo == 'A'
                        poentoj_a = poentoj_a + 1
                    {if} respondo == 'B'
                        poentoj_b = poentoj_b + 1
                    {print} 'Fino de la kvizo!'
                    {print} 'Ni vidu la rezultojn!'
                    {if} poentoj_a > poentoj_b
                        {print} 'Vi apartenas al la A-klubo'
                    {if} poentoj_b > poentoj_a
                        {print} 'Vi apartenas al la B-klubo'
                    ```
    quotation_marks:
        name: '''quotation marks'''
        default_save_name: quotation_marks
        description: Introduction quotation marks
        levels:
            4:
                story_text: |
                    ## 'Quotation marks'
                    In level 4 `{ask}` and `{print}` have changed.
                    You must put text that you want to print between quotation marks.
                    This is useful, because now you can print all the words you want. Also the words you used to store something with `{is}`.
                    Most programming languages also use quotation marks when printing, so we are also getting a step closer to real programming!
                example_code: |
                    ```
                    {print} 'You need to use quotation marks from now on!'
                    answer {is} {ask} 'What do we need to use from now on?'
                    {print} 'We need to use ' answer
                    ```
                story_text_2: |
                    ## Contractions
                    Important! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.
                    Make sure to remove those apostrophes and change the spelling to I am or What is.
                    Check out the example code to see the wrong way of using apostrophes.
                example_code_2: |
                    ```
                    _ This is the wrong way of using apostrophes _
                    {print} 'I'm babysitting my sister's kids'
                    {print} 'What's more fun than that?'
                    ```
            12:
                story_text: |
                    **All texts need to be in quotation marks**
                    For this level on you will also have to use quotation marks when storing a text with `=`:
                example_code: |
                    ```
                    name = 'Hedy the Robot'
                    {print} 'Hello ' name
                    ```
                story_text_2: |
                    **All items in lists need quotation marks too**
                    Lists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.
                    This allows you to save two words as 1 item on the list, for example 'Black Widow'.
                example_code_2: |
                    ```
                    superheroes = 'Spiderman', 'Batman', 'Black Widow'
                    {print} superheroes {at} {random}
                    ```
                story_text_3: |
                    **All text after `{if}` comparisons need quotation marks too**
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy the Robot'
                        {print} 'Hi there!'
                    ```
                story_text_4: |
                    **Numbers don't need quotation marks**
                    For numbers, you do not use quotation marks in the `=`:
                example_code_4: |
                    ```
                    score = 25
                    {print} 'You got ' score
                    ```
    random_command:
        name: '{random}'
        default_save_name: random_command
        description: introducing at random command
        levels:
            3:
                story_text: |
                    ## At random
                    In this level you can make a list using the `{is}` command. You can let the computer choose a random item from that list. You do that with `{at} {random}`.
                example_code: |
                    ```
                    animals {is} dogs, cats, kangaroos
                    {print} animals {at} {random}
                    ```
                story_text_2: |
                    You can use the `{at} {random}` command in a sentence as well.
                example_code_2: |
                    ```
                    food {is} sandwich, slice of pizza, salad, burrito
                    {print} I am going to have a food {at} {random} for lunch.
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the `{at} {random}` command by making your own gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!
                    Can you do it? We have already put the first lines into the example code.
                example_code_3: |
                    ```
                    {print} The big gameshow!
                    {print} There are 3 suitcases in front of you...
                    chosen {is} {ask} Which suitcase do you choose?
                    prices {is} _
                    _
                    ```
            16:
                story_text: |-
                    We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
                    We use square brackets to point out a place in a list. For example: `friends[1]` is the first name on the list of friends, as you can see in the first part of the example code. The second part of the example code shows you that we can also match 2 lists using the variable i.
                example_code: |
                    ```
                    friends = ['Ahmed', 'Ben', 'Cayden']
                    {print} friends[1] ' is the first friend on the list.'
                    {print} friends[2] ' is the second friend on the list.'
                    {print} friends[3] ' is the third friend on the list.'
                    #now we will match 2 lists using the variable i
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} friends[i] 's lucky number is ' lucky_numbers[i]
                    ```
                story_text_2: |-
                    Now that you've learned to use the brackets in lists, you can also start using the {at} {random} command in the Python way!
                    You simply type the name of your list with `[random]` behind it!
                example_code_2: |-
                    ```
                    fruit = ['apple', 'banana', 'cherry']
                    {print} fruit[random]
                    ```
    repeat_command:
        name: '{repeat}'
        default_save_name: repeat_command
        description: repeat command
        levels:
            7:
                story_text: |
                    ## Repeat! Repeat! Repeat!
                    Level 7 adds the `{repeat}` command.  `{repeat}` can be used to execute one line of code multiple times. Like this:

                    ### Exercise
                    Play around with the repeat command. Can you make the happy birthday song in only 3 lines of code instead of 4 now?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy is fun!'
                    ```
            8:
                story_text: |
                    ### Repeat commands and indentation
                    In this level you can repeat multiple lines of code with only 1 repeat command.
                    You do this by making a block of lines that you want to repeat.
                    The lines in this block will need **indentation** .
                    That means putting four spaces at the beginning of each line. You will also have to indent when you just want to create a block of one line.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} 'Hello everyone'
                        {print} 'This is all repeated 5 times'
                    ```
            9:
                story_text: |
                    Great job! You've reached another new level! In the previous level you've learned to use multiple lines of code in an {if} or {repeat} command. But you can't yet combine the two...
                    Good news! In this level you will be allowed to put an {if} inside an {if}, or inside a {repeat} command. Putting a block of code inside another block of code is called nesting.                     ``` Putting a block of code inside another block of code is called nesting.
                example_code: |
                    ```
                    answer = {ask} 'Are you ready to learn something new?'
                    {if} answer {is} yes
                        {print} 'Great! You can learn to use the repeat command in the if command!'
                        {print} 'Hooray!'
                        {print} 'Hooray!'
                        {print} 'Hooray!'
                    {else}
                        {print} 'Maybe you should practice some more in the previous level'
    repeat_command_2:
        name: '{repeat} 2'
        default_save_name: repeat_command_2
        description: repeat command 2
        levels:
            7:
                story_text: |
                    ## Repeat with other commands and with variables
                    You have practiced the `{repeat}` command in combination with the `{print}` command now, but did you know you could also use other commands with `{repeat}` ?
                    In this example code you can see that `{repeat}` can also be used with an `{ask}`, `{if}` or `{else}` command.
                example_code: |
                    ```
                    {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                    {if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'
                    {else} {repeat} 3 {times} {print} 'You have learned something new!'
                    ```
                story_text_2: |
                    Another interesting thing you can so with the `{repeat}` command is using variables to set the amount of times something should be repeated. In the example code you can see that we first ask the person how old they are.
                    Then, in line 3, the question is repeated 'age' times. So we have used the variable 'age' with the `{repeat}` command.
                example_code_2: |
                    ```
                    {print} 'Yay! It is your birthday!'
                    age = {ask} 'How old are you now?'
                    {repeat} age {times} {print} 'Hip Hip Hurray!'
                    ```
            8:
                story_text: |
                    ### In the block or not?
                    In this level you have to think carefully which lines of code should be in the block and which shouldn't.
                    For example: If you want to sing the song *the muffin man*. You only want the line with 'the muffin man' to be repeated twice.
                    This means the last line shouldn't start with indentation as it doesn't belong to the block.
                    If you do start the last line with indentation the song will turn out wrong.

                    ### Exercise
                    Each line in the example code starts with a blank. Remove the blanks and try to figure out which line need indentation and which don't to make the muffin man song.
                example_code: |
                    ```
                    _ {print} 'Do you know the muffin man?'
                    _ {repeat} 2 {times}
                    _ {print} 'The muffin man'
                    _ {print} 'Do you know the muffin man, who lives on Drury Lane?'
                    ```
    restaurant:
        name: Restoracio
        default_save_name: Restoracio
        description: Kreu vian propran virtualan restoracion
        levels:
            1:
                story_text: |
                    En Nivelo 1, vi povas krei vian propran virtualan restoracion kaj preni la mendojn de viaj gastoj.
                story_text_2: |
                    ### Exercise
                    Can you think of more lines to add to your restaurant code? For example, can you {ask} the guests what they'd like to drink, tell them the price, or wish them a pleasant meal?
                example_code_2: |
                    ```
                    {print} Bonvenon al Restoracio Hedy 🍟
                    {ask} Kion vi volas mendi?
                    {echo} Do vi volas mendi
                    {print} Dankon pro via mendo!
                    {print} Ĝi estas kuirata!
                    ```
            2:
                story_text: |
                    In level 2 you could expand your restaurant by using variables. In level 1 Hedy could only {echo} the order once and only remember the last thing that was ordered.
                    Now you can use variables and Hedy can remember both the food and the drinks!
                example_code: |
                    ```
                    {print} Bonvenon al Restoracio Hedy!
                    {print} Hodiaŭ ni servas picon aŭ lasanjojn.
                    manĝaĵo {is} {ask} Kion vi ŝatus manĝi?
                    {print} Bonega elekto! La manĝaĵo estas mia plej ŝatata!
                    topping {is} {ask} Ĉu vi ŝatus viandon aŭ legomojn sur tio?
                    {print} manĝaĵo kun topping estas survoje!
                    trinkas {is} {ask} Kion vi ŝatus trinki per tio?
                    {print} Dankon pro via mendo.
                    {print} Viaj manĝaĵoj kaj trinkaĵoj estos ĝuste tie!
                    ```
                story_text_2: |
                    ### Exercise
                    Can you make this code more elaborate? For example by adding drinks to the order? Or...?
            3:
                story_text: |
                    Ĉu vi havas problemon decidante, kion vi volas manĝi por vespermanĝo? Vi povas lasi Hedy elekti por vi!
                    Simple tajpu listojn de viaj plej ŝatataj (aŭ malplej ŝatataj) manĝoj, kaj Hedy povas hazarde elekti vian vespermanĝon.
                    Vi ankaŭ povas iomete amuziĝi, lasante Hedy ankaŭ elekti la prezon de via vespermanĝo! Kion vi ricevos?
                example_code: |
                    ```
                    {print} Bonvenon al la Hazarda Restoracio de Hedy!
                    {print} La ununura restoracio, kiu hazarde elektos vian manĝon kaj ĝian prezon por vi!
                    antaŭmanĝaĵoj {is} salato, supo, krudaĵo
                    ĉefpladoj {is} pico, brussels sprouts, spagetoj
                    desertoj {is} kuketoj, glaciaĵo, francaj fromaĝoj
                    trinkaĵoj {is} kolao, biero, akvo
                    prezoj {is} 1 spesmilo, 10 spesmiloj, 100 spesmiloj
                    {print} Vi komencos per: antaŭmanĝaĵoj {at} {random}
                    {print} Then we'll serve: ĉefpladoj {at} {random}
                    {print} Kaj kiel deserto: desertoj {at} {random}
                    {print} You will get a trinkaĵoj {at} {random} por trinki
                    {print} Jen la totalo: prezoj {at} {random}
                    {print} Dankon kaj ĝuu vian manĝon!
                    ```
                story_text_2: |
                    Does your costumer have any allergies or do they dislike certain dishes? Then you can use the `{remove}`command to remove it from your menu.
                example_code_2: |
                    ```
                    {print} Mistera laktotrinkaĵo
                    ingrediencoj {is} frago, ĉokolado, vanilo
                    alergio {is} {ask} Ĉu vi estas alergia al iu ingredienco?
                    {remove} alergio {from} ingrediencoj
                    {print} Vi ricevas laktotrinkaĵon kun ingrediencoj {at} {random}
                    ```
            4:
                story_text: |
                    ### Exercise
                    Add the quotation marks to this code to make it work! Be careful: variables should not be in quotation marks.
                    Then, use the `{clear}` command to only show one line at a time in your output screen.

                    ### Exercise 2
                    Go back to the previous level and copy your restaurant code. Make the code work in this level by adding quotation marks in the right spots and add some `{clear}` commands.
                example_code: |
                    ```
                    _ Add the quotation marks to this code _
                    {print} Bonvenon al Restoracio Hedy!
                    {print} Hodiaŭ ni havas picon kaj lasanjojn.
                    manĝaĵo {is} {ask} Kion vi volas manĝi?
                    {print} Great choice! The  manĝaĵo  is my favorite!
                    topping {is} {ask} Would you like meat or veggies on that?
                    {print} manĝaĵo  with  topping  is on its way!
                    trinkaĵo {is} {ask} Kion vi volas trinki por via manĝo?
                    {print} Dankon pro via mendo.
                    {print} Your  manĝaĵo  and  trinkaĵo  will be right there!
                    ```
            5:
                story_text: |
                    In this level the {if} command allows you to {ask} your customers questions and give different responses to the answers.
                    In the example below, you see that you can {ask} the customer {if} they want to hear the specials and Hedy can respond accordingly.
                example_code: |
                    ```
                    {print} 'Bonvenon al Restoracio Hedy!'
                    special {is} {ask} 'Would you like to hear our specials today?'
                    {if} special {is} jes {print} 'Todays special is chicken piri piri and rice.' {else} {print} 'No problem.'
                    manĝaĵo {is} {ask} 'What would you like to eat?'
                    {print} 'Unu ' manĝaĵo ', coming right up!'
                    trinkaĵo {is} {ask} 'What would you like to drink with that?'
                    {if} trinkaĵo {is} cola {print} 'Im sorry, we are out of cola!' {else} {print} 'Great choice!'
                    anything {is} {ask} 'Would you like anything {else}?'
                    {print} 'Mi ripetos vian mendon…'
                    {print} 'Unu ' manĝaĵo
                    {if} trinkaĵo {is} cola {print} 'kaj…' {else} {print} 'Unu ' trinkaĵo
                    {if} anything {is} ne {print} 'Thats it!' {else} {print} 'Unu ' anything
                    {print} 'Dankon pro via mendo. Ĝuu vian manĝon!'
                    ```
            6:
                story_text: |
                    In this level you can use maths to calculate the total price of your customer's order, which can make your virtual restaurant more realistic.
                example_code: |
                    Vi povas verki simplan kodon por restoracio, jene:
                    ```
                    {print} 'Bonvenon al restoracio Hedy'
                    {print} 'Jen nia menuo:'
                    {print} 'Jen niaj ĉefpladoj: pico, lasanjoj aŭ spagetoj'
                    ĉefplado = {ask} 'Kiun ĉefpladon vi deziras?'
                    prezo = 0
                    {if} ĉefplado {is} pico prezo = 10
                    {if} ĉefplado {is} lasanjoj prezo = 12
                    {if} ĉefplado {is} spagetoj prezo = 8
                    {print} 'Vi mendis ' ĉefplado 'n'
                    {print} 'La prezo estas ' prezo ' spesmiloj'
                    {print} 'Dankon, ĝuu vian manĝon!'
                    ```
            7:
                story_text: |
                    En ĉi tiu nivelo, vi lernis kiel uzi la komandon `{repeat}` por ripeti linion da kodo iomfoje.
                    Vi povas uzi tion en via restoracio por demandi (per la komando `{ask}`) plurajn homojn pri iliaj mendoj jene:
                example_code: |
                    ```
                    {print} 'Bonvenon al Restoracio Hedy!'
                    homoj = {ask} 'Kiom da homoj manĝas ĉe ni hodiaŭ?'
                    {repeat} homoj {times} manĝaĵo = {ask} 'Kion vi volas manĝi?'
                    {print} 'Dankon pro via mendo! La manĝaĵo baldaŭ venos!'
                    ```
            8:
                story_text: |
                    In this level you can make your virtual restaurant more elaborate by repeating multiple lines of code. Like this:

                    ### Exercise
                    This code can be expanded with more items on the menu, for example offering drinks, and/or multiple courses or desserts. Add at least one more item.
                    **Extra** Add even more items, as many options as you like!
                example_code: |
                    ```
                    {print} 'Welcome to Restaurant Chez Hedy!'
                    people = {ask} 'How many people will be joining us today?'
                    {print} 'Great!'
                    {repeat} people {times}
                        food = {ask} 'What would you like to order?'
                        {print} food
                    {print} 'Thank you for ordering!'
                    {print} 'Enjoy your meal!'
                    ```
            9:
                story_text: |
                    In this level you can use nesting to make your restaurant more realistic and more fun!
                    For example you would {ask} for sauce {if} somebody orders fries, but you wouldn't {if} someone orders pizza!
                    Check out the example, and try this at your own virtual restaurant!
                example_code: |
                    ```
                    {print} 'Bonvenon al Restoracio Hedy!'
                    homoj = {ask} 'How many people will be joining us today?'
                    {print} 'Bonege!'
                    prezo = 0
                    {repeat} homoj {times}
                        manĝaĵo = {ask} 'What would you like to order?'
                        {print} manĝaĵo
                        {if} manĝaĵo {is} terpomfritoj
                            prezo = prezo + 3
                            saŭco = {ask} 'What kind of sauce would you like with your fries?'
                            {if} saŭco {is} sen
                                {print} 'sen saŭco'
                            {else}
                                prezo = prezo + 1
                                {print} 'kun ' saŭco
                        {if} manĝaĵo {is} pico
                            prezo = prezo + 4
                    {print} 'That will be ' prezo ' dollar'
                    {print} 'Ĝuu vian manĝon!'
                    ```
            10:
                story_text: |
                    En ĉi tiu nivelo, vi lernos kiel facile peti (per `{ask}`) la mendojn de viaj gastoj en mallonga kodo.
                example_code: |
                    ```
                    pladoj = entreo, ĉefplado, deserto
                    {for} plado {in} pladoj
                        manĝaĵo = {ask} 'Kion vi volas manĝi por via ' plado '?'
                        {print} manĝaĵo ' estos via ' plado
                    ```
                story_text_2: |
                    Kompreneble, vi ankaŭ povus mendi por pluraj homoj!
                example_code_2: |
                    ```
                    pladoj = entreo, ĉefplado, deserto
                    nomoj = Timoteo, Omaro
                    {for} nomo {in} nomoj
                        {for} plado {in} pladoj
                            manĝaĵo = {ask} nomo ', kion vi volas manĝi por via ' plado '?'
                            {print} nomo ' mendas ' manĝaĵo 'n por sia ' plado
                    ```
            11:
                story_text: |
                    Oni povas uzi `{for} i {in} {range} 1 {to} 5` por orde presi (kune kun `{print}`) la mendojn de pluraj klientoj.
                example_code: |
                    ```
                    {print} 'Bonvenon al Restoracio Hedy!'
                    homoj = {ask} 'For how many people would you like to order?'
                    {for} i {in} {range} 1 {to} homoj
                        {print} 'Mendo n-ro ' i
                        manĝaĵo = {ask} 'What would you like to eat?'
                        {print} manĝaĵo
                        {if} manĝaĵo {is} terpomfritoj
                            saŭco = {ask} 'What kind of sauce would you like with that?'
                            {print} saŭco
                        trinkaĵo = {ask} 'What would you like to drink?'
                        {print} trinkaĵo
                    prezo = 4 * homoj
                    {print} 'Jen ' prezo ' spesmiloj totale!'
                    ```
            12:
                story_text: |
                    En ĉi tiu nivelo, vi povas uzi decimalajn frakciojn por igi vian menuon pli realeca.
                example_code: |
                    ```
                    prezo = 0
                    manĝaĵo = {ask} 'Kion vi volas mendi?'
                    trinkaĵo = {ask} 'Kion vi volas trinki?'
                    {if} manĝaĵo {is} 'hamburgero'
                        prezo = prezo + 6.50
                    {if} manĝaĵo {is} 'pico'
                        prezo = prezo + 5.75
                    {if} trinkaĵo {is} 'akvo'
                        prezo = prezo + 1.20
                    {if} trinkaĵo {is} 'sodakvo'
                        prezo = prezo + 2.35
                    {print} 'Bonvolu pagi ' prezo ' spesmilojn'
                    ```
            13:
                story_text: |
                    In this level we can use the new commands to upgrade our restaurant.
                    We use `{and}` to see {if} two things are both the case.
                example_code: |
                    ```
                    prezo = 10
                    manĝaĵo = {ask} 'Kion vi volas manĝi?'
                    trinkaĵo = {ask} 'Kion vi volas trinki?'
                    {if} manĝaĵo {is} 'sandviĉo' {and} trinkaĵo {is} 'suko'
                        {print} 'Jen nia rabatmenuaĵo'
                        prezo = prezo - 3
                    {print} 'La totalo estas ' prezo ' spesmiloj'
                    ```
            15:
                story_text: |
                    Per la `{while}` vi povas certigi, ke viaj klientoj povas mendadi ĝis ili finiĝos.

                    ### Exercise
                    Correctly add the `{while}` command to this code.
                example_code: |
                    ```
                    {print} 'Bonvenon al McHedy'
                    pli = 'jes'
                    _
                        mendo = {ask} 'Kion vi volas mendi?'
                        {print} mendo
                        pli = {ask} 'Ĉu vi volas mendi ion pli?'
                    {print} 'Dankon!'
                    ```
    rock:
        name: Roko, papero, tondilo
        default_save_name: Roko
        description: Faru vian propran ludon de roko, papero kaj tondilo
        levels:
            1:
                story_text: |
                    En Nivelo 1, vi komencu per la ludo «roko, papero, tondilo».

                    Per `{ask}` oni povas fari elekton, kaj per `{echo}` oni povas ripeti tiun elekton.
                example_code: |
                    ```
                    {print} kion vi elektas?
                    {ask} elektu el roko, papero aŭ tondilo
                    {echo} do via elekto estis:
                    ```
                    Anstataŭ vortoj, vi ankaŭ povus uzi vinjetosignojn kompreneble: ✊✋✌
                story_text_2: |
                    ### Exercise
                    Instead of using words, you could also use emojis: ✊✋✌
                    Can you create a code using emojis?
                example_code_2: |
                    ```
                    {print} what do you choose?
                    {ask} choose from _
                    {echo} so your choice was:
                    ```
            2:
                story_text: |
                    En ĉi tiu nivelo, vi povas praktiki uzi la variablojn, por ke vi povu fari la ludon de roko, papero kaj tondilo en la sekva nivelo!
                example_code: |
                    ```
                    elekto {is} _
                    {print} Mi elektas elekto
                    ```
            3:
                story_text: |
                    En ĉi tiu nivelo ni povas eniri listojn kaj elekti aferojn el ili.
                    Vi unue faru liston per `{is}`. Tiam vi povas lasi la komputilon elekti ion el la listo per `{at} {random}`.
                    Ekzemple, vi povas lasi la komputilon elekti el roko, papero kaj tondilo.
                example_code: |
                    ```
                    elektoj {is} roko, papero, tondilo
                    {print} elektoj {at} {random}
                    ```
                story_text_2: |
                    ### Exercise
                    Now you only have one player, so can you add a second player?
                    You can even use variables to name player 1 and player 2.
                example_code_2: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} player 1 chooses... choices {at} {random}
                    {print} player 2 _
                    ```
            4:
                story_text: |
                    In this level we can further program rock, paper, scissors. But if you want to add text, you have to use quotation marks here too.
                    ### Exercise
                    Fill in quotation marks on the blanks. Mind that the variable `choices` should be outside the quotes.
                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} _The computer chooses..._ choices {at} {random}
                    ```
            5:
                story_text: |
                    En ĉi tiu nivelo ni povas determini kiu venkis.
                    Por tio vi bezonas la novan kodon `{if}`.

                    Konservu vian elekton kun la elektonomo kaj la elekto de komputilo kiel komputila elekto.
                    Tiam vi povas uzi `{if}` por vidi {if} ili estas samaj aŭ malsamaj.
                    Ĉu vi finos la kodon?
                example_code: |
                    ```
                    opcioj {is} roko, papero, tondilo
                    komputila_elekto {is} _
                    elekto {is} {ask} 'Kion vi elektas?'
                    {print} 'vi elektis' _
                    {print} 'komputilo elektis' _
                    {if} _ {is} _ {print} 'vana partio!' {else} {print} 'nevana partio'
                    ```

                    Plenigu la ĝustan kodon en la spacoj por kontroli, ĉu la partio estas vana.
            9:
                story_text: |
                    En ĉi tiu nivelo, vi povas programi la tutan ludon de roko, papero kaj tondilo ingante la {if}-komandojn. Ĉu vi povas fini la kodon?
                example_code: |
                    ```
                    elektoj = roko, papero, tondilo
                    via_elekto = {ask} 'Kion vi elektas?'
                    {print} 'Vi elektas ' via_elekto 'n'
                    komputila_elekto = elektoj {at} {random}
                    {print} 'La komputilo elektas ' komputila_elekto 'n'
                    {if} komputila_elekto {is} via_elekto
                        {print} 'Vana partio'
                    {if} komputila_elekto {is} roko
                        {if} via_elekto {is} papero
                            {print} 'Vi gajnas!'
                        {if} via_elekto {is} tondilo
                            {print} 'Vi malgajnas!'
                    # finu ĉi tiun kodon
                    ```
            10:
                story_text: |
                    Ĉu vi estas tro maldiligenta por ludi la ludon mem? Lasu Hedy ludi ĝin por vi!
                example_code: |
                    ```
                    elektoj = roko, papero, tondilo
                    ludantoj = Margareto, Miĥaelo
                    {for} ludanto {in} ludantoj
                         {print} ludanto ' elektas la jenon: ' elektoj {at} {random}
                    ```
            13:
                story_text: |
                    Per la komando `{and}`, vi povas mallongigi vian kodon por la ludo! Rigardu la jenan ekzemplokodon kaj provu kompletigi ĝin.
                example_code: |
                    ```
                    opcioj = 'rock', 'paper', 'scissors'
                    your_choice = {ask} 'What do you choose?'
                    computer_choice = opcioj {at} {random}
                    {print} 'You choose ' your_choice
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'paper'
                        {print} 'Vi gajnas!'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'scissors'
                        {print} 'La komputilo gajnas!'
                    ```
            15:
                story_text: |
                    ### Exercise
                    Ludu ĝis vi gajnos! Sed unue, kompletigu la ekzemplan kodon…
                example_code: |
                    ```
                    gajnis = 'ne'
                    opcioj = 'roko', 'papero', 'tondilo'
                    {while} gajnis == 'ne'
                        via_elekto = {ask} 'Kion vi elektas?'
                        komputila_elekto = opcioj {at} {random}
                        {print} 'vi elektis ' via_elekto 'n'
                        {print} 'la komputilo elektis ' komputila_elekto 'n'
                        {if} komputila_elekto == via_elekto
                            {print} 'Vana partio!'
                        {if} komputila_elekto == 'roko' {and} via_elekto == 'tondilo'
                            {print} 'Vi perdas la partion!'
                        {if} komputila_elekto == 'roko' {and} via_elekto == 'papero'
                            {print} 'Vi gajnas la partion!'
                            gajnis = 'jes'
                    ```
    rock_2:
        name: Rock, paper, scissors 2
        default_save_name: rock_2
        description: Part 2 of rock, paper, scissors
        levels:
            2:
                story_text: |
                    Now that you have learned how to use the `{ask} command, you can make your rock, paper, scissors code interavtive too!

                    ### Exercise
                    Make the rock, paper, scissors code interactive by adding the `{ask}` command and a question to your rock, paper, scissors code.
                example_code: |
                    ```
                    choice is _
                    {print} I choose choice
                    ```
    secret:
        name: Superspiono
        default_save_name: Superspiono
        description: Faru vian propran spionkodon
        levels:
            12:
                story_text: |
                    En ĉi tiu aventuro, vi povas krei vian propran superspionkodon. Kodu mesaĝon, kiun nur la ĝusta agento povas deĉifri.
                    Se la malamiko provos solvi la kodon, ili ricevos falsajn informojn por malŝpari sian tempon.
                example_code: |
                    ```
                    nomo = {ask} 'Kio estas via nomo?'
                    {if} nomo {is} 'Agento007'
                        a = 'Iru al la flughaveno '
                    {else}
                        a = 'Iru al la stacidomo '
                    pasvorto = {ask} 'Kio estas la pasvorto?'
                    {if} pasvorto {is} 'SEKRETO'
                        b = 'morgaŭ je la 2a horo'
                    else
                        b = 'hodiaŭ je la 10a horo'
                    {print} a + b
                    ```
            13:
                story_text: |
                    La kodo, kiun vi faris en la antaŭa nivelo, estas simpligebla en ĉi tiu nivelo per la komando `{and}`.
                example_code: |
                    ```
                    nomo = {ask} 'Kio estas via nomo?'
                    pasvorto = {ask} 'Kio estas via pasvorto?'
                    {if} nomo {is} 'Agento007' {and} pasvorto {is} 'SEKRETO'
                        {print} 'Iru al la flughaveno je la 2a horo'
                    {else}
                        {print} 'Iru al la stacidomo je la 10a horo'
                     ```
    simon:
        name: Simon Says
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    Let's make a game of Simon Says! Simon Says is a memory game in which the player will be given a color. They have to repeat that color back.
                    If they get it right a color is added to the sequence, so they now have to remember 2 colors, then 3, then 4 etc. the game stops as soon as the player makes a mistake.

                    ### Exercise
                    In this first part of the Simon Says adventure, we'll let the computer pick a random color and add it to a list.

                    ***Make 2 lists*** First, make a list called `colors` and fill it with the colors red, yellow, green and blue.
                    Then make a list called `simon_sequence`. This list will be used as the answer.
                    At the start of the game this lists need to be empty. unfortunately, we can't create an empty list (yet), so we'll fill it with the words 'empty' and 'list' and we'll remove them from the list immediately.

                    ***Create a function that adds a color to the sequence*** Now that we have an empty list called simon_sequence, we can start filling it with random colors.
                    We do that with a function, so we can call it everytime there's a new level in our game. Create a function called `add_random_color`.
                    Then create the variable random_color and set it to a random color. Next, add this random color to the simon_sequence.

                    ***Create a function that shows the simon_sequence*** Start by naming the new function `show_simon_sequence` with `level` as an argument. Now we want to show as many colors as the level we are in (in level 1 you see 1 color, in level 2 you see 2 colors etc).
                    So we repeat `level` times, to print the `simon_sequence[i]`. Each time a color is shown, wait for 1 second and then clear the screen.

                    ***Test your program*** Before you go to the next level, test if the functions are working by calling both of the functions. If they're working you should see a random color in your output screen.
                    Remove this testing part of your code, copy the code and continue to the next tab to learn more about the simon says game!
                example_code: |
                    ```
                    # Make 2 lists
                    colors = _
                    _ = ['empty', 'list']
                    {remove} _ {from} simon_sequence
                    {remove} _

                    # Create a function that adds a color
                    _ add_random_color
                        _
                        {add} _

                    # Create a function that shows the simon_sequence
                    {define} _
                        {for} i {in} {range} 1 {to} _
                            {print} _
                            _
                            _

                    # Test your program
                    {call} _
                    {call} show_simon_sequence {with} 1
                    ```
    simon_2:
        name: Simon Says 2
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    We'll continue with our Simon Says game!

                    ### Exercise
                    ***Paste your code here*** Paste your code from the previous level here. Don't forget to remove the part that was just used for testing the functions.

                    ***Create a function that creates the player_sequence*** The list `player_sequence` is used to capture the answers of the player. First we define the function with the argument level.
                    Next, we ask level times what the color is that they choose. We call that variable `answer`. Then we add the variable `answer` to the list player_sequence.

                    ***Setting up the game*** Before we program the game in the next tab, we'll need some starting variables. First, we'll set the variable `level` to 1 and the variable `game_over` to False.
                    Then we make an introduction for the game. We'll print 'Welcome to Simon Says!' and clear the screen after 1 second.

                    ***Continue to the next tab to finish the game!**** Don't forget to copy your code and take it with you to the next tab.
                example_code: |
                    ```
                    # Paste your code here


                    # Create a function that creates the player_sequence
                    {define} _
                        {for} _
                            _ 'What is color number ' i '?'
                            {add} answer {to} _

                    # Set up
                    level = _
                    game_over = _
                    {print} _
                    _ 1
                    _
                    ```
    simon_3:
        name: Simon Says 3
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    In this tab we'll program the game of Simon Says!

                    ### Exercise
                    ***Paste your code*** Copy your code from the previous tab and paste it here.

                    ***Program the game*** We start by making sure the game goes on while the game isn't over. Then we print what level the player is on, we use the variable level for that. We only show that for 1 second and then we clear the screen again.
                    Now, we have to create the empty list player_sequence. We've already programmed how to fill the list, with our function `player_sequence`, but we never made the list itself. To create the list we use the same trick as we did in the previous tab.
                    We'll make a list with the words 'empty' and 'list' on it, and then we remove both these words. Next, we'll call all of the 3 functions that we've created.
                    Lastly, we'll have to check if the player gave the correct answers (so if the player_sequence and the simon_sequence are the same).
                    If that's the case, we'll compliment the player. Wait for 1 second and increase the level with 1.
                    Did the player give the wrong answer, we'll tell them and end the game by setting game_over to 'True'

                    ***Enjoy your game!*** Great job! Does your game not work? Use the ladybug button to debug your code!
                example_code: |
                    ```
                    # Paste your code here

                    # The game
                    {while} game_over _
                        {print} _
                        _
                        _
                        _ = ['empty', 'list']
                        {remove} _
                        {remove} _
                        {call} _
                        {call} _ {with} _
                        {call} _ {with} _
                        {if} player_sequence == _
                            _
                            _
                            _
                        {else}
                            _
                            game_over = _
                    ```
    sleep_command:
        name: '{sleep}'
        default_save_name: sleep_command
        description: introducing sleep command
        levels:
            2:
                story_text: |
                    ## The sleep command
                    Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.
                example_code: |
                    ```
                    {print} My favorite colour is...
                    {sleep} 2
                    {print} green!
                    ```
    songs:
        name: Kantu!
        default_save_name: Kanto
        description: Presi kanton
        levels:
            6:
                story_text: |
                    Kantoj ofte enhavas multe da ripetado. Foje la ripeto ankaŭ baziĝas sur kalkulado.
                    Ekzemple, en la konata kanto 'Boteloj da biero'. Vi povas programi tiun kanton per iom da matematiko.
                example_code: |
                    ```
                    nombro = 99
                    {print} nombro ' boteloj da biero sur la muro'
                    {print} nombro ' boteloj da biero'
                    {print} 'Prenu unu, ĝuu ĝin kune'
                    nombro = nombro - 1
                    {print} nombro ' boteloj da biero sur la muro'
                    ```

                    Vi nun povas ripeti liniojn 2 ĝis 6 tiom da fojoj, kiom vi volas, kopiante la liniojn.
                story_text_2: |
                    This children's song counts down from 5 little monkeys to 1 monkey.
                    If you copy line 2 - 7 and paste it under the the code, you can sing the whole song!
                example_code_2: |
                    ```
                    number = 6
                    number = number - 1
                    print number ' little monkeys jumping on the bed'
                    print 'One fell off and bumped his head'
                    print 'Mama called the doctor and the doctor said'
                    print 'NO MORE MONKEYS JUMPING ON THE BED!'
                    sleep
                    ```
            7:
                story_text: |
                    Kantoj ofte enhavas multe da ripetaĵojn. Ekzemple… Ŝarkido! Se vi kantas ĝin, vi ripete kantas la samajn vortojn:

                    Ŝarkido tututudutudu <br>
                    Ŝarkido tututudutudu <br>
                    Ŝarkido tututudutudu <br>
                    Ŝarkido

                    Vi povas malplilongigi la kanton per `{repeat}`! Ĉu vi povas kompletigi la kodon?
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Ŝarkido tututudutudu'
                    {print} 'Ŝarkido'
                    ```

                    Post Ŝarkido, vi povas programi aliajn kantojn. Ekzistas multaj kantoj enhavantaj ripetaĵojn.
            8:
                story_text: |
                    En antaŭa nivelo vi programis la kanton 'Boteloj da biero'. Vi faris unu verson kaj tiam devis kopii la versojn 99 fojojn. En la nivelo 7 vi povas ripeti la kanton 99 fojojn, nur aldonante unu simplan linion!
                example_code: |
                    ```
                    nombro = 99
                    {repeat} 99 {times}
                        {print} nombro ' boteloj da biero sur la muro'
                        {print} nombro ' boteloj da biero'
                        {print} 'Prenu unu, ĝuu ĝin kune'
                        nombro = nombro - 1
                        {print} nombro ' boteloj da biero sur la muro'
                    ```
            10:
                story_text: |
                    En ĉi tiu nivelo vi povas facile fari la infanan kanton "Kvin simietoj". Ĉu vi povas fari la lastan koruson?
                    Vi ankaŭ povas fari la tutan beban ŝarkan kanton (inkluzive de ĉiuj aliaj ŝarkoj en la familio) en nur 6 linioj!
                    Aŭ vi povas fari Old MacDonald kun ĉiuj malsamaj bestoj.
                example_code: |
                    ```
                    simioj = 5, 4, 3, 2
                    {for} simio {in} simioj
                        {print} simio ' simietoj saltantaj sur la lito'
                        {print} 'Oni defalis kaj vundis sian kapon'
                        {print} 'Panjo vokis la kuraciston, kiu diris:'
                        {print} 'SIMIOJ NE SALTU SUR LA LITO!'
                    ```

                    ```
                    ŝarkoj = ŝarkido, panjo, paĉjo, avinjo, avĉjo
                    {for} ŝarko {in} ŝarkoj
                        {print} ŝarko 'tututututudu'
                        {print} ŝarko 'tututututudu'
                        {print} ŝarko 'tututututudu'
                        {print} ŝarko
                    ```
                    ```
                    bestoj = porko, hundo, bovo
                    {for} besto {in} bestoj
                        {if} besto {is} porko
                            sono = grunt
                        {if} besto {is} hundo
                            sono = boj
                        {if} besto {is} bovo
                            sono = muĝ
                        {print} 'Maljuna MacDonald havis bienon'
                        {print} 'I Aj I Aj O!'
                        {print} 'kaj en la bieno estis ' besto
                        {print} 'I Aj I Aj O!'
                        {print} 'kun ' sono sono ' ĉi tie'
                        {print} 'kaj ' sono sono ' tie'
                        {print} 'jen ' sono
                        {print} 'aliloke ' sono
                        {print} 'ĉie ' sono sono
                    ```
                story_text_2: |
                    ### Exercise 2
                    Print the song Five little moneys jumping on the bed. Look up the text if you don't remember.

                    **(extra)** Print the song Old MacDonald had a farm, and make sure all animals make a different sound, using an `{if}`.
                example_code_2: |
                    ```
                    monkeys = 5, 4, 3, 2, 1
                    ```
            11:
                story_text: |
                    En ĉi tiu nivelo, oni povas uzi la komandon `{for} i {in} {range}` por fari kantojn, kiuj uzas kalkuladon.
                example_code: |
                    ```
                    {for} i {in} {range} 5 {to} 1
                        {print} i 'simietoj saltantaj sur la lito'
                        {print} 'Iu defalis kaj vundis sian kapon'
                        {print} 'Panjo vokis la kuraciston, kiu diris'
                        {if} i {is} 1
                            {print} 'ENLITIGU TIUJN SIMIOJN!'
                        {else}
                            {print} 'SIMIOJ NE SALTU SUR LA LITO!'
                    ```
            12:
                story_text: |
                    En ĉi tiu kanto, oni povas eĉ pli facile programi «se vi estas feliĉa kaj vi scias ĝin, frapu la manojn», ĉar oni povas meti ĉiujn agojn en unu variablon jene:<!--{if}-->
                example_code: |
                    ```
                    agoj = 'frapu manojn', 'frapu piedojn', 'kriu «hura!»'
                    {for} ago {in} agoj
                        {for} mi {in} {range} 1 {to} 2
                            {print} 'se vi feliĉas kaj scias tion'
                            {print} ago
                        {print} 'se vi feliĉas kaj scias tion kaj vi volas montri tion'
                        {print} 'se vi feliĉas kaj scias tion'
                        {print} ago
                    ```
            13:
                story_text: |
                    In the previous adventure you have learned how to use an argument in a function, but did you know that you could combine them with {ask} commands as well?
                    In this example we have changed the 'My Bonnie' program and made it interactive. You are now asked where Bonnie is.
                example_code: |
                    ```
                    {define} song {with} place
                        {print} 'My Bonnie is ' place

                    chosen_place = {ask} 'Where do you want Bonnie to be?'
                    synonym = {ask} 'What is another word for that?'

                    {call} song {with} chosen_place
                    {call} song {with} synonym
                    {call} song {with} chosen_place
                    ```
            16:
                story_text: |
                    En ĉi tiu nivelo, vi povas programi kanton kiel OldMacDonald eĉ pli rapide. Vi povas konekti la ĝustan beston al la ĝusta sono simple metante ilin en la sama loko en la listo.
                    La Ebria Maristo ankaŭ estas rapide farita en ĉi tiu nivelo. Vi nur bezonas 8 liniojn por la tuta kanto, kontrolu ĝin!
                example_code: |
                    ```
                    bestoj = ['porko', 'hundo', 'bovo']
                    sonoj = ['oink', 'woof', 'muĝ']
                    {for} i {in} {range} 1 {to} 3
                        besto = _
                        sono = _
                        {print} 'Old MacDonald had a farm'
                        {print} 'E I E I O!'
                        {print} 'and on that farm he had a ' besto
                        {print} 'E I E I O!'
                        {print} 'with a ' sono sono ' here'
                        {print} 'and a ' sono sono ' there'
                        {print} 'here a ' sono
                        {print} 'there a ' sono
                        {print} 'everywhere a ' sono sono
                    ```

                    ```
                    linioj = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} linio {in} linioj
                        {for} i {in} {range} 1 {to} 3
                            {print} linio
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
            18:
                story_text: |
                    In level 16 we made songs using lists. These programs however are no longer working properly in this level. The colons from level 17 and the brackets from level 18 still need to be added.

                    ### Exercise 1
                    The Drunken sailor song is given as sample code, but not yet working.
                    Can you make sure everything works again? To help you, we've put _ in the places of _some_ errors.

                    ### Exercise 2
                    Now also look up your Old MacDonald song from level 16, and correct it.
                example_code: |
                    ```
                    lines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} line {in} lines _
                        {for} i {in} {range} 1 {to} 3 _
                            {print} _ line _
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
    songs_2:
        name: Sing a song! 2
        default_save_name: Song 2
        description: Sing a song 2
        levels:
            12:
                story_text: |
                    Songs contain a lot of repetition. We can capture it with a function!
                    ### Exercise
                    Look at the example code with the function. Fill out the two lines so the full song is printed.
                example_code: |
                    ```
                    {define} twinkle
                        {print} 'Twinkle'
                        {print} '...'

                    {call} twinkle
                    {print} 'Up above the world so high'
                    {print} 'Like a diamond in the sky'
                    {call} _
                    ```
            16:
                story_text: |
                    ### Exercise
                    Finish the nursery rhyme!
                example_code: |
                    ```
                    number = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
                    object = ['on his drum', 'on his shoe', 'on his knee', 'on his door', 'on his hive', 'on his sticks', 'up in heaven', 'on his gate', 'on his vine', 'once again']

                    _
                        {print} 'This old man'
                        {print} 'He played ' _
                        {print} 'He played knick-knack ' _
                        {print} 'With a knick-knack paddywhack'
                        {print} 'Give the dog a bone'
                        {print} 'This old man came rolling home'
                        {sleep} 8
                        {clear}
                    ```
                story_text_2: |
                    ### Exersice 2
                    Now create your own code for the nursery rhyme 'The wheels on the bus' on the same way!
                example_code_2: |
                    ```
                    object = ['wheels', 'doors', _]
                    movement = [ 'round and round', 'open and shut', _]
                    ```
    tic:
        name: Tic-Tac-Toe
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    Let's program a game of tic-tac-toe!

                    ### Exercise
                    In this adventure we'll start with creating an empty field.

                    ***Create a list called field*** This list will be our playing field. This list is filled with 9 dots, since there are no x's and o's yet at the start of our game.

                    ***Create a function that prints the field*** Firstly, clear the screen so the old playing fields will be removed. Then we print the first line of our Tic Tac Toe field. This line constists of the first 3 spots in our list field.
                    We have already programmed this line for you. Now finish the field by printing spot 4, 5, and 6 on the second row and spot 7, 8 and 9 in the third row.

                    ***Call the function that prints the field*** Now call the function.
                    <div class="w-full flex flex-row gap-2">
                        Run the code. Your output should look like this: <img src="https://github.com/hedyorg/hedy/assets/80678586/bcbd156e-4b48-4e82-84ae-f86d21b0cbcc" width="100">
                    </div>

                    ***Continue in the next tab*** In the next tab you'll learn how to program the game itself.
                example_code: |
                    ```
                    # Create a list called field
                    _ = ['.', '.', '.', '.', '.', '.', '.', '.', '.']

                    # Create a function that prints the field
                    {define} print_field
                        _
                        {print} 'TIC TAC TOE'
                        {print} field[1] field[2] field[3]
                        _
                        _

                    # Call the function
                    ```
            17:
                story_text: |
                    In the previous level you've learned how to make a tic-tac-toe game. The game works, but is quite annoying as it keeps asking you if you've won yet.
                    Now that we have the {elif} command, we can let the game decide if someone has won and it can stop asking us!

                    ### Exercise
                    ***Paste your code*** Paste your code from the previous level here and make it level 17 proof. In this level you've learned to use a colon everytime you create a block of code. Please add the colons in the correct spots.

                    ***Create a function that detects if someone's won*** We have started the function for you, paste it under the function `print_field` and finish the function. You can see that this first piece of code checks to see if spot 1, 2 and 3 are the same, because if they are you have 3 in a row.
                    It also checks if they are not a dot, because if they are, the line might have the same symbols on them, but that's just because it's still empty.
                    If all these conditions are met, the game is over and the winner is printed.
                    Finish this function with all possible ways to win. This means you have to make this for the other 2 rows, 3 columns and 2 diagonals.
                    If you've finished all the other options, the function should return the variable `game_over` so we can use it in our game.

                    ***Call the function in the game*** Go to the line `game_over = {ask} 'Did you win?'` and change it to `game_over = {call} detect_winner {with} field, sign`. Now the function will check if there's a winner and the game doesn't need to keep asking anymore!

                    ***Enjoy your game!*** Great job! You have finished the game! Enjoy playing it!

                example_code: |
                    ```
                    # Paste your code here and make it level 17 proof

                    # Create a function that detects if someone has won
                    {define} detect_winner {with} field, sign:
                        {if} field[1] == field[2] {and} field[2] == field[3] {and} field[1] != '.':
                            game_over = 'yes'
                            {print} 'Player ' sign 'wins!'
                        {elif}:
                            _
                        {else}:
                            game_over = 'no'
                    {return} _
                    ```
    tic_2:
        name: Tic-Tac-Toe 2
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    In the previous adventure you've learned how to create a playing field. Now you'll learn how to create the game!

                    ### Exercise
                    ***Paste your code*** Start by pasting your code from the previous adventure here.

                    ***Add variables*** Underneath your list called `field` we'll add 2 more variables that we'll need to program the game.
                    The variable `game_over` tells us if the game is over, and should be 'no' at the start of the game.
                    The variable `sign` tells us if it's the turn of player x or player o. Set the variable to 'x'.

                    ***The game*** First use a {while} command, to make sure the game keeps on playing the variable while game_over is set to no.
                    During the game, we first ask the player which spot they choose. Then we change the field with the number they chose into their sign.
                    Then we print the field again and we ask the player if they've won yet. Lastly we want to switch whose turn it is, so if the sign is 'x' it should be 'o' and the other way around.

                    ***Test your game*** Does your game work? Great, have fun playing the game! If not, use the ladybug button to debug your code.
                    You might have noticed one mistake in the code though, you can steal the other player's spot! If the other person chose spot 1, you could simply enter 1 after them and steal their spot.
                    That's not fair! Go to the next tab to learn how to fix this problem.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Add variables
                    game_over = _
                    sign = _

                    # The game
                    {while} _
                        choice = _ 'Player ' sign '_?'
                        field[choice] = _
                        _ print_field
                        game_over = {ask} _
                        {if} sign = 'o'
                            sign = _
                        _
                            sign = _
                    ```
    tic_3:
        name: Tic-Tac-Toe 3
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    You might have noticed one mistake in the code you've made in the previous adventure. You can steal the other player's spot! If the other person chose spot 1, you could simply enter 1 after them and steal their spot.
                    That's not fair! In this tab we'll fix that mistake.

                    ### Exercise
                    ***Paste your code here*** Paste your code from the previous adventure here.

                    ***Fix the mistake*** To fix the mistake we replace the line that says `field[choice] = sign`. This turns any spot that the player has chosen into their sign.
                    Go to the header that says 'Use this to fix the mistake' and finish the code. We first want to check if the chosen spot is still empty, so `if field[choice] = '.'`. If that is the case, you are allowed to take it.
                    Then we make an else command and print 'Sorry, this spot is already taken' if the spot is not empty. Lastly, we add a {sleep} command, so the players can actually read the text before it gets cleared again.
                    Now copy this piece of code and replace the line `field[choice] = sign` with this new piece of code.

                    ***Play your game!*** Now the game should work properly! Good job!
                    The only flaw is that you can get a bit annoyed that the game keeps asking you if you've won yet. Do you want to fix that? Go to level 17 and we'll fix it!
                example_code: |
                    ```
                    # Paste your code here

                    # Use this to fix the mistake
                    {if} _ = '.'
                        field[choice] = sign
                    {else}
                        {print} _
                        _
                    ```
    turtle:
        name: Testudo
        default_save_name: Testudo
        description: Faru vian propran desegnaĵon
        levels:
            1:
                story_text: |
                    Vi ankaŭ povas uzi Hedy por desegni. Kombinante turnojn kaj liniojn, vi povas fari kvadraton aŭ ŝtuparon!

                    Per `{forward}` oni desegnas linion antaŭen. La nombro malantaŭ ĝi determinas kiom longe la testudo marŝos. `{turn} {right}` turnas la testudon kvaronturnon horloĝdirekte; `{turn} {left}`{left}` turnas la testudon kontraŭhorloĝe.
                    Se vi volas iri malantaŭen, uzu la komandon `{forward}` kun negativa nombro. Do ekzemple, `{forward} -100`
                example_code: |
                    ```
                    {forward} 100
                    {turn} {left}
                    ```
                story_text_2: |
                    ### Exercise
                    Jen la komenco de eta ŝtuparo. Ĉu vi povas igi ĝin havi 5 ŝtupojn?
                example_code_2: |
                    ```
                    {forward} 20
                    {turn} {right}
                    {forward} 20
                    {turn} {left}
                    {forward} 20
                    ```
            2:
                story_text: |
                    En ĉi tiu nivelo vi povas uzi variablojn por fari la testudon interaga. Ekzemple vi povas demandi al la ludanto kiom da paŝoj devas fari la testudo.
                example_code: |
                    ```
                    respondo {is} {ask} Kiom da paŝoj faru la testudo?
                    {forward} respondo
                    ```
                story_text_2: |
                    Ankaŭ, en nivelo 1 la testudo povis nur turni maldekstren aŭ dekstren. Tio estas iom enuiga!
                    En nivelo 2 li povas direkti sian nazon en ĉiuj direktoj.

                    Uzu 90 por turni kvaronon. Ni nomas ĉi tion gradoj. Plena turniĝo estas 360 gradoj.
                    Ĉu vi povas fari figuron kun ĉi tiu kodo? Eble triangulo aŭ cirklo?
                example_code_2: |
                    ```
                    {print} Desegnante figurojn
                    angulo {is} 90
                    {turn} angulo
                    {forward} 25
                    {turn} angulo
                    {forward} 25
                    ```
            3:
                story_text: |
                    En ĉi tiu nivelo, oni povas uzi `{at} {random}` kun la desegnanta testudo. Hazarda elekto igas la testudon marŝi laŭ malsamaj vojoj ĉiufoje.
                    Uzu `{at} {random}` por elekti valoron el listo. Vi povas kopii kaj alglui liniojn 2 kaj 3 por krei pli longan hazardan vojon.
                example_code: |
                    ```
                    anguloj {is} 10, 50, 90, 150, 250
                    {turn} anguloj {at} {random}
                    {forward} 25
                    ```
            4:
                story_text: |
                    En Nivelo 4, oni devas uzi citilojn kun `{print}` kaj `{ask}`. Ankaŭ dum desegnado!
                example_code: |
                    ```
                    {print} 'Desegnante figurojn'
                    angulo {is} 90
                    {turn} angulo
                    {forward} 25
                    {turn} angulo
                    {forward} 25
                    ```
                story_text_2: |
                    You can also change the color of the lines with the command `{color}`. Check out the example.
                    You can also use the command `{color} {white}` to make 'invisible' lines. You could use these white lines to move the turtle anywhere in the screen before you start drawing.
                example_code_2: |
                    ```
                    {color} {white}
                    {forward} -80
                    {color} {green}
                    {forward} 50
                    {color} {yellow}
                    {forward} 50
                    {color} {red}
                    {forward} 50
                    ```
            5:
                story_text: |
                    En Nivelo 5, oni povas fari elekton per `{if}`. Ekzemple, inter diversaj specoj de figuroj.
                example_code: |
                    ```
                    {print} 'Desegnante figurojn'
                    figuro {is} {ask} 'Ĉu vi deziras kvadraton aŭ triangulon?'
                    {if} figuro {is} triangulo angulo {is} 120
                    {else} angulo {is} 90
                    {turn} angulo
                    {forward} 25
                    {turn} angulo
                    {forward} 25
                    {turn} angulo
                    {forward} 25
                    {turn} angulo
                    {forward} 25
                    ```
                story_text_2: |
                    ### Exercise
                    Fill in the correct numbers in this code to get it to work.
                    After you've done that, you can try to add the option backwards.

                    **Extra** Instead of using 'left' and 'right', remake the program with North, East, South and West.
                    This way you could add even more directions like Northeast and Southwest etc.
                example_code_2: |
                    ```
                    direction {is} {ask} 'Do you want to go left, right, or straight ahead?'
                    if direction is left turn _
                    if direction is right turn _
                    forward 100
                    ```
            6:
                story_text: |
                    En ĉi tiu nivelo vi povas uzi kalkulojn por desegni malsamajn figurojn.
                    Vi eble lernis en la lernejo, ke turni plenan cirklon estas 360 gradoj. Se ne, nun vi scias!
                    Tial vi ankaŭ uzas 90 gradojn por kvadrato. 360 dividita per 4 estas 90.
                    Nun kiam ni povas fari matematikon kun Hedy, ni povas desegni ĉiujn figurojn, kiujn ni volas!
                example_code: |
                    ```
                    anguloj = {ask} 'Kiom da anguloj vi deziras?'
                    angulo = 360 / anguloj
                    {forward} 50
                    {turn} angulo
                    {forward} 50
                    {turn} angulo
                    {forward} 50
                    {turn} angulo
                    {forward} 50
                    {turn} angulo
                    {forward} 50
                    {turn} angulo
                    {forward} 50
                    {turn} angulo
                    ```
            8:
                story_text: |
                    Nun ni povas ripeti plurajn liniojn; tial ni povas fari figurojn pli facile.
                    Ni devas nur unufoje agordi la angulon kaj poste uzi tiun variablon en la `{repeat}`.
                example_code: |
                    ```
                    angulo = 90
                    {repeat} 10 {times}
                        {turn} angulo
                        {forward} 50
                    ```
                story_text_2: |
                    Ankaŭ ni nun povas plibonigi la programon, kiu desegnas malsamajn figurojn.
                    Ĉu vi povas eltrovi kiom malproksimen la testudo devas turni ĉi tien? Finu la kodon kaj vi povas desegni ajnan plurangulon, kiun vi ŝatus!
                example_code_2: "```\nanguloj = {ask} 'Kiom da anguloj mi desegnu?'\nangulo = 360 / anguloj \n{repeat} anguloj {times}\n    {turn} _\n    {forward} _\n```\n"
            9:
                story_text: |
                    Now that we can use a `{repeat}` inside a `{repeat}`, we can create more complex figures.

                    ### Exercise 1
                    This code creates three black triangles, change that into five pink squares.

                     **(extra)** Create a figure of your own choosing consisting of at least two different shapes types.
                example_code: |
                    ```
                    {color} {black}
                    {repeat} 3 {times}
                        {repeat} 3 {times}
                            {forward} 10
                            {turn} 120
                        {color} {white}
                        {forward} 50
                        {color} {black}
                    ```
            10:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.
                    ### Exercise 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                     **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!
                    ### Exercise 2
                    The spiral is drawn outwards, make it go inwards?
                example_code: |
                    ```
                    {turn} 90
                    distances = 10, 20, 30, 40, 50, 60
                    {for} distance {in} distances
                        {forward} distance
                    ```
            12:
                story_text: |
                    We can use functions to draw more complex figures with less code.
                    ### Exercise 1
                    Fill the function so that three squares are created. If you want the image to look nicer, you can make the lines between the squares white.

                    ### Exercise 2
                    The code can be made even shorter. Place the final lines into a `{repeat}` so the figure remains the same.

                    ### Exercise 3
                    Create your own drawing with different figures.
                    Change both the number of figures with the `{repeat}` and the shape of the figures in the `{define}`
                example_code: |
                    ```
                    {define} square
                        {repeat} 4 {times}
                            {turn} _
                            {forward} _
                    {call} square
                    {forward} 50
                    {call} square
                    {forward} 50
                    {call} square
                    ```
    turtle_draw_it:
        name: Draw it!
        default_save_name: Draw it
        description: Draw this picture with the turtle
        levels:
            1:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                        Rectangle <img src="https://github.com/hedyorg/hedy/assets/80678586/77aa99d5-cd8f-4969-b49d-e8fed34ac550" width="100">
                        Square <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                        Stairs<img src="https://github.com/hedyorg/hedy/assets/80678586/d4301e62-ec66-4031-827c-7d21f73ba106" width="200">
                    </div>
            2:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/e974b62c-f0cf-445a-8bd4-5ad9f1f71204" width="100">
                    Arrow <img src="https://github.com/hedyorg/hedy/assets/80678586/803d8f42-9708-448c-82ea-d035697f08c9" width="150">
                    Boat <img src="https://github.com/hedyorg/hedy/assets/80678586/94ef7189-442a-4c8f-827d-12a69203c2e9" width="150">
                    </div>
            3:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/71e04d98-9545-4614-9caf-a5f179b756a1" width="150">
                    Star <img src="https://github.com/hedyorg/hedy/assets/80678586/421c4d28-cb99-424b-be26-dcae30d65c80" width="150">
                    Arrow <img src="https://github.com/hedyorg/hedy/assets/80678586/3cbebcae-5258-47c5-a6ac-e7ee36c1d1ce" width="200">
                    </div>
            4:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Colored Star <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Rainbow <img src="https://github.com/hedyorg/hedy/assets/80678586/2728b10f-9f7f-45ea-964e-5b284033e4f0" width="500">
                    Nested squares <img src="https://github.com/hedyorg/hedy/assets/80678586/f013f9fa-bc68-4c60-b778-2c457799d6f7" width="200">
                    </div>
                example_code: |
                    **Extra** Up for a real challenge? Make sure that the colors of these figures are selected randomly, so that each time you run your programs they'll look differently!

                    ```
                    colors {is} red, orange, yellow, green, blue, purple, pink, brown, gray, black
                    color _
                    ```
            5:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** Make only one code that lets the player decide which letter they'd like to see! And can you add even more letters?

                    <div class="w-full flex flex-row gap-2">
                    F <img src="https://github.com/hedyorg/hedy/assets/80678586/8a021b76-c24b-4e7c-b960-48d57f3bcb20" width="100">
                    E <img src="https://github.com/hedyorg/hedy/assets/80678586/12821803-6422-416a-8e36-9902d14e57a4" width="100">
                    L <img src="https://github.com/hedyorg/hedy/assets/80678586/3af6f919-7b67-4ee7-b923-11e56f2b6b24" width="100">
                    </div>
                example_code: |
                    Hint:
                    ```
                    chosen_letter {is} {ask} 'Which letter would you like to see? F, E or L?'
                    {if} _
                    ```
            6:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** Let the player decide which color the square should be.

                    ***Extra*** Can you make the letter of your own first name and the flag of your own country too?

                    <div class="w-full flex flex-row gap-2">
                    Square <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="150">
                    Letters <img src="https://github.com/hedyorg/hedy/assets/80678586/e75f4fa5-f1f5-4b48-806c-916c28e4e8ad" width="100">
                    Flag <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hint for the square:
                    ```
                    chosen_color = {ask} _
                    ```
            7:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Hexagon <img src="https://github.com/hedyorg/hedy/assets/80678586/92e492e1-1593-489b-aaf0-51d2a29755f4" width="200">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/3629a5e6-1f02-4851-aab9-c5430ba4a1f1" width="200">
                    Fan <img src="https://github.com/hedyorg/hedy/assets/80678586/1ba2ff71-1230-4fe3-8255-b2c504cf1b4e" width="200">
                    </div>
            8:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** The number in brackets indicates in how many lines of code this figure can be drawn. Can you do it in the same amount of lines?

                    <div class="w-full flex flex-row gap-2">
                    Square (3) <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                    Randomly colored star (5) <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Randomly colored spiral (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/9bcdb3f1-367d-4ae0-878f-d09005424a35" width="150">
                    </div>
            9:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** The number in brackets indicates in how many lines of code this figure can be drawn. Can you do it in the same amount of lines?

                    **Extra** Give the player a choice which country they would like to see the flag of.

                    <div class="w-full flex flex-row gap-2">
                    Cross (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/76e42c76-aa3f-4863-8eee-ead73c09a186" width="150">
                    Randomly colored nested squares (8) <img src="https://github.com/hedyorg/hedy/assets/80678586/17f878cc-e893-4c10-b32e-a09a50bf08de" width="200">
                    Flags <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hint for the nested squares:
                    ```
                    colors = red, blue, orange, yellow, pink, purple, green, brown, black
                    distance = 120
                    repeat 5 times
                    _
                    ```
                    Hint for the flags:
                    ```
                    country = ask 'which country would you like to see the flag of?'
                    if country is 'the Netherlands'
                        color_1 = red
                        color_2 = white
                        color_3 = blue
                    ```
            10:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Nested Hexagon <img src="https://github.com/hedyorg/hedy/assets/80678586/3629e908-3cd5-44ac-bbcd-1f1cceb15654" width="150">
                    Traffic lights  <img src="https://github.com/hedyorg/hedy/assets/80678586/edbbb608-5ff8-4349-85a6-e47809adde43" width="100">
                    </div>
                example_code: |
                    Hint Nested Hexagon:
                    ```
                    distances = 100, 80, 60, 40, 20
                    {for} distance {in} distances
                    _
                    ```

                    Hint Traffic Lights:
                    ```
                    colors = red, yellow, green
                    {for} chosen_color {in} colors
                        color _
                        {repeat} _
                    ```
                story_text_2: |
                    Christmas lights <img src="https://github.com/hedyorg/hedy/assets/80678586/9637ea6d-6edc-4d88-a6f7-10271bfc5371" width="500">
                example_code_2: |
                    Hint Christmas Lights:

                    Start by moving to the left side of the screen with an invisible white line. Then hang up the Christmas lights!
                    ```
                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 90

                    colors = red, blue, yellow, purple, green, orange, pink
                    {for} chosen_color {in} colors
                    _
                    ```
            11:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Beehive (6) <img src="https://github.com/hedyorg/hedy/assets/80678586/ec02469c-907b-4695-9382-d39a8f3c00ec" width="150">
                    Fan (5)  <img src="https://github.com/hedyorg/hedy/assets/80678586/a032ab35-c70c-4e67-9b4e-036a03ecce87" width="150">
                    Snowflake (13) <img src="https://github.com/hedyorg/hedy/assets/80678586/90f56bbb-86e5-448d-8aec-16f8c2c05cf2" width="150">
                    </div>
                example_code: |
                    Hint Beehive:
                    ```
                    {for} amount_of_combs {in} {range} 1 {to} _
                        {for} walls_of_one_comb {in} {range} 1 {to} _
                            {forward} _
                            {turn} _
                        {forward} _
                        {turn} _
                    ```

                    Hint Fan:
                    Start out like the fan you made in level 7. Or take a peak at the hint for the beehive, because the codes are very similar.

                    Hint Snowflake: Start by making one 'leg' and repeat it 6 times.
            12:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!
                    Hint: Bracelet designing program. Firstly, define a function **for each shape** you want to use on the bacelet. Then, add the shapes to the bacelet like this:
                    </div>
                    Bracelet Designing program <img src="https://github.com/hedyorg/hedy/assets/80678586/549d7f3a-c492-4b4a-b173-746eb3400951" width="500">
                example_code: |
                    ```
                    {define} draw_a_square
                    _

                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 180

                    {for} i {in} {range} 1 {to} 5
                        {color} gray
                        {forward} 100
                        shape = {ask} 'What kind of shape would you like next on the bracelet?'
                        chosen_color = {ask} 'In which color?'
                        {color} chosen_color
                        {if} shape = 'square'
                            {call} draw_a_square
                    ```
            13:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    Street in different sizes <img src="https://github.com/hedyorg/hedy/assets/80678586/cdae9d97-d5ef-46f3-8838-24fa7b5b1bec" width="300">
                    Colored street  <img src="https://github.com/hedyorg/hedy/assets/80678586/9893e0bd-c0f8-49bc-a5a7-217182407724" width="300">
                    Snow Storm <img src="https://github.com/hedyorg/hedy/assets/80678586/111b0a1b-b0e1-47c3-b032-81cea05e6bbc" width="300">
                example_code: |
                    Hint Street in different sizes
                    ```
                    {define} draw_a_house {with} size
                    _

                    {call} draw_a_house {with} 90
                    {call} draw_a_house {with} 60
                    {call} draw_a_house {with} 30
                    ```

                    Hint Colored street
                    ```
                    {define} draw_a_house {with} chosen_color
                    _
                    ```

                    Hint Snow Storm
                    ```
                    {define} draw_snowflake {with} length, color
                        _

                    numbers = 10, 20, 30
                    colors = _

                    {for} i {in} {range} 1 {to} 5
                        random_number = _
                        random_color = _
                        {call} draw_snowflake {with} random_number, random_color
                        {color} white
                        {turn} random_number * 5
                        {forward} 80
                    ```
            14:
                story_text: |
                    ### Exercise
                    Create a program that asks the player how many corners their figure should have and then creates that figure.
                    The figure in the image is the output when the player fills in 10.

                    <div class="w-full flex flex-row gap-2">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/ee32f40e-dea1-4e7c-a813-3ef63671254b" width="300">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/3621bf77-527d-41e8-a44f-c5a21bb4ffd2" width="200">
                    </div>
                example_code: |
                    ```
                    {define} calculate_degrees {with} amount_of_corners
                        _ 360 / amount_of_corners


                    {define} draw_figure {with} degrees
                        _
                            {forward} 400/amount_of_corners
                            {turn} _

                    amount_of_corners = {ask} _
                    degrees = {call} _ {with} _

                    {call} _ {with}
                    {call} _ {with}
                    ```
            15:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    Spiral <img src="https://github.com/hedyorg/hedy/assets/80678586/6943223c-018b-435b-a391-23723cc7a6ad" width="150">
                example_code: |
                    Spiral
                    ```
                    distance = 5
                    {while} distance < 200
                        distance = distance + 5
                         _
                    ```
                story_text_2: |
                    Fan <img src="https://github.com/hedyorg/hedy/assets/80678586/cb671065-b47b-49f0-b298-dcbcd2a5e28f" width="150">
                example_code_2: |
                    Fan
                    ```
                    {define} draw_a_square {with} side
                    _

                    i = 100
                    {while} i > 1
                        _ {with} i
                        _
                        i = i - 3
                    ```
                story_text_3: |
                    Star <img src="https://github.com/hedyorg/hedy/assets/80678586/17564e0a-63e1-4794-8d41-15ac8c1a5a93" width="150">
                example_code_3: |
                    Star
                    A star is usually drawn using 144-degree-turns. If you change this slightly to 143 degrees for example and repeat the pattern multiple times with a {while} loop you can make this figure.
    while_command:
        name: '{while}'
        default_save_name: while_command
        description: while
        levels:
            15:
                story_text: |-
                    We are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.
                    So don't forget to change the value in the loop.

                    In the example code, we continue until a correct answer has been given.
                    If the correct answer is never given, the loop never ends!
                example_code: |
                    ```
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
                    ```
    years:
        name: New Year's
        default_save_name: New Year's Countdown
        description: Countdown to the new year!
        levels:
            11:
                story_text: |
                    In this level you can use the `{for} i {in} {range}` command to countdown to the New Year.

                    ### Exercise
                    Fill in the blanks and make the code work!
                example_code: |
                    ```
                    for _ in _ 10 to 1
                        {print} i
                    {print} 'Happy New Year!'
                    ```
