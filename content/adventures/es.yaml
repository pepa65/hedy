adventures:
    story:
        name: Historia
        default_save_name: Historia
        description: Historia
        levels:
            1:
                story_text: |
                    En el nivel 1 puedes crear una historia con un protagonista que t√∫ elijas.

                    En la primera l√≠nea, usa `{ask}` y pregunta qui√©n es el personaje principal de tu historia.

                    A continuaci√≥n, utiliza `{print}` si necesitas mostrar una frase por pantalla.
                    Utiliza `{echo}` si quieres que el nombre de tu personaje aparezca al final de la frase.
                example_code: |
                    ```
                    {ask} El protagonista de esta historia es
                    {print} El protagonista camina por un bosque
                    {echo} Est√° bastante asustado
                    {print} Por todos lados se oyen extra√±os ruidos
                    {print} Tiene miedo de que √©ste sea un bosque encantado
                    ```
                story_text_2: |
                    ### ejercicio
                    Ahora crea tu propia historia de un m√≠nimo de 6 l√≠neas de c√≥digo.
                    Esta historia no puede ser la misma que el c√≥digo de ejemplo.
                    Utiliza m√≠nimo un comando `{ask}` y un comando `{echo}`.
                    Lo puedes hacer sobre cualquier tema que quieras.
                    Si no se te ocurre ning√∫n tema, usa uno de estos: en el cine, un partido o un d√≠a en el zool√≥gico.
            2:
                story_text: |
                    En el nivel 2 puedes hacer tu historia m√°s divertida. El nombre de tu protagonista ahora puede estar en cualquier posici√≥n de la frase.

                    Para eso debes realizar un poquito m√°s de programaci√≥n. Debes dar primero un nombre al protagonista de tu historia.

                    Puedes luego usar este nombre en las oraciones que siguen.
                example_code: |-
                    ```
                    nombre {is} {ask} ¬øC√≥mo se llama el protagonista?
                    {print} nombre est√° caminando por el bosque
                    {print} nombre est√° bastante asustado
                    {print} Por todos lados se oyen extra√±os ruidos
                    {sleep}
                    {print} nombre tiene miedo de que √©ste sea un bosque encantado
                    ```
                story_text_2: |
                    ### Ejercicio
                    Ahora es momento de a√±adir variables a la historia que hiciste en el nivel anterior.
                    Ve a 'Mis Programas', busca tu historia del nivel 1 y copia el c√≥digo. Pega el c√≥digo en tu pantalla de entrada en este nivel.

                    Este c√≥digo no funcionar√° en este nivel, porque no has usado variables a√∫n.
                    Cambia los comandos `{ask}` y `{echo}` en tu c√≥digo a la forma correcta que aprendiste en este nivel.

                    **Extra** a√±ade un comando `{sleep}` a tu c√≥digo para crear tensi√≥n en la historia.
            3:
                story_text: |
                    En el nivel 3 puedes hacer tu historia m√°s divertida. Puedes usar aleatoriedad para cualquier monstruo, animal, o cualquier otro obst√°culo, como este:
                example_code: |
                    ```
                    animales {is} ü¶î, üêø, ü¶â, ü¶á
                    {print} Ahora escucha el ruido de un animales {at} {random}
                    ```
                story_text_2: |
                    El comando `{add}` puede ser √∫til en tu historia.
                example_code_2: |
                    ```
                    {print} Se escucha un sonido
                    animales {is} üêø, ü¶î, ü¶á, ü¶â
                    animal {is} {ask} ¬øQu√© piensas qu√© es?
                    {add} animal {to_list} animales
                    {print} fue un animales {at} {random}
                    ```
                story_text_3: |
                    Este es un ejemplo del comando `{remove}` en su historia

                    ### Ejercicio
                    Copia tu historia de los niveles anteriores en este nivel.
                    En este nivel has aprendido 3 nuevos comandos `{at} {random}`, `{add} {to_list}` y `{remove} {from}`.
                    A√±ade nuevas l√≠neas de c√≥digo a tu historia, de forma que todos los nuevos comandos aparezcan al menos una vez en tu historia.
                example_code_3: |
                    ```
                    {print} Su mochila se hizo muy pesada.
                    {print} Dentro de ella hab√≠a una botella de agua, una linterna y un ladrillo
                    bolso {is} agua, linterna, ladrillo
                    botar {is} {ask} ¬øQu√© art√≠culo deber√≠a botar √©l?
                    {remove} botar {from} bolso
                    ```
            4:
                story_text: |
                    ### Ejercicio
                    Copia el c√≥digo de ejemplo y compl√©talo a√±adiendo comillas en los huecos de las l√≠neas 1 y 2.
                    Los huecos en blanco en las l√≠neas 3 y 4 no se deben reemplazar por comillas, sino por un comando `{sleep}` y un `{clear}`. ¬øPuedes hacerlo funcionar?

                    ### Ejercicio 2
                    Vuelve al nivel anterior y copia el c√≥digo de tu historia. Haz funcionar el c√≥digo en este nivel a√±adiendo comillas en los lugares correctos.
                    Recuerda: Las variables en tu propia historia tienen que estar fuera de las comillas. Como en la segunda l√≠nea del c√≥digo de ejemplo. En esa l√≠nea el nombre de la variable esta situado fuera de las comillas.
                example_code: |
                    ```
                    nombre {is}{ask} _ ¬øCu√°l es tu nombre? _
                    {print}  _ El protagonista de esta historia es _ nombre
                    _
                    _
                    {print} nombre  _ ahora est√° caminando por el bosque _
                    {print} nombre _ est√° un poco asustado _
                    animales {is} ü¶î, üêø, ü¶â, ü¶á
                    {print} _ √âl escucha el ruido de un _ animales {at} {random}
                    {print} nombre _ teme que √©ste sea un bosque encantado _
                    ```
            5:
                story_text: |
                    En este nivel puedes programar distintos finales, lo que har√° que tu historia sea incluso m√°s divertida.
                    En el c√≥digo de ejemplo puedes ver como hacer 2 finales diferentes.

                    ### Ejercicio 1
                    Escribe una nueva breve historia con al menos 6 l√≠neas de c√≥digo, sobre un tema de tu elecci√≥n.
                    ¬øSin inspiraci√≥n? Escoge uno de estos temas: un superh√©roe, un d√≠a aburrido en la escuela, perdido en una isla desierta.

                    Ahora dale al jugador la oportunidad de escoger una final bueno o malo, como en el c√≥digo de ejemplo.
                    Programa ambos finales.

                    ### Ejercicio 2
                    Copia la historia que has creado para tu propia aventura en los niveles anteriores.
                    Encuentra una forma de a√±adir por lo menos 2 comandos `{if}` y `{else}` a tu historia.
                    Esto puede ser un final bueno o malo, pero puedes intentar buscar otras formas de incorporar los comandos.
                example_code: |
                    ```
                    nombre {is} {ask} '¬øQui√©n camina por el bosque?'
                    {print} nombre ' camina por el bosque'
                    {print} nombre ' encuentra un monstruo'
                    f√≠n {is} {ask} '¬øQuieres un final bueno o malo?'
                    {if} final {is} bueno {print} nombre ' coge la espada y el monstruo huye r√°pidamente'
                    {else} {print} 'El monstruo se come' nombre
                    ```
            7:
                story_text: |
                    En una historia, alguien dice algunas palabras varias veces. Por ejemplo, cuando alguien pide ayuda o canta una canci√≥n.
                    Puedes poner este tipo de repeticiones en tu historia, en este nivel con `{repeat}`.

                    ### Ejercicio
                    A√±ade repeticiones a tu propia historia. Vuelve a tus programas guardados, elige tu programa de historia de un nivel anterior y
                    encuentra una l√≠nea que contenga `{print}` y ¬°rep√≠tela!
                example_code: |
                    ```
                    {print} 'La princesa grita pidiendo ayuda'
                    {repeat} 5 {times} {print} '¬°Ayuda!'
                    {print} 'Por qu√© nadie viene en mi ayuda?'
                    ```
            8:
                story_text: "En este nivel puedes usar varias l√≠neas en tus comandos `{if}`, ¬°de esta manera puedes mejorar tu final malo o bueno!\n\n### Ejercicio 1\n El c√≥digo de ejemplo muestra dos finales diferentes; uno donde los personajes usan una m√°quina del tiempo y otro en el que no.\nCompleta los espacios en blanco con al menos una frase por cada final. \n**Extra** Haz que la historia dure m√°s. ¬øQu√© ocurre en la historia? Puedes tambi√©n a√±adir un segundo `{ask}` con diferentes opciones.\n\n### Ejercicio 2\nVuelve a tus historias guardadas, escoge la historia del nivel 5. Escribe un final bueno y uno malo de al menos tres l√≠neas cada uno.\n"
                example_code: |
                    ```
                    {print} '¬°OH NO! ¬°El T-rex se est√° acercando!'
                    final = {ask} '¬øQuieres un final triste o feliz?'
                    {if} final {is} feliz
                        {print} 'Justo a tiempo Richard salta de vuelta en la m√°quina del tiempo!'
                        {print} _
                    {else}
                        {print} '¬°Oh, no! Richard es demasiado lento...
                        {print} _
                    ```
            9:
                story_text: |
                    En este nivel puedes usar los comandos `{if}` y `{repeat}`  dentro de otros comandos `{if}` y `{repeat}`.
                    Esto te da muchas opciones y te ayuda a hacer tu historia mas interactiva.

                    ### Ejercicio 1
                    Termina el c√≥digo de forma que `{if}` funcione correctamente.

                    ### Ejercicio 2
                    Agrega un comando `{if}` y `{else}` en la parte que Robin va a casa tambi√©n.

                    ### Ejercicio 3
                    Vuelve a tu historia del nivel 8 y usa por lo menos dos `{if}` dentro de otro`{if}`
                example_code: |
                    ```
                    {print} 'Robin est√° caminando hacia el centro de la ciudad'
                    lugar = {ask} '¬øRobin va a ir a una tienda, o va a ir a casa?'
                    {if} lugar {is} tienda
                        {print} 'Ella entra en la tienda.'
                        {print} 'Robin ve un libro que luce interesante'
                        libro = {ask} '¬øCompra el libro Robin?'
                        {if} libro {is} si
                            {print} 'Robin compra el libro y se va a casa'
                        {else}
                            {print} 'Robin deja la tienda y se va a casa'
                    {else}
                        {print} 'Robin se va a casa'
                    ```
            10:
                story_text: |
                    En este nivel puedes usar el comando {for} en tu historia. De esta manera puedes programar f√°cilmente el libro para ni√±os 'oso pardo, oso pardo, ¬øqu√© ves?'

                    ### Ejercicio

                    Mira en <a href="https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf"> la historia </a> si no la conoces, aseg√∫rate que este igual que el libro.
                example_code: "```\nanimales = _ , _ , _ \n{print} 'Oso pardo, Oso pardo'\n {print} '¬øQu√© ves?'\n```\n"
            12:
                story_text: |-
                    En este nivel puedes usar las comillas para almacenar m√∫ltiples palabras en una variable.

                    ### Ejercicio

                    Encuentra una historia de un nivel anterior, cualquier nivel esta bien. Ahora aseg√∫rate que las comillas est√©n en el lugar correcto.
                example_code: |
                    ```
                    nombre = 'La Reina de Inglaterra'
                    {print} nombre ' estaba comiendo un pedazo de pastel, cuando de pronto‚Ä¶'
                    ```
            13:
                story_text: |
                    Usando los comandos `{and}` y `{or}` puedes hacer tus historias mas vers√°tiles. Puedes hacer dos preguntas y responder a la combinaci√≥n de respuestas.

                    ### Ejercicio 1
                    Mira el c√≥digo de ejemplo de este nivel y compl√©talo. Luego a√±ade por lo menos 2 `{if}` con `{and}` o `{or}`.

                    ### Ejercicio 2
                    Encuentra una historia de un nivel anterior y a√±ade un `{and}` o `{or}`.
                example_code: |
                    ```
                    {print} 'Nuestra hero√≠na est√° caminando en el bosque'
                    {print} 'El camino se divide en dos'
                    camino = {ask} '¬øQue camino deber√≠a escoger ella?'
                    arma={ask} 'Que arma escoge ella?'
                    {if} camino {is} 'derecha' {and} arma {is} 'espada'
                        _
                    ```
            15:
                story_text: |
                    Usar un bucle `{while}` puede hacer que tus historias sean m√°s interesantes. Por ejemplo, puedes usar `{while} game == 'on'` para seguir jugando hasta que termine.
                    O puedes usar `{while} sword == 'lost'` para evitar que el jugador contin√∫e el juego hasta que encuentre algo.

                    ### Exercise
                    The example code shows you how to use the `{while}` loop in a story. Now **think of your own scenario** in which the player has to find something before they can continue.
                example_code: |
                    ```
                    llaves = 'perdidas'
                    {print} 'Est√°s en tu jard√≠n y perdiste tus llaves.'
                    {print} '¬øEn donde las quieres buscar?'
                    {print} '¬®Puedes escoger: √°rbol, lecho de flores, roca, buz√≥n'
                    {while} llaves == 'perdidas'
                        lugar = {ask} '¬øEn donde quieres buscar?'
                        {if} lugar == 'lecho de flores'
                            {print} '¬°Aqu√≠ est√°n!'
                            keys = 'encontradas'
                        {else}
                            {print} 'No, no est√°n en ' lugar
                    {print} '¬°Ahora puedes entrar en la casa'
                    ```
            18:
                story_text: |
                    Vamos a hacer otra historia, pero ahora usaremos par√©ntesis con `{print}`.

                    ### Ejercicio 1
                    Crea una historia de m√≠nimo 5 oraciones. No tienes que usar 'nombre' a√∫n.
                example_code: |
                    ```
                    {print}('Bienvenido a esta historia!')
                    ```
                story_text_2: |
                    ### Ejercicio 2
                    Ya preparamos un `{input}` para ti. Primero usa la variable `name` en tu historia.
                    Luego a√±ade un segundo `{ask}` y usa esa variable tambi√©n.
                    Tip: Recuerda las comas en el `{print}` entre texto y variables
                example_code_2: |
                    ```
                    nombre = {input}("Cual es tu nombre?")
                    {print}('Bienvenido a esta historia!')
                    ```
    add_remove_command:
        name: '{add} {to_list} y {remove} {from}'
        default_save_name: comando_a√±adir_borrar
        description: introduciendo {add} {to_list} y {remove} {from}
        levels:
            3:
                story_text: |
                    ## A√±adir a
                    Puedes a√±adir objetos a la lista con el comando `{add} {to_list}`. Para a√±adir un objeto a una lista puedes escribir: `{add} penguin {to_list} animals` o puedes usar el comando `{ask}` como en el c√≥digo de ejemplo.
                example_code: |
                    ```
                    animales {is} perro, gato, canguro
                    gusta {is} {ask} ¬øCu√°l es tu animal preferido?
                    {add} gusta {to_list} animales
                    {print} Yo elijo animales {at} {random}
                    ```
                story_text_2: |
                    ## Borrar de
                    Si puedes a√±adir objetos a una lista, por supuesto que tambi√©n puedes quitarlos. Esto se hace con el comando `{remove} {from}`.
                example_code_2: |
                    ```
                    animales {is} perro, gato, canguro
                    no_gustar {is} {ask} ¬øQu√© animal no te gusta?
                    {remove} no_gustar {from} animales
                    {print} Elijo animales {at} {random}
                    ```
                story_text_3: |
                    ### Ejercicio
                    Prueba los nuevos comandos en este restaurante virtual. A√±ade el sabor que el jugador est√° esperando a la lista y elimina los sabores a los que es al√©rgico.
                example_code_3: |
                    ```
                    {print} Batido misterioso
                    sabores {is} fresa, chocolate, vainilla
                    espera {is} {ask} ¬øQu√© sabor est√°s esperando?
                    _
                    alergias {is} {ask} ¬øEres al√©rgico a cualquiera de los sabores?
                    _
                    {print} Recibe un batido de sabores {at} {random}
                    ```
    and_or_command:
        name: '{and} & {or}'
        default_save_name: y o
        description: introduciendo {and} y {or}
        levels:
            13:
                story_text: |-
                    ¬°Ahora vamos a aprender `{and}` y `{or}`! Si quieres comprobar dos sentencias, no tienes que usar dos `{if}`s pero puedes usar `{and}` y `{or}`.

                    Si usas `{and}`, ambas sentencias, a la izquierda y derecha de `{and}` tienen que ser verdaderas. Tambi√©n podemos usar `{or}`. Entonces s√≥lo una sentencia tiene que ser correcta.
                example_code: |
                    ```
                    nombre = {ask} '¬øc√≥mo te llamas?'
                    edad = {ask} '¬øcu√°ntos a√±os tienes?'
                    {if} nombre {is} 'Hedy' {and} edad {is} 2
                        {print} '¬°T√∫ eres el verdadero Hedy!'
                    ```
    ask_command:
        name: '{ask}'
        default_save_name: comando_preguntar
        description: Introducci√≥n al comando {ask}
        levels:
            1:
                story_text: |
                    ## El comando preguntar
                    Ahora que puedes usar el comando `{print}`, est√°s preparado para usar el siguiente comando: `{ask}`. Con el comando `{ask}`, puedes hacer una pregunta. Compru√©balo:
                example_code: |
                    ```
                    {print} ¬°Hola!
                    {ask} ¬øC√≥mo te llamas?
                    ```
                story_text_2: |
                    ## El comando `{echo}`
                    Si quieres que el ordenador te repita la respuesta, puedes usar el comando `{echo}`. Se har√° eco de la respuesta al final de la frase. En este ejemplo despu√©s de hola.
                example_code_2: |
                    ```
                    {print} ¬°Hola!
                    {ask} ¬øC√≥mo te llamas?
                    {echo} hola
                    ```
                story_text_3: |
                    ### Ejercicio
                    Prueba los comandos `{ask}` y `{echo}`. Lo primero, rellena los huecos en blanco para hacer que el programa funcione.
                    Despu√©s, haz 2 preguntas m√°s usando el comando `{ask}`, tras cada `{ask}` usa un `{echo}` para imprimir la respuesta en pantalla.
                example_code_3: |
                    ```
                    _ ¬øQu√© tal est√°s?
                    _
                    ```
            2:
                story_text: |
                    ## El comando preguntar
                    Ahora que podemos usar **variables** en nuestros c√≥digos, ya no necesitamos el comando `{echo}`.
                    Podemos usar variables para almacenar las respuestas a nuestras pregunta y de esta manera podemos usar la respuesta a varias preguntas en nuestros c√≥digos.
                    Compru√©balo:

                    ¬°De esta manera tu c√≥digo se convierte interactivo!
                example_code: |
                    ```
                    nombre {is} {ask} ¬øC√≥mo te llamas?
                    {print} Hola nombre
                    edad {is} {ask} ¬øCu√°ntos a√±os tienes?
                    {print} nombre tiene edad a√±os.
                    ```
                story_text_2: |
                    ### Ejercicio
                    En la pesta√±a anterior has practicado estableciendo variables con el comando `{is}`.
                    Has creado al menos 3 variables y las has usado con el comando imprimir.
                    Ahora, en vez de establecer las variables queremos que hagas las variables interactivas, como hicimos en nuestro ejemplo.

                    Copia tu c√≥digo de la pesta√±a anterior y haz las variables interactivas usando el comando `{ask}`.
                example_code_2: |
                    ```
                    animales_favoritos {is} {ask} ¬øCu√°l es tu animal favorito?
                    {print} Me gusta animales_favoritos
                    ```
            18:
                story_text: El √∫ltimo cambio que tenemos que hacer para conseguir el c√≥digo en Python es cambiar `{ask}` por `{input}`.
                example_code: |
                    ```
                    {print}('¬°Mi nombre es Hedy!')
                    nombre = {input}('¬øC√≥mo te llamas?')
                    {print}('As√≠ que te llamas ', nombre)
                    ```
    blackjack:
        name: Blackjack
        default_save_name: Blackjack
        description: Try to get as close to 21 as you can
        levels:
            17:
                story_text: |
                    Blackjack is a simple game of cards in which you have to get as close to 21 points as possible. You get two cards. Each card is worth their numeral value, and the face cards (Jack, Queen and King) are worth 10 points.
                    The Ace is worth either 1 or 11 points (you can choose). The dealer, your opponent, also gets two cards.
                    If you want, you can get another card, and its points will be added to your total. The dealer can also choose to take another card.
                    But be careful not to get more than 21 points, because if you do, you lose!
                    The player who gets closest to 21, without going over it, wins!

                    ### Exercise
                    In this adventure we code the first part of our Blackjack game. We'll create a function to calculate how many points a card is worth.

                    ***Set the variables***
                    Start by making a list of all the cards, from 2 to Ace. Next make a list of the face cards, so Jack, Queen and King. Then pick a random card from the list of cards to be card_1.

                    ***Create a function to calculate the points***
                    Create a function that calculates how many points a card is worth.
                    All the face cards are worth 10 points, the Ace is worth 11 and all the other cards are worth their numeral.
                    Return the variable `points` at the end of the function.

                    ***Test the function***
                    Test if your function is working properly. Finish the first print command by filling in which card you've drawn. Then finish the second line by calling the function with card_1.
                    Run the code a couple of times. Are you happy with the results? Great! Then you can remove the testing part and move on the the next tab!
                example_code: |
                    ```
                    {print} 'BLACKJACK'

                    # Set these variables
                    cards = _
                    face_cards = _
                    card_1 =

                    # Create a function to calculate the points
                    {define} calculate_points {with} card:
                        {if} card {in} face_cards:
                            points = _
                        {elif} _
                            _
                        {else}:
                            _
                        _ points

                    # Test your function
                    {print} 'Your card is a ' _
                    {print} 'That is worth ' _ ' points'.
                    ```
    blackjack_2:
        name: Blackjack 2
        default_save_name: Blackjack_2
        description: Blackjack part 2
        levels:
            17:
                story_text: |
                    ### Exercise
                    In this adventure we code the second part of our Blackjack game.

                    ***Paste your code from the previous adventure***
                    In the previous adventure you've started a list of variables and created a function to calculate how many points a card is worth. Copy your code and paste it here. Mind that you don't need the testing part, so if you haven't removed that yet, please do so now.

                    ***Add more variables***
                    You have already set the lists `cards` and `face_cards` and the variable `card_1`. Underneath those variables create 3 more variables: `card_2`, dealer_card_1` and `dealer_card_2`. These variables are all set to a random card from the list of cards.

                    ***Add up points***
                    To calculate how many points you have scored we call the function with card 1 and we do it again for card 2. Then we add both these scores together to get your total.
                    Do the same thing for the dealers points, but be sure to use the dealer's cards and not your own!

                    ***2 Aces***
                    You're doing great! Almost all scores can be calculated now. There is only one exception: 2 Aces. If you get 2 Aces, your total is 12 points and not 22 (because 22 points would be losing!). This of course also goes for the dealer.

                    ***Show the score***
                    Lastly, you want to tell the program to tell you which cards you have drawn and how many points that is. Then show which cards the dealer has and how many points they have.

                    ***Continue in the next tab***
                    Great! You have finished this part of the game! Copy your code and go to the next tab to learn how to ask for an extra card and to declare a winner.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Add these variables to the list of variables
                    card_2 = _
                    dealer_card_1 = _
                    dealer_card_2 = _

                    # Add up your points
                    your_points_1 = {call} _ {with} card_1
                    your_points_2 = _
                    your_total = _

                    # Add up the dealers points
                    dealer_points_1 = _
                    _
                    _

                    # 2 Aces
                    {if} card_1 == 'Ace' {and} _
                        your_total = 12
                    {if} dealer_card_1 _
                        dealer_total = _

                    # Show the score
                    {print} 'You have drawn a ' _ ' and a ' _ '. That is ' _ ' points'
                    {print} 'The dealer has drawn a ' _ ' and a ' _ '. That is ' _ ' points'
                    ```
    blackjack_3:
        name: Blackjack 3
        default_save_name: Blackjack_3
        description: Blackjack part 3
        levels:
            17:
                story_text: |
                    In the previous tabs you have learned how to draw 2 random cards for yourself and for the dealer and to calculate how many points you both got.
                    In this adventure we add the option to ask for an extra card for both you and the dealer.

                    ### Exercise
                    ***Paste your code from the previous adventure*** Firstly, copy your code from the previous tab and paste it here.

                    ***Extra card for you*** If you want, you can get an extra card to get your total as close to 21 as possible. First ask the player if they want an extra card.
                    If they do, pick a random card and print what they have drawn. If the card is not an Ace, you can call the function and add the points to your total.
                    In case the card is an Ace, you can't use the function, because the Ace can be either 1 point or 11 points, depending on how many points you already have earned.
                    If your total is less than 11, you want the ace to be 11 points (because this is closest to 21). So you add 11 points to your total.
                    If the total is more than or equal to 11, you want the ace to be 1 point (because you don't want more than 21 points). So you add 1 point to your total.
                    Lastly, print your new total of points.

                    ***Extra card for the dealer*** The dealer can also get an extra card. The dealer doesn't need to be asked, because they always get an extra card if their total is less than 17.
                    Copy the 'Extra card for you code' and paste it in the dealers section. Then change it to fit the dealer picking an extra card and getting points added to their total.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Extra card for you
                    hit = {ask} _
                    {if} hit == 'yes':
                        card_3 = _
                        {print} _
                        {if} card_3 _ 'Ace':
                            your_points_3 = _
                            your_total = _
                        {else}:
                           {if} your_total _
                                _
                            {else}:
                                _
                        {print} _

                    # Extra card for the dealer
                    {if} dealer_total < 17
                    _
                    ```
    blackjack_4:
        name: Blackjack 4
        default_save_name: Blackjack_4
        description: Blackjack part 4
        levels:
            17:
                story_text: |
                    In the last 3 adventures you have alsmost created a working blackjack game! The only thing left to do is to decide a winner!

                    ### Exercise
                    ***Paste your code from the previous adventure*** Start by pasting the code that you've made so far into your programming field.

                    ***Decide a winner***
                    Firstly, if you and the dealer have an equal amount of points, it's a draw.
                    Secondly, if the dealer has more than 21 points and you don't, you are the winner.
                    Thirdly, if both you and the dealer have less than 22 points, we have to see who came closest to 21. We do that by comparing who has the highest score. Is your total higher than the dealer's total, then you are the winner. If not, the dealer wins.
                    Lastly, in all other scenarios (e.g. you have more than 21 points and the dealer doesn't, or you both have more than 21 points) you are the loser.

                    ***Enjoy the game!***
                    Does your game work properly? Amazing! You have done a great job! Enjoy your game!
                    If it doesn't work right away, no worries, you might have made a mistake. Just keep calm and bebug your code using the ladybug button.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Decide a winner
                    {if} _
                        {print} 'Its a draw! Play again!'
                    {elif} _
                        {print} 'You win!'
                    {elif} _ :
                        {if} _:
                            {print} _
                        {else}:
                            {print} _
                    {else}:
                        _
                    ```
    calculator:
        name: Calculadora
        default_save_name: Calculadora
        description: Haz una calculadora
        levels:
            6:
                story_text: |
                    Ahora que puedes calcular, ¬°puedes hacer una calculadora!
                example_code: |
                    ```
                    n√∫mero_1 = {ask} 'Rellena el primer n√∫mero:'
                    n√∫mero_2 = {ask} 'Escribe el segundo n√∫mero:'
                    respuesta_correcta = n√∫mero_1 * n√∫mero_2
                    {print} n√∫mero_1 ' por ' n√∫mero_2 ' es ' respuesta_correcta
                    ```
                story_text_2: |
                    ### Ejercicio
                    La calcula va a ser capaz de calcular las respuestas por ti, pero tambi√©n puedes hacer un programa para probar tus propias habilidades matem√°ticas, as√≠:
                    ¬°Rellena los espacios para completar el c√≥digo!
                example_code_2: |
                    ```
                    respuesta_correcta = 11 * 27
                    respuesta = {ask} '¬øCuanto es 11 por 27?'
                    {if} respuesta {is} _ {print} '¬°Buen trabajo!'
                    {else} {print} '¬°Incorrecto! Era ' _
                    ```
                story_text_3: |
                    **Extra** Tambi√©n puedes dejar que el ordenador haga productos aleatorios por s√≠ mismo usando `{random}`.
                example_code_3: |-
                    ```
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number_1 = _
                    number_2 = _
                    correct_answer = number_1 * number_2
                    given_answer = {ask} 'What is ' number_1 ' times ' number_2 '?'
                    {if} _
                    {else} _
                    ```
            9:
                story_text: |
                    En el nivel anterior creaste una calculadora, en este nivel puedes ampliar el c√≥digo para que haga varias preguntas.

                    ### Ejercicio 1
                    ¬øPuedes completar la l√≠nea 10 para hacer que el c√≥digo funcione?

                    ### Ejercicio 2
                    Dale al jugador informaci√≥n cuando introduzcan una pregunta, por ejemplo `{print} '¬°Correcto!'` o `{print} '¬°Error! la respuesta correcta era ' respuesta_correcta`
                example_code: "```\npuntuaci√≥n = 0\n{repeat} 10 {times}\n    n√∫meros = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    n√∫mero_1 = n√∫meros {at} {random}\n    n√∫mero_2 = n√∫meros {at} {random}\n    respuesta_correcta = numero_1 * numero_2\n    {print} '¬øCu√°nto es 'n√∫mero_1' multiplicado por 'n√∫mero_2'?'\n    respuesta = {ask} 'Escriba su respuesta aqu√≠...'\n    {print} 'Tu respuesta es ' respuesta\n    {if}_{is}_ \n        puntuaci√≥n = puntuaci√≥n + 1\n{print} '¬°Buen trabajo! Tu puntuaci√≥n es... 'puntuaci√≥n' sobre 10!'\n```\n"
            10:
                story_text: |
                    This calculator game helps you practise your tables of multiplication!
                    ### Exercise
                    Fill in the blanks. We want this program to ask the player these questions:
                    ```
                    How much is 1 times 1?
                    How much is 1 times 2?
                    How much is 1 times 3?
                    How much is 2 times 1?
                    How much is 2 times 2?
                    How much is 2 times 3?
                    How much is 3 times 1?
                    How much is 3 times 2?
                    How much is 3 times 3?
                    _
                    ```
                example_code: |
                    ```
                    numbers = 1, 2, 3
                    {for} _
                        {for} _
                            answer = {ask} _
                            correct = number_1 * number_2
                            {if} answer {is} correct
                                {print} 'Great job!'
                            {else}
                                {print} 'That is wrong. The right answer is ' correct
                    ```
            11:
                story_text: |
                    Con `{for}` puedes simplificar programas de pr√°ctica de las tablas de multiplicaci√≥n.

                    ### Ejercicio 1
                    Mejora el c√≥digo de ejemplo para que imprima una tabla de multiplicaci√≥n: <br> "1 veces 10 es 10", "2 veces 10 es 20", etc.

                    ### Ejercicio 2
                    Vuelve al c√≥digo de multiplicaci√≥n del nivel 10, y modif√≠calo para que use un `{for}` y `{range}`.
                example_code: |
                    ```
                    n√∫mero = 10
                    {for} i {in} {range} 1 {to} 10
                        {print} i * n√∫mero
                    ```
            12:
                story_text: |
                    En este nivel puedes hacer una calculadora que funcione para n√∫meros decimales.

                    ### Ejercicio 1
                    Rellena los huecos en blanco para completar la calculadora. Recuerda usar un punto y no una coma para los n√∫meros decimales.

                    ### Ejercicio 2
                    Crea un nuevo programa de pr√°ctica de matem√°ticas, pero ahora usa n√∫meros decimales.
                    Crea una lista de n√∫meros, elige dos a multiplicar y deja que el jugador responda.
                    ¬°Y por supuesto tienes que validar la respuesta! **Extra** Aumenta la dificultad a√±adiendo vidas: Un jugador pierde una vida por cada respuesta incorrecta y tras fallar tres respuestas el juego termina.
                example_code: |
                    ```
                    n√∫mero1 = {ask} '¬øCu√°l es el primer n√∫mero?'
                    n√∫mero2 = {ask} '¬øCu√°l es el segundo n√∫mero?'
                    respuesta = _
                    {print} n√∫mero1 ' m√°s ' n√∫mero2 ' es ' respuesta
                    ```
            13:
                story_text: |
                    ### Ejercicio 1
                    Hagamos el programa de pr√°ctica un poco m√°s dif√≠cil. Ahora el jugador tiene que responder correctamente a dos preguntas. Rellena los espacios en blanco para completar el programa.

                    ### Ejercicio 2
                    A veces, los c√°lculos tienen varias respuestas correctas. Por ejemplo, 10 se puede dividir entre 5 y entre 2. As√≠ que la pregunta "¬øQu√© n√∫mero divide a 10?" se puede responder entre 2 y entre 5.
                    Pide un c√°lculo que tenga m√∫ltiples respuestas correctas, pide al jugador que te responda y determine si es correcto utilizando `{or}`.
                    Vac√≠a el campo de programaci√≥n y crea tu propia soluci√≥n.
                example_code: |
                    ```
                    respuesta1 = {ask} 'Cuanto es 10 por 7?'
                    respuesta2 = {ask} 'Cuanto es 6 por 7?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
            14:
                story_text: |
                    In this adventure you will build a calculator that calculates your mean grade for you. If you get your calculator to work, you can move on to the next adventure, which allows you to add two extra features.

                    ### Exercise 1
                    Fill in the blanks to get the calculator to work.
                    * Start with the fourth line, add a question to figure out what grade the student got.
                    * In the fifth line you'll want to calculate the total of all grades, so the total = total + grade.
                    * Then we get to set the return value. We want to return the mean, so the total devided by the amount of tests (4).
                    * Lastly we finish the code by calling the function in line 8.

                    Did you get it? Awesome! Would you like to add even more to your calculator? **This adventure continues in the next tab!**
                example_code: |
                    ```
                    {define} calculate_mean_grade
                        total = 0
                        {for} i {in} {range} 1 {to} 4
                            grade = {ask} _
                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
                    ```

                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
            15:
                story_text: |
                    Puedes agregar el bucle `{while}` al jugo de la calculadora que aprendiste a hacer en el nivel anterior.
                    Esto asegura que el jugador no pueda continuar a la siguiente pregunta si se responde incorrectamente.

                    ### Exercise
                    Add the `{while}` loop in the function, ask the player what number_1 times number_2 is and print their answer.
                    Then `{call}` the function.
                example_code: |
                    ```
                    {define} new_question
                        numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        number_1 = numbers {at} {random}
                        number_2 = numbers {at} {random}
                        correct = number_1 * number_2
                        answer = 0
                        _
                        _
                        _
                        {print} 'Well done!'

                    {print} 'Give 10 correct answers to win!'
                    {for} i {in} {range} 1 {to} 10
                        _
                    {print} 'You win!'
                    ```
    calculator_2:
        name: Calculator 2
        default_save_name: Calculator 2
        description: Calculator 2
        levels:
            14:
                story_text: |
                    ### Exercise 2
                    **This is the second part of this adventure.** The adventure starts in the previous tab.
                    Of course, you don't always want to calculate the mean of 4 tests. You might want to calculate the mean of 10 tests or only 2...
                    We can fix this problem by adding the argument and variable 'amount_of_tests'.
                    * Start a new line on line 3. Set the amount_of_tests argument by asking the student how many tests they have made.
                    * Change the 4 in line 4 to the new argument amount_of_tests.
                    * Lastly, change the 4 in line 6 to amount_of_tests

                    Try out your new program. Does it work?

                    ### Exercise 3
                    Did you want to make your program even better? Great! In the previous program you could only calculate the mean grade of 1 subject, but it would be better if you could calculate the mean grade for all subjects you want!
                    We won't tell you how to do it, but we will give you one tip: Start your code in line 1 with: define calculate_mean_grade with subject.
                example_code: |
                    ```
                    # Use your own code from the previous adventure.
                    ```
    clear_command:
        name: '{clear}'
        default_save_name: comando_limpiar
        description: Comando {clear}
        levels:
            4:
                story_text: |
                    ¬°Es hora de un nuevo comando! Con `{clear}` puedes borrar todo el texto de tu pantalla de salida. De esta forma puedes evitar que tu pantalla se llene demasiado de texto.
                    Atenci√≥n. Si estas usando un comando `{clear}`, puede que necesites usar un `{sleep}` encima. ¬°De lo contrario Hedy limpiar√° tu pantalla sin darte tiempo a leer como puedes ver en el ejemplo!
                example_code: |
                    ```
                    {print} '3'
                    {clear}
                    {print} '2'
                    {clear}
                    {print} '1'
                    {clear}
                    {print} 'wait for it...'
                    {sleep} 3
                    {clear}
                    {print} '¬°SORPRESA!'
                    ```
    debugging:
        name: depurando
        default_save_name: depurando
        description: la aventura de la depuraci√≥n
        levels:
            1:
                story_text: |-
                    Bienvenido a la aventura de la depuraci√≥n. Depurar un c√≥digo significa deshacerse de los errores en el c√≥digo.
                    Eso significa que en estas aventuras de depuraci√≥n, te mostraremos un c√≥digo que a√∫n no funciona.
                    Tendr√°s que averiguar qu√© est√° mal y corregir los errores.

                    ### Ejercicio
                    Depura este c√≥digo. ¬°Suerte!
                example_code: |
                    **¬°Atenci√≥n! ¬°Este c√≥digo necesita ser depurado!**
                    ```
                    {print} Me encanta programar
                    ¬øTambi√©n te encanta programar?
                    {echo}
                    {print} ¬øCu√°les son tus aficiones?
                    {echo} Tus aficiones son
                    ```
            2:
                story_text: |-
                    Bienvenido a una aventura de depuraci√≥n. Depurar un c√≥digo significa deshacerse de los errores en el c√≥digo.
                    Eso significa que en estas aventuras de depuraci√≥n, te daremos un c√≥digo que a√∫n no funciona.
                    Tendr√°s que averiguar qu√© est√° mal y corregir los errores.

                    ### Ejercicio
                    Depura este c√≥digo. ¬°Buena suerte!
                example_code: |
                    **¬°Atenci√≥n! Este c√≥digo necesita ser depurado.
                    ```
                    destino {ask} ¬øA d√≥nde vas de vacaciones?
                    {print} El vuelo a dstino sale a las 3 pm.
                    {ask} ¬øHas facturado ya tu equipaje?
                    {echo}
                    {print} D√©jeme imprimirle su tarjeta de embarque.
                    {sleep}
                    ¬°Aqu√≠ tiene! ¬°Buen viaje!
                    ```
            3:
                story_text: |-
                    Bienvenido a una aventura de depuraci√≥n. Depurar un c√≥digo significa deshacerse de los errores en el c√≥digo.
                    Eso significa que en estas aventuras de depuraci√≥n, te daremos un c√≥digo que a√∫n no funciona.
                    Tendr√°s que averiguar qu√© est√° mal y corregir los errores.

                    ### Ejercicio
                    Depura este c√≥digo. ¬°Buena suerte!
                example_code: |
                    **¬°Atenci√≥n! Este c√≥digo necesita ser depurado.
                    ```
                    movie_choices {is} dracula, fast and furious, home alone, barbie
                    pelicula_escogida {is} peliculas {at} {random}
                    {print} Esta noche veremos _pel√≠culas_elegidas
                    like {ask} ¬øTe gusta esa pel√≠cula?
                    {print} Ma√±ana veremos otra.
                    {add} pel√≠cula_escogida {to_list} pel√≠culas_escogidas
                    {print} Ma√±ana veremos la pel√≠cula de ma√±ana
                    pel√≠cula_ma√±ana {is} pel√≠cula_elegida {at} {random}
                    ¬°Voy a por las palomitas! {print}
                    ```
            4:
                story_text: |-
                    ### Ejercicio
                    Depura este c√≥digo. ¬°Buena suerte!
                example_code: |
                    **¬°Atenci√≥n! ¬°Este c√≥digo necesita ser depurado!**
                    ```
                    {print} '¬°Bienvenido a la biblioteca online!
                    {ask} ¬øQu√© g√©nero de libros te gusta?
                    {print} Te gusta el g√©nero
                    autor {is} {ask} '¬øQui√©n es tu autor favorito?'
                    {print} 'autor es tu autor favorito'
                    {print} Hmmm... creo que deber√≠as probar... libros {at} {random}
                    ```
            5:
                story_text: |-
                    ### Ejercicio
                    Depura este c√≥digo. ¬°Buena suerte!
                example_code: |
                    **¬°Atenci√≥n! ¬°Este c√≥digo necesita ser depurado!
                    ```
                    {print} ¬°Bienvenido a la Piscina Hedy!
                    class {is} {ask} '¬øEst√° aqu√≠ para unirse a una clase hoy?'
                    {if} class yes
                    {print} '¬°Genial! ¬°Te apuntas a una clase!
                    {print} {else} 'No se apuntar√° a ninguna clase'.
                    discount {is} '¬øTienes un c√≥digo de descuento?'
                    {if} discount {is} yes
                    discount_answer {is} {ask} '¬øCu√°l es su c√≥digo de descuento?'
                    discount_codes = Senior4231, Student8786, NewMember6709
                    {if} descuento_respuesta {is} {in} cod_descuento
                    {print} 'Ser√°n $3,50'
                    Son 5,50
                    {print} '¬°Buen ba√±o!'
                    ```
            6:
                story_text: |-
                    ### Ejercicio
                    Depura este c√≥digo. ¬°Buena suerte!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Vending machine'
                    chosen_product = {ask} 'Please select a product'
                    1_dollar_products = coke orange juice water
                    2_dollar_products = chocolate, cookie, museli bar
                    3dollar_prodcuts = potato chips, beef jerky, banana bread
                    {if} chosen {is} {in} 1_dollar_products
                    price = 1
                    {if} chosen_product {is} 2_dollar_products
                    price = 2
                    {else} chosen_product {in} 3_dollar_products
                    price = 3
                    amount_of_products = '{ask} How many of ' chosen_product would you like to have?'
                    total = price + amount_of_product
                    {print} 'That will be $' price 'please'
                    ```
            7:
                story_text: |-
                    ### Ejercicio
                    Sorpresa! Este programa parece mas una salida que un c√≥digo. Y a√∫n, no queremos que solo agregues comandos `{print}` frente a cada linea.
                    Arregla este programa para convertirlo en the nursery rhyme 'Brother John (Fr√®re Jaques)' usando por su puesto el comando {repeat} !
                example_code: |
                    **¬°Atenci√≥n! Este c√≥digo necesita ser depurado!**
                    ```
                    ¬øEst√°s durmiendo?
                    ¬°Hermano John!
                    Las campanas de la ma√±ana est√°n sonando!
                    Ding, dang, dong!
                    ```
            8:
                story_text: |-
                    ### Ejercicio
                    Depura este c√≥digo. ¬°Buena suerte!
                example_code: |-
                    **¬°Atenci√≥n! ¬°Este c√≥digo necesita ser depurado!**
                    ```
                    {print} 'Bienvenido/a a Manicuras y Pedicuras por Hedy'
                    parte_cuerpo = {ask} '¬øVas a hacerte las u√±as de las manos o de los pies? ¬øO ambos?'
                    {if} partes_cuerpo {is} ambos
                            {print} Ser√°n 25‚Ç¨'
                            precio = 25
                        {else}
                            {print} Ser√°n 18‚Ç¨'
                            precio = 18
                    color = {ask} ¬øQu√© color quieres?
                    purpurina = {ask} '¬øQuieres algo de purpurina con esto?'
                    {if} purpurina {is} s√≠
                        {print} 'Son 3‚Ç¨ extra por la purpurina'
                    precio = precio + 3
                    {else} {print} 'No purpurina' {print} 'No cobramos extra'
                    {sleep} 5
                    {print} 'Todo hecho! ¬°Ser√°n ' precio '‚Ç¨ por favor!'
                    {print} '¬°Gracias! ¬°Adi√≥s!'
                    ```
            9:
                story_text: |-
                    ### Ejercicio
                    Depura este c√≥digo. ¬°Buena suerte!
                example_code: |
                    **¬°Atenci√≥n! ¬°Este c√≥digo necesita ser depurado!**
                    ```
                    {print} 'Bienvenido/a a nuestra tienda de s√°ndwiches'
                    cantidad '¬øCu√°ntos s√°ndwiches quieres comprar?'
                    {repeat} cantidad {times}
                    {ask} {is} {ask} '¬øQu√© tipo de pan quieres que tenga tu sandwich?'
                    tipos_de_pan {is} blanco, trigo, centeno, ajo, sin gluten
                    {if} pan_elegido en tipos_de_pan
                    {print} '¬°Encantador!'
                    {else}
                    'Lo siento, no vendemos eso'
                    aderezo {is} {ask} '¬øQu√© tipo de aderezo quieres?'
                    salsa {is} {ask} '¬øQu√© tipo de salsa quieres?'
                    {print} Un pan_elegido con aderezo y salsa.
                    precio = cantidad * 6
                    {print} 'Ser√°n 'precio ‚Ç¨' por favor'
                    ```
            10:
                story_text: |-
                    ### Ejercicio
                    Depurar este c√≥digo. ¬°Buena suerte!
                example_code: |
                    **¬°Atenci√≥n! Este c√≥digo necesita ser depurado!**
                    ```
                    nombres = Muad Hasan Samira Noura
                    actividades = volar una cometa, nadar, senderismo, tomar el sol
                    {for} nombre {is} nombres
                    {print} En la playa a nombre le encanta actividad {at}{random}
                    ```
            11:
                story_text: |-
                    ### Ejercicio
                    Depura este programa de calendario. Se supone que la salida de este programa debe parecerse a una lista de fechas.
                    Por ejemplo:

                    ```
                    Calendario Hedy
                    Aqu√≠ est√°n todos los d√≠as de noviembre
                    1 de Noviembre
                    2 de noviembre
                    3 de noviembre
                    ```
                    Y as√≠ sucesivamente.

                    Ten en cuenta que tienes que probar tu c√≥digo con mucho cuidado para el mes de febrero, porque la cantidad de d√≠as de este mes cambia en los a√±os bisiestos.
                example_code: |
                    **¬°Atenci√≥n! Este c√≥digo necesita ser depurado.
                    ```
                    {print} 'Calendario Hedy'
                    meses_con_31_dias = Enero, Marzo, Mayo, Julio, Septiembre, Octubre, Diciembre
                    months_with_30_days = Abril, Junio, Agosto, Noviembre
                    mes = {ask} ¬øQu√© mes le gustar√≠a ver?
                    {if} mes {in} meses_con_31_d√≠as
                        d√≠as = 31
                        {if} mes {in} meses_con_30_d√≠as
                            d√≠as = 30
                    {if} mes = febrero
                        a√±os bisiestos = 2020, 2024, 2028, 2036, 2040, 2044, 2028
                        a√±o = {ask} ¬øQu√© a√±o es?
                    {if} a√±o {in} bisiestos
                        d√≠as = 29
                    {else}
                        d√≠as = 28

                    {print} 'Aqu√≠ est√°n todos los d√≠as de '
                    mes
                    {for} i {in} {range} 1 {to} d√≠as
                        {print} mes i
                    ```
            12:
                story_text: |-
                    ### Ejercicio
                    Depura este c√≥digo. ¬°Buena suerte!
                example_code: |
                    **¬°Atenci√≥n! ¬°Este c√≥digo necesita ser depurado!**
                    ```
                    definir saludo
                    saludos = 'Hola', 'Hola a todos', 'Buenastardes'
                        imprimir saludos en aleatorio

                    definir tomar_pedido
                        comida = preguntar '¬øQu√© quieres comer?'
                        imprimir 'Una comida'
                        bebida = '¬øQu√© quieres beber?'
                        imprimir 'Una ' bebida
                        mas = preguntar '¬øQuieres algo m√°s?'
                            si mas es 'no'
                        imprimir 'Muy bien'
                            sino
                            imprimir 'Y ' mas
                    imprimir 'Gracias'

                    imprimir 'Bienvenido a nuestro restaurante'
                    gente = preguntar '¬øCu√°nta gente hay en tu grupo esta noche?'
                    para i en rango 0 a gente
                        llamar saludar_cliente
                    ```
            13:
                story_text: |-
                    ### Ejercicio
                    Depura este c√≥digo. ¬°Buena suerte!
                example_code: |
                    **¬°Atenci√≥n! ¬°Este c√≥digo necesita ser depurado!**
                    ```
                    defin recomendacion_pelicula with name
                        peliculas_accion == 'La jungla de cristal', 'R√°pido y furioso', 'Bastardos sin gloria'
                        peliculas_amor = 'Love Actually', 'El diario de Noa', 'Titanic'
                        peliculas_humor = 'Mr Bean' 'Barbie''Deadpool'
                        peliculas_infantiles = 'Minions', 'Paddington', 'Encanto'
                        si nombre es 'Camila' o nombre es 'Manuel'
                            pelicula_recomendada = pelicula_infantil en aleatorio
                        si nombre es 'Pedro' o 'Gabriella'
                                estado_animo = preguntar '¬øCu√°l es tu estado de √°nimo?'
                            si estado_animo es 'acci√≥n'
                                pelicula_recomendada = peliculas_humor en aleatorio
                            si estado_animo es 'romance'
                                pelicula_recomendada = peliculas_amor
                        si estado_animo es 'humor'
                                pelicula_recomendada = peliculas_humor en aleatorio

                    imprimir 'Recomendar√≠a ' pelicula_recomendada ' para ' nombre

                    nombre = preguntar '¬øQui√©n la est√° viendo?'
                    recomendacion = pregruntar '¬øQuieres una recomendaci√≥n?'
                    si recomendaion es 's√≠'
                    imprimir recomendacion_pelicula con nombre
                    sino
                    imprimir '¬°Sin problema!'
                    ```
            14:
                story_text: |-
                    ### Ejercicio
                    Depura este c√≥digo. ¬°Buena suerte!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define calculate_heartbeat
                        print 'Press your fingertips gently against the side of your neck'
                        print '(just under your jawline)'
                        print 'Count the number of beats you feel for 15 seconds'
                        beats == ask 'How many beats do you feel in 15 seconds?'
                        heartbeat = beats*4
                        print 'Your heartbeat is ' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print 'Your heartbeat seems fine'
                        else
                            if heartbeat > 60
                                print 'Your heartbeat seems to be too low'
                            if heartbeat < 100
                                print 'Your heartbeat seems to be too high'
                            print 'You might want to contact a medical professional'

                    measure_heartbeat = ask 'Would you like to measure your heartbeat?'
                    if measure_heartbeat = 'yes'
                        call measure_heartbeat
                    else
                        'no problem'
                    ```

                        print '(just under your jawline)'
                        print 'Count the number of beats you feel for 15 seconds'
                        beats == ask 'How many beats do you feel in 15 seconds?'
                        heartbeat = beats*4
                        print 'Your heartbeat is ' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print 'Your heartbeat seems fine'
                        else
                            if heartbeat > 60
                                print 'Your heartbeat seems to be too low'
                            if heartbeat < 100
                                print 'Your heartbeat seems to be too high'
                            print 'You might want to contact a medical professional'

                    measure_heartbeat = ask 'Would you like to measure your heartbeat?'
                    if measure_heartbeat = 'yes'
                        call measure_heartbeat
                    else
                        'no problem'
            15:
                story_text: |-
                    ### Ejercicio
                    Depura este cuento infantil al azar. ¬°Buena suerte!
                example_code: |
                    **¬°Atenci√≥n! ¬°Este c√≥digo necesita ser depurado!**
                    ```
                    nombres = 'Tanya', 'Romy', 'Kayla', 'Aldrin', 'Ali'
                    verbos='caminar', 'saltar', 'pedalear', 'conducir', 'correr'
                    ubicaciones = 'en la cima de una monta√±a', 'en el supermercado', 'en la piscina'
                    escondites = 'detr√°s de un arbol', 'bajo una mesa', 'en una caja'
                    sonidos = 'a trumpet', 'a car crash', 'thunder'
                    causas_de_ruido = 'una televisi√≥n', 'un ni√±o con petardos', 'un elefante m√°gico', 'un sue√±o'

                    nombre_ elegido = nombres en aleatorio
                    verbo_elegido = verbos en aleatorio
                    ubicacion_elegida = 'ubicaciones en aleatorio'
                    sonidos_elegidos = ruidos en aleatorio
                    lugar_elegido = escondites en aleatorio
                    causas_elegidas = causas_de_ruido en aleatorio

                    imprimir nombre_elegido ' fue ' verbo_elegido ' ' ubicacion_elegida
                    imprimir 'cuando de repente escucharon un sonido de ' sonidos en aleatorio
                    imprimir nombre_elegido ' mir√≥ alrededor, pero no pudieron descubrir de donde proven√≠a el sonido'
                    imprimir nombre_elegido ' se escondi√≥ en ' lugar_elegido'
                    imprimir 'Miraron alrededor, pero no pudieron ver nada all√≠'
                    oculto = 's√≠'
                    mientras oculto = 's√≠'
                        imprimir nombre_elegido 'todav√≠a no ven nada'
                    respuesta = preguntar '¬øSe ha movido  ' nombre_elegido ' de su escondite?'
                        si respuesta = 's√≠'
                            oculto == 'no'
                    imprimir 'nombre_elegido se movi√≥ de ' lugar_elegido
                    imprimir 'Y entonces vieron que s√≥lo era ' causas_elegidas
                    imprimir nombre_elegido 'se ri√≥ y siguieron con su d√≠a'
                    imprimir Fin
                    ```
            16:
                story_text: |-
                    ### Ejercicio
                    Depura este c√≥digo. ¬°Buena suerte!
                    Consejo: Aseg√∫rate que s√≥lo ves la puntuaci√≥n una vez al final.
                example_code: |
                    **¬°Atenci√≥n! ¬°Este c√≥digo necesita ser depurado!**
                    ```
                    pais = ['Pa√≠ses Bajos', 'Polonia', 'Turqu√≠a', 'Zimbabwe', 'Tailandia', 'Brasil', 'Per√∫', 'Australia', 'India', 'Ruman√≠a' ]
                    capitales = 'Amsterdam', 'Warshaw' 'Istanbul', 'Harare', 'Bangkok', 'Brasilia', 'Lima', 'Canberra', 'Nueva Delhi', 'Bucarest'
                    puntuacion = 0
                    para i en rango 0 a 10
                        respuesta = preguntar '¬øCu√°l es la capital de ' paises[i]
                        correcto = capital[i]
                        si respuesta = correcto
                            imprimir '¬°Correcto!'
                        puntuacion = puntuacion + 1
                        sino
                            imprimir 'Incorrecto,' capitales[i] ' es la capital de ' paises[i]
                        imprimir 'Has conseguido ' puntuacion ' sobre 10'

                    ```
            17:
                story_text: |-
                    ### Ejercicio
                    Depura este c√≥digo. ¬°Buena suerte!
                example_code: |
                    **¬°Atenci√≥n! ¬°Este c√≥digo necesita ser depurado!**
                    ```
                    definir pedir_comida
                        aderezos = preguntar '¬øpepperoni, at√∫n, vegetal o queso?'
                        tama√±o = preguntar '¬øgrande, mediana o peque√±a?'
                        numero_de_pizzas = preguntar '¬øCu√°ntas pizzas de estas quieres?'

                        imprimir 'HAS PEDIDO'
                        imprimir numero_de_pizzas 'pizza ' tama√±o ' aderezos'

                    definir pedir_bebidas
                        bebida = preguntar '¬øagua, refresco, t√© helado, limonada, caf√©?'
                        numero_de_bebidas = preguntar '¬øCu√°ntas bebidas de estas quieres?'

                        imprimir 'HAS PEDIDO'
                        imprimir numero_de_bebidas ' ' bebida

                    'Bienvenido/a a la pizzer√≠a Hedy'
                    mas_comida = preguntar '¬øQuieres pedir una pizza?'
                    mientras mas_comida = 's√≠'
                        return pedir_comida
                        mas_comida = preguntar '¬øQuieres pedir una pizza?'
                    mas_bebida = preguntar '¬øQuieres pedir alguna bebida?'
                    mientras mas_bebida == 's√≠'
                        llamar pedir_bebidas
                        mas_bebida == preguntar '¬øQuieres pedir m√°s bebidas?'


                    imprimir '¬°Gracias por pedir!'
                    ```
            18:
                story_text: |-
                    ### Ejercicio
                    Depura este programa de Old MacDonald del nivel 16. ¬°Buena suerte!
                example_code: |
                    **¬°Atenci√≥n! ¬°Este c√≥digo necesita ser depurado!**
                    ```
                    animales = ['cerdo', 'perro', 'vaca']
                    sonidos = ['oink', 'woof', 'moo']
                    para i en rango 1 a 3
                        animal = animales[i]
                        sonido = sonidos[i]
                        imprimir 'Old MacDonald tenia una granja'
                        imprimir 'E I E I O!'
                        imprimir 'y en esa granja ten√≠a un ' animal
                        imprimir 'E I E I O!'
                        imprimir 'con un ' sonido sonido ' aqu√≠'
                        imprimir 'y un ' sonido sonido ' all√≠'
                        imprimir 'aqu√≠ un ' sonido
                        imprimir 'all√≠ un ' sonido
                        imprimir 'en todas partes un ' sonido sonido
                    ```
    default:
        name: Introducci√≥n
        default_save_name: intro
        description: Explicaci√≥n del nivel
        levels:
            1:
                story_text: |
                    ¬°Bienvenido a  Hedy! En el nivel 1 puede empezar imprimiendo una historia.

                    Prueba el c√≥digo por ti mismo con el bot√≥n verde 'Ejecutar c√≥digo' bajo el bloque de programaci√≥n.

                    ¬øPreparado? ¬°Entonces ve a la siguiente pesta√±a para aprender tu primer comando!
                example_code: |
                    ```
                    {print} Hola Mundo!
                    ```
            2:
                story_text: |
                    ¬°Enhorabuena! Has alcanzado el nivel 2. ¬°Espero que ya hayas hecho algunos c√≥digos incre√≠bles!
                    Quiz√°s te has dado cuenta en el primer nivel que el comando `{echo}` s√≥lo puede guardar un bit de informaci√≥n cada vez.
                    Por ejemplo en la aventura del restaurante, puedes imprimir lo que el cliente quiere comer, o que quiere de beber, pero no ambas en una misma frase.

                    Esos cambios en el nivel 2. En el nivel 2 aprender√°s a trabajar con variables, que te permiten guardar varias partes de informaci√≥n e imprimirlas donde quieras.
                    ¬°As√≠ que vayamos a la siguiente pesta√±a!
                example_code: |
                    **¬°Cuidado! ¬°Este c√≥digo no funciona!**
                    En Hedy los comandos a veces cambiar√°n. `{echo}` por ejemplo s√≥lo funciona en el nivel 1. En este nivel aprender√°s una forma mejor para devolver las respuestas.
                    ```
                    {print} Bienvenido a Hedy's
                    {ask} ¬øQu√© le gustar√≠a comer?
                    {echo} As√≠ que quiere
                    {ask} ¬øqu√© le gustar√≠a beber?
                    {echo} As√≠ que quiere
                    ```
            3:
                story_text: |
                    En el nivel anterior has aprendido lo que es una variable y como puedes usarla para hacer tus aventuras m√°s interactivas.
                    Pero... ¬°eso no es lo √∫nico que puedes hacer con las variables! Tambi√©n puedes usar variables para hacer listas.
                    Incluso puedes dejar que Hedy elija una palabra al azar de una lista, ¬°lo que te permite hacer juegos de verdad!
                    ¬°Echa un vistazo a la siguiente pesta√±a!
            4:
                story_text: |
                    En los niveles anteriores has estado practicando con las variables, pero es posible que te hayas encontrado con este problema.
                    Es posible que hayas intentado ejecutar un c√≥digo como este:

                    Por supuesto que quer√≠as imprimir

                    `My name is Sophie`

                    pero Hedy imprime

                    `My Sophie is Sophie`.

                    En este nivel, este problema se soluciona mediante el uso de comillas.
                example_code: |
                    ```
                    nombre {is} Sofia
                    {print} Mi nombre es nombre
                    ```
            5:
                story_text: |
                    En los niveles anteriores ya has aprendido a usar `{at} {random}` lo que hizo tus juegos distintos cada vez que ejecutaste el c√≥digo.
                    Pero no es muy interactivo, el jugador no tiene ning√∫n efecto en lo que ocurre en el juego.

                    En este nivel aprender√°s el comando `{if}` , que te permite dar respuestas distintas en tu programa. De esta manera, por ejemplo, puedes programa una contrase√±a secreta para tu ordenador.
                    ¬°As√≠ que vayamos a la siguiente pesta√±a para el nuevo comando!
                example_code: |
                    ```
                    contrase√±a {is} {ask} '¬øCu√°l es la contrase√±a correcta?'
                    ```
            6:
                story_text: |
                    En el nivel anterior has practicado con `{ask}` y `{if}`. Por ejemplo puedes preguntar a los clientes qu√© les gustar√≠a comer.
                    Lo que todav√≠a no puedes hacer, es calcular el precio de la cena de todos.

                    El siguiente nivel te permitir√° usar la suma, resta y multiplicaci√≥n en tus programas. De esta manera podr√°s calcular los precios en tu restaurante, pero tambi√©n podr√°s a√±adir un c√≥digo secreto para dar un descuento a tus amigos y familiares.
                    Otra opci√≥n en el siguiente nivel es programar tu propio juego de matem√°ticas, para que tus hermanos peque√±os practiquen sus multiplicaciones.
                    ¬°Ve a verlo por ti mismo!
                example_code: |
                    ```
                    precio_comida {is} 0
                    precio_bebida {is} 0
                    precio_total {is} 0
                    {print} 'Bienvenido a McHedy'
                    pedido {is} {ask} '¬øQu√© le gustar√≠a comer?'
                    {if} pedido {is} hamburguesa precio_comida {is} 5
                    {if} pedido {is} patatas precio_comida {is} 2
                    bebida {is} {ask} '¬øQu√© le gustar√≠a beber?'
                    {if} bebida {is} precio_bebida agua {is} 0
                    {else} precio_bebida {is} 3
                    precio_total {is} precio_comida + precio_bebida
                    {print} 'Ser√°n ' precio_total ' d√≥lares, por favor'
                    ```
            7:
                story_text: |
                    ¬°Gran trabajo! Has alcanzado el siguiente nivel, lo que significa que has practicado con `{if}` and `{else}`. Te habr√°s dado cuenta de que tus c√≥digos son cada vez m√°s extensos.
                    Por ejemplo, si quieres programar 'Feliz Cumplea√±os'.

                    Eso es mucho trabajo para b√°sicamente las mismas palabras una y otra vez. Por fortuna, en la siguiente pesta√±a aprender√°s una soluci√≥n con el comando `{repeat}`, que te permitir√° repetir una l√≠nea de c√≥digo varias veces.
                example_code: |
                    ```
                    {print} 'cumplea√±os feliz'
                    {print} 'cumplea√±os feliz'
                    {print} 'cumplea√±os feliz querido Hedy'
                    {print} 'cumplea√±os feliz'
                    ```
            8:
                story_text: |
                    Ahora has aprendido a como repetir una √∫nica l√≠nea de c√≥digo. Esto es √∫til, pero no siempre es suficiente. A veces quieres repetir varias l√≠neas de una vez.
                    Este nivel te permite agrupar un par de l√≠neas de c√≥digo, ¬°y repetir ese peque√±o grupo de l√≠neas de una vez!
                example_code: |
                    ```
                    {repeat} 5 {times} {print} '¬°En la siguiente pesta√±a puedes repetir varias l√≠neas de c√≥digo a la vez!'
                    ```
            9:
                story_text: |
                    ¬°Buen trabajo! ¬°Has alcanzado otro nuevo nivel! En el nivel anterior aprendiste a usar varias l√≠neas de c√≥digo en un comando {if} o {repeat}. Pero todav√≠a no puedes combinar los dos...
                    ¬°Buenas noticias! En este nivel se te permitir√° poner un {if} dentro de otro {if}, o dentro de un comando {repeat}.
                example_code: |
                    ```
                    respuesta = {ask} "¬øEst√°s preparado para aprender algo nuevo?"
                    {if} respuesta {is} S√≠
                        {print} '¬°Genial! Puedes aprender a usar el comando repeat en el comando if!'
                        {print} '¬°Hurra!'
                        {print} '¬°Hurra!'
                        {print} '¬°Hurra!'
                    {else}
                        {print} 'Quiz√°s deber√≠as practicar un poco m√°s en el nivel anterior'
            10:
                story_text: |
                    ¬°Lo est√°s haciendo genial! En el nivel anterior todav√≠a nos encontramos con un peque√±o problema. Has aprendido a repetir l√≠neas, pero ¬øy si quisieras cambiar ligeramente la l√≠nea?
                    Por ejemplo, si quieres cantar la canci√≥n 'si eres feliz y lo sabes'. Se parecer√≠a a algo como esto:

                    Si tambi√©n quisieras el siguiente verso 'pisa con los pies', y el siguiente, y el siguiente, tendr√≠as que cambiar por completo tu c√≥digo.
                    En este nivel aprender√°s el comando `{for}`, que te permite hacer una lista de acciones y repetir el c√≥digo con otra acci√≥n !cada vez!
                    ¬°√âchale un vistazo!
                example_code: |
                    ```
                    {repeat} 2 {times}
                        {print} 'si eres feliz y lo sabes aplaude con tus manos'
                    {print} 'si eres feliz y lo sabes y realmente quieres mostrarlo'
                    {print} 'si eres feliz y lo sabes aplaude con tus manos'
                    ```
            11:
                story_text: |
                    Has alcanzado el nivel 11, ¬°lo est√°s haciendo genial! En los niveles superiores, Hedy se centra m√°s y m√°s en ense√±arte el lenguaje de programaci√≥n Python.
                    En Python no hay comando `{repeat}`, pero hay un comando que funciona como {repeat}.¬øTienes curiosidad de saber c√≥mo se llama `{repeat}` en el idioma Python? Aver√≠gualo r√°pidamente.
            12:
                story_text: |
                    Quiz√° hayas intentado usar n√∫meros decimales en aventura del restaurante. Si lo hiciste, te habr√°s dado cuenta que Hedy no todav√≠a los entend√≠a y siempre los redondeaba.
                    Desde este nivel en adelante puedes usar n√∫meros decimales.
                example_code: |
                    ```
                    hamburguesa = 5
                    bebida = 2
                    total = hamburguesa + bebida
                    imprimir 'Has pedido una hamburguesa y una bebida'
                    imprimir 'Eso cuesta ' total ' d√≥lares por favor'
                    ```
            13:
                story_text: |
                    En los niveles anteriores aprendiste c√≥mo poner dos comandos `{if}` uno dentro de otro. Esto funciona bien, pero resulta en c√≥digos extensos e inmanejables como este:

                    En este sistema tienes que poner el nombre de usuario correcto y la contrase√±a correcta.
                    En este nivel aprender√°s el comando `{and}` que har√° este c√≥digo !mucho m√°s corto y m√°s entendible!
                    ¬°Compru√©balo!
                example_code: |
                    ```
                    nombre_usuario = {ask} '¬øCu√°l es tu nombre de usuario?'
                    contrase√±a = {ask} '¬øCu√°l es tu contrase√±a?'
                    {if} nombre_usuario {is} 'Hedy'
                        {if} contrase√±a {is} 'secreta'
                            {print} '¬°Bienvenido Hedy!'
                        {else}
                            {print} 'Acceso denegado'
                    {else}
                        {print} '¬°Acceso denegado!'
                    ```
            14:
                story_text: |
                    Con el programa de abajo puedes calcular si has aprobado una asignatura en el colegio (por lo tanto, una nota de seis o superior).
                    Puedes ver que este c√≥digo es extremadamente ineficiente, debido al c√≥digo tan largo en la l√≠nea 5.
                    Todas las diferentes notas de 1 a 5 tuvieron que programarse por separado. Afortunadamente para ti, en este nivel aprender√°s como hacer esto sin este c√≥digo !extremadamente largo!
                example_code: |
                    ```
                    primer_curso = {ask} '¬øQu√© nota conseguiste en tu primer examen?'
                    segundo_curso = {ask} '¬øQu√© nota conseguiste en tu segundo examen?'
                    suma = primer_curso + segundo_curso
                    media_curso = suma / 2
                    {if} media_curso = 1 {or} media_curso = 2 {or} media_curso = 3 {or} media_curso = 4 {or} media_curso = 5
                        {print} '¬°Oh no! Has suspendido la asignatura...'
                    {else}
                        {print} '¬°Genial! ¬°Has aprobado la asignatura!'
                    ```
            15:
                story_text: |
                    En el juego de abajo, se ha preparado un c√≥digo para asegurarse que el jugador pueda jugar tanto como quieran...
                    Pero el c√≥digo es ineficiente y tarda mucho. Adem√°s, ¬øy si el jugador quiere jugar 101 partidas en vez de 100?
                    ¬øNo puede jugar hasta el infinito?
                    !En este nivel aprender√°s un comando que har√° todo esto mucho m√°s f√°cil!
                example_code: |
                    ```
                    juego = 'iniciado'
                    {for} i {in} {range} 1 {to} 100
                        {if} juego == 'iniciado'
                            respuesta = {ask} '¬øQuieres continuar?'
                            {if} respuesta == 'no'
                                juego == 'finalizado'
                            {if} respuesta == 'si'
                                {print} 'Ok continuemos'
                    ```
            16:
                story_text: |
                    En este nivel creceremos un poco m√°s hacia c√≥digo real de Python. Tambi√©n aprender√°s como hacer que dos listas coincidan.
                    As√≠ puedes programar un c√≥digo en el que el animal correcto coincide con el sonido correcto.
                    Porque los dos c√≥digo de abajo... !Obviamente no tienen sentido!
                example_code: |-
                    ```
                    animales = 'gallina', 'caballo', 'vaca'
                    sonidos = 'cluck', 'neigh', 'moo'
                    {for} animal {in} animales
                        {print} 'Un ' animal ' dice ' sonidos {at} {random}
                    ```
                    Tambi√©n puedes intentar que funcione as√≠, pero....
                    ```
                    animales = 'gallina', 'caballo', 'vaca'
                    sonidos = 'cluck', 'neigh', 'moo'
                    {for} animal {in} animales
                        {for} sonido {in} sonidos
                            {print} 'Un ' animal ' dice ' sonido
                    ```
                    Nota: Estos c√≥digos no funcionar√°n as√≠ en este nivel. Dir√≠gete a la siguiente pesta√±a para ver qu√© partes necesitas corregir.
            17:
                story_text: |
                    Ahora vamos a cambiar un poco la indentaci√≥n. Cada vez que necesitemos una sangr√≠a, necesitaremos `:` en la l√≠nea anterior a la sangr√≠a.

                    En este nivel tambi√©n se puede utilizar un nuevo comando: `{elif}`. `{elif}` es la abreviatura de `{else} {if}` y lo necesitas cuando quieres hacer 3 (¬°o m√°s!) opciones.
                    ¬°Compru√©balo!
            18:
                story_text: |
                    ¬°Enhorabuena! Has alcanzado el √∫ltimo nivel de Hedy! El c√≥digo que has creado aqu√≠ se puede copiar a entornos reales de Python como replit o PyCharm, ¬°y puedes continuar aprendiendo all√≠!
                    Sin embargo ten en cuenta que Python s√≥lo puede leer comando en ingl√©s, as√≠ que si has estado usando otros idiomas, ahora los tendr√°s que cambiar a ingl√©s.
    dice:
        name: Dados
        default_save_name: Dados
        description: Crea tu propio juego de dados
        levels:
            3:
                story_text: |
                    En el nivel 2 puedes elegir elementos de una lista. De esa manera podemos hacer que se tiren los dados.
                    Dale una mirada a los juegos de mesa que tienes en tu casa.
                    Hay en tu casa juegos que usen un dado normal (¬øo un dado especial)? Puedes crear los mismos dados con el siguiente programa.
                    Por ejemplo, los dados del juego Gusanitos, que tienen los n√∫meros del 1 al 5, y en lugar de 6, un gusanito.

                    ![Dado con n√∫meros del 1 al 5 y un gusanito en lugar del 6](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    opciones {is} 1, 2, 3, 4, 5, lombriz de tierra
                    {print} ¬°Lanzaste _ {at} {random}!
                    ```
                story_text_2: |
                    ### Ejercicio
                    Los dados en el ejemplo de arriba son dados para un juego en espec√≠fico. ¬øPuedes hacer un dado normal?
                    ¬øU otro dado especial para un juego diferente?
                example_code_2: |
                    ```
                    opciones {is} _
                    ```
            4:
                story_text: |
                    En este nivel podemos crear dados. Pero en esta ocasi√≥n puedes intentarlo por ti mismo, sin un c√≥digo de ejemplo!

                    ### Ejercicio
                    Haz tu propio dado en este nivel.
                    Nota: Si no tienes idea de como hacer dados. Mira tus dados del nivel anterior, pero no olvides las comillas.
            5:
                story_text: |
                    Vamos a a√±adir los comandos `{if}` y `{else}` a nuestros dados!

                    ### Ejercicio
                    Completa el c√≥digo de ejemplo para que diga "Ya puedes dejar de lanzar" una vez que lances un gusano. Deber√≠a decir "Debes lanzarlo otra vez" si no has lanzado nada mas.
                    **Extra** Tal vez quieras recrear una muerte de un juego totalmente diferente. Tambi√©n esta bien! Luego haz tu propia reacci√≥n, por ejemplo, 'Si!' para 6 y 'Lastima!' para algo mas.
                example_code: "```\nopciones {is} 1, 2, 3, 4, 5, lombriz\ntirada {is} opciones {at}{random}\n{print} 'haz tirado ' opciones\n_ lanzar{is} lombriz {print} 'Puedes dejar de tirar los dados' \n_ {print} '!Debes tirar los dados otra vez!'\n```\n"
            6:
                story_text: |
                    Puedes hacer un dado de gusanito otra vez en este nivel, pero ahora tambi√©n puedes calcular cuantos puntos han sido tirados.
                    Puedes saber que el gusano cuenta como cinco puntos para los gusanitos. Ahora cada vez que lances el dado puedes calcular inmediatamente cuantos puntos haz tirado.
                    Este es el c√≥digo para calcular los puntos para un dado:

                    ### Ejercicio
                    ¬øPuedes hacer que el c√≥digo obtenga la puntuaci√≥n total por 8 dados? Para hacer eso tienes que copiar y pegar algunas l√≠neas de c√≥digo.
                example_code: |
                    ```
                    opciones = 1, 2, 3, 4, 5, lombriz
                    puntos = 0
                    tirada = opciones {at} {random}
                    {print} 't√∫ lanzaste ' tirada
                    {if} tirada {is} lombriz puntos = puntos + 5 {else} puntos = puntos + tirada
                    {print} 'esos son ' puntos ' puntos'
                    ```
                example_code_2: |
                    ¬øConseguiste calcular la puntuaci√≥n de 8 dados? Eso requiri√≥ mucho copiar y pegar, ¬øverdad? ¬°Vamos a hacerlo m√°s f√°cil en el nivel 7!
            7:
                story_text: |
                    Puedes hacer un dado otra vez en este nivel. Con el c√≥digo `{repeat}` puedes tirar f√°cilmente una mano entera de dados.

                    ### Ejercicio
                    ¬°Intenta terminar el c√≥digo de ejemplo!  **Extra** Piensa en un juego que conozcas que tenga un dado y progr√°malo usando `{repeat}`.
                example_code: |
                    ```
                    opciones = 1, 2, 3, 4, 5, 6
                    _ _ _ _ _ _ _
                    ```
            10:
                story_text: |
                    ### Ejercicio
                    ¬øTodo el mundo tarda mucho lanzando el dado? ¬°En este nivel puedes dejar que Hedy lance todos los dados a la vez!
                    Cambia los nombres por nombres de tus amigos o familia, y completa el c√≥digo para que cada uno pueda lanzarlos.
                example_code: |
                    ```
                    jugadores = Ana, Juan, Pedro
                    opciones = 1, 2, 3, 4, 5, 6
                    _ _ _ _
                        {print} jugador ' tir√≥ un ' opciones {at} {random}
                        {sleep}
                    ```
            15:
                story_text: |
                    ### Exercise
                    In this level you can create a little game in which you'll have to throw 6 as fast as possible.
                    We have started the code, it's up to you to get the game to work!

                    Firstly, add a `{while}` loop that checks if 6 has been thrown or not.
                    As long as you haven't thrown 6 already, throw the dice on a random number.
                    Print what the player has thrown.
                    Add a try to the amount of tries
                    Wait a second before you throw again, or - in case you've thrown a 6 - before the game ends.
                example_code: |
                    ```
                    options = 1, 2, 3, 4, 5, 6
                    {print} 'Throw 6 as fast as you can!'
                    thrown = 0
                    tries = 0
                    _
                    _
                    _
                    _
                    _
                    {print} 'Yes! You have thrown 6 in ' tries ' tries.'
                    ```
    dishes:
        name: ¬øPlatos?
        default_save_name: Platos
        description: Usa la computadora para ver quien ha de lavar los platos
        levels:
            3:
                story_text: |
                    ¬øTienes en tu casa discusiones interminables sobre quien ha de lavar los platos hoy, o quien tiene que limpiar la caja del gato?
                    Ahora puedes dejar que la computadora elija honestamente a quien debe hacerlo. ¬°Puedes programar esto ahora en este nivel!
                example_code: |
                    ```
                    personas {is} mam√°, pap√°, Emma, Sof√≠a
                    {print} personas {at} {random} tiene que lavar los platos
                    ```
                story_text_2: |
                    ### Ejercicio
                    Haz tu propia versi√≥n del programa. Primero haz una lista de los miembros de tu familia.
                    Luego piensa en una tarea que tenga que ser hecha, y deja que la computadora decida quien debe hacer la tarea con el comando `{at} {random}`.

                    **Extra** ¬øNo quieres lavar los platos por ti mismo? Hackea el programa quitando tu nombre de la lista con `{remove}``{from}`.
            4:
                story_text: |
                    Usando comillas puedes hacer m√°s interesante tu programa.

                    ### Ejercicio
                    Primero, rellena los espacios con los s√≠mbolos o comandos correctos para hacer que el programa de ejemplo funcione.
                    Lo entendiste? Incre√≠ble! Ahora copia tu c√≥digo del nivel anterior y haz que funcione en este nivel a√±adiendo comillas en el lugar correcto.
                example_code: |
                    ```
                    personas {is} mam√°, pap√°, Emma, Mar√≠a
                    {print} _ los platos ser√°n hechos por _
                    {sleep}
                    {print} personas {at} _
                    ```
            5:
                story_text: |
                    Usando el comando `{if}` ahora puedes hacer tu programa todav√≠a m√°s divertido. Ahora tu programa puede reaccionar de acuerdo a la elecci√≥n de quien lavar√° los platos.
                    ### Ejercicio
                    ¬øPuede hacer que tu programa imprima 'oh no' si es tu turno de lavar los platos, y '¬°s√≠!' en caso contrario?
                    ¬°No olvides las comillas!
                example_code: |
                    ```
                    personas {is} mam√°, pap√°, Emma, Sof√≠a
                    lavavajillas {is} personas {at} {random}
                    lavavajillas {is} Sof√≠a {print} _ l√°stima que tengo que lavar los platos _
                    {print} 'afortunadamente no hay platos porque' _ 'ya los est√° lavando'
                    ```
            6:
                story_text: |
                    ¬øTodo el mundo lava los platos por igual? ¬øTe parece justo? Puedes contarlo en este nivel.
                example_code: "```\npersonas = mam√°, pap√°, Emma, Mar√≠a\nemma_lava = 0\nlavaplatos = personas {at} {random}\n{print} 'El lavaplatos es ' lavaplatos\n{if} lavaplatos {is} Emma emma_lava = emma_lava + 1\n{print} 'Emma va a hacer los platos hoy ' emma_lava 'veces'\n```\n\nAhora puedes copiar las l√≠neas 3 a 5 unas cuantas veces (por ejemplo, 7 para toda la semana) para calcular para toda la semana otra vez. \n¬øPuedes hacer el c√≥digo para toda la semana?\n"
                story_text_2: |
                    Si tienes muy mala suerte, puede que el programa anterior te elija para fregar los platos durante toda la semana. ¬°Eso no es justo!
                    Para crear un sistema m√°s justo puedes utilizar el comando `{remove}` para eliminar a la persona elegida de la lista. As√≠ no tendr√°s que volver a fregar los platos hasta que todos hayan tenido su turno.

                    El Lunes y el Martes ya est√°n listos. ¬øPuedes a√±adir el resto de la semana?
                    Y... ¬øse te ocurre alguna soluci√≥n para cuando tu lista est√© vac√≠a?
                example_code_2: "```\npersonas = mam√°, pap√°, Emma, Sof√≠a\nlavavajillas = personas {at} {random}\n{print} 'El lunes los platos ser√°n lavados por ' lavavajillas \n{remove} lavavajillas {from} personas\nlavavajillas = personas {at} {random}\n{print} 'El martes los platos ser√°n lavados por ' lavavajillas \n{remove} lavavajillas {from} personas\n```\n"
            7:
                story_text: |
                    Con `{repeat}` puedes repetir partes del c√≥digo. Puedes usarlo para calcular qui√©n va a lavar los platos por varios d√≠as!
                    ### Ejercicio
                    Usa el comando de `{repeat}` para decidir quien debe lavar los platos toda la semana. ¬°Cada espacio en blanco debe rellenarse con un comando o numero!
                    **Extra** ¬øPuedes pensar en otras tareas para la casa? Adapta el c√≥digo para que decida sobre tres tareas dom√©sticas. !No te olvides mostrar de que tareas se tratan!
                example_code: |
                    ```
                    gente = mam√°, pap√°, Emma, Sof√≠a
                    {repeat} _ _ {print} 'el lavaplatos es ' _
                    ```
            10:
                story_text: |
                    En este nivel puedes hacer un horario de lavado de platos de forma f√°cil.

                    ### Ejercicio
                    Agrega una tarea secundaria, como aspirar o planchar, y aseg√∫rate que tambi√©n est√© dividida para toda la semana.
                    <br>**Extra** El programa no es justo, puedes tener mala suerte y lavar toda la semana. ¬øC√≥mo puedes hacer el programa m√°s justo?
                example_code: |
                    ```
                    d√≠as = Lunes, Martes, Mi√©rcoles, Jueves, Viernes, S√°bado, Domingo
                    nombres = mam√°, pap√°, Emma, Sof√≠a
                    {for} d√≠a {in} d√≠as
                        {print} nombres {at} {random} ' Har√° los platos el ' d√≠a
                    ```
    elif_command:
        name: '{elif}'
        default_save_name: sinosi
        description: sinosi
        levels:
            17:
                story_text: |
                    En este nivel tambi√©n puedes usar un comando nuevo: `{elif}`. `{elif}` es la combinaci√≥n de las palabras clave `{else}` y `{if}` y lo necesitas cuando quieres hacer 3 (¬°o m√°s!) opciones.
                    ¬°Compru√©balo!
                example_code: |
                    ```
                    premios = ['1 mill√≥n de d√≥lares', 'una tarta de manzana', 'nada']
                    tu_premio = premios[{random}]
                    {print} 'Ganaste ' tu_premio
                    {if} tu_premio == '1 mill√≥n de d√≥lares' :
                        {print} '¬°S√≠! ¬°Eres rico!'
                    {elif} tu_premio == 'una tarta de manzana' :
                        {print} '¬°Delicioso, una tarta de manzana!'
                    {else}:
                        {print} 'M√°s suerte la pr√≥xima vez..'
                    ```
    for_command:
        name: '{for}'
        default_save_name: para
        description: comando para
        levels:
            10:
                story_text: |-
                    ## Para
                    En este nivel aprendemos un nuevo c√≥digo llamado `{for}`. Con `{for}` puedes hacer una lista y usar todos los elementos.
                    `{for}` crea un bloque, como `{repeat}` y `{if}` as√≠ todas las l√≠neas dentro del bloque necesita empezar con 4 espacios.
                example_code: |
                    ```
                    animales = perro, gato, pez globo
                    {for} animal {in} animales
                        {print} 'Yo amo ' animal
                    ```
                story_text_2: |
                    ### Exercise
                    Finish this code by adding `{for} action {in} actions` to line 2.
                example_code_2: |
                    ```
                    actions = clap your hands, stomp your feet, shout Hurray!
                    _
                        {repeat} 2 {times}
                            {print} 'If youre happy and you know it, ' action
                            {sleep} 2
                        {print} 'If youre happy and you know it, and you really want to show it'
                        {print} 'If youre happy and you know it, ' action
                        {sleep} 3
                    ```
            11:
                story_text: |-
                    En este nivel, a√±adimos una nueva forma del `{for}`. En niveles anteriores, usamos `{for}` con una lista, pero tambi√©n podemos usar `{for}` con n√∫meros.
                    Esto lo hacemos a√±adiendo un nombre de variable, seguido por `{in}` `{range}`. Entonces escribimos el n√∫mero en el que empezar, `{to}` y el n√∫mero en el que terminar.

                    ¬°Prueba este ejemplo a ver qu√© pasa! Otra vez en este nivel, tendr√°s que usar sangr√≠as en las l√≠neas situadas debajo de las sentencias `{for}`.
                example_code: |
                    ```
                    {for} contador {in} {range} 1 {to} 10
                        {print} contador
                    {print} 'Listos o no, all√≠ voy.'
                    ```
            17:
                story_text: |
                    Ahora vamos a cambiar la sangr√≠a un poco. Cada vez que necesitemos una sangr√≠a, necesitamos `:` en la l√≠nea antes de la sangr√≠a.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} '¬°Preparado o no, all√° voy!'
                    ```
            18:
                story_text: |
                    Lastly, we'll turn `{for} i {in} {range} 1 to 5` into real Python code, like this:
                example_code: |
                    ```
                    {for} i {in} {range}(1,5):
                        {print} (i)
                    ```
    fortune:
        name: El adivino
        default_save_name: El adivino
        description: Deja que Hedy prediga el futuro
        levels:
            1:
                story_text: |
                    ¬øAlguna vez has estado en un carnaval y un adivino ha predicho tu futuro? ¬øO alguna vez has jugado con una bola m√°gica de ocho?
                    Entonces probablemente sepas que realmente no pueden predecir tu futuro, ¬°pero sigue siendo divertido jugar!

                    ¬°En los pr√≥ximos niveles puedes aprender a crear tu propia m√°quina de la fortuna!
                    En el nivel 1 puedes comenzar f√°cil dejando que Hedy se presente como adivina y dejes que haga `{echo}` de las respuestas de los jugadores.
                    As√≠:
                example_code: |
                    ```
                    _ ¬°Hola, soy Hedy la adivina!
                    _ ¬øQui√©n eres t√∫?
                    _ D√©jame echar un vistazo a mi bola de cristal.
                    _ Veo... Veo...
                    _ Tu nombre es
                    ```
                story_text_2: |
                    ### Ejercicio
                    Copia el c√≥digo de ejemplo en tu pantalla de entrada y rellena los espacios en blanco para hacer que tu c√≥digo funcione.
                    **Extra** Cambia el c√≥digo y deja que el adivino no s√≥lo prediga tu nombre, sino tambi√©n tu edad, tu equipo favorito de deporte o cualquier otra cosa sobre ti mismo.
            3:
                story_text: |
                    En los niveles anteriores has creado tu primera m√°quina de la fortuna, pero Hedy realmente no pod√≠a predecir nada, s√≥lo `{echo}`.
                    En este nivel puedes utilizar una variable y el comando `{at} {random}` para dejar que Hedy escoja una respuesta para ti. Mira este c√≥digo, por ejemplo:
                example_code: |
                    ```
                    {print} ¬°Soy Hedy el adivino!
                    pregunta {is} {ask} ¬øQu√© quieres saber?
                    {print} Esto es lo que quieres saber: pregunta
                    respuestas {is} s√≠, no, quiz√°s
                    {print} Mi bola de cristal dice...
                    {sleep} 2
                    {print} respuestas {at} {random}
                    ```
                story_text_2: |
                    ### Ejercicio
                    Ahora Hedy s√≥lo puede responder si, no o quiz√°s. ¬øPuedes darle m√°s opciones a Hedy, como 'sin duda' o 'pregunta de nuevo'.
            4:
                story_text: |
                    ### Ejercicio
                    Hemos eliminado todas las comillas del c√≥digo de ejemplo, ¬øpuedes a√±adirlas en todos los lugares correctos?

                    ### Ejercicio 2
                    Vuelve al nivel anterior y copia tu c√≥digo del adivino. Haz que el c√≥digo funcione en este nivel a√±adiendo comillas en los puntos correctos.
                example_code: |
                    ```
                    _ Agrega las comillas a este c√≥digo _
                    {print} ¬°Soy Hedy la adivina!
                    pregunta {is} {ask} ¬øQu√© quieres saber?
                    {print} Esta es tu pregunta:  pregunta
                    respuesta {is} s√≠, no, quiz√°s
                    {print} Mi bola de cristal dice...
                    {sleep} 2
                    {print} respuesta {at} {random}
                    ```
            5:
                story_text: |
                    ### Ejercicio
                    En este c√≥digo de ejemplo ver√°s como hacer un programa adivino que te permita inclinar las posibilidades a tu favor. Este programa de trampas siempre te dice que vas a ganar la loter√≠a, pero tus amigos nunca ganar√°n.

                    Usa esto para hacer tu propio programa, ¬°s√© creativo! Por ejemplo puedes crear un c√≥digo que prediga que:
                    * ¬°tu equipo favorito vencer√° a todos sus rivales!
                    * ¬°se elegir√° tu pel√≠cula favorita para la pel√≠cula de la noche!
                    * ¬°ganas entrada para tu espect√°culo favorito!
                    * eres el m√°s hermoso de todos, como el espejo m√°gico de Blancanieves.
                    ¬°Deja que tu imaginaci√≥n haga el trabajo!

                    Tu programa tiene que ser de al menos 10 l√≠neas de c√≥digo y tiene que tener al menos un comando `{if}` y `{else}`.
                example_code: |
                    ```
                    amigos {is} Jordan, Luc√≠a, David
                    {print} '¬°Puedo predecir si ganar√°s ma√±ana la loter√≠a!'
                    persona {is} {ask} '¬øQui√©n eres?'
                    respuesta_buena {is} ¬°Hurra! ¬°Ganaste!, ¬°Seguro que ganar√°s!, ¬°Tenemos un ganador!
                    respuesta_mala {is} ¬°Mala suerte! ¬°Int√©ntalo de nuevo!, ¬°Otra persona ganar√°, T√∫ perder√°s!
                    {if} persona {in} amigos {print} respuesta_buena {at} {random}
                    {else} {print} respuesta_mala {at} {random}
                    ```
            6:
                story_text: |
                    En este nivel puedes usar matem√°ticas para en tus predicciones de adivino. Esto te permite crear f√≥rmulas (bobas) para calcular el futuro.
                    Por ejemplo, puedes calcular cu√°n rico vas a ser o cuantos ni√±os vas a tener cuando crezcas.



                    ### Ejercicio
                    ¬øPuedes pensar en tu (boba) m√°quina adivina?
                example_code: |
                    ```
                    {print} '¬°Soy Hedy el adivino!'
                    {print} '¬°Puedo predecir cu√°ntos hijos tendr√°s cuando crezcas!'
                    edad = {ask} '¬øCu√°ntos a√±os tienes?'
                    hermanos = {ask} '¬øCu√°ntos hermanos tienes?'
                    altura = {ask} '¬øQu√© altura tienes en cent√≠metros?'
                    ni√±os = altura / edad
                    ni√±os = ni√±os - hermanos
                    {print} 'Tendr√°s...'
                    {sleep}
                    {print} ni√±os ' ni√±os!'
                    ```
            7:
                story_text: |
                    ### Ejercicio
                    Completa este programa que te dice si tu romance te quiere o no.
                example_code: |
                    ```
                    {print} 'Tengo una flor con p√©talos m√°gicos'
                    {print} 'Si coges los p√©talos la flor te dir√° si tu amor tambi√©n te querr√°'
                    cantidad = {ask} '¬øCu√°ntos p√©talos quieres coger?'
                    opciones = te quiere, no te quiere
                    _ _ _ _ opciones {at} {random}
                    ```
            8:
                story_text: |
                    !En el siguiente ejemplo puedes hacer que tu adivino haga varias preguntas y tambi√©n que las imprima!

                    ### Ejercicio
                    ¬øPuedes poner los comandos correctos en los huecos en blanco?
                example_code: |
                    ```
                    {print} '¬°Soy Hedy la adivina!'
                    {print} 'Puedes hacerme 3 preguntas.'
                    respuestas = s√≠, no, quiz√°s
                    _ _ _
                       pregunta = {ask} '¬øQue quieres saber?'
                       {print} pregunta
                       {sleep}
                       {print} 'Mi bola de cristal dice...' respuestas {at} {random}
                    ```
            10:
                story_text: |
                    En este nivel aprender√°s a programar el juego MACC (mansi√≥n, apartamento, caba√±a, casa). En este juego puedes predecir para todos los jugadores a la vez, cu√°l ser√° su futuro.

                    ### Ejercicio
                    Llena los huecos en blanco usando el nuevo comando que has aprendido en este nivel.
                example_code: |
                    ```
                    casas = mansi√≥n, apartamento, caba√±a, casa
                    ama = nadie, alguien de la realeza, su vecino, su verdadero amor
                    mascotas = perro, gato, elefante
                    nombres = Jenna, Ryan, Jim
                    _
                        {print} nombre ' vive en una ' casas {at} {random}
                        {print} nombre ' se casar√° con ' ama {at} {random}
                        {print} nombre ' tendr√° un ' mascotas {at} {random} ' como su mascota.'
                        {sleep}
                    ```
            12:
                story_text: "Desde el nivel 12, tendr√°s que usar comillas en las listas, antes y despu√©s de cada elemento.\n\n### Ejercicio \nA√±ade dos predicciones a la lista"
                example_code: |
                    ```
                    fortunes = 'te resbalar√°s en una c√°scara de pl√°tano', _
                    {print} 'Echar√© un vistazo a mi bola de cristal para tu futuro.'
                    {print} 'Ya veo... Ya veo...
                    {sleep}
                    {print} fortunes {at} {random}
                    ```
    functions:
        name: funciones
        default_save_name: funciones
        description: funciones
        levels:
            12:
                story_text: |
                    En este nivel aprender√°s a usar **funciones**. Una funci√≥n es un bloque de c√≥digo que se puede utilizar f√°cilmente varias veces. Usar funciones nos ayuda a organizar piezas de c√≥digo que podamos usar de forma repetida.

                    Para crear una funci√≥n, usa `{define}` que da a la funci√≥n un nombre. Luego pon todas las l√≠neas que desees en la funci√≥n en un bloque con sangr√≠a bajo la l√≠nea `{define}`.
                    Deja una l√≠nea vac√≠a en tu c√≥digo para que parezca agradable y limpio. Y ya est√°, ¬°Gran trabajo! ¬°Has creado una funci√≥n!

                    ¬°Ahora, cuando necesitemos ese bloque de c√≥digo, solo usamos <code>{call}</code> con el nombre de la funci√≥n para llamarlo! No tenemos que volver a escribir ese bloque de c√≥digo.

                    Echa un vistazo a este c√≥digo de ejemplo de un juego de Twister. La funci√≥n 'turno' contiene un bloque de c√≥digo que elige qu√© miembro debe ir donde.

                    ### Ejercicio
                    Termina este c√≥digo estableciendo las 2 variables miembro_escogido y color_escogido.
                    Luego, elige cu√°ntas veces deseas llamar a la funci√≥n para darle vueltas a la ruleta.

                    ### Ejercicio 2
                    Mejora tu c√≥digo a√±adiendo una variable llamada "personas". Utiliza la variable para dar a todos los jugadores su propio comando en el juego.
                    Por ejemplo: 'Amed, derecha en verde' o 'Jessica, pie izquierdo en amarillo'.
                example_code: |
                    ```
                    lados = 'derecha', 'izquierda'
                    mimebros = 'mano', 'pie'
                    colores = 'rojo', 'azul', 'verde', 'amarillo'

                    {define} turno
                        lado_escogido = lados {at} {random}
                        miembro_escogido = mimebros _
                        color_escogido = colores _
                        {print} lado_escogido' ' miembro_escogido' en ' color_escogido

                    {print} 'Vamos a jugar al Twister!'
                    {for} i {in} {range} 1 to _
                        {call} turno
                        {sleep} 2
                    ```
            13:
                story_text: |
                    Ahora que has aprendido a usar funciones, aprender√°s a usar una funci√≥n con argumento.
                    Un **argumento** es una variable que se utiliza dentro de una funci√≥n. Y no se utiliza fuera de la funci√≥n.

                    Por ejemplo, en este c√≥digo hemos programado el primer verso de la canci√≥n 'Mi Bonnie est√° sobre el oc√©ano'.
                    En este c√≥digo de ejemplo se utiliza el argumento `lugar`. El lugar es una variable que solamente se utiliza en la funci√≥n, es un argumento.
                    Para utilizar `lugar` hemos programado la l√≠nea `{define} canci√≥n {with} lugar`.
                    Cuando se llama la funci√≥n, la computadora reemplazar√° el argumento `lugar`, con la pieza de texto despu√©s `{call} canci√≥n {with}`.

                    ### Ejercicio
                    El siguiente verso de la canci√≥n dice:

                    ```not_hedy_code
                    Anoche mientras me acostaba en mi almohada
                    Anoche mientras me acostaba en mi cama
                    Anoche mientras me acostaba en mi almohada
                    So√±√© que mi Bonnie estaba muerta.
                    ```

                    ¬øPuedes programar este verso de la misma manera que el ejemplo?
                example_code: |
                    ```
                    {define} canci√≥n {with} lugar
                        {print} 'Mi Bonnie est√° sobre el ' lugar

                    {call} canci√≥n {with} 'oceano'
                    {call} canci√≥n {with} 'mar'
                    {call} canci√≥n {with} 'oceano'
                    ```
            14:
                story_text: |
                    In the previous levels you have learned to create functions and use arguments with them. Another great use of a function is to let it calculate something for you.
                    You can give the function a calculation and it will give you the answer of the calculation. This answer is called a **return value**.

                    For example, in this code the function calculate_new_price will calculate the new price of any item. It will give you the new price as a return value.

                    ### Exercise
                    Finish this code. We have already made the variable new_price for you, you only need to set it.
                    You should finish the line of code by calling the function that calculates the new price.
                example_code: |
                    ```
                    {define} calculate_new_price {with} amount, percentage
                        percentage = percentage / 100
                        discount_amount = amount * percentage
                        return amount - discount_amount

                    old_price = {ask} 'How much is on the price tag?'
                    discount = {ask} 'What percentage is the discount?'

                    new_price = _ calculate_new_price {with} old_price, _
                    {print} 'The new price is ' new_price ' dollar'
                    ```
            18:
                story_text: |
                    Let's make functions the Pythons way! To define a function, we no longer use:

                    `{define} name_function {with} argument_1, argument_2:`

                    but we use:

                    `{def} name_function(argument_1, argument_2):`.


                    If you don't want to use arguments, you just leave the space between the parantheses empty.
                    To call a function, we don't need the `{call}` command anymore. You just type the name of the function.
                example_code: |
                    ```
                    {def} calculate_score(answer, correct_answer):
                        {if} answer == correct_answer:
                            score = 1
                        {elif} answer == '?':
                            score = 0
                        {else}:
                            score = -1
                        {return} score

                    answer = {input} ('Where can you find the Eiffel Tower?')
                    correct_answer = 'Paris'
                    score = calculate_score(answer, correct_answer)
                    {print} ('Your score is... ', score)
                    ```
    guess_my_number:
        name: Guess my number
        default_save_name: guess my number
        description: guess my number
        levels:
            14:
                story_text: |
                    In this level you can program the game 'Guess my number'

                    ### Exercise
                    Fill in the correct symbols on the blanks to get the game to work.
                example_code: |
                    ```
                    {print} 'Guess my number'
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number = numbers {at} {random}
                    game = 'on'
                    {for} i {in} {range} 1 {to} 10
                        {if} game == 'on'
                            guess = {ask} 'Which number do you think it is?'
                            {if} guess _ number
                                {print} 'Lower!'
                            {if} guess _ number
                                {print} 'Higher!'
                            {if} guess _ number
                                {print} 'You win!'
                                game = 'over'
                    ```
    hangman:
        name: Hangman
        default_save_name: Hangman
        description: Guess the word
        levels:
            17:
                story_text: |
                    In this adventure we program a game of hangman. First we make some preparations, then we program the game and in the third part we add a drawing with the turtle.

                    ### Exercise
                    ***Set the variables*** In this game of hangman, Player 1 chooses an answer and Player 2 has to guess the letters in this answer.
                    To let the computer know all the letters in the word, we will turn the answer into a list of letters. We also do this with the guesses Player 2 makes.
                    We will start the game with 2 empty lists. We have made an empty list for the variable answer for you. Now make an empty list for guessed_letters as well.
                    Then we fill in how many mistakes were made. At the start of the game, this should be 0.
                    The variable `amount_letters` tells us how many letters are in the answer. Ask Player 1 to tell us how many letters their word has.
                    Lastly we tell the computer if the game is over. We use the variable `game_over` and set it to `False`.

                    ***Choosing the answer*** We want Player 1 to be able to choose the answer. We'll ask them, as many times as necessary, what the next letter is.
                    Then we add that letter to the answer. Lastly, we add an empty _ to the list of guessed letters, so we get as many _s as there are letters in the answer.

                    ***Player 2's turn***
                    Tell Player 2 its their turn. Then tell Player 2 how many letters there are in the answer. Finally, print the list of `guessed_letters`.

                    ***Go to the next tab*** Now that all the starting variables are set, we can start programming the game itself. Check out the next tab to learn how!
                example_code: |
                    ```
                    print 'Hangman!'

                    # Set the variables
                    answer = []
                    guessed_letters = _
                    mistakes_made = _
                    amount_letters = {ask} _
                    _ = 'False'

                    # Choosing the answer
                    {for} _
                        letter = {ask} 'Player 1, what is letter ' i '?'
                        _
                        {add} '_' {to} _

                    # Player 2 turn
                    print _
                    print _
                    print guessed_letters
                    ```
    hangman_2:
        name: Hangman 2
        default_save_name: Hangman_2
        description: Hangman 2
        levels:
            17:
                story_text: |
                    Now it's time to program the hangman game.

                    ### Exercise

                    ***Paste your code*** Copy your code from the previous tab and paste the code in the programming field.

                    ***The game*** This games continues playing until Player 2 is game over. Fill in the while command accordingly. Now, Player 2 is allowed to guess a letter, so ask Player 2 to guess a letter.
                    We need to check if their answer is correct, so check if their `guess` is (somewhere) in the (list) `answer`. Then we let the computer figure out which of the letter(s) is the guess. We have already programmed that part for you.
                    Next we want to compliment the player for finding a correct letter and we want to print the list `guessed_letters`, so the player can see their progress.

                    The next part we're going to program is what happens when the player has guessed all of the letters. So if their list of `guessed_letters` is the same as our list `answer`.
                    If the lists are the same, congratulate Player 2 with their victory and set the variable `game_over` to `True`.

                    Next we'll program what happens when Player 2 guesses wrong (so the `{else}` command). First, tell the player that their guess was wrong. Then increase the `mistakes_made` variable by 1.

                    For the last part we'll program what happens when Player 2 has made 10 mistakes. We'll print that Player 1 has won the game. Then we'll print the correct answer. And finally, we'll set our `game_over` variable to `True`, so the game stops.

                    ***Go to the next tab*** Amazing work! Your game is playable, but wouldn't it be fun if the hangman was actually drawn when Player 2 makes a mistake..?
                example_code: |
                    ```
                    # Paste your code here

                    # The game
                    {while} game_over _
                        guess = _
                        {if} _
                            {for} i {in} {range} 1 {to} amount_letters:
                                if answer[i] == guess:
                                    guessed_letters[i] = guess
                            {print} _
                            {if} guessed_letters == _:
                                {print} _
                                game_over = _
                        {else}:
                            {print} _
                            mistakes_made _
                            {if} _ == 10:
                                {print} _
                                {print} _
                                _
                    ```
    hangman_3:
        name: Hangman 3
        default_save_name: Hangman_3
        description: Hangman 3
        levels:
            17:
                story_text: |
                    In a game of hangman the mistakes are shown by drawing a part of the hangman each time a mistake has been made.
                    We now add those drawings with our turtle!

                    ### Exercise
                    ***Create a function that draws the hangman*** Create a function that draws the hangman in 10 steps. We have already made step 1 for you.

                    ***Test the function*** Test the function by calling the function with 10. If you are happy with the function, remove the line that calls the function for now. We will call the function when the player makes a mistake.

                    ***Paste your hangman game under your function*** Go back to the previous tab and copy your hangman game. Paste the game underneath your function.

                    ***Call the function when the player makes a mistake*** Under the line `mistakes_made = mistakes_made + 1` we will call the function. We want the turtle to take the same amount of steps as the player has made mistakes, so we call the function with `mistakes_made` as argument.

                    ***Enjoy your game!***
                    <div class="w-full flex flex-row gap-2">
                        The hangman could look like this <img src="https://github.com/hedyorg/hedy/assets/80678586/d385b691-5701-4342-b5d9-dfae1589c129" width="100">
                    </div>
                example_code: |
                    ```
                    # Create a function that draws the hangman
                    {define} draw_hangman {with} step:
                        {if} step == 1:
                            {color} white
                            {forward} -100
                            {turn} 90
                            {forward} -50
                            {color} black
                            {forward} 100
                            {forward} -50

                        {if} step == 2:
                            _
                    # Paste your hangman game here

                    ```
    harry_potter:
        name: Harry Potter
        default_save_name: Harry Potter
        description: Aventuras de Harry Potter
        levels:
            10:
                story_text: |
                    ### Ejercicio
                    Tambi√©n podemos hacer un adivino ambientado en Harry Potter. Rellena los huecos en blanco de forma que se impriman 9 l√≠neas.
                    **Extra** Cambia la tem√°tica del adivino a algo distinto, como tu libro, pel√≠cula o espect√°culo de la tele favoritos.
                example_code: |
                    ```
                    casas = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    asignaturas = pociones, defensa frente a artes oscuras, encantos, transfiguraci√≥n
                    miedos = Voldemort, ara√±as, fallar tu examen de LECHUZA
                    nombres = Harry, Ron, Hermione
                    _
                    _ {print} nombre ' pertenece a ' casas {at} {random}
                    _ {print} nombre ' es mejor en ' asignaturas {at} {random}
                    _ {print} nombre ' su gran miedo es ' miedos {at} {random}
                    ```
    haunted:
        name: La Casa Embrujada
        default_save_name: La Casa Embrujada
        description: Escapa de la casa embrujada
        levels:
            1:
                story_text: |
                    En esta aventura vas a a empezar a hacer un juego en el cual necesitas escapar de una casa embrujada escogiendo la puerta correcta.
                    Si escoges la puerta correcta vas a sobrevivir, pero sino un terrible monstruo podr√≠a...

                    En el nivel 1 vamos a empezar nuestro juego de la casa embrujada haciendo una historia de terror y preguntando al jugador que ven en la casa embrujada.
                example_code: |
                    ```
                    {print} ¬øC√≥mo llegu√© aqu√≠?
                    {print} Recuerdo que mi amigo me estaba diciendo que fu√©ramos a la mansi√≥n...
                    {print} y de repente todo se volvi√≥ negro.
                    {print} ¬øPero como termine en el suelo...?
                    {print} ¬°Mi cabeza me duele como si me hubieran golpeado con un bate de baseball!
                    {print} ¬øQu√© es ese sonido?
                    {print} Oh no! ¬°Siento que no estoy solo en esta casa!
                    {print} ¬°Necesito salir de aqu√≠!
                    {print} Hay 3 puertas...
                    {ask} ¬øCu√°l puerta deber√≠a escoger?
                    {echo} Escoge la puerta
                    {print} ‚Ä¶?
                    ```
                story_text_2: |
                    ### Ejercicio
                    Copia el c√≥digo de ejemplo a tu entrada de pantalla haciendo clic en el bot√≥n amarillo.
                    Ahora completa la historia a√±adiendo al menos 5 l√≠neas de c√≥digo.
                    Recuerda que cada l√≠nea de c√≥digo empiece con un comando `{print}` .
            2:
                story_text: |
                    En esta casa embrujada puedes escoger tus monstruos con emojis. Claro que tambi√©n puedes usar palabras.
                example_code: |
                    ```
                    monstruo_1 {is} üëª
                    monstruo_2 {is} ü§°
                    monstruo_3 {is} üë∂
                    {print} Entras en la casa embrujada.
                    {print} De repente ves al monstruo_1
                    {print} Vas al otro cuarto...
                    {print} Pero ves que el monstruo_2 ¬°te est√° esperando all√≠!
                    {print} ¬°Oh no! R√°pido, ve a la cocina.
                    {print} ¬°Pero tan pronto entras all√≠ el monstruo_3 te ataca!
                    ```
                story_text_2: |
                    ### Ejercicio
                    En el ejemplo de arriba los monstruos est√°n predeterminados. De forma que cada vez que ejecutas tu c√≥digo, el resultado es el mismo.
                    ¬øPuedes agregar un comando `{ask}` para hacer que interactiva la casa embrujada y dejar que los jugadores escojan que monstruos se encuentran?
                example_code_2: |
                    ```
                    monstruo_1 {is} _
                    monstruo_2 {is} _
                    monstruo_3 {is} _
                    {print} Entras en la casa embrujada.
                    {print} De repente ves al monstruo_1
                    {print} Vas al otro cuarto...
                    {print} Pero ves que el monstruo_2 ¬°te est√° esperando all√≠!
                    {print} ¬°Oh no! R√°pido, ve a la cocina.
                    {print} ¬°Pero tan pronto entras all√≠ el monstruo_3 te ataca!
                    ```
            3:
                story_text: |
                    En los niveles anteriores hiciste la introducci√≥n al juego de la casa embrujada, pero como te habr√°s dado cuenta, la historia siempre termina en un final tenebroso.
                    En este nivel puedes hacer que tu historia sea m√°s interactiva cambiando el resultado del juego; ¬°algunas veces te comer√°n, otras veces escapar√°s!
                    ¬°Deja que Hedy decida aleatoriamente!

                    ### Ejercicio
                    Copia los c√≥digos de ejemplo y rellena los espacios ¬°para hacerlo funcionar!

                    **Extra** Esta historia es bastante sencilla, tal vez puedes asustarla m√°s a√±adiendo una historia m√°s emocionante.
                    Adem√°s ahora mismo tienes finales muy limitados, s√≥lo hay 3 opciones sobre que hay detr√°s de las puertas. ¬°Quiz√° puede pensar en m√°s monstruos para a√±adir a la lista!
                example_code: |
                    ```
                    _ ¬°Escapa de la casa embrujada!
                    _ Hay 3 puertas delante de ti‚Ä¶
                    _ _ _ ¬°Qu√© puerta eliges?
                    _ Elegiste ‚Ä¶ opci√≥n
                    monstruos _ a zombi, a vampiro, NADA DE LO QUE HAYAS ESCAPADO
                    _ Mira...
                    {sleep}
                    _ _ _ _
                    ```
            4:
                story_text: |
                    En este nivel vas a aprender como usar comillas en tus juegos.

                    ### Ejercicio
                    ¬øPuedes hacer que tu Casa Encantada resistente al nivel 4?

                    ### Ejercicio 2
                    Vuelve al nivel anterior y copia el c√≥digo de tu casa embrujada. Haz que el c√≥digo funcione en este nivel a√±adiendo comillas en los lugares adecuados.
                example_code: |
                    ```
                    _ A√±ade comillas a este c√≥digo _
                    {print} ¬°Escapa de la casa encantada!
                    {print} Hay 3 puertas delante de ti‚Ä¶
                    elecci√≥n {is} {ask} ¬øQu√© puerta eliges?
                    {print} Escogiste ‚Ä¶ elecci√≥n
                    monstruo {is} un zombi, un vampiro, NADA DE LO QUE HAYAS ESCAPADO
                    {print} Ves...
                    {sleep}
                    {print} monstruo {at} {random}
                     ```
            5:
                story_text: |
                    Hasta este nivel el juego de la casa encantada siempre preguntaba al jugador que eligiera una puerta, pero como puede que te hayas dado cuenta los jugadores no necesitaban responder correctamente.
                    Si el jugador respond√≠a algo aleatorio, el juego funcionar√≠a igual y el jugador ¬°puede que hasta ganase! (pese a que no eligiese una puerta).
                    En este nivel, solo podr√°s ganar el juego si eliges la puerta que Hedy eligi√≥ de forma aleatoria.

                    ### Ejercicio
                    ¬øPuedes encontrar las cuatro palabras faltantes para completar el c√≥digo?
                example_code: |
                    ```
                    {print} '¬°Escapa de la casa encantada!'
                    {print} 'Hay tres puertas frente a ti...'
                    puertas {is} 1, 2, 3
                    monstruos {is} hombre lobo, momia, vampiro, zombi
                    puerta_elegida {is} {ask} '¬øQu√© puerta eliges?'
                    {print} 'Has elegido la puerta...' puerta_elegida
                    {sleep}
                    puerta_correcta {is} puertas {at} {random}
                    _ _ _ _ {print} '¬°Genial! ¬°Has escapado!'
                    {else} {print} '¬°O no! Te ha comido un...' monstruos {at} {random}
                    ```
            9:
                story_text: |
                    En este nivel puedes usar anidaciones, ¬°lo que te permite hacer tu casa encantada incluso m√°s interactiva!

                    ### Ejercicio
                    Ahora este juego es muy dif√≠cil de vencer, ¬ølo puedes hacer m√°s f√°cil de ganar?
                    ¬øCambias tu c√≥digo para que s√≥lo tenga una puerta incorrecta y dos correctas en vez de una correcta y dos incorrectas?
                    Consejo: Esto significa cambiar tu variable puerta_correcta a puerta_incorrecta, y cambiar el c√≥digo `{if}` y `{else}` .
                    Y claro que puedes cambiar la historia y hacerla a tu manera. ¬°Cambia los monstruos o convi√©rtelo en un concurso donde recibir√°s un regalo!
                example_code: |
                    ```
                    {print} 'Escape de la Casa Embrujada!'
                    jugador = vivo
                    puertas = 1, 2, 3
                    monstruos = zombi, vampiro, ara√±a gigante
                    {repeat} 3 {times}
                        {if} jugador {is} vivo
                            puerta_correcta {is} puertas {at} {random}
                            {print} 'Hay 3 puertas...'
                            puerta_escogida = {ask} '¬øQu√© puerta quieres escoger?'
                            {if} puerta_escogida {is} puerta_correcta
                                {print} '¬°No hay monstruos aqu√≠!'
                            {else}
                                {print} 'Te comi√≥ un ' monstruos {at} {random}
                                jugador = muerto
                        {else}
                            {print} 'JUEGO TERMINADO'
                    {if} jugador {is} vivo
                        {print} '¬°Genial! ¬°Sobreviviste!'
                    ```
            11:
                story_text: "En este nivel hemos cambiado el comando `{for}` para que podamos decirle al jugador donde est√°n. \n\n### Ejercicio 1\nCompleta el programa para que el jugador sepa en qu√© habitaci√≥n est√°n.\n\n### Ejercicio 2\nConvierte el programa en una aventura siguiendo estos pasos:\n\n1. Haz una lista de opciones (como: pelear o volar)\n2. Aseg√∫rate que el jugador puede elegir una opci√≥n con `{ask}`\n3. ¬øEs la respuesta correcta? Entonces pueden pasar al siguiente monstruo. ¬øDieron una respuesta incorrecta? H√°zselo saber con un `{print}`. \n\n**Extra** Si haces una opci√≥n incorrecta, ¬°se sigue mostrando un monstruo! ¬øC√≥mo cambiar√≠as eso?\n"
                example_code: |
                    ```
                    {print} '¬°Escapa de la Casa Encantada!'
                    monstruos = zombi, vampiro, ara√±a gigante
                    _
                        {print} '¬°Habitaci√≥n ' i
                        monstruo = monstruos {at} {random}
                    ```
            14:
                story_text: |
                    ### Exercise
                    In this level you can use the `<` and `>` symbol to introduce lives to your game.
                    Make sure the player loses a life when they come across the wrong monster and that the game stops if you have no lives left.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house'
                    lives = 3
                    doors = 1, 2, 3
                    monsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'
                    {for} i {in} {range} 1 {to} 10
                        {if} lives _
                            good_door = doors {at} {random}
                            monster = monsters {at} {random}
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} good_door == chosen_door
                                {print} 'You have chosen the correct door'
                            {else}
                                {print} 'You see...' monster
                                {if} monster == 'a sleeping 3 headed dog'
                                    {print} 'Pffieuw.... Its asleep'
                                {else}
                                    {print} 'You lose one life'
                                    lives = _
                        {else}
                            {print} 'GAME OVER'
                    ```
            16:
                story_text: |
                    ### Exercise
                    This haunted house game uses the connection between the lists you can use in this level.
                    For example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.
                    Check out the code and fill in  `weapons[i]`, `monsters[i]` , `bad_fate[i]`, `good_fate[i]`, `hint[i]` on the correct blanks to get the code to work!
                example_code: |
                    ```
                    numbers = [1, 2, 3]
                    i = numbers[{random}]
                    hint = ['growling', 'a cackling laugh', 'fluttering batwings']
                    monsters = ['zombie', 'witch', 'vampire']
                    bad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']
                    good_fate = ['You throw the ham. The zombie is distracted and starts eating it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']
                    weapons = ['ham', 'lighter', 'garlic']
                    {print} 'You are standing in front of an old mansion'
                    {print} 'Something is not right here'
                    {print} 'You hear ' _
                    {print} 'You are going to explore it'
                    {print} 'You enter the kitchen and see a lighter, a raw ham and a garlic.'
                    your_weapon = {ask} 'What do you bring with you?'
                    {print} 'With your ' your_weapon ' you enter the living room'
                    {print} 'There you find a ' _
                    needed_weapon = _
                    {if} your_weapon == needed_weapon
                        {print} 'You use your ' your_weapon
                        {print} _
                        {print} 'YOU WIN!'
                    {else}
                        {print} 'You have chosen the wrong weapon...'
                        {print} _
                        {print} 'GAME OVER'
                    ```
    hotel:
        name: hotel
        default_save_name: hotel
        description: hotel
        levels:
            13:
                story_text: |
                    In the previous adventure you have learned how to use an argument in a function, and you've learned how to combine it with an {ask}.
                    You might have wondered why you would use functions, because the functions in the example were only one line of code.
                    Now we will show you what a bigger function looks like and we will use multiple agruments now as well. You'll see how much better it is to use a function once the function gets bigger.
                    Here is an example of a function with arguments combined with {ask} commands.
                example_code: |
                    ```
                    {define} welcome_message {with} title, last_name, country, room_number
                        {print} 'Welcome to Hotel Hedy, ' title ' ' last_name
                        nice_trip {is} {ask} 'Did you have a nice trip from, ' country '?'
                        {if} nice_trip {is} 'yes'
                            {print} 'Lovely!'
                        {else}
                            {print} 'Sorry to hear that.'
                            {print} 'Hopefully you can take a nice rest in you room.'
                        {print} 'Your room number is ' room_number

                    {print} 'Hello. Please fill in your information to check in.'
                    title = {ask} 'What is your title (mr, mrs, ms, dr, etc.)?'
                    name = {ask} 'What is you last name?'
                    homecountry = {ask} 'What country do you come from?'

                    {call} welcome_message {with} title, name, homecountry, 105
                    ```

                    title = {ask} 'What is your title (mr, mrs, ms, dr, etc.)?'
                    name = {ask} 'What is you last name?'
                    homecountry = {ask} 'What country do you come from?'

                    {call} welcome_message {with} title, name, homecountry, 105
    if_command:
        name: '{if} & {else}'
        default_save_name: comando_si
        description: Introducci√≥n al comando si
        levels:
            5:
                story_text: |
                    ## Si‚Ä¶ sino‚Ä¶.
                    En el nivel 4 hay algo nuevo, !`{if}`! Con `{if}` puedes elegir entre dos opciones diferentes.
                    Este c√≥digo imprime genial si pones Hedy como nombre, y boo! si pones cualquier otra cosa.
                    `{ask}` y `{print}` todav√≠a funcionan como hicieron en el nivel 4.
                example_code: |
                    ```
                    nombre {is} {ask} '¬øc√≥mo te llamas?'
                    {if} nombre {is} Hedy {print} 'genial' {else} {print} 'boo!'
                    ```
                story_text_2: |
                    A veces el c√≥digo con un `{if}` se alarga mucho y no encaja bien en una l√≠nea. <br> tambi√©n puedes dividir el c√≥digo en dos l√≠neas, empezando la segunda l√≠nea en el `{else}` tal que as√≠:
                example_code_2: |
                    ```
                    nombre {is} {ask} '¬øcu√°l es tu nombre?'
                    {if} nombre {is} Hedy {print} 'genial'
                    {else} {print} 'boo!'
                    ```
                story_text_3: |
                    ### Ejercicio
                    Intenta crear tu propio c√≥digo con `{if}` y `{else}`. Si quieres puedes usar el c√≥digo de ejemplo.
                example_code_3: |
                    ```
                    respuesta {is} {ask} '2 + 2 = ?'
                    _ _ _ 4 _ '¬°Gran trabajo!'
                    _ _ 'No 2 + 2 = 4'
                    ```
            8:
                story_text: |
                    ## Si‚Ä¶ Sino‚Ä¶
                    Has aprendido a repetir un bloque de l√≠neas de c√≥digo tras un comando `{repeat}`.
                    Ahora puedes usar la sangr√≠a para hacer bloques tras un comando {if} o {else}.
                    Comprueba el c√≥digo de ejemplo.

                    ### Ejercicio
                    A√±ade un comando {else} al c√≥digo de ejemplo. Haz un bloque de l√≠nea usando sangr√≠a. Haz esto empezando cada l√≠nea con 4 espacios.
                example_code: |
                    ```
                    nombre = {ask} '¬øC√≥mo te llamas?'
                    {if} nombre {is} Hedy
                        {print} 'Bienvenido Hedy'
                        {print} '¬°Puedes jugar en tu ordenador!'
                    ```
            9:
                story_text: |
                    En este nivel tambi√©n puedes poner un comando `{if}` dentro de otro comando `{if}`.
                example_code: |
                    ```
                    continuar = {ask} '¬øDeseas continuar?'
                    {if} continuar = s√≠
                        seguro = {ask} '¬øEst√°s seguro?'
                        {if} seguro {is} s√≠
                            {print} 'Continuamos'
                        {else}
                            {print} 'No est√°s seguro'
                    {else}
                        {print} 'No deseas continuar'
                    ```
    in_command:
        name: '{in}'
        default_save_name: comando_en
        description: Introducci√≥n al comando en
        levels:
            5:
                story_text: |
                    ## Listas
                    Cuando queremos comprobar si algo se encuentra en una lista, podemos usar el comando `{in}`.
                    Este c√≥digo imprime ¬°bonito! si eliges verde o amarillo, y meh en caso contrario.
                example_code: |
                    ```
                    colores_bonitos {is} verde, amarillo
                    color_favorito {is} {ask} '¬øCu√°l es tu color favorito?'
                    {if} color_favorito {in} colores_bonitos {print} '!bonito!'
                    {else} {print} 'meh'
                    ```
                story_text_2: |
                    ### Ejercicio
                    Completa el c√≥digo de ejemplo rellenando los huecos en blanco con los comandos que aprendiste.
                    Cuando completes el c√≥digo, intenta crear por ti mismo un c√≥digo y usa una pregunta que se te haya ocurrido.
                example_code_2: |
                    ```
                    animales {is} perro, vaca, oveja
                    respuesta {is} {ask} '¬øCu√°l es tu animal preferido?'
                    _ respuesta _ animales _ '¬°Tambi√©n el m√≠o!'
                    _ _ 'Mis animales preferidos son perros, vacas y ovejas'
                    ```
    is_command:
        name: '{is}'
        default_save_name: comando_es
        description: introducci√≥n al comando es
        levels:
            2:
                story_text: |
                    ## Variables
                    Puedes nombrar una palabra con `{is}`. A esto se le llama **variable**. En este ejemplo creamos una variable llamada nombre y una variable llamada edad. Puedes usar la palabra nombre en cualquier parte de tu c√≥digo y ser√° reemplazada por Hedy, tal que as√≠:
                example_code: |
                    ```
                    nombre {is} Hedy
                    edad {is} 15
                    {print} nombre tiene edad a√±os
                    ```
                story_text_2: |
                    ### Ejercicio
                    ¬°Hora de crear tus propias variables!
                    En el c√≥digo de ejemplo hicimos un ejemplo de la variable `animal_favorito`. En la l√≠nea 1 se crea la variable, y en la l√≠nea 2 usamos la variable en un comando `{print}`.
                    Lo primero de todo, termina nuestro ejemplo rellenando tu animal favorito en el hueco en blanco. Despu√©s haz 3 c√≥digos como estos por ti mismo. Elige una variable, y establece la variable con el comando `{is}`. Entonces √∫sala con un comando `{print}`, como hicimos.
                example_code_2: |
                    ```
                    animal_favorito {is} _
                    {print} me gusta animal_favorito
                    ```
            6:
                story_text: |
                    ¬°Tambi√©n hacemos un cambio al almacenar una palabra en una variable! Ahora se puede utilizar `=` en lugar de `{is}` cuando almacenamos un nombre o un n√∫mero en una variable, as√≠:
                example_code: |
                    ```
                    nombre = Hedy
                    respuesta = 20 + 4
                    ```
            14:
                story_text: |
                    Vamos a aprender m√°s cosas nuevas. Quiz√° ya las conozcas de matem√°ticas, el `<` y `>`.
                    El `<` comprueba si el primer n√∫mero es menor que el segundo, por ejemplo edad `<` 12 comprueba si edad es menor que 12.
                    Si quieres comprobar si el primer n√∫mero es menor o igual que el segundo, puedes usar `<=`, por ejemplo edad `<=` 11.
                    El `>` comprueba si el primer n√∫mero es mayor que el segundo, por ejemplo puntos `>` 10 comprueba si puntos es mayor que 10.
                    Si quieres comprobar si el primer n√∫mero es mayor o igual que el segundo, puedes usar `>=`, por ejemplo puntos `>=` 11.
                    Usa estas comparaciones en un `{if}`, tal que as√≠:
                example_code: |
                    ```
                    edad = {ask} '¬øCu√°ntos a√±os tienes?'
                    {if} edad > 12
                        {print} '¬°Eres mayor que yo!'
                    ```
                story_text_2: |
                    A partir de este nivel, si quieres comparar exactamente, puedes usar dos signos de igualdad. Esto es lo que hacen la mayor√≠a de los lenguajes de programaci√≥n:
                example_code_2: |
                    ```
                    nombre = {ask} '¬øC√≥mo te llamas?'
                    {if} nombre == 'Hedy'
                        {print} '¬°C√≥mo molas!'
                    ```
                story_text_3: |
                    Tambi√©n puedes comparar si algo *no* es igual a otra cosa usando `!=` tal que as√≠:
                example_code_3: |
                    ```
                    nombre = {ask} '¬øC√≥mo te llamas?'
                    {if} nombre != 'Hedy'
                        {print} 'Tu no eres Hedy'
                    ```

                    {if} edad < 13
                        {print} '¬°Eres m√°s joven que yo!'
                    {else}
                        {print} '¬°Eres mayor que yo!'
    language:
        name: Idioma
        default_save_name: Idioma
        description: Practica palabras en otro idioma
        levels:
            5:
                story_text: |
                    Haz tu propio programa para practicar tu vocabulario en un nuevo idioma.

                    ### Ejercicio
                    Haz tu c√≥digo m√°s largo a√±adiendo al menos 3 palabras m√°s para que las aprenda el jugador.
                    **Extra** Por supuesto, puedes elegir un idioma distinto al franc√©s. Puedes cambiar tu c√≥digo a cualquier idioma que te gustar√≠a aprender.
                example_code: |
                    ```
                    {print} '¬°Aprende Franc√©s!'
                    gato {is} {ask} 'üê±'
                    {if} gato {is} chat {print} '¬°Muy bien!'
                    {else} {print} 'No, gato es chat'
                    rana {is} {ask} 'üê∏'
                    {if} rana {is} granillo {print} '¬°Guau! ¬°Genial!'
                    {else} {print} 'No, rana es granillo'
                    ```
            16:
                story_text: |
                    ### Exercise
                    Take a look at the example code. This is a program to practise French vocabulary. Now make your own program to practice your vocabulary in a new language.
                    If you don't know any other languages, you can use Google translate or you can use emojis and your native language.
                example_code: |
                    ```
                    palabras_francesas = ['bonjour', 'ordinateur', 'pomme de terre']
                    traducci√≥n = ['hola', 'computadora', 'papa']
                    puntuaci√≥n = 0
                    {for} i {in} {range} 1 {to} 3
                        respuesta = {ask} '¬øQu√© significa ' palabras_francesas[i] '?'
                        correcta = traducci√≥n[i]
                        {if} respuesta == correcta
                            {print} '¬°Correcto!'
                            puntuaci√≥n = puntuaci√≥n + 1
                        {else}
                            {print} 'No, ' palabras_francesas[i] ' significa ' traducci√≥n[i]
                    {print} 'Tuviste ' puntuaci√≥n ' respuestas correctas.'
                    ```
    maths:
        name: c√°lculos
        default_save_name: c√°lculos
        description: Introducci√≥n a c√°lculos
        levels:
            6:
                story_text: |
                    En este nivel aprender√°s algo nuevo: ahora tambi√©n puedes calcular.

                    La suma es f√°cil, se escribe como en matem√°ticas: `5 + 5` por ejemplo. La resta funciona igual, es `5 - 5`.

                    La multiplicaci√≥n es un poco diferente, porque no hay s√≠mbolo de multiplicar en tu teclado. S√≥lo busca, ¬°no hay realmente!
                    Eso es por lo que multiplicamos con el asterisco sobre el 8: `5 * 5`. L√©elo como "5 veces 5" para recordarlo mejor.
                example_code: |
                    ```
                    {print} '5 m√°s 5 es ' 5 + 5
                    {print} '5 menos 5 es ' 5 - 5
                    {print} '5 veces 5 es ' 5 * 5
                    {print} '5 dividido por 5 es ' 5 / 5
                    ```
            12:
                story_text: |-
                    **N√∫meros decimales**
                    Hasta ahora, Hedy no permit√≠a n√∫meros decimales como 1.5, pero ahora permitimos eso. Ten en cuenta que los ordenadores usan el `.` para los n√∫meros decimales.
                example_code: |
                    ```
                    {print} 'Dos y media m√°s dos y medio es...'
                    {print} 2.5 + 2.5
                    ```
                story_text_2: |-
                    **Maths with words**
                    In this level you can also do addition with words like this:
                example_code_2: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```

                    {print} 2.5 + 2.5
    music:
        name: m√∫sica
        default_save_name: m√∫sica
        description: ¬°Toca una nota!
        levels:
            1:
                story_text: |-
                    In this level you'll learn how to use the `{play}` command to play a tune!

                    Type `{play}` followed by the note you want to play. The scale goes C-D-E-F-G-A-B.
                    As you can see there are 7 different letters, but we can play more than just 7 notes.
                    Type a number between 1 and 10 behind the letter to choose the scale, for example after B4 comes C5.
                    C1 is the lowest note you can play, C10 is the highest.

                    ### Exercise
                    Try out the example code and then play around with it! Can you create your own melody?
                    In the next level you'll learn how to play some existing songs.
                example_code: |-
                    ```
                    {play} C4
                    {play} D4
                    {play} E4
                    {play} F4
                    {play} G4
                    {play} A4
                    {play} B4
                    {play} C5
                    ```
            2:
                story_text: |
                    ### Exercise
                    ¬°Termina las canciones! Hemos empezado los c√≥digos para algunas melod√≠as.
                example_code: |
                    ```
                    {print} El viejo Mac Donald ten√≠a una granja
                    {play} C5
                    {play} C5
                    {play} C5
                    {play} G4
                    {play} A4
                    {play} A4
                    {play} G4
                    ```
                story_text_2: Como ves, tambi√©n puedes usar el comando `{sleep}` para a√±adir una peque√±a pausa en la canci√≥n.
                example_code_2: |
                    ```
                    {print} Brilla Brilla Estrellita
                    {play} C
                    {play} C
                    {play} G
                    {play} G
                    {play} A
                    {play} A
                    {play} G
                    {sleep} 1
                    {play} F
                    {play} F
                    ```
            3:
                story_text: |
                    Crea una melod√≠a al azar!

                    ### Ejercicio
                    El codigo de ejemplo crea una melod√≠a al azar, pero es bastante corta y no usa muchas notas.
                    Agrega m√°s notas a la lista y crea una melod√≠a m√°s larga copiando la √∫ltima linea un par de veces m√°s.
                example_code: |
                    ```
                    notas {is} A4, B4, C4
                    {play} notas {at} {random}
                    {play} notas {at} {random}
                    {play} notas {at} {random}
                    ```
            4:
                story_text: |
                    Use the `{clear}` command to create a karaoke machine!

                    ### Exercise
                    Finish the karaoke version of 'Mary had a little lamb'.
                    Then, create a karaoke version of any song you'd like!
                example_code: |
                    ```
                    {print} 'Mary ten√≠a un corderito'
                    {play} E
                    {play} D
                    {play} C
                    {play} D
                    {play} E
                    {play} E
                    {play} E
                    {clear}
                    {print} 'Corderito, corderito'
                    {play} D
                    {play} D
                    {play} D
                    {play} E
                    {play} E
                    {play} E
                    {clear}
                    {print} 'Mary ten√≠a un corderito'
                    {play} E
                    ```
            5:
                story_text: |
                    You don't always have to use the `{play}` command to play a whole song, sometimes you just want to play one note.
                    For example, if you want to make a quiz, you can play a happy high note if the answer is right and a sad low note if the answer is wrong.

                    ### Exercise
                    Finish the first question by adding a line of code that plays a C3 note if the wrong answer is given.
                    Then think of 3 more questions to add to this quiz.
                example_code: |
                    ```
                    answer {is} {ask} 'What is the capital of Zimbabwe?'
                    {if} answer {is} Harare {play} C6
                    _
                    ```
            6:
                story_text: "Instead of playing notes, you can also play numbers now. Simply type `{play} 1` for the lowest note, `{play} 70` for the highest note, or anything in between.\n\n### Exercise\n This calls for musical maths! Try out the example code a couple of times with different starting numbers. \nThen, see if you can compose a song using the numbers.\n"
                example_code: |
                    ```
                    number = {ask} 'Say a starting number between 1 and 67'
                    {print} number
                    {play} number
                    number = number + 1
                    {print} number
                    {play} number
                    number = number + 1
                    {print} number
                    {play} number
                    ```
            7:
                story_text: |
                    Using the `{repeat}` command can make your codes for melodies a lot shorter!

                    ### Exercise
                    Finish the code for Twinkle Twinkle Little Star by using the `{repeat}`command.
                    Then go back to the songs you've made in the previous levels. Can you shorten those codes too?
                example_code: |
                    ```
                    {print} 'Brilla Brilla Estrellita'
                    {repeat} 2 {times} {play} C4
                    {repeat} 2 {times} {play} G4
                    _
                    ```
            8:
                story_text: |
                    Now that we can use the `{repeat}` command for multiple lines, we can make songs even more easily!

                    ### Exercise
                    Finish the song of Brother John (Fr√®re Jacques). Don't forget to use `{repeat}`!
                example_code: |
                    ```
                    {print} 'Brother John'
                    {repeat} 2 {times}
                        {play} C
                        {play} D
                        {play} E
                        {play} C
                    {repeat} 2 {times}
                        {play} E
                        {play} F
                        {play} G
                        {sleep} 1
                    ```
            9:
                story_text: |
                    From this level on you can - among other things - use a {repeat} command inside a {repeat} command.
                    That makes songs like 'Happy birthday' even shorter!

                    ### Exercise
                    Finish the song!
                example_code: |
                    ```
                    first_time = yes
                    {repeat} 2 {times}
                        {repeat} 2 {times}
                            {play} C
                        {play} D
                        {play} C
                        {if} first_time {is} yes
                            {play} F
                            {play} E
                            first_time {is} no
                        {else}
                            _
                    ```
            12:
                story_text: |
                    Use functions in your songs! As you can see in the example code, you can make a function for each line of Twinkle Twinkle Little Star. Once you've programmed the first three lines, all you have to do is call the functions in the order you want them played in.

                    ### Exercise
                    Finish the song of Twinkle Twinkle Little Star.
                    Then look back at all the songs you've programmed in the levels before, can you make those codes better and shorter using functions too?
                example_code: |
                    ```
                    {define} first_line
                        {play} C
                        {play} C
                        {play} G
                        {play} G
                        {play} A
                        {play} A
                        {play} G
                        {sleep}

                    {define} second_line
                        {play} F
                        {play} F
                        {play} E
                        {play} E
                        {play} D
                        {play} D
                        {play} C
                        {sleep}

                    {define} third_line
                        {play} G
                        {play} G
                        {play} F
                        {play} F
                        {play} E
                        {play} E
                        {play} D
                        {sleep}

                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    ```
            13:
                story_text: |
                    You can use a function with an argument for songs that have line that are almost the same, but slightly different each time.
                    One example is the song 'Yankee Doodle'. The first 4 notes of the first lines are the same, but each time they are followed by a different couple of notes.

                    ### Exercise
                    Can you finish the song of Yankee Doodle?
                    Can you think of another song to program this way?
                example_code: |
                    ```
                    {print} 'Yankee Doodle'
                    {define} _ {with} note_1, note_2, note_3
                        {play} C4
                        {play} C4
                        {play} D4
                        {play} E4
                        {play} _
                        {play} _
                        {play} _

                    {call} line_1 {with} 29, 31, 30
                    {call} line_1 {with} 29, 28, 0
                    {call} line_1 {with} 32, 31, 30

                    {play} C4
                    {play} B3
                    {play} G3
                    {play} A3
                    {play} B3
                    {play} C4
                    {play} C4
                    ```
            14:
                story_text: |
                    You can program music for fun, but you can also use the musical notes to make something useful like a fire alarm!

                    ### Exercise
                    Make sure the fire alarm rings when there is a fire!
                example_code: |
                    ```
                    {define} alarma_incendios
                        {print} '¬°FUEGO!'
                        nota = 40
                        {for} i {in} {range} 1 {to} 100
                            {if} nota _ 50
                                nota = nota + 5
                                {play} _
                            {else}
                                nota = 40

                    fuego = {ask} '¬øHay un incendio?'
                    {if} fuego _ 's√≠'
                        {call} alarma_incendios
                    ```
            15:
                story_text: |
                    **Warning** This adventure can become extremely annoying!
                    We can also use the {while} command to repeat a song forever.

                    ### Exercise
                    Finish the never-ending song.
                example_code: |
                    ```
                    {define} song
                        {play} _

                    yes_or_no = {ask} 'Do you want to hear my never-ending song?'
                    {while} yes_or_no = 'yes'
                        {call} song
                        {print} 'ü•≥'
                    ```
            16:
                story_text: |
                    Upgrade your Old MacDonald code!

                    ### Exercise
                    Take your code from the 'Sing a Song' adventure and add musical notes to it!
                    You can make a function for each line in the song and call that function after the line is printed.
                    We defined the first line for you and called it in the code. Can you finish the whole song?
                example_code: |
                    ```
                    {define} line_1
                        {for} i {in} {range} 1 {to} 3
                            {play} G
                        {play} D
                        {for} i {in} {range} 1 {to} 2
                            {play} E
                        {play} D

                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    for i in range 1 to 3
                        animal = animals[i]
                        sound = sounds[i]
                        print 'Old MacDonald had a farm'
                        call line_1
                        print 'E I E I O!'
                        _
                    ```
            17:
                story_text: |
                    You can use the {elif} to create different options.

                    ### Exercise
                    Firstly, add colons to get the code to work.
                    Then finish this code by adding at least 2 other songs for other moods. For example a happy song and an angry song.
                example_code: |
                    ```
                    {define} scary_song
                        {for} i {in} {range} 1 {to} 3
                            {play} G
                        {play} E
                        {sleep} 2
                        {for} i {in} {range} 1 {to} 3
                            {play} F
                        {play} D

                    mood = {ask} 'Which emotion are you feeling?'
                    {if} mood {is} 'fear'
                        {call} scary_song
                    {elif} _
                    ```
            18:
                story_text: |
                    ### Exercise
                    Even in this last level of Hedy we can make some music! Be careful of all the syntax that is needed now.
                    Take a good look at how the functions are defined and called upon in the example code.
                    Finish the song!
                example_code: |
                    ```
                    {def} line_1():
                        {for} i {in} {range}(1, 5):
                            {play} A
                        {play} D
                        {play} F
                        {play} A

                    {def} line_2():
                        {for} i {in} {range}(1, 5):
                            {play} G
                        {play} C
                        {play} E
                        {play} G

                    {def} line_3():
                    _

                    {print} ('The drunken sailor')
                    {print} ('What shall we do with the drunken sailor?')
                    line_1()
                    line_2()
                    line_3()
                    {print} ('Early in the morning')
                    ```
    parrot:
        name: Loro
        default_save_name: Loro
        description: ¬°Crea tu propia mascota loro que copiar√° lo que digas!
        levels:
            1:
                story_text: |
                    ¬°Crea tu propia mascota online, un loro que copiar√° lo que digas!
                example_code: |
                    ```
                    {print} Soy Hedy la lora
                    {ask} ¬øCu√°l es tu nombre?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### Desaf√≠o
                    Copia el c√≥digo de ejemplo en tu pantalla de entrada haciendo clic al bot√≥n amarillo.
                    Haz que el p√°jaro haga una pregunta diferente. ¬°Llena los espacios en el ejemplo!
                    **Extra** Tambi√©n puedes dejar que el p√°jaro hagas mas de una pregunta . Escribe mas l√≠neas de c√≥digo debajo de tu propio c√≥digo.
                example_code_2: |
                    ```
                    {print} Soy Hedy el loro
                    {ask} _
                    {echo}
                    {echo}
            2:
                story_text: |
                    En el nivel anterior has hecho un loro que repetir√° todo despu√©s de ti. En este nivel har√°s que el loro interactivo usando una variable y el comando `{ask}`.
                    Tambi√©n haremos el loro m√°s realista a√±adiendo comandos `{sleep}` despu√©s de que diga algo.
                example_code: |
                    ```
                    {print} Soy Hedy el loro
                    nombre _ _ ¬°c√≥mo te llamas?
                    {print} nombre
                    _
                    {print} graznido
                    _
                    {print} nombre
                    ```
                story_text_2: |
                    ### Ejercicio
                    Lo primero de todo, acaba la l√≠nea 2 con un comando `{is}` y un `{ask}`.
                    Despu√©s pon un comando `{sleep}` en la l√≠nea 4 y 6 para dejar al loro tranquilo durante un rato.

                    **Extra** ¬øPuedes hacer que el loro pregunte algo m√°s que tu nombre a√±adiendo m√°s l√≠neas de c√≥digo?
            3:
                story_text: |
                    Ense√±a a tu loro una nueva palabra con `{add}`.
                    ### Ejercicio
                    ¬øPuedes a√±adir el comando`{add} {to_list}` para hacer que el c√≥digo funcione?
                example_code: |
                    ```
                    palabras {is} graznido, Hedy
                    {print} ¬°Entrena a tu loro!
                    nueva_palabra {is} {ask} ¬øQu√© palabra le quieres ense√±ar?
                    _ nueva_palabra _ palabras
                    {print} üßí Di nueva_palabra, Hedy!
                    {print} ü¶ú palabras {at} {random}
                    ```
            4:
                story_text: |
                    En este nivel, tenemos que usar comillas con los comandos `{ask}` y`{print}`.
                    ### Ejercicio
                    Completa el c√≥digo poniendo comillas en los espacios.
                example_code: |
                    ```
                    palabras {is} gru√±ir, Hedy
                    {print} _ ¬°Entrena a tu loro! _
                    nueva_palabra {is} {ask} _ ¬øQu√© palabra le quieres ense√±ar? _
                    {add} nueva_palabra {to_list} palabras
                    {print} _ üßí ¬°Di _ nueva_palabra _, Hedy!_
                    {print} _ ü¶ú _ palabras {at} {random}
                    ```
            5:
                story_text: |
                    ¬°Recompensa tu loro si dice la ¬°palabra correcta!

                    ### Ejercicio
                    Finaliza el c√≥digo llenando los 4 comandos que faltan.
                example_code: |
                    ```
                    palabras {is} graznido, Hedy
                    {print} '¬°Entrena a tu lora'
                    nueva_palabra {is} {ask} '¬øQue palabra le quieres ense√±ar?'
                    {add} nueva_palabra {to_list} palabras
                    palabra_dicha {is} palabras {at} {random}
                    {print} 'üßí Di ' nueva_palabra ', Hedy!'
                    {print} 'ü¶ú ' palabra_dicha
                    _ palabra_dicha {is} nueva_palabra _ 'üßí ¬°Gran trabajo, Hedy!üç™'
                    _ _ 'üßí No, Hedy, di ' nueva_palabra
                    ```
    piggybank:
        name: Cerdito hucha
        default_save_name: Cerdito hucha
        description: ¬°Cuenta tu dinero!
        levels:
            12:
                story_text: |
                    En esta aventura aprender√°s como hacer una hucha virtual.

                    ### Ejercicio
                    Termina el c√≥digo para calcular cu√°nto dinero tienes y cuando tiempo debes ahorrar ¬°para comprar lo que quieres!
                    **Extra** ¬øQuiz√°s ya hayas ahorrado algo de dinero? R√©stalo de la cantidad que tendr√°s que ahorrar.
                example_code: |
                    ```
                    {print} '¬°La hucha virtual!'
                    deseo = {ask} '¬øQu√© quieres comprar?'
                    precio = {ask} '¬øCu√°nto cuesta?'
                    ahorrado = {ask} '¬øCu√°nto dinero tienes ahorrado?'
                    paga = {ask} '¬øCu√°nto dinero obtienes por semana?'
                    a_ahorrar = precio - ahorrado
                    semanas = a_ahorrar / paga
                    {print} 'Podr√°s comprar un ' _ ' en ' _ ' semanas.'
                    ```
            14:
                story_text: |
                    ### Exercise
                    In this level you can let Hedy tell you if you have saved up enough money!
                    Finish this code by filling in the blanks!
                example_code: |
                    ```
                    _ calculate_budget {with} wish, money, allowance
                        to_save = wish - money
                        weeks = to_save / allowance
                        {if} wish _ money
                            {print} 'You need to save up some more!'
                            {print} 'Youll need ' weeks ' more weeks.'
                        {else}
                            {print} 'Great! You have enough'
                            {print} 'Lets go shopping!'

                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'

                    {call} _
                    ```
    pressit:
        name: Presi√≥nalo
        default_save_name: Presionado
        description: ¬°Intenta vincular una tecla del teclado a un comando!
        levels:
            5:
                story_text: |
                    ¬°En este nivel hay otra nueva palabra clave: `{pressed}`!
                    Con `{pressed}` puedes usar las teclas de tu teclado para controlar qu√© l√≠neas se usar√°n.

                    ### Desaf√≠o
                    Mira el ejemplo y agrega una l√≠nea m√°s de c√≥digo que reaccione al presionar una tecla.
                example_code: |
                    ```
                    {print} '¬øQuieres un final bueno (g) o malo (b)?'
                    {if} g {is} {pressed} {print} 'Vivieron felices para siempre ‚ù§'
                    {else} {print} 'El pr√≠ncipe fue comido por un hipop√≥tamo üò≠'
                    ```
                story_text_2: |
                    Tambi√©n puedes enlazar los comandos de la tortuga a teclas del teclado.

                    ### Desaf√≠o
                    Copia las l√≠neas varias veces para que as√≠ puedas hacer un dibujo m√°s grande.
                example_code_2: |
                    ```
                    {if} y {is} {pressed} {forward} 15
                    {else} {turn} 90
                    ```
            7:
                story_text: |
                    Ahora que ya has aprendido acerca de `{repeat}`, podemos presionar las teclas m√∫ltiples veces.
                    Puedes usarlo para hacer que la tortuga camine hacia adelante y gire.

                    ### Ejercicio
                    El c√≥digo que viste en el nivel 5 solamente comprueba la tecla una sola vez. Copia el c√≥digo de ejemplo y agr√©gale un `{repeat}`, as√≠ podr√°s presionar la tecla m√∫ltiples veces.
                    Usa este c√≥digo para dibujar algo bonito.
                example_code: |
                    ```
                    {if} x {is} {pressed} {forward} 15 {else} {turn} 90
                    ```
            9:
                story_text: |
                    Ahora que sabes como combinar sentencias, puedes crear una herramienta de mecanograf√≠a con `{pressed}`

                    ### Ejercicio
                    Completa el c√≥digo. Cada vez se elegir√° una letra al azar, que deber√°s pulsar. Obtienes un punto cuando presionas la tecla correcta, y una deducci√≥n de dos puntos cuando presionas una tecla equivocada.
                    **Extra** Limpia la pantalla tras cada letra, y muestra al usuario cu√°ntos puntos han obtenido.
                example_code: |
                    ```
                    puntos = 0
                    letras = a, b, c, d, e
                    {repeat} 10 {times}
                        letra = _ _ _
                        {print} 'Presiona la letra ' letra
                        {if} letra {is} {pressed}
                        _
                        _
                        _
                    ```
    print_command:
        name: '{print}'
        default_save_name: imprimir
        description: Introducci√≥n al comando imprimir
        levels:
            1:
                story_text: |
                    ## El comando imprimir
                    Puedes imprimir texto por pantalla usando el comando `{print}`.
                example_code: |
                    ```
                    {print} ¬°Hola, programador!
                    {print} ¬°Bienvenido a Hedy!
                    ```
                story_text_2: |
                    ### Ejercicio
                    En Hedy puedes encontrar ejercicios en cada aventura. Un ejercicio te permite practicar los nuevos comandos y conceptos, y te permite darle tu propio toque a los c√≥digos de ejemplo.
                    En este ejercicio ver√°s un espacio en blanco rosa. Tienes que rellenar algo en el lugar del espacio en blanco antes de que se pueda ejecutar tu c√≥digo.

                    Rellena el comando `{print}` en el espacio en blanco y despu√©s a√±ade cinco l√≠neas de c√≥digo. Cada l√≠nea tiene que empezar con un comando `{print}`.
                    ¬°Divi√©rtete!
                example_code_2: |
                    ```
                    _ ¬°Hola!
                    ```
            18:
                story_text: |-
                    ¬°Hemos llegado a c√≥digo real de Python! Eso significa que tendremos que usar par√©ntesis con `{print}` y `{range}` de ahora en adelante.
                    Tambi√©n significa que puedes usar el c√≥digo de Hedy desde este nivel en cualquier entorno de Python mientras uses comandos en ingl√©s. Si hasta ahora no lo has hecho, puedes cambiar el interruptor en el men√∫ de comandos para hacerlo.
                example_code: |
                    ```
                    {print}('¬°Hola!')
                    {for} i {in} {range}(1, 10):
                        {print}('Esta es la l√≠nea ', i)
                    ```
                story_text_2: Si quieres imprimir m√°s de una l√≠nea, tienes que separarla por comas.
                example_code_2: |
                    ```
                    temperatura = 25
                    {print}('Hay ', temperatura, ' grados fuera')
                    ```

                    {print}('Mi nombre es ', nombre)
    quizmaster:
        name: Presentador
        default_save_name: Presentador
        description: ¬°Haz tu propio cuestionario!
        levels:
            14:
                story_text: |
                    ### Ejercicio
                    ¬°En esta aventura puedes hacer tu propio cuestionario! Rellena los espacios vac√≠os, ¬°a√±ade m√°s preguntas y disfruta!
                    Puedes hacer un cuestionario sobre lo que quieras: una afici√≥n, tu animal favorito, tu libro favorito o ¬°cualquier otra idea que tengas!
                example_code: |
                    ```
                    {print} 'Haz tu propio cuestionario'
                    puntos_a = 0
                    puntos_b = 0
                    {print} 'Pregunta'
                    {print} 'Respuesta Opci√≥n A'
                    {print} 'Respuesta Opci√≥n A'
                    respuesta = {ask} '¬øCual es la respuesta?'
                    {if} respuesta == 'A'
                        puntos_a = puntos_a + 1
                    {if} respuesta == 'B'
                        puntos_b = puntos_b + 1
                    {print} '¬°Termin√≥ el cuestionario!'
                    {print} '¬°Veamos los resultados!'
                    {if} puntos_a > puntos_b
                        {print} '¬°Perteneces al club A!'
                    {if} puntos_b > puntos_a
                        {print} '¬°Perteneces al club B!'
                    ```
    quotation_marks:
        name: '''comillas'''
        default_save_name: comillas
        description: Introducci√≥n a las comillas
        levels:
            4:
                story_text: |
                    ## 'Comillas'
                    En el nivel 4 `{ask}` y `{print}` han cambiado.
                    Debes poner el texto que quieras imprimir entre comillas.
                    Esto es √∫til, porque puedes imprimir todas las palabras que quieras. Tambi√©n las palabras que sol√≠as almacenar algo con `{is}`.
                    La mayor√≠a de los lenguajes de programaci√≥n tambi√©n usan comillas al imprimir, as√≠ que nos estamos acercando ¬°a la programaci√≥n real!
                example_code: |
                    ```
                    {print} '¬°A partir de ahora tienes que usar las comillas!'
                    respuesta {is} {ask} '¬øQu√© tienes que usar a partir de ahora?'
                    {print} 'Tenemos que usar ' respuesta
                    ```
                story_text_2: |
                    ## Contracciones
                    ¬°Importante! Ten en cuenta que estamos usando comillas, Hedy se confundir√° cuando uses el ap√≥strofe para contracciones como I'm o What's.
                    Aseg√∫rate de eliminar esos ap√≥strofes y cambia la ortograf√≠a a I am o What is.
                    Comprueba el c√≥digo de ejemplo para ver la forma incorrecta de usar los ap√≥strofes.
                example_code_2: |
                    ```
                    _ Esta es la manera incorrecta de usar ap√≥strofes _
                    {print} 'I'm babysitting my sister's kids'
                    {print} 'What's more fun than that?'
                    ```
            12:
                story_text: |
                    **Todos los textos tienen que ir entre comillas**
                    Para este nivel tambi√©n tendr√°s que usar comillas cuando almacenes un texto con `=`:
                example_code: |
                    ```
                    nombre = 'El Robot Hedy'
                    {print} 'Hola ' nombre
                    ```
                story_text_2: |
                    **Todos los objetos en las listas tambi√©n necesitan comillas**
                    Las listas son textos, as√≠ que tambi√©n necesitan comillas. Ten en cuenta que cada objeto en la lista tiene comillas.
                    Esto te permite guardar dos palabras como un objeto en la lista, por ejemplo 'Black Widow'.
                example_code_2: |
                    ```
                    superh√©roes = 'Spiderman', 'Batman', 'Black Widow'
                    {print} superh√©roes {at} {random}
                    ```
                story_text_3: |
                    **Todos los textos tras las comparaciones `{if}` tambi√©n necesitan comillas**
                example_code_3: |
                    ```
                    nombre = {ask} '¬øCu√°l es tu nombre?'
                    {if} nombre = 'El Robot Hedy'
                        {print} '¬°Hola!'
                    ```
                story_text_4: |
                    **Los n√∫meros no necesitan comillas**
                    Para los n√∫meros, no utilizas comillas en el `=`:
                example_code_4: |
                    ```
                    puntuaci√≥n = 25
                    {print} 'Obtuviste ' puntuaci√≥n
                    ```
    random_command:
        name: '{random}'
        default_save_name: comando_aleatorio
        description: introducci√≥n al comando aleatorio
        levels:
            3:
                story_text: |
                    ## En aleatorio
                    En este nivel puedes hacer una lista usando el comando `{is}`. Puedes dejar que el ordenador elija un objeto aleatorio de esa lista. Esto se hace con `{at} {random}`.
                example_code: |
                    ```
                    animales {is} perros, gatos, canguros
                    {print} animales {at} {random}
                    ```
                story_text_2: |
                    Tambi√©n puedes usar el comando `{at} {random}` en una frase.
                example_code_2: |
                    ```
                    comida {is} s√°ndwich, trozo de pizza, ensalada, burrito
                    {print} Voy a tomar un/a comida {at} {random} para comer.
                    ```
                story_text_3: |
                    ### Ejercicio
                    Prueba el comando `{at} {random}` haciendo tu propio espect√°culo (como los de la tele) donde eliges una puerta o maleta y ¬°tendr√° un gran premio!
                    ¬øPuedes hacerlo? Ya hemos puesto las primeras l√≠neas en el c√≥digo de ejemplo.
                example_code_3: |
                    ```
                    {print} ¬°El gran espect√°culo!
                    {print} Hay 3 maletas delante tuyo...
                    elegida {is} {ask} ¬øQu√© maleta eliges?
                    premios {is} _
                    _
                    ```
            16:
                story_text: |-
                    We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
                    We use square brackets to point out a place in a list. For example: `friends[1]` is the first name on the list of friends, as you can see in the first part of the example code.
                    The second part of the example code shows you that we can also match 2 lists using the variable i.
                example_code: |
                    ```
                    friends = ['Ahmed', 'Ben', 'Cayden']
                    {print} friends[1] ' is the first friend on the list.'
                    {print} friends[2] ' is the second friend on the list.'
                    {print} friends[3] ' is the third friend on the list.'
                    #now we will match 2 lists using the variable i
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} friends[i] 's lucky number is ' lucky_numbers[i]
                    ```
                story_text_2: |-
                    Now that you've learned to use the brackets in lists, you can also start using the {at} {random} command in the Python way!
                    You simply type the name of your list with `[random]` behind it!
                example_code_2: |-
                    ```
                    fruit = ['apple', 'banana', 'cherry']
                    {print} fruit[random]
                    ```
    repeat_command:
        name: '{repeat}'
        default_save_name: comando_repetir
        description: comando repetir
        levels:
            7:
                story_text: |
                    ## ¬°Repetir! ¬°Repetir! ¬°Repetir!
                    El nivel 7 a√±ade el comando `{repeat}`.  `{repeat}` se puede usar para ejecutar una l√≠nea de c√≥digo varias veces. Tal que as√≠:

                    ### Ejercicio
                    Juega con el comando repetir. ¬øPuedes ahora hacer la canci√≥n de cumplea√±os feliz en s√≥lo 3 l√≠neas de c√≥digo en vez de en 4?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} '¬°Hedy es divertido!'
                    ```
            8:
                story_text: |
                    ### Repetir comandos y sangr√≠a
                    En este nivel puede repetir varias l√≠neas de c√≥digo con s√≥lo 1 comando repetir.
                    Haz esto haciendo un bloque de l√≠neas que quieras repetir.
                    Las l√≠neas en este bloque necesitar√°n **sangr√≠a** .
                    Eso significa poner cuatro espacios al inicio de cada l√≠nea. Tambi√©n tendr√°s que sangrar cuando quieras crear un bloque de una sola l√≠nea.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} 'Hola a todos'
                        {print} 'Todo esto se repite 5 veces'
                    ```
            9:
                story_text: |
                    En este nivel no puedes usar varias l√≠neas s√≥lo con `{if}` y `{repeat}`, ¬°pero si puedes juntarlas!
                    En este ejemplo ves un comando `{if}` dentro de un comando `{repeat}`. Tambi√©n se permite lo contrario, y tambi√©n un `{if}` se permite en un `{if}` y un `{repeat}` en un `{repeat}`.
                    ¬°Pru√©balo!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        comida = {ask} '¬øQu√© quieres?'
                        {if} comida {is} pizza
                            {print} '¬°genial!'
                        {else}
                            {print} 'la pizza es mejor'
                    ```
    repeat_command_2:
        name: '{repeat} 2'
        default_save_name: comando_repetir_2
        description: comando repetir 2
        levels:
            7:
                story_text: |
                    ## Repetir con otros comandos y variables
                    Ahora has practicado el comando `{repeat}` en combinaci√≥n con el comando `{print}`, pero ¬øsab√≠as que tambi√©n puedes usar otros comandos con `{repeat}` ?
                    En este ejemplo puedes ver que `{repeat}` tambi√©n se puede usar con un comando `{ask}`, `{if}` o `{else}`.
                example_code: |
                    ```
                    {repeat} 2 {times} respuesta = {ask} '¬øSab√≠as que puedes hacer una pregunta varias veces?'
                    {if} respuesta {is} s√≠ {repeat} 2 {times} {print} '¬°Ya lo sab√≠as!'
                    {else} {repeat} 3 {times} {print} '¬°Has aprendido algo nuevo!'
                    ```
                story_text_2: |
                    Otra cosa interesante que puedes hacer con el comando `{repeat}` es usar variables para establecer las veces que algo deber√≠a repetirse. En el c√≥digo de ejemplo puedes ver que primero preguntamos a la persona qu√© edad tiene.
                    Entonces, en la l√≠nea 3, la pregunta se repite 'edad' veces. As√≠ que hemos usado la variable 'edad' con el comando `{repeat}`.
                example_code_2: |
                    ```
                    {print} '¬°Viva! ¬°Es tu cumplea√±os!'
                    edad = {ask} '¬øCu√°ntos a√±os tienes?'
                    {repeat} edad {times} {print} '¬°Hip Hip Hurra!'
                    ```
            8:
                story_text: |
                    ### ¬øEn el bloque o no?
                    En este nivel tienes que pensar con cuidado que l√≠neas de c√≥digo deben ir en el bloque y cuales no.
                    Por ejemplo: Si quieres cantar la canci√≥n *el hombre magdalena*. S√≥lo quieres que la l√≠nea con 'el hombre magdalena' se repita dos veces.
                    Esto significa que la √∫ltima l√≠nea no debe comenzar con sangr√≠a ya que no pertenece al bloque.
                    Si comienzas la √∫ltima l√≠nea con sangr√≠a la canci√≥n ser√° incorrecta.

                    ## Ejercicio
                    Cada l√≠nea en el ejemplo empieza con un espacio en blanco. Elimina los espacios en blanco e intenta averiguar qu√© l√≠nea necesita sangr√≠a y cual no para hacer la canci√≥n del hombre magdalena.
                example_code: |
                    ```
                    _ {print} '¬øConoces al hombre magdalena?'
                    _ {repeat} 2 {times}
                    _ {print} 'El hombre magdalena'
                    _ {print} '¬øConoces al hombre magdalena, que vive en la Calle Drury?'
                    ```
    restaurant:
        name: Restaurante
        default_save_name: Restaurante
        description: Crea tu propio restaurante virtual
        levels:
            1:
                story_text: |
                    En nivel 1 puedes hacer tu propio restaurante virtual y tomar los pedidos de tus invitados.
                story_text_2: |
                    ### Ejercicio
                    Copia el c√≥digo de ejemplo en tu entrada en pantalla haciendo clic en el bot√≥n amarillo.
                    Primero, completa el comando correcto en los huecos en blanco para hacer que tu c√≥digo funcione correctamente.
                    Despu√©s a√±ade al menos 4 l√≠neas m√°s de c√≥digo al programa del restaurante.
                    Pregunta a los clientes qu√© les gustar√≠a beber y pregunta si quieren pagar en efectivo o con tarjeta.
                    Por √∫ltimo, piensa una manera adecuada de despedirte de tus clientes.
                example_code_2: |
                    ```
                    {print} Bienvenido al restaurante Hedy's
                    _ ¬øQu√© te gustar√≠a pedir?
                    {echo} As√≠ que te gustar√≠a ordenar
                    {print} ¬°Gracias por su pedido!
                    {print} ¬°Est√° en camino!
                    ```
            2:
                story_text: |
                    En el nivel 2 puedes ampliar su restaurante usando variables. En el nivel 1 Hedy s√≥lo pod√≠a `{echo}` la orden una vez y s√≥lo pod√≠a recordar lo √∫ltimo que se le pidi√≥.
                    ¬°Ahora puedes usar variables y Hedy puede recordar tanto la comida como los ingredientes!
                example_code: |
                    ```
                    {print} ¬°Bienvenido al restaurante Hedy's!
                    {print} Hoy estamos sirviendo pizza o lasa√±a.
                    comida {is} {ask} ¬øQu√© te gustar√≠a comer?
                    {print} ¬°Muy buena elecci√≥n! ¬°La comida es mi favorita!
                    cobertura {is} {ask} ¬øTe gustar√≠a carne o verduras en eso?
                    {print} ¬°La comida con cobertura est√° en camino!
                    ```
                story_text_2: |
                    ### Ejercicio
                    Copia tu propio c√≥digo del restaurante del nivel anterior a la pantalla de entrada de abajo.
                    Corrige el c√≥digo reemplazando los comandos `{ask}` y  `{echo}` y usando variables, como las que has aprendido en este nivel.

                    Ahora que tu c√≥digo funciona otra vez, es hora de a√±adir m√°s cosas.
                    Observa la √∫ltima l√≠nea de c√≥digo del ejemplo: ¬°Marchando la comida `{print}` con cobertura!
                    En esta l√≠nea se han usado 2 variables para crear un resumen de tu pedido.
                    Ahora a√±ade tu propio resumen de la comida y las bebidas pedidas por el cliente.

                    **Extra** Ahora que has aprendido a usar variables, puedes usar tantas variables como quieras en una l√≠nea de c√≥digo. ¬øPuedes a√±adir m√°s variables a tu c√≥digo, como comer aqu√≠ o para llevar, efectivo o tarjeta, con o sin pajita etc.?
            3:
                story_text: |
                    ¬øTienes problemas para decidir qu√© quieres cenar? ¬°Puedes dejar que Hedy elija por ti!
                    Simplemente agregue listas de sus favoritos (o menos favorito) comidas y Hedy puede elegir al azar su cena.
                    Tambi√©n puedes divertirte un poco, ¬°dejando que Hedy elija el precio de su cena tambi√©n! ¬øQu√© vas a conseguir?
                example_code: |
                    ```
                    platos {is} espaguetis, coles de Bruselas, hamburguesas
                    {print} ¬°Te servir√°n platos {at} {random} esta noche!
                    precio {is} 1 euro, 10 euros, 100 euros
                    {print} Ser√°n precio {at} {random} por favor.
                    ```
                story_text_2: |
                    ### Ejercicio
                    Ahora haz tu propia versi√≥n del restaurante al azar.
                    Haz t√∫ mismo una lista de entrantes, platos principales, postres, bebidas y precios.
                    Despu√©s usa los comandos `{print}` y `{at} {random}` para decirle los clientes qu√© habr√° en su men√∫ esta noche.
                example_code_2: |
                    ```
                    {print} ¬°Bienvenido a tu propio restaurante aleatorio!
                    entrantes {is} _
                    platos_principales {is} _
                    postres {is} _
                    bebidas {is} _
                    precios {is} _
                    _
                    ```
            4:
                story_text: |
                    ### Ejercicio
                    ¬°A√±ade las comillas a este c√≥digo para hacerlo funcionar! Ten cuidado: las variables no deben ir entre comillas.
                    Despu√©s, usa el comando `{clear}` para s√≥lo mostrar una l√≠nea cada vez en tu pantalla de salida.

                    ### Ejercicio 2
                    Vuelve al nivel anterior y copia el c√≥digo de tu restaurante. Haz que el c√≥digo funcione en este nivel a√±adiendo comillas en el lugar correcto y a√±ade varios comandos `{clear}`.
                example_code: |
                    ```
                    _ Agrega comillas a este c√≥digo_
                    {print} ¬°Bienvenido al restaurante Hedys!
                    {print} Hoy estamos sirviendo pizza o lasa√±a
                    comida {is} {ask} ¬øQu√© te gustar√≠a comer?
                    {print} ¬°Gran elecci√≥n! ¬°La comida es mi favorita!
                    cobertura {is} {ask} ¬øTe gustar√≠a carne o vegetales encima de eso?
                    {print} comida con cobertura est√° en camino!
                    bebidas {is} {ask} ¬øQu√© te gustar√≠a para beber?
                    {print} Gracias por tu orden.
                    {print} Tu comida y bebidas ya van a estar!
                    ```
            5:
                story_text: |
                    ### Ejercicio
                    El c√≥digo de ejemplo te ense√±a como podr√≠as programar que te has quedado sin una opci√≥n del men√∫ en tu restaurante.
                    Copia tu propio c√≥digo del restaurante de los niveles anteriores. Crea un problema en tu restaurante y a√±ade el c√≥digo, como el c√≥digo de ejemplo que hiciste.
                    Por ejemplo, tambi√©n puedes quedarte sin una opci√≥n del men√∫, o no aceptar tarjetas de cr√©dito, o que la m√°quina del helado est√© rota.

                    **Extra** ¬øHas programado el problema y las respuestas apropiadas? Entonces intenta a√±adir m√°s comandos `{if}` y `{else}` a tu c√≥digo.
                    ¬°Intenta a√±adir un `{if}` tras cada comando`{ask}` en tu c√≥digo para hacer el c√≥digo tan interactivo como sea posible!
                example_code: |
                    ```
                    bebidas_disponibles {is} agua, limonada, refresco de cola, zumo de naranja
                    bebida {is} {ask} '¬øQu√© quieres beber?'
                    {if} bebida {in} bebidas_disponibles {print} '¬°Una ' bebida 'de camino!'
                    {else} {print} 'Lo siento, no servimos eso'
                    ```
            6:
                story_text: |
                    En este nivel puedes usar las matem√°ticas para calcular el precio total del pedido de tus clientes, que puede hacer tu restaurante virtual m√°s realista.
                    Pero tambi√©n puedes a√±adir m√°s cosas a tu restaurante virtual, por ejemplo m√°s platos.

                    ### Ejercicio
                    Puedes a√±adir m√°s cosas a tu restaurante virtual. Por ejemplo, puedes...
                    - ¬øpreguntar cuanta gente va a venir y multiplicar el precio por esa cantidad?
                    - ¬øa√±adir otro plato?
                    - ¬øhacer un descuento cuando introduzcan un cup√≥n de descuento (secreto)?
                    - ¬øa√±adir un men√∫ infantil?
                    - ¬øpiensa en otras cosas divertidas para a√±adir?
                example_code: |
                    Puedes hacer un c√≥digo de restaurante simple, como este:
                    ```
                    {print} 'Bienvenido al restaurante Casa Hedy'
                    {print} 'Aqu√≠ est√° nuestro men√∫:'
                    {print} 'Nuestros platos principales son pizza, lasa√±a o espaguetis'
                    plato_principal = {ask} '¬øQu√© plato principal te gustar√≠a?'
                    precio = 0
                    {if} plato_principal {is} pizza precio = 10
                    {if} plato_principal {is} lasa√±a precio = 12
                    {if} plato_principal {is} espaguetis precio = 8
                    {print} 'Has pedido ' plato_principal
                    {print} 'Eso ser√° ' precio ' d√≥lares, por favor'
                    {print} '¬°Gracias, que aproveche!'
                    ```
            7:
                story_text: |
                    En este nivel aprendiste a usar el comando `{repeat}` para repetir una l√≠nea de c√≥digo un n√∫mero de veces
                    Puedes usar eso en tu restaurante para `{ask}` a varias personas qu√© les gustar√≠a ver.

                    ### Ejercicio
                    ¬øPuedes acabar el c√≥digo? Hedy necesita repetir esta pregunta tantas veces como gente haya. As√≠ que si hay 5 personas, tiene que hacer la pregunta 5 veces.
                    **Extra** Ampl√≠a tu c√≥digo con mas preguntas, por ejemplo sobre bebidas o salsas.
                example_code: |
                    ```
                    {print} '¬°Bienvenido al restaurante Hedys!'
                    personas = {ask} '¬øCu√°ntas personas se unen a nosotros hoy?'
                    ```
            8:
                story_text: |
                    En este nivel puedes hacer tu restaurant m√°s complejo repitiendo m√∫ltiples l√≠neas de c√≥digo. As√≠:

                    ### Ejercicio
                    Este c√≥digo puede ampliarse con m√°s cosas en el men√∫, por ejemplo ofreciendo bebidas, y/o varios platos o postres. A√±ade al menos una cosa m√°s.
                    **Extra** A√±ade incluso m√°s cosas, ¬°tantas opciones como quieras!
                example_code: |
                    ```
                    {print} '¬°Bienvenido al restaurante Casa Hedy!'
                    personas = {ask} '¬øCu√°ntas personas ser√°n hoy?'
                    {print} '¬°Genial!'
                    {repeat} personas {times}
                        comida = {ask} '¬øQue les gustar√≠a pedir?'
                        {print} comida
                    {print} '¬°Gracias por pedir!'
                    {print} '¬°Disfruten su comida!'
                    ```
            9:
                story_text: "¬°En este nivel puedes usar anidaci√≥n para hacer tu restaurant m√°s realista y divertido!\n\n### Ejercicio\nSe ha eliminado la sangr√≠a en el c√≥digo de ejemplo. \n¬øPuedes averiguar cu√°nta sangr√≠a necesita cada l√≠nea para que el c√≥digo funcione correctamente?\nSi el cliente pide pizza, Hedy no deber√≠a preguntarle al cliente qu√© salsa quiere.\n\n**Extra** Un restaurante no almacena todas las salsas. Haz una lista de las salsas disponibles y da una respuesta con cada pedido si lo vendes. <br>\n**Extra** Las pizzas tienen ingredientes. Pregunta al cliente cu√°l quieren.<br>\n**Extra** ¬øLos clientes quieren una bebida? ¬°Preg√∫ntaselo tambi√©n! <br>\n"
                example_code: |
                    ```
                    {print} '¬°Bienvenido al restaurante Casa Hedy!'
                    personas = {ask} '¬øCu√°ntas personas se nos van a unir hoy?'
                    {print} '¬°Genial!'
                    precio = 0
                    {repeat} persona {times}
                    _ comida = {ask} '¬øQue le gustar√≠a pedir?'
                    _ {print} comida
                    _ {if} comida {is} patatas fritas
                    _ precio = precio + 3
                    _ salsa = {ask} '¬øQu√© salsa le gustar√≠a con sus patatas fritas?'
                    _ {if} salsa {is} no
                    _ {print} 'sin salsa'
                    _ {else}
                    _ precio = precio + 1
                    _ {print} 'con ' salsa
                    _ {if} comida {is} pizza
                    _ precio = precio + 4
                    {print} 'Ser√°n ' precio ' d√≥lares'
                    {print} '¬°Disfruta tu comida!'
                    ```
            10:
                story_text: |
                    En este nivel aprender√°s c√≥mo preguntar los pedidos f√°cilmente para los diferentes platos.

                    ### Ejercicio 1
                    Completa el c√≥digo con un `{ask}` en los espacios en blanco para que se le pregunte al cliente qu√© quieren comer en cada plato.
                example_code: "```\nplatos = aperitivo, principal, postre\n{for} plato {in} platos\n    {print} '¬øCu√°l es su pedido de ' platos '?'\n    _ \n    _\n```\n"
                story_text_2: |
                    ### Ejercicio
                    Por supuesto, ¬°tambi√©n puedes pedir para varias personas!
                    ¬øPuedes agregar la cantidad correcta de sangr√≠a a cada l√≠nea para hacer funcionar el c√≥digo correctamente?
                    Consejo: algunas l√≠neas no necesita tener sangr√≠a.
                example_code_2: |
                    ```
                    _ platos = aperitivo, plato principal, postre
                    _ nombres = Jes√∫s, G√©nesis
                    _ {for} nombre {in} nombres
                    _ {for} plato {in} platos
                    _ comida = {ask} '¬øQue te gustar√≠a ordenar como tu ' plato '?'
                    _ {print} nombre ' orden√≥ ' comida ' como su ' plato
                    ```
            11:
                story_text: |
                    Podemos usar el `{for}` con `{range}` para imprimir los pedidos de varios clientes de manera ordenada.

                    ### Ejercicio
                    Completa el c√≥digo del restaurante, as√≠ podr√°s preguntar el pedido a varias personas. Imprime el n√∫mero de pedido cada vez: 'Pedido 1', 'Pedido 2', etc.
                    ¬øEst√°s seguro como va esto? Echa un vistazo a tu c√≥digo del nivel 8.

                    **Extra** En el nivel 9 el restaurante tambi√©n us√≥ precios. ¬°Tambi√©n puedes a√±adir eso aqu√≠!
                example_code: |
                    ```
                    {print} '¬°Bienvenido al restaurante Hedy!'
                    personas = {ask} '¬øPara cuanta gente le gustar√≠a pedir?'
                    {print} 'As√≠ que quieres pedir para ' personas ' personas.'
                    {print} "¬°Vamos!"
                    ```
            12:
                story_text: |
                    A partir de este nivel puedes usar n√∫meros decimales para hacer que tu men√∫ sea m√°s realista.

                    ### Ejercicio
                    ¬øPuedes pensar en un c√≥digo para darle a tus amigos y familiares un 15% de descuento?
                example_code: |
                    ```
                    precio = 0.0
                    comida = {ask} '¬øQu√© te gustar√≠a pedir?'
                    bebida = {ask} '¬øQue te gustar√≠a beber?'
                    {if} comida {is} 'hamburguesa'
                        precio = precio + 6.50
                    {if} comida {is} 'pizza'
                        precio = precio + 5.75
                    {if} bebida {is} 'agua'
                        precio = precio + 1.20
                    {if} bebida {is} 'refresco'
                        precio = precio + 2.35
                    {print} 'Ser√°n ' precio ' d√≥lares, por favor'
                    ```
            13:
                story_text: |
                    En este nivel aprender√°s nuevos comandos para ampliar tu c√≥digo mucho m√°s.

                    ### Ejercicio 1
                    Coloca un `{and}` y un `{or}` en la parte l√≥gica del programa.

                    ### Ejercicio 2
                    Amplia tu restaurante con al menos un `{and}` y un `{or}` m√°s.
                    Por ejemplo, crea un cup√≥n de descuento especial que s√≥lo se aplique a la pizza, o dale una bebida gratis a tu cliente
                    con sus patatas y tortitas. ¬°O por supuesto algo completamente diferente!
                example_code: |
                    ```
                    precio = 10
                    comida = {ask} ¬øQu√© te gustar√≠a comer?
                    bebidas = {ask} ¬øQu√© quieres beber?
                    {if} comida {is} 'sandwich' _ bebida {is} 'zumo'
                        {print} 'Este es nuestro men√∫ de descuentos'
                        precio = precio - 3
                    {if} bebidas {is} 'agua' _ bebidas {is} 'zumo'
                        {print} 'Esa es una opci√≥n saludable'
                    {print} 'Eso ser√° ' precio ' d√≥lares'
                    ```
            15:
                story_text: |
                    Con el comando `{while}` puedes asegurarte que tus clientes sigan agregando ordenes hasta que gusten.

                    ### Exercise
                    Correctly add the `{while}` command to this code.
                example_code: |
                    ```
                    {print} 'Bienvenido a McHedy'
                    m√°s = 's√≠'
                    _
                        pedido = {ask} '¬øQu√© te gustar√≠a ordenar?'
                        {print} pedido
                        m√°s = {ask} '¬øTe gustar√≠a pedir algo m√°s?'
                    {print} '¬°Gracias!'
                    ```
    rock:
        name: Piedra, papel o tijera
        default_save_name: Piedra_2
        description: Crea tu propio juego de piedra, papel y tijera
        levels:
            1:
                story_text: |
                    En el nivel 1 comenzamos el juego de piedra, papel o tijera.

                    Con `{ask}` puedes tomar una opci√≥n, y con `{echo}` puedes repetir la opci√≥n elegida.
                example_code: |
                    ```
                    {print} ¬øQu√© eliges?
                    {ask} elige piedra, papel o tijera
                    {echo} has elegido:
                    ```
                story_text_2: |
                    ### Ejercicio
                    En lugar de usar palabras, puedes tambi√©n usar emojis: ‚úä‚úã‚úå
                    ¬øPuedes hacer el c√≥digo usando emojis?
                example_code_2: |
                    ```
                    {print} ¬øQu√© escoges?
                    {ask} escoge _
                    {echo} tu elecci√≥n fue
                    ```
            2:
                story_text: |
                    En este nivel puedes practicar usando las variables, ¬°as√≠ puedes hacer un juego de piedra, papel o tijeras en el pr√≥ximo nivel!
                    ### Ejercicio
                    Completa el c√≥digo poniendo la **variable** en los huecos en blanco.
                    Este juego no es muy interactivo, ¬°pero no te preocupes! !En la siguiente pesta√±a aprender√°s como usar las variables con el comando `{ask}` para hacer tu juego interactivo!
                example_code: |-
                    ```
                    opci√≥n {is} piedra
                    {print} Yo elijo _
                    ```
            3:
                story_text: |
                    ¬°Puedes usar el comando `{at} {random}` para dejar que el ordenador elija piedra, papel o tijeras!

                    ### Ejercicio
                    Completa el c√≥digo usando el comando `{at} {random}`.
                example_code: |
                    ```
                    opciones {is} piedra, papel, tijera
                    {print} opciones _
                    ```
                story_text_2: |
                    **Extra** Haz un juego de dos jugadores. Lo primero, pregunta a los dos jugadores que pongan sus nombres. Despu√©s, deja que el ordenador elija aleatoriamente sus opciones.
                example_code_2: |
                    ```
                    opciones {is} piedra, papel o tijera
                    jugador_1 {is} {ask} Nombre del jugador 1:
                    _
                    ```
            4:
                story_text: |
                    En este nivel podemos programar el juego de piedra, papel, tijera. Pero si quieres a√±adir texto, aqu√≠ tambi√©n tienes que usar comillas.
                    ### Exercise
                    Fill in quotation marks on the blanks. Mind that the variable `choices` should be outside the quotes.
                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} _The computer chooses..._ choices {at} {random}
                    ```
            5:
                story_text: |
                    En este nivel podemos determinar si es un empate o no. Para ello necesitas el nuevo c√≥digo `{if}`.

                    ### Ejercicio
                    Completa el c√≥digo rellenando los huecos en blanco:
                    * Deja que el ordenador elija un opci√≥n al azar
                    * Pregunta al jugador qu√© quieren elegir
                    * Rellena las variables correctas en las l√≠neas 4 y 5
                    * Completa la l√≠nea 6 para que Hedy pueda comprobar si es un empate o no.
                example_code: |
                    ```
                    opciones {is} piedra, papel, tijeras
                    opci√≥n_ordenador {is} _
                    opci√≥n {is} _
                    {print} 'Elegiste ' _
                    {print} 'El ordenador eligi√≥ ' _
                    {if} _ {is} _ {print} '¬°empate!' {else} {print} 'no hay empate'
                    ```

                    Rellena el c√≥digo correcto en los huecos en blanco para ver si es un empate.
            9:
                story_text: "En este nivel puedes programar el juego completo de piedra, papel, tijeras anidando los comandos `{if}`. \n\n### Ejercicio\n¬øPuedes completar el c√≥digo? El programa debe decir quien ha ganado para cada combinaci√≥n.\n \n**Extra** ¬øQuieres jugar m√°s de una partida? Amplia el c√≥digo para que puedas jugar varias rondas. Incluso puedes usar un `{ask}` para preguntar al usuario cuantas rondas quieren jugar.\n"
                example_code: |
                    ```
                    opciones = piedra, papel, tijera
                    tu_opci√≥n {is} {ask} '¬øQue escoges?'
                    {print} 'Escogiste ' tu_opci√≥n
                    opci√≥n_computadora {is} opciones {at} {random}
                    {print} 'La computadora escogi√≥ ' opci√≥n_computadora
                    {if} opci√≥n_computadora {is} tu_opci√≥n
                        {print} 'Empate'
                    {if} opci√≥n_computadora {is} piedra
                        {if} tu_opci√≥n {is} papel
                            {print} '¬°Ganaste!'
                        {if} tu_opci√≥n {is} tijera
                            {print} '¬°Perdiste!'
                    # termina este c√≥digo
                    ```
            10:
                story_text: |
                    ### Ejercicio
                    En los niveles anteriores hiciste tu propio juego de piedra, papel, tijeras. ¬øPuedes completar el c√≥digo y usar el comando `{for}` adecuadamente para hacer que el juego funcione?
                example_code: |
                    ```
                    opciones = _
                    jugadores = _
                    {for} _
                    ```
            13:
                story_text: |
                    ¬°Con el comando `{and}` puedes reducir tu c√≥digo del juego de piedra, papel o tijera! Mira el ejemplo de abajo e intenta terminarlo.

                    ### Ejercicio
                    Completa tu c√≥digo de manera que siempre se elija un ganador. Ejecuta tu c√≥digo un par de veces para verificar que siempre se muestra un ganador.
                example_code: |
                    ```
                    opciones = 'piedra', 'papel', 'tijera'
                    tu_opcion = {ask} '¬øQu√© quieres escoger?'
                    opcion_computadora = opciones {at} {random}
                    {print} 'Escogiste ' tu_opcion
                    {print} 'La computadora escoge ' opcion_computadora
                    {if} opcion_computadora {is} tu_opcion
                        {print} 'Empate'
                    {if} opcion_computadora {is} 'piedra' {and} tu_opcion {is} 'papel'
                        {print} 'You win!'
                    {if} opcion_computadora {is} 'piedra' {and} tu_opcion {is} 'tijera'
                        {print} '¬°La computadora gan√≥!'
                    _
                    ```
            15:
                story_text: |
                    ### Ejercicio
                    ¬°Juega hasta que le ganes a la computadora! Pero primero termina el c√≥digo de ejemplo...
                example_code: |
                    ```
                    gan√≥ = 'no'
                    opciones = 'piedra', 'papel', 'tijeras'
                    {while} gan√≥ == 'no'
                        tu_opcion = {ask} '¬øQue escoges?'
                        opcion_computadora = opciones {at} {random}
                        {print} 'Escogiste ' tu_opcion
                        {print} 'La computadora escogi√≥ ' opcion_computadora
                        {if} opcion_computadora == tu_opcion
                            {print} '¬°Empate!'
                        {if} opcion_computadora == 'roca' {and} tu_opcion == 'tijera'
                            {print} '¬°Perdiste!'
                        {if} opcion_computadora == 'roca' {and} tu_opcion == 'papel'
                            {print} '¬°Ganaste!'
                            gan√≥ = 's√≠'
                    _
                    ```
    rock_2:
        name: Piedra, papel, tijeras 2
        default_save_name: piedra_2
        description: Parte 2 de piedra, papel, tijeras
        levels:
            2:
                story_text: |
                    Ahora que has aprendido a utilizar el comando `{ask}`, ¬°tambi√©n puedes hacer que tu c√≥digo de piedra, papel o tijera sea interactivo!

                    ### Ejercicio
                    Haz que el c√≥digo de piedra, papel o tijera sea interactivo a√±adiendo el comando `{ask}` y una pregunta a tu c√≥digo de piedra, papel o tijera.
                example_code: |
                    ```
                    opci√≥n {is} _
                    {print} Yo elijo opci√≥n
                    ```
    secret:
        name: Super Esp√≠a
        default_save_name: Super Esp√≠a
        description: Haz tu propio c√≥digo esp√≠a
        levels:
            12:
                story_text: |
                    En esta aventura podr√°s crear tu propio c√≥digo secreto. Codifica un mensaje que solo la persona correcta podr√° descifrar.
                    Si el enemigo intenta descifrar el c√≥digo, obtendr√°n un mensaje falso para hacerles perder el tiempo.

                    ### Ejercicio 1
                    Crea tu propio c√≥digo secreto para tu super esp√≠a. ¬øPuedes hacer que use a√∫n m√°s variables?

                    ### Ejercicio 2
                    A√±ade un tercer componente al c√≥digo, como una prenda de ropa o un objeto.
                example_code: |
                    ```
                    nombre = {ask} '¬øCu√°l es tu nombre?'
                    {if} nombre {is} '_'
                        a = 'Ve al aeropuerto '
                    {else}
                        a = 'Ve a la estaci√≥n de trenes '
                    contrase√±a = {ask} '¬øCu√°l es la contrase√±a?'
                    {if} contrase√±a {is} _
                        b = 'ma√±ana a las 02.00'
                    {else}
                        b = 'hoy a las 10.00'
                    {print} _ _ _
                    ```
            13:
                story_text: |
                    Podemos simplificar el c√≥digo superesp√≠a con `{and}`, entonces s√≥lo necesitamos un `{if}`.

                    ### Ejercicio 1
                    Completa el c√≥digo rellenando el comando correcto en el hueco en blanco. Consejo: El superesp√≠a tiene que responder a AMBAS preguntas correctamente, ¬°antes de que consigan la informaci√≥n confidencial!

                    ### Ejercicio 2
                    ¬°Queremos confundir a√∫n m√°s al enemigo! Crea una lista con respuestas falsas y selecciona una al azar cuando den una respuesta incorrecta.
                example_code: |
                    ```
                    nombre = {ask} '¬øCu√°l es tu nombre?'
                    contrase√±a = {ask} '¬øCu√°l es tu contrase√±a?'
                    {if} nombre {is} 'Agente007' _ contrase√±a {is} 'SUPERSECRETO'
                        {print} 'Ve al aeropuerto a las 02.00'
                    {else}
                        {print} 'Ve a la estaci√≥n de tren a las 10.00'
                     ```
    simon:
        name: Simon Says
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    Let's make a game of Simon Says! Simon Says is a memory game in which the player will be given a color. They have to repeat that color back.
                    If they get it right a color is added to the sequence, so they now have to remember 2 colors, then 3, then 4 etc. the game stops as soon as the player makes a mistake.

                    ### Exercise
                    In this first part of the Simon Says adventure, we'll let the computer pick a random color and add it to a list.

                    ***Make 2 lists*** First, make a list called `colors` and fill it with the colors red, yellow, green and blue.
                    Then make a list called `simon_sequence`. This list will be used as the answer.
                    At the start of the game this lists need to be empty. unfortunately, we can't create an empty list (yet), so we'll fill it with the words 'empty' and 'list' and we'll remove them from the list immediately.

                    ***Create a function that adds a color to the sequence*** Now that we have an empty list called simon_sequence, we can start filling it with random colors.
                    We do that with a function, so we can call it everytime there's a new level in our game. Create a function called `add_random_color`.
                    Then create the variable random_color and set it to a random color. Next, add this random color to the simon_sequence.

                    ***Create a function that shows the simon_sequence*** Start by naming the new function `show_simon_sequence` with `level` as an argument. Now we want to show as many colors as the level we are in (in level 1 you see 1 color, in level 2 you see 2 colors etc).
                    So we repeat `level` times, to print the `simon_sequence[i]`. Each time a color is shown, wait for 1 second and then clear the screen.

                    ***Test your program*** Before you go to the next level, test if the functions are working by calling both of the functions. If they're working you should see a random color in your output screen.
                    Remove this testing part of your code, copy the code and continue to the next tab to learn more about the simon says game!
                example_code: |
                    ```
                    # Make 2 lists
                    colors = _
                    _ = ['empty', 'list']
                    {remove} _ {from} simon_sequence
                    {remove} _

                    # Create a function that adds a color
                    _ add_random_color
                        _
                        {add} _

                    # Create a function that shows the simon_sequence
                    {define} _
                        {for} i {in} {range} 1 {to} _
                            {print} _
                            _
                            _

                    # Test your program
                    {call} _
                    {call} show_simon_sequence {with} 1
                    ```
    simon_2:
        name: Simon Says 2
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    We'll continue with our Simon Says game!

                    ### Exercise
                    ***Paste your code here*** Paste your code from the previous level here. Don't forget to remove the part that was just used for testing the functions.

                    ***Create a function that creates the player_sequence*** The list `player_sequence` is used to capture the answers of the player. First we define the function with the argument level.
                    Next, we ask level times what the color is that they choose. We call that variable `answer`. Then we add the variable `answer` to the list player_sequence.

                    ***Setting up the game*** Before we program the game in the next tab, we'll need some starting variables. First, we'll set the variable `level` to 1 and the variable `game_over` to False.
                    Then we make an introduction for the game. We'll print 'Welcome to Simon Says!' and clear the screen after 1 second.

                    ***Continue to the next tab to finish the game!**** Don't forget to copy your code and take it with you to the next tab.
                example_code: |
                    ```
                    # Paste your code here


                    # Create a function that creates the player_sequence
                    {define} _
                        {for} _
                            _ 'What is color number ' i '?'
                            {add} answer {to} _

                    # Set up
                    level = _
                    game_over = _
                    {print} _
                    _ 1
                    _
                    ```
    simon_3:
        name: Simon Says 3
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    In this tab we'll program the game of Simon Says!

                    ### Exercise
                    ***Paste your code*** Copy your code from the previous tab and paste it here.

                    ***Program the game*** We start by making sure the game goes on while the game isn't over. Then we print what level the player is on, we use the variable level for that. We only show that for 1 second and then we clear the screen again.
                    Now, we have to create the empty list player_sequence. We've already programmed how to fill the list, with our function `player_sequence`, but we never made the list itself. To create the list we use the same trick as we did in the previous tab.
                    We'll make a list with the words 'empty' and 'list' on it, and then we remove both these words. Next, we'll call all of the 3 functions that we've created.
                    Lastly, we'll have to check if the player gave the correct answers (so if the player_sequence and the simon_sequence are the same).
                    If that's the case, we'll compliment the player. Wait for 1 second and increase the level with 1.
                    Did the player give the wrong answer, we'll tell them and end the game by setting game_over to 'True'

                    ***Enjoy your game!*** Great job! Does your game not work? Use the ladybug button to debug your code!
                example_code: |
                    ```
                    # Paste your code here

                    # The game
                    {while} game_over _
                        {print} _
                        _
                        _
                        _ = ['empty', 'list']
                        {remove} _
                        {remove} _
                        {call} _
                        {call} _ {with} _
                        {call} _ {with} _
                        {if} player_sequence == _
                            _
                            _
                            _
                        {else}
                            _
                            game_over = _
                    ```
    sleep_command:
        name: '{sleep}'
        default_save_name: comando_dormir
        description: introducci√≥n al comando dormir
        levels:
            2:
                story_text: |
                    Otro comando nuevo en este nivel es `{sleep}`, el cual pausa tu programa durante un segundo. Si escribes un n√∫mero despu√©s del comando {sleep}, el programa se pausa por esa cantidad de segundos.

                    ### Ejercicio
                    Practica este nuevo comando haciendo un c√≥digo por ti mismo en que uses el comando {sleep} al menos 3 veces. En cada comando {sleep} el tiempo de pausa debe ser diferente.
                example_code: |
                    ```
                    {print} Mi color favorito es...
                    {sleep} 2
                    {print} ¬°verde!
                    ```
    songs:
        name: ¬°Canta una canci√≥n!
        default_save_name: Canci√≥n
        description: Imprime una canci√≥n
        levels:
            6:
                story_text: |
                    En las canciones hay a menudo mucha repetici√≥n. Algunas veces la repetici√≥n se basa tambi√©n en contar.
                    Por ejemplo, en la canci√≥n el elefante se balancea en la tela de una ara√±a. Puedes programar esta canci√≥n con un poco de matem√°ticas.

                    Consejo: ¬°Utiliza la funci√≥n de "leer en voz alta" para que Hedy te cante la canci√≥n!

                    ### Desaf√≠o
                    Puedes repetir las l√≠neas 2 a 7 cuantas veces quieras copiando las l√≠neas.
                example_code: |
                    ```
                    verso = 99
                    {print} verso 'botellas de cerveza en la pared'
                    {print} verso 'botellas de cerveza'
                    {print} 'Toma uno, p√°salo'
                    verso = verso - 1
                    {print} verso 'botellas de cerveza en la pared'
                    {sleep}
                    ```
                story_text_2: |
                    Esta canci√≥n de ni√±os cuenta desde 5 elefantes hasta un elefante.
                    ¬°Si copias las l√≠neas 2 a 7 debajo del c√≥digo, puedes cantar toda la canci√≥n!
                example_code_2: |
                    ```
                    n√∫mero = 6
                    n√∫mero = n√∫mero - 1
                    {print} n√∫mero 'peque√±os monos saltando en la cama'
                    {print} 'Uno se cay√≥ y se golpe√≥ la cabeza'
                    {print} 'Mam√° llam√≥ al doctor y el doctor dijo'
                    {print} '¬°NO M√ÅS MONOS SALTANDO EN LA CAMA!'
                    {sleep}
                    ```
            7:
                story_text: |
                    Las canciones suelen tener mucha repetici√≥n. Por ejemplo... ¬°Baby Shark! Si la cantas, dir√°s una y otra vez lo mismo:

                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark

                    ### Desaf√≠o
                    Puedes acortar Baby Shark con un `{repeat}`. Acaba el c√≥digo rellenando los espacios vac√≠os.
                    **Extra** Tras Baby Shark puedes, por supuesto, programar otras canciones. ¬°Hay muchas con repetici√≥n!
                    ¬øPuedes pensar en alguna y programarla tambi√©n?
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Baby Shark tututudutudu'
                    {print} 'Baby Shark'
                    ```
            8:
                story_text: |
                    En un nivel anterior programamos la canci√≥n de los elefantes. Pero sin el comando `{repeat}` tuvimos que copiar los versos muchas veces.
                    En este nivel puedes repetir la canci√≥n 99 veces, simplemente a√±adiendo una l√≠nea.

                    ### Desaf√≠o
                    A√±ade el comando correcto en los espacios en blanco y sangra el c√≥digo correctamente.
                example_code: |
                    ```
                    verso = 99
                    _ 99 {times}
                    {print} verso 'botellas de cerveza en la pared'
                    {print} verso 'botellas de cerveza'
                    {print} 'Toma uno, p√°salo'
                    verso = verso - 1
                    {print} verso 'botellas de cerveza en la pared'
                    ```
            10:
                story_text: |
                    Con `{for}` puedes hacer la canci√≥n completa de baby shark (incluyendo a todos los tiburones de la familia) en solo 6 l√≠neas!

                    ### Ejercicio 1
                    Puedes hacer el c√≥digo para baby shark a√∫n mas corto usando un comando `{for}`? Termina el c√≥digo de ejemplo.
                example_code: "```\nfamilia = beb√©, mam√°, pap√°, abuela, abuelo\n_ _ _ _ \n  {print} _\n```\n"
                story_text_2: |
                    ### Ejercicio 2
                    Escribe la canci√≥n Cinco monitos saltando en la cama. Mira el texto si no lo recuerdas.

                    **Extra** Escribe la canci√≥n El viejo MacDonald ten√≠a una granja, y aseg√∫rate que todos los animales hagan sonidos diferentes usando `{if}`.
                example_code_2: |
                    ```
                    monos = 5, 4, 3, 2, 1
                    ```
            11:
                story_text: |
                    En este nivel, podr√°s usar el comando `{for}` con `{range}` para crear canciones que utilizan cuentas, como cinco monos.

                    ### Ejercicio 1
                    ¬°Rellena los espacios y haz que el c√≥digo funcione! Si no recuerdas la letra de la canci√≥n, ¬°b√∫scala!

                    ### Ejercicio 2
                    La √∫ltima l√≠nea de la canci√≥n es diferente de las dem√°s. Escribe esta l√≠nea dentro de `{for}`, y usa `{if}` para hacer que funcione correctamente.
                example_code: |
                    ```
                    _ monos _ _ _ 5 _ 1
                        {print} monos ' peque√±os monitos saltando en la cama.'
                        _
                    ```
            12:
                story_text: |
                    En esta canci√≥n podemos hacer a√∫n m√°s f√°cil programar 'si eres feliz y lo sabes, aplaude'. Porque podemos poner todas las acciones en una variable, compru√©balo:

                    ### Ejercicio
                    ¬øPuedes a√±adir la cantidad correcta de sangr√≠a a cada l√≠nea para que la canci√≥n se reproduzca correctamente?
                    Nota: No todas las l√≠neas necesitan sangr√≠a
                example_code: |
                    ```
                    _ acciones = 'aplaude', 'mueve los pies as√≠', '¬°grita hurra!'
                    _ {for} acci√≥n {in} acciones
                    _ {for} i {in} {range} 1 {to} 2
                    _ {print} 'si est√°s feliz y lo sabes'
                    _ {print} acci√≥n
                    _ {print} 'Si en verdad estas contento tu sonrisa es el reflejo'
                    _ {print} 'si est√°s feliz y lo sabes'
                    _ {print} acci√≥n
                    ```
            13:
                story_text: |
                    In the previous adventure you have learned how to use an argument in a function, but did you know that you could combine them with {ask} commands as well?
                    In this example we have changed the 'My Bonnie' program and made it interactive. You are now asked where Bonnie is.
                example_code: |
                    ```
                    {define} song {with} place
                        {print} 'My Bonnie is ' place

                    chosen_place = {ask} 'Where do you want Bonnie to be?'
                    synonym = {ask} 'What is another word for that?'

                    {call} song {with} chosen_place
                    {call} song {with} synonym
                    {call} song {with} chosen_place
                    ```
            16:
                story_text: |
                    En este nivel puedes programar una canci√≥n como OldMacDonald incluso m√°s r√°pido. Puedes conectar el animal correcto con el sonido correcto simplemente poni√©ndolos en el mismo lugar en la lista.
                    El Marinero Borracho tambi√©n se puede hacer r√°pidamente en este nivel. Solo necesitas 8 l√≠neas de c√≥digo para toda la canci√≥n, ¬°compru√©balo!

                    ### Ejercicio
                    Completa la canci√≥n Old MacDonald estableciendo la variable `animal` a `animals[i]` y `sound` a `sounds[i]`.
                example_code: |
                    ```
                    animales = ['cerdo', 'perro', 'vaca']
                    sonidos = ['oink', 'woof', 'moo']
                    {for} i {in} {range} 1 {to} 3
                        animal = _
                        sonido = _
                        {print} 'Old MacDonald ten√≠a una granja'
                        {print} 'E I E I O!'
                        {print} 'y en esa granja √©l ten√≠a ' animal
                        {print} 'E I E I O!'
                        {print} 'con un ' sonido sonido ' aqu√≠'
                        {print} 'y un ' sonido sonido ' all√≠'
                        {print} 'aqu√≠ un ' sonido
                        {print} 'hay un ' sonido
                        {print} 'en todos lados un ' sonido sonido
                    ```

                    ```
                    l√≠neas = ['Qu√© haremos con el marinero borracho', 'Afeitarle el vientre con una navaja oxidada', 'Meterlo en un barco largo hasta que est√© sobrio']
                    {for} l√≠nea {in} l√≠neas
                        {for} i {in} {range} 1 {to} 3
                            {print} l√≠nea
                        {print} 'pronto por la ma√±ana'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'Ella se levanta de un camino de heno'
                        {print} 'pronto por la ma√±ana'
                    ```
            18:
                story_text: |
                    En el nivel 16 hicimos canciones usando listas. Sin embargo estos programas no funcionan bien en este nivel. Los dos puntos del nivel 17 y los par√©ntesis del nivel 18 a√∫n se tienen que ser a√±adir.

                    ### Ejercicio 1
                    Se da la canci√≥n del Marinero borracho como ejemplo, pero todav√≠a no funciona.
                    ¬øPuedes asegurarte de que todo funciona de nuevo? Para ayudarte, hemos puesto _ en los lugares de _algunos_ errores.

                    ### Ejercicio 2
                    Ahora tambi√©n busca tu canci√≥n de Old MacDonald del nivel 16, y corr√≠gela.
                example_code: "```\nl√≠neas = ['Qu√© haremos con el marinero borracho', 'Afeitarle el vientre con una navaja oxidada', 'Meterlo en un barco largo hasta que est√© sobrio']\n{for} l√≠nea {in} l√≠neas _ \n    {for} i {in} {range} 1 {to} 3 _ \n        {print} _ l√≠nea _ \n    {print} 'pronto por la ma√±ana'\n    {for} i {in} {range} 1 {to} 3\n        {print} 'Ella se levanta de un camino de heno'\n    {print} 'pronto por la ma√±ana'\n```\n"
    songs_2:
        name: Sing a song! 2
        default_save_name: Song 2
        description: Sing a song 2
        levels:
            12:
                story_text: |
                    Songs contain a lot of repetition. We can capture it with a function!
                    ### Exercise
                    Look at the example code with the function. Fill out the two lines so the full song is printed.
                example_code: |
                    ```
                    {define} twinkle
                        {print} 'Twinkle'
                        {print} '...'

                    {call} twinkle
                    {print} 'Up above the world so high'
                    {print} 'Like a diamond in the sky'
                    {call} _
                    ```
            16:
                story_text: |
                    ### Exercise
                    Finish the nursery rhyme!
                example_code: |
                    ```
                    number = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
                    object = ['on his drum', 'on his shoe', 'on his knee', 'on his door', 'on his hive', 'on his sticks', 'up in heaven', 'on his gate', 'on his vine', 'once again']

                    _
                        {print} 'This old man'
                        {print} 'He played ' _
                        {print} 'He played knick-knack ' _
                        {print} 'With a knick-knack paddywhack'
                        {print} 'Give the dog a bone'
                        {print} 'This old man came rolling home'
                        {sleep} 8
                        {clear}
                    ```
                story_text_2: |
                    ### Exersice 2
                    Now create your own code for the nursery rhyme 'The wheels on the bus' on the same way!
                example_code_2: |
                    ```
                    object = ['wheels', 'doors', _]
                    movement = [ 'round and round', 'open and shut', _]
                    ```
    tic:
        name: Tic-Tac-Toe
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    Let's program a game of tic-tac-toe!

                    ### Exercise
                    In this adventure we'll start with creating an empty field.

                    ***Create a list called field*** This list will be our playing field. This list is filled with 9 dots, since there are no x's and o's yet at the start of our game.

                    ***Create a function that prints the field*** Firstly, clear the screen so the old playing fields will be removed. Then we print the first line of our Tic Tac Toe field. This line constists of the first 3 spots in our list field.
                    We have already programmed this line for you. Now finish the field by printing spot 4, 5, and 6 on the second row and spot 7, 8 and 9 in the third row.

                    ***Call the function that prints the field*** Now call the function.
                    <div class="w-full flex flex-row gap-2">
                        Run the code. Your output should look like this: <img src="https://github.com/hedyorg/hedy/assets/80678586/bcbd156e-4b48-4e82-84ae-f86d21b0cbcc" width="100">
                    </div>

                    ***Continue in the next tab*** In the next tab you'll learn how to program the game itself.
                example_code: |
                    ```
                    # Create a list called field
                    _ = ['.', '.', '.', '.', '.', '.', '.', '.', '.']

                    # Create a function that prints the field
                    {define} print_field
                        _
                        {print} 'TIC TAC TOE'
                        {print} field[1] field[2] field[3]
                        _
                        _

                    # Call the function
                    ```
            17:
                story_text: |
                    In the previous level you've learned how to make a tic-tac-toe game. The game works, but is quite annoying as it keeps asking you if you've won yet.
                    Now that we have the {elif} command, we can let the game decide if someone has won and it can stop asking us!

                    ### Exercise
                    ***Paste your code*** Paste your code from the previous level here and make it level 17 proof. In this level you've learned to use a colon everytime you create a block of code. Please add the colons in the correct spots.

                    ***Create a function that detects if someone's won*** We have started the function for you, paste it under the function `print_field` and finish the function. You can see that this first piece of code checks to see if spot 1, 2 and 3 are the same, because if they are you have 3 in a row.
                    It also checks if they are not a dot, because if they are, the line might have the same symbols on them, but that's just because it's still empty.
                    If all these conditions are met, the game is over and the winner is printed.
                    Finish this function with all possible ways to win. This means you have to make this for the other 2 rows, 3 columns and 2 diagonals.
                    If you've finished all the other options, the function should return the variable `game_over` so we can use it in our game.

                    ***Call the function in the game*** Go to the line `game_over = {ask} 'Did you win?'` and change it to `game_over = {call} detect_winner {with} field, sign`. Now the function will check if there's a winner and the game doesn't need to keep asking anymore!

                    ***Enjoy your game!*** Great job! You have finished the game! Enjoy playing it!

                example_code: |
                    ```
                    # Paste your code here and make it level 17 proof

                    # Create a function that detects if someone has won
                    {define} detect_winner {with} field, sign:
                        {if} field[1] == field[2] {and} field[2] == field[3] {and} field[1] != '.':
                            game_over = 'yes'
                            {print} 'Player ' sign 'wins!'
                        {elif}:
                            _
                        {else}:
                            game_over = 'no'
                    {return} _
                    ```
    tic_2:
        name: Tic-Tac-Toe 2
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    In the previous adventure you've learned how to create a playing field. Now you'll learn how to create the game!

                    ### Exercise
                    ***Paste your code*** Start by pasting your code from the previous adventure here.

                    ***Add variables*** Underneath your list called `field` we'll add 2 more variables that we'll need to program the game.
                    The variable `game_over` tells us if the game is over, and should be 'no' at the start of the game.
                    The variable `sign` tells us if it's the turn of player x or player o. Set the variable to 'x'.

                    ***The game*** First use a {while} command, to make sure the game keeps on playing the variable while game_over is set to no.
                    During the game, we first ask the player which spot they choose. Then we change the field with the number they chose into their sign.
                    Then we print the field again and we ask the player if they've won yet. Lastly we want to switch whose turn it is, so if the sign is 'x' it should be 'o' and the other way around.

                    ***Test your game*** Does your game work? Great, have fun playing the game! If not, use the ladybug button to debug your code.
                    You might have noticed one mistake in the code though, you can steal the other player's spot! If the other person chose spot 1, you could simply enter 1 after them and steal their spot.
                    That's not fair! Go to the next tab to learn how to fix this problem.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Add variables
                    game_over = _
                    sign = _

                    # The game
                    {while} _
                        choice = _ 'Player ' sign '_?'
                        field[choice] = _
                        _ print_field
                        game_over = {ask} _
                        {if} sign = 'o'
                            sign = _
                        _
                            sign = _
                    ```
    tic_3:
        name: Tic-Tac-Toe 3
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    You might have noticed one mistake in the code you've made in the previous adventure. You can steal the other player's spot! If the other person chose spot 1, you could simply enter 1 after them and steal their spot.
                    That's not fair! In this tab we'll fix that mistake.

                    ### Exercise
                    ***Paste your code here*** Paste your code from the previous adventure here.

                    ***Fix the mistake*** To fix the mistake we replace the line that says `field[choice] = sign`. This turns any spot that the player has chosen into their sign.
                    Go to the header that says 'Use this to fix the mistake' and finish the code. We first want to check if the chosen spot is still empty, so `if field[choice] = '.'`. If that is the case, you are allowed to take it.
                    Then we make an else command and print 'Sorry, this spot is already taken' if the spot is not empty. Lastly, we add a {sleep} command, so the players can actually read the text before it gets cleared again.
                    Now copy this piece of code and replace the line `field[choice] = sign` with this new piece of code.

                    ***Play your game!*** Now the game should work properly! Good job!
                    The only flaw is that you can get a bit annoyed that the game keeps asking you if you've won yet. Do you want to fix that? Go to level 17 and we'll fix it!
                example_code: |
                    ```
                    # Paste your code here

                    # Use this to fix the mistake
                    {if} _ = '.'
                        field[choice] = sign
                    {else}
                        {print} _
                        _
                    ```
    turtle:
        name: La tortuga
        default_save_name: Tortuga
        description: Haz tu propio dibujo
        levels:
            1:
                story_text: |
                    En nivel 1 tambi√©n puedes usar Hedy para dibujar. Combinando giros y l√≠neas, ¬°puede hacer un cuadrado o una escalera!

                    Usando `{forward}` dibujas una l√≠nea hacia adelante. El numero detr√°s del comando determina qu√© tan lejos caminar√° la tortuga. `{turn} {right}` gira un cuarto de vuelta en el sentido de las agujas del reloj, `{turn} {left}` gira en sentido contrario a las agujas del reloj.

                    Si quieres ir hacia atr√°s, puedes utilizar el comando `{forward}` pero con un n√∫mero negativo. Por ejemplo `{forward} -100`
                example_code: |
                    ```
                    {forward} 100
                    {turn} {left}
                    ```
                story_text_2: |
                    ### Ejercicio
                    Este es el principio de una peque√±a escalera, ¬øPuedes hacer 5 escalones m√°s?
                example_code_2: |
                    ```
                    {forward} 20
                    {turn} {right}
                    {forward} 20
                    {turn} {left}
                    {forward} 20
                    ```
            2:
                story_text: |
                    En este nivel puedes utilizar variables para hacer tu tortuga interactiva. Por ejemplo, puedes preguntar al jugador cuantos pasos dar√° la tortuga.
                example_code: |
                    ```
                    respuesta {is} {ask} ¬øCu√°ntos pasos deber√≠a dar la tortuga?
                    {forward} respuesta
                    ```
                story_text_2: |
                    Adem√°s, en el nivel 1 la tortuga solo pod√≠a girar a la derecha o a la izquierda. ¬°Qu√© aburrido!
                    En el nivel 2 la tortuga puede apuntar su nariz en todas las direcciones.

                    Utiliza 90 para girar un cuarto. Lo llamamos grados, un giro completo son 360 grados.

                    ### Ejercicio
                    ¬øPuedes hacer una figura con este c√≥digo? ¬øQuiz√° un triangulo o un c√≠rculo?
                example_code_2: |
                    ```
                    {print} Dibujando figuras
                    √°ngulo {is} 90
                    {turn} √°ngulo
                    {forward} 25
                    {turn} √°ngulo
                    {forward} 25
                    ```
            3:
                story_text: |
                    En este nivel, puedes utilizar `{at} {random}` con la tortuga que dibuja. Una elecci√≥n aleatoria hace que la tortuga camine por un camino diferente cada vez.
                    Utiliza `{at} {random}` para elegir un valor de una lista.
                    ### Ejercicio
                    ¬øPuedes copiar y pegar las l√≠neas 2 y 3 para crear un camino m√°s largo?
                example_code: |
                    ```
                    √°ngulos {is} 10, 50, 90, 150, 250
                    {turn} √°ngulos {at} {random}
                    {forward} 25
                    ```
            4:
                story_text: |
                    En nivel 3 tienes que usar comillas con `{print}` y `{ask}`. ¬°Tambi√©n al dibujar!
                example_code: |
                    ```
                    {print} _ Dibujando figuras _
                    √°ngulo {is} 90
                    {turn} √°ngulo
                    {forward} 25
                    {turn} √°ngulo
                    {forward} 25
                    ```
                story_text_2: |
                    Tambi√©n puedes cambiar los colores de las l√≠neas con el comando `{color}`. Mira el ejemplo.
                    Puedes utilizar el comando `{color} {white}` para hacer l√≠neas "invisibles". Puedes usar estas l√≠neas blancas para mover la tortuga done quieras en la pantalla antes de empezar a dibujar.
                example_code_2: |
                    ```
                    {color} {white}
                    {forward} -80
                    {color} {green}
                    {forward} 50
                    {color} {yellow}
                    {forward} 50
                    {color} {red}
                    {forward} 50
                    ```
            5:
                story_text: |
                    En nivel 5 puede elegir con `{if}`. Por ejemplo, entre diferentes tipos de figuras.
                example_code: |
                    ```
                    {print} 'Dibujando figuras'
                    figura {is} {ask} '¬øQuieres un cuadrado o un tri√°ngulo?'
                    {if} figura {is} tri√°ngulo √°ngulo {is} 120
                    {else} √°ngulo {is} 90
                    {turn} √°ngulo
                    {forward} 25
                    {turn} √°ngulo
                    {forward} 25
                    {turn} √°ngulo
                    {forward} 25
                    {turn} √°ngulo
                    {forward} 25
                    ```
                story_text_2: |
                    ### Ejercicio
                    Pon los n√∫meros correctos en este c√≥digo para hacerlo funcionar.
                    Despu√©s de hacer eso, puedes intentar a√±adir la opci√≥n al rev√©s.

                    **Extra** En vez de usar 'derecha' e 'izquierda', haz el programa otra vez usando norte, sur, este, oeste.
                    De esta manera podr√°s agregar mas direcciones como suroeste, noroeste, etc.
                example_code_2: |
                    ```
                    direcci√≥n {is} {ask} 'Quieres ir a la izquierda, a la derecha o seguir derecho?'
                    {if} direcci√≥n {is} derecha {turn} _
                    {if} direcci√≥n {is} izquierda {turn} _
                    {forward} 100
                    ```
            6:
                story_text: |
                    En nivel 5 puede usar c√°lculos para dibujar diferentes figuras.
                    Es posible que haya aprendido en la escuela que girar un c√≠rculo completo es de 360 grados. Si no, ¬°ahora ya lo sabes!
                    Es por eso que tambi√©n usas 90 grados para un cuadrado. 360 dividido por 4 es 90.
                    Ahora que podemos hacer matem√°ticas con Hedy, ¬°podemos dibujar todas las figuras que queramos!
                example_code: |
                    ```
                    √°ngulos = {ask} '¬øCu√°ntos √°ngulos quieres?'
                    √°ngulo = 360 / √°ngulos
                    {forward} 50
                    {turn} √°ngulo
                    {forward} 50
                    {turn} √°ngulo
                    {forward} 50
                    {turn} √°ngulo
                    {forward} 50
                    {turn} √°ngulo
                    {forward} 50
                    {turn} √°ngulo
                    {forward} 50
                    {turn} √°ngulo
                    ```
            8:
                story_text: |
                    Ahora que podemos repetir varias l√≠neas, podemos hacer figuras mas f√°cil.
                    Solo tenemos que poner el √°ngulo una vez y usar la variable `{repeat}`.

                    ### Ejercicio 1
                    El c√≥digo de ejemplo crea un cuadrado. Cambia el c√≥digo para que cree otra figura, como un triangulo o un hex√°gono.
                    Esto requiere cambiar dos l√≠neas de c√≥digo.
                    Consejo: Un circulo completo son 360 grados.

                    ### Ejercicio 2
                    Ahora crea un dibujo que consista en m√≠nimo 2 pol√≠gonos
                example_code: |
                    ```
                    √°ngulo = 90
                    {repeat} 4 {times}
                        {turn} √°ngulo
                        {forward} 50
                    ```
                story_text_2: |
                    **Extra** Podemos mejorar el programa que dibuja diferentes figuras. Completa el c√≥digo y ¬°puedes dibujar cualquier pol√≠gono que te guste!
                example_code_2: "```\nfigura = {ask} '¬øCu√°ntos √°ngulos debo dibujar?'\n√°ngulo = 360 / figura \n{repeat} figura {times}\n    {turn} _\n    {forward} _\n```\n"
            9:
                story_text: |
                    Ahora que podemos usar un `{repeat}` dentro de otro `{repeat}`, podemos crear figuras m√°s complejas

                    ### Ejercicio 1
                    Este c√≥digo crea tres tri√°ngulos negros, c√°mbialo a cinco cuadrados rosados.

                     **Extra** Crea una figura de tu elecci√≥n que consista de al menos dos tipos diferentes de formas.
                example_code: |
                    ```
                    {color} {black}
                    {repeat} 3 {times}
                        {repeat} 3 {times}
                            {forward} 10
                            {turn} 120
                        {color} {white}
                        {forward} 50
                        {color} {black}
                    ```
            10:
                story_text: |
                    En este nivel puedes hacer que la tortuga dibuje una figura.
                    La tortuga recorrer√° las distancias de la lista, una a una, dando pasos cada vez m√°s grandes.
                    ### Ejercicio 1
                    A√±ade un giro de 90 grados en el bucle, de forma que se dibuje una espiral.
                    A√±ade al menos 5 n√∫meros a la lista, para que la espiral se haga m√°s grande.
                    **(extra)** ¬øPuedes cambiar la espiral a otra forma? ¬°Experimenta con los n√∫meros para el giro!
                    ### Ejercicio 2
                    La espiral est√° dibujada hacia fuera, ¬øhaz que vaya hacia dentro?
                example_code: |
                    ```
                    {turn} 90
                    distancias = 10, 20, 30, 40, 50, 60
                    {for} distancia {in} distancias
                        {forward} distancia
                    ```
            12:
                story_text: |
                    Podemos usar funciones para dibujar figuras m√°s complejas con menos c√≥digo.
                    ### Ejercicio 1
                    Rellena la funci√≥n para que se creen tres cuadrados. Si quieres que la imagen se vea mejor, puedes hacer que las l√≠neas entre los cuadrados sean blancas.

                    ### Ejercicio 2
                    El c√≥digo se puede acortar. Pon las √∫ltimas l√≠neas en un `{repeat}` para que la figura se mantenga igual.

                    ### Ejercicio 3
                    Crea tu propio dibujo con diferentes figuras.
                    Cambia tanto el n√∫mero de figuras con el `{repeat}` como la forma de las figuras en el `{define}`
                example_code: |
                    ```
                    {define} cuadrado
                        {repeat} 4 {times}
                            {turn} _
                            {forward} _
                    {call} cuadrado
                    {forward} 50
                    {call} cuadrado
                    {forward} 50
                    {call} cuadrado
                    ```
    turtle_draw_it:
        name: ¬°Dib√∫jalo!
        default_save_name: Dib√∫jalo
        description: Dibuja esta imagen con la tortuga
        levels:
            1:
                story_text: |
                    ### Ejercicio
                    ¬°Vuelve a crear los dibujos con la tortuga!

                    <div class="w-full flex flex-row gap-2">
                        Rect√°ngulo <img src="https://github.com/hedyorg/hedy/assets/80678586/77aa99d5-cd8f-4969-b49d-e8fed34ac550" width="100">
                        Cuadrado <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                        Escaleras <img src="https://github.com/hedyorg/hedy/assets/80678586/d4301e62-ec66-4031-827c-7d21f73ba106" width="200">
                    </div>
            2:
                story_text: |
                    ### Ejercicio
                    ¬°Vuelve a crear los dibujos con la tortuga!

                    <div class="w-full flex flex-row gap-2">
                    Tri√°ngulo <img src="https://github.com/hedyorg/hedy/assets/80678586/e974b62c-f0cf-445a-8bd4-5ad9f1f71204" width="100">
                    Flecha <img src="https://github.com/hedyorg/hedy/assets/80678586/803d8f42-9708-448c-82ea-d035697f08c9" width="150">
                    Barco <img src="https://github.com/hedyorg/hedy/assets/80678586/94ef7189-442a-4c8f-827d-12a69203c2e9" width="150">
                    </div>
            3:
                story_text: |
                    ### Ejercicio
                    ¬°Vuelve a crear los dibujos con la tortuga!

                    <div class="w-full flex flex-row gap-2">
                    Tri√°ngulo <img src="https://github.com/hedyorg/hedy/assets/80678586/71e04d98-9545-4614-9caf-a5f179b756a1" width="150">
                    Estrella <img src="https://github.com/hedyorg/hedy/assets/80678586/421c4d28-cb99-424b-be26-dcae30d65c80" width="150">
                    Flecha <img src="https://github.com/hedyorg/hedy/assets/80678586/3cbebcae-5258-47c5-a6ac-e7ee36c1d1ce" width="200">
                    </div>
            4:
                story_text: |
                    ### Ejercicio
                    ¬°Vuelve a crear los dibujos con la tortuga!

                    <div class="w-full flex flex-row gap-2">
                    Estrella coloreada <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Arcoiris <img src="https://github.com/hedyorg/hedy/assets/80678586/2728b10f-9f7f-45ea-964e-5b284033e4f0" width="500">
                    Cuadrados anidados <img src="https://github.com/hedyorg/hedy/assets/80678586/f013f9fa-bc68-4c60-b778-2c457799d6f7" width="200">
                    </div>
                example_code: |
                    **Extra** ¬øPreparado/a para un desaf√≠o real? Aseg√∫rate que los colores de estas figuras son elegidos aleatoriamente, ¬°para que cada vez que ejecutes tus programas parezcan diferentes!

                    ```
                    colores {is} rojo, naranja, amarillo, verde, azul, morado, rosa, marr√≥n, gris, negro
                    color _
                    ```
            5:
                story_text: |
                    ### Ejercicio
                    ¬°Vuelve a crear los dibujos con la tortuga!

                    **Extra** ¬°Haz un √∫nico c√≥digo que permita al jugador decidir qu√© letra les gustar√≠a ver! ¬øY podr√≠a a√±adir m√°s letras?

                    <div class="w-full flex flex-row gap-2">
                    F <img src="https://github.com/hedyorg/hedy/assets/80678586/8a021b76-c24b-4e7c-b960-48d57f3bcb20" width="100">
                    E <img src="https://github.com/hedyorg/hedy/assets/80678586/12821803-6422-416a-8e36-9902d14e57a4" width="100">
                    L <img src="https://github.com/hedyorg/hedy/assets/80678586/3af6f919-7b67-4ee7-b923-11e56f2b6b24" width="100">
                    </div>
                example_code: |
                    Pista:
                    ```
                    letra_elegida {is} {ask} '¬øQu√© letra te gustar√≠a ver? F, E o L?'
                    {if} _
                    ```
            6:
                story_text: |
                    ### Ejercicio
                    ¬°Vuelve a crear los dibujos con la tortuga!

                    **Extra** Deja que el jugador elija de qu√© color ser√° el cuadrado.

                    ***Extra*** ¬øPdr√≠as hacer tambi√©n la primera letra de tu nombre y la bandera de tu pa√≠s?

                    <div class="w-full flex flex-row gap-2">
                    Cuadrado <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="150">
                    Letras <img src="https://github.com/hedyorg/hedy/assets/80678586/e75f4fa5-f1f5-4b48-806c-916c28e4e8ad" width="100">
                    Bandera <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Pista para el cuadrado:
                    ```
                    color_elegido = {ask} _
                    ```
            7:
                story_text: |
                    ### Ejercicio
                    ¬°Vuelve a crear los dibujos con la tortuga!

                    <div class="w-full flex flex-row gap-2">
                    Hex√°gono <img src="https://github.com/hedyorg/hedy/assets/80678586/92e492e1-1593-489b-aaf0-51d2a29755f4" width="200">
                    Tri√°ngulo <img src="https://github.com/hedyorg/hedy/assets/80678586/3629a5e6-1f02-4851-aab9-c5430ba4a1f1" width="200">
                    Ventilador <img src="https://github.com/hedyorg/hedy/assets/80678586/1ba2ff71-1230-4fe3-8255-b2c504cf1b4e" width="200">
                    </div>
            8:
                story_text: |
                    ### Ejercicio
                    ¬°Vuelve a crear los dibujos con la tortuga!

                    **Extra** El n√∫mero entre los corchetes indica en cuantas l√≠neas de c√≥digo puede dibujar esta figura. ¬øPuedes hacerlo en el mismo n√∫mero de l√≠neas?

                    <div class="w-full flex flex-row gap-2">
                    Cuadrado (3) <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                    Estrella coloreada aleatoriamente (5) <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Espiral coloreada aleatoriamente (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/9bcdb3f1-367d-4ae0-878f-d09005424a35" width="150">
                    </div>
            9:
                story_text: |
                    ### Ejercicio
                    ¬°Vuelve a crear los dibujos con la tortuga!

                    **Extra** El n√∫mero entre los corchetes indica en cuantas l√≠neas de c√≥digo puede dibujar esta figura. ¬øPuedes hacerlo en el mismo n√∫mero de l√≠neas?

                    **Extra** Deja elegir al jugador la bandera de qu√© pais quieren ver.

                    <div class="w-full flex flex-row gap-2">
                    Cruz (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/76e42c76-aa3f-4863-8eee-ead73c09a186" width="150">
                    Cuadrados anidados coloreados aleatoriamente (8) <img src="https://github.com/hedyorg/hedy/assets/80678586/17f878cc-e893-4c10-b32e-a09a50bf08de" width="200">
                    Banderas <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Sugerencia para los cuadrados anidados:
                    ```
                    colores = rojo, azul, naranja, amarillo, rosa, morado, verde, marr√≥n, negro
                    distancia = 120
                    repetir 5 veces
                    _
                    ```
                    Sugerencia para las banderas:
                    ```
                    pais = preguntar '¬øDe qu√© pa√≠s quieres ver la bandera?'
                    si pais es 'Pa√≠ses Bajos'
                        color_1 = rojo
                        color_2 = blanco
                        color_3 = azul
                    ```
            10:
                story_text: |
                    ### Ejercicio
                    ¬°Vuelve a crear los dibujos con la tortuga!

                    <div class="w-full flex flex-row gap-2">
                    Hex√°gono anidado <img src="https://github.com/hedyorg/hedy/assets/80678586/3629e908-3cd5-44ac-bbcd-1f1cceb15654" width="150">
                    Sem√°foro  <img src="https://github.com/hedyorg/hedy/assets/80678586/edbbb608-5ff8-4349-85a6-e47809adde43" width="100">
                    </div>
                example_code: |
                    Sugerencia Hex√°gono anidado:
                    ```
                    distancias = 100, 80, 60, 40, 20
                    {for} distancia {in} distancias
                    _
                    ```

                    Sugerencia Sem√°foro:
                    ```
                    colores = rojo, amarillo, verde
                    {for} color_elegido {in} colores
                        {color} _
                        {repeat} _
                    ```
                story_text_2: |
                    Luces de Navidad <img src="https://github.com/hedyorg/hedy/assets/80678586/9637ea6d-6edc-4d88-a6f7-10271bfc5371" width="500">
                example_code_2: |
                    Sugerencia Luces de Navidad:

                    Empieza moviendote al lado izquierdo de la pantalla con una l√≠nea blanca invisible. ¬°Despu√©s cuelga las luces de Navidad!
                    ```
                    {color} blanco
                    {turn} -90
                    {forward} 300
                    {turn} 90

                    colores = rojo, azul, amarillo, morado, verde, naranja, rosa
                    {for} color_elegido {in} colores
                    _
                    ```
            11:
                story_text: |
                    ### Ejercicio
                    ¬°Vuelve a crear los dibujos con la tortuga!

                    <div class="w-full flex flex-row gap-2">
                    Colmena (6) <img src="https://github.com/hedyorg/hedy/assets/80678586/ec02469c-907b-4695-9382-d39a8f3c00ec" width="150">
                    Abanico (5)  <img src="https://github.com/hedyorg/hedy/assets/80678586/a032ab35-c70c-4e67-9b4e-036a03ecce87" width="150">
                    Copo de nieve (13) <img src="https://github.com/hedyorg/hedy/assets/80678586/90f56bbb-86e5-448d-8aec-16f8c2c05cf2" width="150">
                    </div>
                example_code: |
                    Sugerencia Colmena:
                    ```
                    {for} cantidad_de_panales {in} {range} 1 {to} _
                        {for} paredes_de_un_panael {in} {range} 1 {to} _
                            {forward} _
                            {turn} _
                        {forward} _
                        {turn} _
                    ```

                    Sugerencia Ventilador:
                    Empieza como el ventilador que hiciste en el nivel 7. O toma una parte de la sugerencia para la colmena, porque los c√≥digos son muy parecidos.

                    Hint Snowflake: Start by making one 'leg' and repeat it 6 times.
            12:
                story_text: |
                    ### Ejercicio
                    ¬°Vuelve a crear los dibujos con la tortuga!

                    </div>
                    Bracelet Designing program <img src="https://github.com/hedyorg/hedy/assets/80678586/549d7f3a-c492-4b4a-b173-746eb3400951" width="500">
                example_code: |
                    Sugerencia: Programa para dise√±ar pulsera


                    Primero, define una funci√≥n **para cada forma** que quieras usar en tu pulsera. Despu√©s, a√±ade las formas a la pulsera tal que as√≠:

                    ```
                    {define} dibujar_un_cuadrado
                    _

                    {color} blanco
                    {turn} -90
                    {forward} 300
                    {turn} 180

                    {for} i {in} {range} 1 {to} 5
                        {color} gris
                        {forward} 100
                        forma = {ask} '¬øQu√© tipo de forma quieres en el siguiente brazalete?'
                        color_elegido = {ask} '¬øEn qu√© color?'
                        {color} color_elegido
                        {if} forma = 'cuadrado'
                            {call} dibujar_un_cuadrado
                    ```
            13:
                story_text: |
                    ### Ejercicio
                    ¬°Vuelve a crear los dibujos con la tortuga!

                    Calle en diferentes tama√±os <img src="https://github.com/hedyorg/hedy/assets/80678586/cdae9d97-d5ef-46f3-8838-24fa7b5b1bec" width="300">
                    Calle coloreada  <img src="https://github.com/hedyorg/hedy/assets/80678586/9893e0bd-c0f8-49bc-a5a7-217182407724" width="300">
                    Snow Storm <img src="https://github.com/hedyorg/hedy/assets/80678586/111b0a1b-b0e1-47c3-b032-81cea05e6bbc" width="300">
                example_code: |
                    La Calle de la Pista en diferentes tama√±os
                    ```
                    {define} dibuja_una_casa {with} tama√±o
                    _

                    {call} dibuja_una_casa {with} 90
                    {call} dibuja_una_casa {with} 60
                    {call} dibuja_una_casa {with} 30
                    ```

                    Calle de la Pista Coloreada
                    ```
                    {define} dibuja_una_casa {with} color_elegido
                    _
                    ```
                    Hint Snow Storm
                    ```
                    {define} draw_snowflake {with} length, color
                        _

                    numbers = 10, 20, 30
                    colors = _

                    {for} i {in} {range} 1 {to} 5
                        random_number = _
                        random_color = _
                        {call} draw_snowflake {with} random_number, random_color
                        {color} white
                        {turn} random_number * 5
                        {forward} 80
                    ```

            14:
                story_text: |
                    ### Ejercicio
                    Crea un programa que pregunte al jugador cu√°ntas esquinas deber√≠a tener su figura y despu√©s crea esa figura.
                    La figura in la imagen es el resultado cuando el jugador introduzca 10.

                    <div class="w-full flex flex-row gap-2">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/ee32f40e-dea1-4e7c-a813-3ef63671254b" width="300">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/3621bf77-527d-41e8-a44f-c5a21bb4ffd2" width="200">
                    </div>
                example_code: |
                    ```
                    {define} calcular_angulos {with} cantidad_de_esquinas
                        _ 360 / cantidad_de_esquinas


                    {define} dibujar_figura {with} √°ngulos
                        _
                            {forward} 400/cantidad_de_esquinas
                            {turn} _

                    cantidad_de_esquinas = {ask} _
                    √°ngulos = {call} _ {with} _

                    {call} _ {with}
                    {call} _ {with}
                    ```
            15:
                story_text: |
                    ### Ejercicio
                    ¬°Vuelve a crear estos dibujos con la tortuga!

                    Espiral <img src="https://github.com/hedyorg/hedy/assets/80678586/6943223c-018b-435b-a391-23723cc7a6ad" width="150">
                example_code: |
                    Espiral
                    ```
                    distancia = 5
                    {while} distancia < 200
                        distancia = distancia + 5
                         _
                    ```
                story_text_2: |
                    Abanico <img src="https://github.com/hedyorg/hedy/assets/80678586/cb671065-b47b-49f0-b298-dcbcd2a5e28f" width="150">
                example_code_2: |
                    Abanico
                    ```
                    {define} dibuja_un_cuadrado {with} lado
                    _

                    i = 100
                    {while} i > 1
                        _ {with} i
                        _
                        i = i - 3
                    ```
                story_text_3: |
                    Estrella <img src="https://github.com/hedyorg/hedy/assets/80678586/17564e0a-63e1-4794-8d41-15ac8c1a5a93" width="150">
                example_code_3: |
                    Estrella
                    Una estrella se suele dibujar usando √°ngulos de 144 grados. Si por ejemplo lo cambias ligeramente a 143 grados y repites el patr√≥n varias veces con un bucle {while} puedes hacer esta figura.
    while_command:
        name: '{while}'
        default_save_name: comando_mientras
        description: mientras
        levels:
            15:
                story_text: |-
                    Vamos a aprender un nuevo bucle, ¬°el bucle `{while}`! Continuamos el bucle mientras la sentencia sea verdadera.
                    As√≠ que no olvides cambiar el valor en el bucle.

                    En el c√≥digo de ejemplo, continuamos hasta que se de una respuesta verdadera.
                    Si nunca se da la respuesta correcta, 'el bucle nunca termina!
                example_code: |
                    ```
                    respuesta = 0
                    {while} respuesta != 25
                        respuesta = {ask} '¬øCu√°nto es 5 veces 5?'
                    {print} 'La respuesta es correcta'
                    ```
    years:
        name: A√±o Nuevo
        default_save_name: Cuenta atr√°s para el A√±o Nuevo
        description: ¬°Cuenta regresiva para el a√±o nuevo!
        levels:
            11:
                story_text: |
                    En este nivel puedes usar el comando `{for}` numero `{in}` `{range}` para la cuenta regresiva al a√±o nuevo.

                    ### Ejercicio
                    ¬°Rellena los espacios en blanco y haz que el c√≥digo funcione!
                example_code: |
                    ```
                    {for} numero {in}{range}_{to}_
                             {print} numero
                    {print} 'Feliz a√±o nuevo!
                    ```
