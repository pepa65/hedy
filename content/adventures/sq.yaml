adventures:
    story:
        name: Tregim
        default_save_name: Tregim
        description: Tregim
        levels:
            1:
                story_text: |
                    Në nivelin 1, ju mund të krijoni një tregim me një tjetër personazh kryesor që mund ta shtoni vetë.

                    Në rreshtin e parë, përdorni komandën `{ask}` dhe pyetni cili do jetë personazhi kryesor në tregim.

                    Pas rreshtit të parë, filloni me `{print}` nëse fjalia duhet të printohet.
                    Përdorni `{echo}` Nëse doni që personazhi kryesor të jetë në fund të fjalisë.
                example_code: |
                    ```
                    {ask} Personazhi kryesor në tregim është
                    {print} Personazhi kryesor tani ecën në pyll
                    {echo} Ai është i pak i frikësuar,
                    {print} Ai dëgjon zëra kudo
                    {print} Ai frikësohet se ky pyll është me fantazma
                    ```
                story_text_2: |
                    A mund ta bëni historinë tuaj në Hedy tani duke përdorur `{print}`, `{ask}` dhe `{echo}`?
            2:
                story_text: |
                    Në nivelin e 2, ju mund ta bëni tregimin më jetë më argëtues. Emri i personazhit tuaj kryesor mund të jetë kudo në fjali.

                    Ju duhet të programoni pak më shumë për këtë. Ju tani duhet ti jepni një emër personazhit tuaj kryesor.

                    Ju mund ta përdorni atë emër kudo në fjali.

                    ### Sfidë
                    A mund të bëni vetë një histori duke përdorur një ndryshore? Mund të shtoni edhe më shumë variabla?
                example_code: |-
                    ```
                    emri {is} {ask} Cili është emri i personazhit kryesor?
                    {print} emri është tani duke vrapuar në pyll
                    {print} emri është pak i frikësuar
                    {print} Papritur ai dëgjon një zë të çuditshëm...
                    {sleep}
                    {print} emri është i frikësuar se ky pyll ka fantazma
                    ```
                story_text_2: |
                    ### Exercise
                    Now it's time to add variables to your own story that you've made in the previous level.
                    Go to 'My programs', look for your level 1 story adventure and copy the code. Paste the code in your input screen in this level.

                    This code won't work in this level, because you have not used variables yet.
                    Change the `{ask}` commands and `{echo}` commands in your code to the correct form that you've learned in this level.

                    **Extra** Add a sleep command to your code to build up tension in your story.
            3:
                story_text: |
                    Në nivelin e 3-të, ju mund ta bëni tregimin më argëtues. Tani mund të përdorni rastësinë për çfarëdo bishe, kafshe ose pengesë tjetër, si kështu:
                example_code: |
                    ```
                    kafshët {is} 🦔, 🐿, 🦉, 🦇
                    {print} Ai tani dëgjon zërin e kafshët {at} {random}
                    ```
                story_text_2: |
                    Komanda `{add}` mund të ju duhet në tregim.
                example_code_2: |
                    ```
                    {print} Ai dëgjon një zë
                    kafshët {is} 🐿, 🦔, 🦇, 🦉
                    kafsha {is} {ask} Çfarë mendoni se është?
                    {add} kafsha {to_list} kafshët
                    {print} ishte kafshët {at} {random}
                    ```
                story_text_3: |
                    Ky është një shembull për komandën `{remove}` në tregimin tuaj.

                    ### Sfidë
                    A mund t'i përdorni 3 komandat e reja `{at} {random}`, `{add} {to_list}` dhe `{remove} {from}` në tregimin tuaj?
                example_code_3: |
                    ```
                    {print} Çanta e tij u bë shumë e rëndë.
                    {print} Brenda kishte një shishe me ujë, një dritë dore dhe një tullë.
                    çanta {is} ujë, dritë, tullë
                    hiqeni {is} {ask} Cilin artikull doni ta hiqni?
                    {remove} hiqeni {from} çanta
                    ```
            4:
                story_text: |
                    ### Exercise
                    Copy the example code and finish it by adding quotation marks on the blanks in lines 1 and 2.
                    The blanks in line 3 and 4 should not be replaced by quotation marks, but a `{sleep}` and a `{clear}` command. Can you make it work?

                    ### Exercise 2
                    Go back to the previous level and copy your story code. Make the code work in this level by adding quotation marks in the right spots.
                    Mind: The variables in your own story should be outside of the quotation marks. Just like the second line of the example code. In that line the variable name is placed outside of the quotation marks.
                example_code: |
                    ```
                    name {is} {ask} _ What is your name? _
                    {print}  _ The main character is called _ name
                    _
                    _
                    {print} name  _ is now going to walk in the woods _
                    {print} name _ is a bit scared _
                    animals {is} 🦔, 🐿, 🦉, 🦇
                    {print} _ He hears the sound of a _ animals {at} {random}
                    {print} name _ is afraid this is a haunted forest _
                    ```
            5:
                story_text: |
                    Në këtë nivel mund të programoni përfundime të ndryshme, që do ta bëje tregimin tuaj më argëtues.

                    ### Sfidë
                    Mendoni dy përfundime të tregimit tuaj, si për shembull:

                    - Princesha ecën nëpër pyll
                    - Ajo përplaset me një bishë

                    - Përfundimi i lumtur: Ajo merë shpatën e saj dhe bisha ikën menjëherë
                    - Përfundimi i keq: Bisha e hanë princeshën

                    Ju gjithashtu mund të siguroni se një emër mund të përdoret prapë. Kjo punon si edhe në nivelet e mëparshme. Mund ta kombinoni me komandën `{if}`, dhe pastaj keni bërë një program të tërë!
                example_code: |
                    ```
                    emri {is} {ask} 'Kush ecën në pyll?'
                    {print} emri 'ecën nëpër pyll'
                    {print} emri ' përballet me një bishë'
                    përfundimi {is} {ask} 'A doni përfundim të lumtur apo të keq?'
                    {if} përfundimi {is} lumtur {print} emri ' merë shpatën dhe bisha ikën menjëherë'
                    {else} {print} 'Bisha hanë ' emri
                    ```
            7:
                story_text: |
                    Në tregim, dikush përmend një fjalë disa herë. Si për shembull, kur dikush thirrën për ndihmë apo këndon një këngë.
                    Ju mund ti vendosni këto përsëritje në tregimin tuaj, në këtë nivel me komandën `{repeat}`.

                    ### Sfidë
                    A mund të bëni tregimin tuaj me përsëritje?
                example_code: |
                    ```
                    {print} 'Princi vazhdonte të thërriste për ndihmë'
                    {repeat} 5 {times} {print} 'Ndihmë!'
                    {print} 'Pse askush nuk më ndihmon?'
                    ```
            8:
                story_text: |
                    Në këtë nivel mund të përdorni shumë rreshta në komandat {if}, në këtë mënyrë mund ti përmirësoni përfundimet e lumtura ose të këqija!

                    ### Sfidë
                    A mund të bëni tregimin tuaj me dy përfundime të ndryshme?
                example_code: |
                    ```
                    {print} 'Oh jo! T-Rex është duke u afruar'
                    përfundimi = {ask} 'A doni përfundim të lumtur apo të keq?'
                    {if} përfundimi {is} lumtur
                        {print} 'Pikërisht në kohë Rinori shkon prapa në makinën e kohës!'
                        {print} 'Majlinda shkruan kodin dhe...'
                        {print} '💥ZAP!💥'
                        {print} 'Ato janë kthyer brenda në garazhë'
                    {else}
                        {print} 'Majlinda thëret EJA RINOR! VRAPO MË SHPEJT'
                        {print} 'Por Rinori është shumë i ngadaltë...'
                        {print} 'T-Rex afrohet dhe e hanë me një të gëlltitur!🦖'
                    ```
            9:
                story_text: |
                    Në këtë nivel mund të përdorni komandat një mbi një `{if}`, `{repeat}` ose `{for}` komandat brenda komandave tjera si `{if}`, `{repeat}` ose `{for}`. Kjo ju lejon shumë opsione dhe u ndihmon ta bëni tregimin tuaj më interaktive.
                example_code: |
                    ```
                    {print} 'Rina është duke ecur në qendër të qytetit'
                    vendi = {ask} 'A është Rina duke shkuar në shitore, apo është duke shkuar në shtëpi?'
                    {if} vendi {is} shitore
                        {print} 'Ajo hyn në shitore.'
                        {print} 'Rina shikon një libër interesant'
                        libri = {ask} 'A e blen Rina librin?'
                        {if} libri {is} po
                            {print} 'Rina e blen librin dhe shkon në shtëpi'
                        {else}
                            {print} 'Rina del nga dyqani dhe shkon në shtëpi'
                    {else}
                        {print} 'Rina shkon në shtëpi'
                    ```
            10:
                story_text: |
                    Në këtë nivel ju mund të përdorni komandën {for} në tregimin tuaj. Në këtë mënyrë lehtësisht mund ta programoni librin e fëmijëve 'ariu i murrmë, ariu i murrmë, çfarë po sheh?'.
                example_code: |
                    ```
                    kafshët = zogu i kuq, delja e zezë, bretkosë e gjelbër, pata e verdhë, fëmiu i vogël
                    {print} 'ariu i murmë'
                    {print} 'ariu i murmë'
                    {print} 'Çfarë po sheh?'
                    {for} kafsha {in} kafshët
                        {print} 'Un shoh një ' kafsha ' që shikon nga unë'
                        {print} kafsha
                        {print} kafsha
                        {print} 'Çfarë po sheh?'
                    {print} 'Un i shoh të gjitha kafshët që më shikojnë!'
                    ```
            12:
                story_text: Në këtë nivel ju mund të përdorni thonjëza për të ruajtur disa fjalë në një variabël.
                example_code: |
                    ```
                    emri = 'Mbretëresha e Anglisë'
                    {print} emri ' ishte duke ngrënë një copë torte, duke papritur...'
                    ```
            13:
                story_text: |
                    Duke përdorur komandën `{and}` dhe `{or}`, ju mund ta shkurtoni tregimin tuaj. Si për shembull, shikoni tregimin e dragonit.

                    ### Sfidë
                    A mund të bëni mini-lojën tuaj aventureske si kjo?
                example_code: |
                    ```
                    shpata = 'humbur'
                    loja = 'ndezur'
                    {print} 'Heroi ynë është duke ecur nëpër pyll'
                    {print} 'Rruga ndahet në dy pjesë'
                    {for} i {in} {range} 0 {to} 2
                        {if} loja {is} 'ndezur'
                            rruga = {ask} 'Cilën rrugë duhet ajo ta zgjedhë?'
                            {if} rruga {is} 'majtë' {and} shpata {is} 'gjetur'
                                {print} 'Heroi ynë përballet me një dragon!'
                                {print} 'Fatmirësisht heroi ynë ka një shpatë për ta mposhtur dragonin!'
                                loja = 'mbaruar'
                            {if} rruga {is} 'majtë' {and} shpata {is} 'humbur'
                                {print} 'Heroi ynë përballet me në dragon, por ajo nuk ka shpatë!'
                                {print} 'Heroi ynë mposhtet nga dragoi...'
                                {print} 'Provoni prapë'
                                loja = 'mbaruar'
                            {if} rruga {is} 'djathë' {and} shpata {is} 'gjetur'
                                {print} 'Ju veçse kei gjetur shpatën. Nu ka mbetur gjë tjetër këtu.'
                                {print} 'Ajo ecën mbrapa'
                            {if} rruga {is} 'djathtë' {and} shpata {is} 'humbur'
                                {print} 'Heroi ynë gjen një shpatë'
                                {print} 'Kjo mund të jetë e dobishme'
                                shpata = 'gjetur'
                    ```
            15:
                story_text: |
                    Duke përdorur komandën `{while}` mund ta bëni tregimin më interesante. Për shembull, ju mund të përdorni `{while} game == 'on'` kështu që ju mund të luani derisa loja të mbarojë.
                    Ose ju mund të përdorni `{while} sword == 'lost'` kështu që lojtari nuk mund të vazhdojë lojën pa mos e gjetur shpatën.

                    ### Exercise
                    The example code shows you how to use the `{while}` loop in a story. Now **think of your own scenario** in which the player has to find something before they can continue.
                example_code: |
                    ```
                    çelsat = 'humbur'
                    {print} 'Ti je duke qëndruar në kopsht dhe i ke humbur çelsat.'
                    {print} 'Ku doni që të kërkoni për ato?'
                    {print} 'Ju mund të zgjidhni: dru, lule, gur, kuti'
                    {while} çelsat == 'humbur'
                        vendi = {ask} 'Ku doni që të kërkoni?'
                        {if} vendi == 'lule'
                            {print} 'Ja ku janë!'
                            çelsat = 'gjetur'
                        {else}
                            {print} 'Jo, nuk janë në' vendi
                    {print} 'Tani mund të hyni në shtëpi!'
                    ```
            18:
                story_text: |
                    We are going to print another story, but now we have to use brackets with `{print}`.

                    ### Exercise 1
                    Create a story of at least 5 sentences. You don't have to use 'name' just yet.
                example_code: |
                    ```
                    {print}('Welcome to this story!')
                    ```
                story_text_2: |
                    ### Exercise 2
                    We have already prepared an `{input}` for you. First, use the `name` variable in your story.
                    Then add a second `{ask}` and use that variable as well.
                    Tip: Remember the commas in a `{print}` between text and variables!
                example_code_2: |
                    ```
                    naam = {input}("What's your name?")
                    {print}('Welcome to this story!')
                    ```
    add_remove_command:
        name: '{add} {to} & {remove} {from}'
        default_save_name: add_remove_command
        description: introducing add to and remove from
        levels:
            3:
                story_text: |
                    ## Add to
                    You can add items to the list with the `{add} {to_list}` command. To add an item to a list you can simply type: `{add} penguin {to} animals` or you can use the `{ask}` command like in the example code.
                example_code: |
                    ```
                    animals {is} dog, cat, kangaroo
                    like {is} {ask} What is your favorite animal?
                    {add} like {to_list} animals
                    {print} I choose animals {at} {random}
                    ```
                story_text_2: |
                    ## Remove from
                    If you can add items to a list, of course you can also take them off. This is done with the `{remove} {from}` command.
                example_code_2: |
                    ```
                    animals {is} dog, cat, kangaroo
                    dislike {is} {ask} What animal do you not like?
                    {remove} dislike {from} animals
                    {print} I choose animals {at} {random}
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the new commands in this virtual restaurant. Add the flavor the player is hpoing for to the list and remove the flavors they are allergic to.
                example_code_3: |
                    ```
                    {print} Mystery milkshake
                    flavors {is} strawberry, chocolate, vanilla
                    hope {is} {ask} What flavor are you hoping for?
                    _
                    allergies {is} {ask} Are you allergic to any flavors?
                    _
                    {print} You get a flavors {at} {random} milkshake
                    ```
    and_or_command:
        name: '{and} & {or}'
        default_save_name: and or
        description: introducing and or
        levels:
            13:
                story_text: |-
                    We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two `{if}`s but can use `{and}` and `{or}`.

                    If you use `{and}`, both statements, left and right of the `{and}` need to be true. We can also use `{or}`. Then only one statement needs to be correct.
                example_code: |
                    ```
                    name = {ask} 'what is your name?'
                    age = {ask} 'what is your age?'
                    {if} name {is} 'Hedy' {and} age {is} 2
                        {print} 'You are the real Hedy!'
                    ```
    ask_command:
        name: '{ask}'
        default_save_name: ask_command
        description: Introduction ask command
        levels:
            1:
                story_text: |
                    ## The ask command
                    Now that you can use the `{print}` command, you are ready to learn the next command: `{ask}`. With the `{ask}` command, you can ask a question. Check it out:
                example_code: |
                    ```
                    {print} Hello!
                    {ask} What is your name?
                    ```
                story_text_2: |
                    ## The echo command
                    If you want the computer to repeat the answer, you can use the `{echo}` command. The answer will then be echoed back at the end of the sentence, so in this example after hello.
                example_code_2: |
                    ```
                    {print} Hello!
                    {ask} What is your name?
                    {echo} hello
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the `{ask}` and `{echo}` commands. Firstly, fill in the blanks to make this program work.
                    Then ask 2 more questions using the `{ask}` command, after each `{ask}` use an `{echo}` to print the answer on the screen.
                example_code_3: |
                    ```
                    _ How are you doing?
                    _
                    ```
            2:
                story_text: |
                    ## The ask command
                    Now that we can use **variables** in our codes, we no longer need the `{echo}` command.
                    We can use variables to store the answers to our questions and this way we can use the answer to multiple questions in our codes.
                    Check it out:

                    This way your code is becoming interactive!
                example_code: |
                    ```
                    name {is} {ask} What is your name?
                    {print} Hello name
                    age {is} {ask} How old are you?
                    {print} name is age years old.
                    ```
                story_text_2: |
                    ### Exercise
                    In the previous tab you have practised with setting variables with the `{is}` command.
                    You have created at least 3 variables and used them with a print command.
                    Now, instead of setting the variables we want you to make the variables interactive, like we did in our example.

                    Copy your code from the previous tab and make the variables interactive by using `{ask}` commands.
                example_code_2: |
                    ```
                    favorite_animal {is} {ask} What is your favorite animal?
                    {print} I like favorite_animal
                    ```
            18:
                story_text: The final change we will need to make to get Python code is changing `{ask}` into `{input}`.
                example_code: |
                    ```
                    {print}('My name is Hedy!')
                    name = {input}('What is your name?')
                    {print}('So your name is ', name)
                    ```
    blackjack:
        name: Blackjack
        default_save_name: Blackjack
        description: Përpiquni t'i afroheni 21 sa të mundeni
        levels:
            17:
                story_text: |
                    Blackjack është një lojë e thjeshtë letrash në të cilën duhet të arrish sa më afër 21 pikë të jetë e mundur. Ju merrni dy letra. Çdo kartë vlen vlerën e saj numerike dhe letrat e fytyrës (Princi, Mbretëresha dhe Mbreti) vlejnë 10 pikë.
                    Njëshi vlen ose 1 ose 11 pikë (mund të zgjidhni). Tregtari, kundërshtari juaj, gjithashtu merr dy letra.
                    Nëse dëshironi, mund të merrni një kartë tjetër dhe pikët e saj do t'i shtohen totalit tuaj. Tregtari gjithashtu mund të zgjedhë të marrë një kartë tjetër.
                    Por kini kujdes që të mos merrni më shumë se 21 pikë, sepse nëse merrni, humbni!
                    Lojtari që afrohet më shumë me 21, pa e kaluar atë, fiton!

                    ### Exercise
                    In this adventure we code the first part of our Blackjack game. We'll create a function to calculate how many points a card is worth.

                    ***Set the variables***
                    Start by making a list of all the cards, from 2 to Ace. Next make a list of the face cards, so Jack, Queen and King. Then pick a random card from the list of cards to be card_1.

                    ***Create a function to calculate the points***
                    Create a function that calculates how many points a card is worth.
                    All the face cards are worth 10 points, the Ace is worth 11 and all the other cards are worth their numeral.
                    Return the variable `points` at the end of the function.

                    ***Test the function***
                    Test if your function is working properly. Finish the first print command by filling in which card you've drawn. Then finish the second line by calling the function with card_1.
                    Run the code a couple of times. Are you happy with the results? Great! Then you can remove the testing part and move on the the next tab!
                example_code: |
                    ```
                    {print} 'BLACKJACK'

                    # Set these variables
                    cards = _
                    face_cards = _
                    card_1 =

                    # Create a function to calculate the points
                    {define} calculate_points {with} card:
                        {if} card {in} face_cards:
                            points = _
                        {elif} _
                            _
                        {else}:
                            _
                        _ points

                    # Test your function
                    {print} 'Your card is a ' _
                    {print} 'That is worth ' _ ' points'.
                    ```
    blackjack_2:
        name: Blackjack 2
        default_save_name: Blackjack_2
        description: Blackjack part 2
        levels:
            17:
                story_text: |
                    ### Exercise
                    In this adventure we code the second part of our Blackjack game.

                    ***Paste your code from the previous adventure***
                    In the previous adventure you've started a list of variables and created a function to calculate how many points a card is worth. Copy your code and paste it here. Mind that you don't need the testing part, so if you haven't removed that yet, please do so now.

                    ***Add more variables***
                    You have already set the lists `cards` and `face_cards` and the variable `card_1`. Underneath those variables create 3 more variables: `card_2`, dealer_card_1` and `dealer_card_2`. These variables are all set to a random card from the list of cards.

                    ***Add up points***
                    To calculate how many points you have scored we call the function with card 1 and we do it again for card 2. Then we add both these scores together to get your total.
                    Do the same thing for the dealers points, but be sure to use the dealer's cards and not your own!

                    ***2 Aces***
                    You're doing great! Almost all scores can be calculated now. There is only one exception: 2 Aces. If you get 2 Aces, your total is 12 points and not 22 (because 22 points would be losing!). This of course also goes for the dealer.

                    ***Show the score***
                    Lastly, you want to tell the program to tell you which cards you have drawn and how many points that is. Then show which cards the dealer has and how many points they have.

                    ***Continue in the next tab***
                    Great! You have finished this part of the game! Copy your code and go to the next tab to learn how to ask for an extra card and to declare a winner.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Add these variables to the list of variables
                    card_2 = _
                    dealer_card_1 = _
                    dealer_card_2 = _

                    # Add up your points
                    your_points_1 = {call} _ {with} card_1
                    your_points_2 = _
                    your_total = _

                    # Add up the dealers points
                    dealer_points_1 = _
                    _
                    _

                    # 2 Aces
                    {if} card_1 == 'Ace' {and} _
                        your_total = 12
                    {if} dealer_card_1 _
                        dealer_total = _

                    # Show the score
                    {print} 'You have drawn a ' _ ' and a ' _ '. That is ' _ ' points'
                    {print} 'The dealer has drawn a ' _ ' and a ' _ '. That is ' _ ' points'
                    ```
    blackjack_3:
        name: Blackjack 3
        default_save_name: Blackjack_3
        description: Blackjack part 3
        levels:
            17:
                story_text: |
                    In the previous tabs you have learned how to draw 2 random cards for yourself and for the dealer and to calculate how many points you both got.
                    In this adventure we add the option to ask for an extra card for both you and the dealer.

                    ### Exercise
                    ***Paste your code from the previous adventure*** Firstly, copy your code from the previous tab and paste it here.

                    ***Extra card for you*** If you want, you can get an extra card to get your total as close to 21 as possible. First ask the player if they want an extra card.
                    If they do, pick a random card and print what they have drawn. If the card is not an Ace, you can call the function and add the points to your total.
                    In case the card is an Ace, you can't use the function, because the Ace can be either 1 point or 11 points, depending on how many points you already have earned.
                    If your total is less than 11, you want the ace to be 11 points (because this is closest to 21). So you add 11 points to your total.
                    If the total is more than or equal to 11, you want the ace to be 1 point (because you don't want more than 21 points). So you add 1 point to your total.
                    Lastly, print your new total of points.

                    ***Extra card for the dealer*** The dealer can also get an extra card. The dealer doesn't need to be asked, because they always get an extra card if their total is less than 17.
                    Copy the 'Extra card for you code' and paste it in the dealers section. Then change it to fit the dealer picking an extra card and getting points added to their total.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Extra card for you
                    hit = {ask} _
                    {if} hit == 'yes':
                        card_3 = _
                        {print} _
                        {if} card_3 _ 'Ace':
                            your_points_3 = _
                            your_total = _
                        {else}:
                           {if} your_total _
                                _
                            {else}:
                                _
                        {print} _

                    # Extra card for the dealer
                    {if} dealer_total < 17
                    _
                    ```
    blackjack_4:
        name: Blackjack 4
        default_save_name: Blackjack_4
        description: Blackjack part 4
        levels:
            17:
                story_text: |
                    In the last 3 adventures you have alsmost created a working blackjack game! The only thing left to do is to decide a winner!

                    ### Exercise
                    ***Paste your code from the previous adventure*** Start by pasting the code that you've made so far into your programming field.

                    ***Decide a winner***
                    Firstly, if you and the dealer have an equal amount of points, it's a draw.
                    Secondly, if the dealer has more than 21 points and you don't, you are the winner.
                    Thirdly, if both you and the dealer have less than 22 points, we have to see who came closest to 21. We do that by comparing who has the highest score. Is your total higher than the dealer's total, then you are the winner. If not, the dealer wins.
                    Lastly, in all other scenarios (e.g. you have more than 21 points and the dealer doesn't, or you both have more than 21 points) you are the loser.

                    ***Enjoy the game!***
                    Does your game work properly? Amazing! You have done a great job! Enjoy your game!
                    If it doesn't work right away, no worries, you might have made a mistake. Just keep calm and bebug your code using the ladybug button.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Decide a winner
                    {if} _
                        {print} 'Its a draw! Play again!'
                    {elif} _
                        {print} 'You win!'
                    {elif} _ :
                        {if} _:
                            {print} _
                        {else}:
                            {print} _
                    {else}:
                        _
                    ```
    calculator:
        name: Kalkulatori
        default_save_name: Kalkulatori
        description: Krijoni një kalkulator
        levels:
            6:
                story_text: |
                    Tani që mund të kalkuloni, ju gjithashtu mund të bëni një kalkulator.
                example_code: |
                    ```
                    numri_1 {is} {ask} 'Plotëso numrin e parë:'
                    numri_2 {is} {ask} 'Plotëso numrin e dytë:'
                    përgjigje_saktë = numri_1 * numri_2
                    {print} numri_1 ' herë ' numri_2 ' është 'përgjigje_saktë
                    ```
                story_text_2: |
                    Llogaritësi i mësipërm do të llogarisë përgjigjen për ju, por ju gjithashtu mund të bëni një program për të testuar aftësitë tuaja matematikore, si kjo:
                    Plotësoni vendet bosh për ta bërë të plotë!
                example_code_2: |
                    ```
                    përgjigje_saktë = 11 * 27
                    përgjigje = {ask} 'Sa është 11 herë 27?'
                    {if} përgjigje {is} _ {print} 'punë e mirë!'
                    {else} {print} 'Gabim! Ishte ' _
                    ```
                story_text_3: |
                    Ju gjithashtu mund ta lini kompjuterin të bëjë shuma të rastësishme vetë duke përdorur rastësi.
                example_code_3: |
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number_1 = _
                    number_2 = _
                    correct_answer = number_1 * number_2
                    given_answer = 'What is ' number_1 ' times ' number_2 '?'
                    {if} _
                    {else} _
            9:
                story_text: |
                    Në nivelet e mëparshme ju keni mësuar se si të bëni një kalkulator, në këtë nivel mund ta zgjeroni atë kod dhe ta shndërroni atë në një lojë të vogël matematikore.
                    ### Sfidë
                    A mund ta përfundoni rreshtin 10 për ta bërë programin të funksionojë?
                example_code: |
                    ```
                    pikë = 0
                    {repeat} 10 {times}
                        numrat = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        numri1 = numrat {at} {random}
                        numri2 = numrat {at} {random}
                        përgjigja_saktë = numri1 * numri2
                        {print} 'Sa bëjnë ' numri1 ' herë ' numri2 '?'
                        përgjigja = {ask} 'Shkruani përgjigjen tuaj këtu...'
                        {print} 'Përgjigja juaj është' përgjigja
                        {if} _{is} _
                            pikë = pikë + 1
                    {print} 'Punë mirë! Pikët tuaja janë... ' pikë ' nga 10!'
                    ```
            10:
                story_text: |
                    This calculator game helps you practise your tables of multiplication!
                    ### Exercise
                    Fill in the blanks. We want this program to ask the player these questions:
                    ```
                    How much is 1 times 1?
                    How much is 1 times 2?
                    How much is 1 times 3?
                    How much is 2 times 1?
                    How much is 2 times 2?
                    How much is 2 times 3?
                    How much is 3 times 1?
                    How much is 3 times 2?
                    How much is 3 times 3?
                    _
                    ```
                example_code: |
                    ```
                    numbers = 1, 2, 3
                    {for} _
                        {for} _
                            answer = {ask} _
                            correct = number_1 * number_2
                            {if} answer {is} correct
                                {print} 'Great job!'
                            {else}
                                {print} 'That is wrong. The right answer is ' correct
                    ```
            11:
                story_text: |
                    With a `{for}` you can simplify tables of multiplication practise program.

                    ### Exercise 1
                    Improve the example code such that it prints a nice multiplication table: <br> "1 times 10 is 10", "2 times 10 is 20", etc.

                    ### Exercise 2
                    Go back to your level 10 multiplication code, and modify it so that it uses a `{for}` and `{range}`.
                example_code: |
                    ```
                    number = 10
                    {for} i {in} {range} 1 to 10
                        {print} i * number
                    ```
            12:
                story_text: |
                    Tani mund të bëni një kalkulator që punon me numra decimal. Plotësoni vendet bosh që të funksionojë siç duhet!
                example_code: |
                    ```
                    numri1 = {ask} 'Cili është numri i parë?'
                    numri2 = {ask} 'Cili është numri i dytë?'
                    përgjigja = _
                    {print} numri1 ' plus ' numri2 ' është ' përgjigja
                    ```
            13:
                story_text: |
                    ### Exercise 1
                    Let's make the practice program a bit harder. The player now has to answers two questions correctly. Fill out the blanks to complete the program.

                    ### Exercise 2
                    Sometimes, calculations have multiple correct answers. For example, 10 can be divided by 5 and by 2. So the question 'What number divides 10?' can be answered by 2 and by 5.
                    Ask for a calculation that has multiple correct answers, ask the player to answer it, and determine if it is correct using `{or}`.
                    Empty the programming field and create your own solution.
                example_code: |
                    ```
                    answer1 = {ask} 'What is 10 times 7?'
                    answer2 = {ask} 'What is 6 times 7?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
            14:
                story_text: |
                    In this adventure you will build a calculator that calculates your mean grade for you. If you get your calculator to work, you can move on to the next adventure, which allows you to add two extra features.

                    ### Exercise 1
                    Fill in the blanks to get the calculator to work.
                    * Start with the fourth line, add a question to figure out what grade the student got.
                    * In the fifth line you'll want to calculate the total of all grades, so the total = total + grade.
                    * Then we get to set the return value. We want to return the mean, so the total devided by the amount of tests (4).
                    * Lastly we finish the code by calling the function in line 8.

                    Did you get it? Awesome! Would you like to add even more to your calculator? **This adventure continues in the next tab!**
                example_code: |
                    ```
                    {define} calculate_mean_grade
                        total = 0
                        {for} i {in} {range} 1 {to} 4
                            grade = {ask} _
                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
                    ```

                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
            15:
                story_text: |
                    Ju mund ta shtoni komandën `{while}` në lojën me kalkulator që e mësuat në nivelin e mëparshëm.
                    Kjo siguron se lojtarët nuk mund të vazhdojnë në pyetjen tjetër {if}(nëse) përgjigjen gabim.

                    ### Exercise
                    Add the `{while}` loop in the function, ask the player what number_1 times number_2 is and print their answer.
                    Then `{call}` the function.
                example_code: |
                    ```
                    {define} new_question
                        numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        number_1 = numbers {at} {random}
                        number_2 = numbers {at} {random}
                        correct = number_1 * number_2
                        answer = 0
                        _
                        _
                        _
                        {print} 'Well done!'

                    {print} 'Give 10 correct answers to win!'
                    {for} i {in} {range} 1 {to} 10
                        _
                    {print} 'You win!'
                    ```
    calculator_2:
        name: Calculator 2
        default_save_name: Calculator 2
        description: Calculator 2
        levels:
            14:
                story_text: |
                    ### Exercise 2
                    **This is the second part of this adventure.** The adventure starts in the previous tab.
                    Of course, you don't always want to calculate the mean of 4 tests. You might want to calculate the mean of 10 tests or only 2...
                    We can fix this problem by adding the argument and variable 'amount_of_tests'.
                    * Start a new line on line 3. Set the amount_of_tests argument by asking the student how many tests they have made.
                    * Change the 4 in line 4 to the new argument amount_of_tests.
                    * Lastly, change the 4 in line 6 to amount_of_tests

                    Try out your new program. Does it work?

                    ### Exercise 3
                    Did you want to make your program even better? Great! In the previous program you could only calculate the mean grade of 1 subject, but it would be better if you could calculate the mean grade for all subjects you want!
                    We won't tell you how to do it, but we will give you one tip: Start your code in line 1 with: define calculate_mean_grade with subject.
                example_code: |
                    ```
                    # Use your own code from the previous adventure.
                    ```
    clear_command:
        name: '{clear}'
        default_save_name: clear_command
        description: clear command
        levels:
            4:
                story_text: |
                    Time for a new command! With `{clear}` you can clear all the text form your output screen. This way you can prevent your screen getting too full of text.
                    Beware! If you are using a `{clear}` command, you might need to use a `{sleep}` above it. Otherwise Hedy will clear your screen without giving you the time to read as you can see in the example!
                example_code: |
                    ```
                    {print} '3'
                    {clear}
                    {print} '2'
                    {clear}
                    {print} '1'
                    {clear}
                    {print} 'wait for it...'
                    {sleep} 3
                    {clear}
                    {print} 'SURPRISE!'
                    ```
    debugging:
        name: debugging
        default_save_name: debugging
        description: debugging adventure
        levels:
            1:
                story_text: |-
                    Welcome to a debugging adventure. Debugging a code means getting rid of mistakes in the code.
                    That means that in these debugging adventures, we will show you code that does not work yet.
                    You will have to figure out what's wrong and correct the mistakes.

                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} I love programming
                    Do you love programming too?
                    {echo}
                    {print} What are your hobbies?
                    {echo} Your hobbies are
                    ```
            2:
                story_text: |-
                    Welcome to a debugging adventure. Debugging a code means getting rid of mistakes in the code.
                    That means that in these debugging adventures, we will give you a code that does not work yet.
                    You will have to figure out what's wrong and correct the mistakes.

                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    destination {ask} Where are you going on holidays?
                    {print} The flight to dstination leaves at 3 pm.
                    {ask} Did you check in your luggage yet?
                    {echo}
                    {print} Let me print your boarding pass for you.
                    {sleep}
                    Here you go! Have a nice trip!
                    ```
            3:
                story_text: |-
                    Welcome to a debugging adventure. Debugging a code means getting rid of mistakes in the code.
                    That means that in these debugging adventures, we will give you a code that does not work yet.
                    You will have to figure out what's wrong and correct the mistakes.

                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    movie_choices {is} dracula, fast and furious, home alone, barbie
                    chosen_movie {is} movies {at} {random}
                    {print} Tonight we will watch chosen _movies
                    like {ask} Do you like that movie?
                    {print} Tomorrow we will watch something else.
                    {add} chosen_movie {to} movie_choices
                    {print} Tomorrow we will watch tomorrows_movie
                    tomorrows_movie {is} movie_choices {at} {random}
                    I'll go get the popcorn! {print}
                    ```
            4:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to the online library!
                    {ask} What genre of books do you like?
                    {print} You like genre
                    author {is} {ask} 'Who's your favorite author?'
                    {print} 'author is your favorite author'
                    {print} Hmmm... i think you should try... books {at} {random}
                    ```
            5:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} Welcome to Swimming Pool Hedy!
                    class {is} {ask} 'Are you here to join a class today?'
                    {if} class yes
                    {print} 'Great! You're joining a class!
                    {print} {else} 'You will not be joining a class'
                    discount {is} 'Do you have a discount code?'
                    {if} discount {is} yes
                    discount_answer {is} {ask} 'What's your discount code?'
                    discount_codes = Senior4231, Student8786, NewMember6709
                    {if} discount_answer {is} {in} discount_cods
                    {print} 'That will be $3,50'
                    'That will be $5,50'
                    {print} 'Have a nice swim!'
                    ```
            6:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Vending machine'
                    chosen_product = {ask} 'Please select a product'
                    1_dollar_products = coke orange juice water
                    2_dollar_products = chocolate, cookie, museli bar
                    3dollar_prodcuts = potato chips, beef jerky, banana bread
                    {if} chosen {is} {in} 1_dollar_products
                    price = 1
                    {if} chosen_product {is} 2_dollar_products
                    price = 2
                    {else} chosen_product {in} 3_dollar_products
                    price = 3
                    amount_of_products = '{ask} How many of ' chosen_product would you like to have?'
                    total = price + amount_of_product
                    {print} 'That will be $' price 'please'
                    ```
            7:
                story_text: |-
                    ### Exercise
                    Surprise! This program looks more like an output than a code. And yet, we don't want you to just add `{print}` commands in front of each line.
                    Fix this program to turn it into the nursery rhyme 'Brother John (Frère Jaques)' by using the {repeat} command of course!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    Are you sleeping?
                    Brother John!
                    Morning bells are ringing!
                    Ding, dang, dong!
                    ```
            8:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to Manicures and Pedicures by Hedy'
                    bodypart = {ask} 'Are you getting your fingernails or toenails done today? Or both?'
                    {if} bodyparts {is} both
                            {print} That will be $25'
                            price = 25
                        {else}
                            {print} That will be $18'
                            price = 18
                    color = {ask} What color would you like?
                    sparkles = {ask} 'Would you like some sparkles with that?'
                    {if} sparkles {is} yes
                        {print} 'We charge $3 extra for that'
                    price = price + 3
                    {else} {print} 'No sparkles' {print} 'So no extra charge'
                    {sleep} 5
                    {print} 'All done! That will be $' price ' please!'
                    {print} 'Thank you! Byebye!'
                    ```
            9:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to our sandwich shop'
                    amount 'How many sandwiches would you like to buy?'
                    {repeat} amount {times}
                    {ask} {is} {ask} 'What kind or bread would you like your sandwich to be?'
                    types_of_bread {is} white, wheat, rye, garlic, gluten free
                    {if} chosen_bread in types_of_bread
                    {print} 'Lovely!'
                    {else}
                    'I'm sorry we don't sell that'
                    topping {is} {ask} 'What kind of topping would you like?'
                    sauce {is} {ask} 'What kind of sauce would you like?'
                    {print} One chosen_bread with topping and sauce.
                    price = amount * 6
                    {print} 'That will be 'price dollar' please'
                    ```

                    price = amount * 6
                    {print} 'That will be 'price dollar' please'
            10:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    names = Muad Hasan Samira Noura
                    activities = fly a kite, go swimming, go hiking, catch tan in the sun
                    {for} name {is} names
                    {print} At the beach name loves to activity at random
                    ```
            11:
                story_text: |-
                    ### Exercise
                    Debug this calender program. The output of this program is supposed to look like a list of dates.
                    For example:

                    ```
                    Hedy calender
                    Here are all the days of November
                    November 1
                    November 2
                    November 3
                    ```
                    And so on.

                    Mind that you have to test your code extra carefully for the month February, because the amount of days in this month changes in leap years.
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    print 'Hedy calender'
                    months_with_31 days = January, March, May, July, September, October, December
                    months_with_30_days = April, June, August, November
                    month = ask 'Which month would you like to see?'
                    if month in months_with_31_days
                        days = 31
                        if month in months_with30_days
                            days = 30
                    if month = February
                        leap_years = 2020, 2024, 2028, 2036, 2040, 2044, 2028
                        year = ask 'What year is it?'
                    if year in leap_years
                        days = 29
                    else
                        days = 28

                    print 'Here are all the days of ' moth
                    for i in range 1 to days
                        print month i
                    ```
            12:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define greet
                    greetings = 'Hello', 'Hi there', 'Goodevening'
                        print greetings at random

                    define take_order
                        food = ask 'What would you like to eat?'
                        print 'One food'
                        drink = 'What would you like to drink?'
                        print 'One ' drink
                        more = ask 'Would you like anything else?'
                            if more is 'no'
                        print 'Alright'
                            else
                            print 'And ' more
                    print 'Thank you'

                    print 'Welcome to our restaurant'
                    people = ask 'How many people are in your party tonight?'
                    for i in range 0 to people
                        call greet_costumer
                    ```
            13:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    defin movie_recommendation with name
                        action_movies == 'Die Hard', 'Fast and Furious', 'Inglorious Bastards'
                        romance_movies = 'Love Actually', 'The Notebook', 'Titanic'
                        comedy_movies = 'Mr Bean' 'Barbie''Deadpool'
                        kids_movies = 'Minions', 'Paddington', 'Encanto'
                        if name is 'Camila' or name is 'Manuel'
                            recommended_movie = kids_movie at random
                        if name is 'Pedro' or 'Gabriella'
                                mood = ask 'What you in the mood for?'
                            if mood is 'action'
                                recommended_movie = comedy_movies at random
                            if mood is 'romance'
                                recommended_movie = romance_movies
                        if mood is 'comedy'
                                recommended_movie = comedy_movies at random

                    print 'I would recommend ' recommended_movie ' for ' name

                    name = ask 'Who is watching?'
                    recommendation = ask 'Would you like a recommendation?'
                    if recommendaion is 'yes'
                    print movie_recommendation with name
                    else
                    print 'No problem!'
                    ```
            14:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define calculate_heartbeat
                        print 'Press your fingertips gently against the side of your neck'
                        print '(just under your jawline)'
                        print 'Count the number of beats you feel for 15 seconds'
                        beats == ask 'How many beats do you feel in 15 seconds?'
                        heartbeat = beats*4
                        print 'Your heartbeat is ' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print 'Your heartbeat seems fine'
                        else
                            if heartbeat > 60
                                print 'Your heartbeat seems to be too low'
                            if heartbeat < 100
                                print 'Your heartbeat seems to be too high'
                            print 'You might want to contact a medical professional'

                    measure_heartbeat = ask 'Would you like to measure your heartbeat?'
                    if measure_heartbeat = 'yes'
                        call measure_heartbeat
                    else
                        'no problem'
                    ```

                        print '(just under your jawline)'
                        print 'Count the number of beats you feel for 15 seconds'
                        beats == ask 'How many beats do you feel in 15 seconds?'
                        heartbeat = beats*4
                        print 'Your heartbeat is ' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print 'Your heartbeat seems fine'
                        else
                            if heartbeat > 60
                                print 'Your heartbeat seems to be too low'
                            if heartbeat < 100
                                print 'Your heartbeat seems to be too high'
                            print 'You might want to contact a medical professional'

                    measure_heartbeat = ask 'Would you like to measure your heartbeat?'
                    if measure_heartbeat = 'yes'
                        call measure_heartbeat
                    else
                        'no problem'
            15:
                story_text: |-
                    ### Exercise
                    Debug this random children's story. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    names = 'Tanya', 'Romy', 'Kayla', 'Aldrin', 'Ali'
                    verbs='walking', 'skipping', 'cycling', 'driving', 'running'
                    locations = 'on a mountaintop', 'in the supermarket', 'to the swimming pool'
                    hiding_spots = 'behind a tree', under a table', in a box'
                    sounds = 'a trumpet', 'a car crash', 'thunder'
                    causes_of_noise = 'a television', 'a kid with firecrackers', 'a magic elephant', 'a dream'

                    chosen_ name = names at random
                    chosen_verb = verbs at random
                    chosen_location = 'locations at random'
                    chosen_sounds = noises at random
                    chosen_spot = hiding_spots random
                    chosen_causes = causes_of_noise at random

                    print chosen_name ' was ' chosen_verb ' ' chosen_location
                    print 'when they suddenly heard a sound like ' sounds at random
                    print chosen_name ' looked around, but they couldn't discover where the noise came from'
                    print chosen_name ' hid ' chosen_spot'
                    print 'They tried to look around, but couldn't see anything from there'
                    hidden = 'yes'
                    while hidden = 'yes'
                        print chosen_name 'still didn't see anything'
                    answer = ask 'does ' chosen_name ' move from their hiding spot?'
                        if answer = 'yes'
                            hidden == 'no'
                    print 'chosen_name moved from' chosen_spot
                    print 'And then they saw it was just' chosen_cause
                    print chosen_name 'laughed and went on with their day'
                    print The End
                    ```
            16:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                    Tip: Make sure that you only see your score once in the end.
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    country = ['The Netherlands', 'Poland', 'Turkey', 'Zimbabwe', 'Thailand', 'Brasil', 'Peru', 'Australia', 'India', 'Romania' ]
                    capitals = 'Amsterdam', 'Warshaw' 'Istanbul', 'Harare', 'Bangkok', 'Brasilia', 'Lima', 'Canberra', 'New Delhi', 'Bucharest'
                    score = 0
                    for i in range 0 to 10
                        answer = ask 'What's the capital of ' countries[i]
                        correct = capital[i]
                        if answer = correct
                            print 'Correct!'
                        score = score + 1
                        else
                            print 'Wrong,' capitals[i] 'in the capital of' countries[i]
                        print 'You scored ' score ' out of 10'

                    ```
            17:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define food_order
                        toppings = ask 'pepperoni, tuna, veggie or cheese?'
                        size = ask 'big, medium or small?'
                        number_of_pizza = ask 'How many these pizzas would you like?'

                        print 'YOU ORDERED'
                        print number_of_pizzas ' size  ' topping ' pizza'

                    define drinks_order
                        drink = ask 'water, coke, icetea, lemonade or coffee?'
                        number_of_drinks = ask 'How many of these drinks would you like?'

                        print 'YOU ORDERED'
                        print number_of_drinks ' ' drink

                    'Welcome to Hedy pizza'
                    more_food = ask 'Would you like to order a pizza?'
                    while more_food = 'yes'
                        return food_order
                        more_food = ask 'Would you like to order a pizza?'
                    more_drinks = ask 'Would you like to order some drinks?'
                    while more_drinks == 'yes'
                        call drink_order
                        more_drinks == ask 'Would you like to order more drinks?'


                    print 'Thanks for ordering!'
                    ```
            18:
                story_text: |-
                    ### Exercise
                    Debug this Old MacDonald program from level 16. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    for i in range 1 to 3
                        animal = animals[i]
                        sound = sounds[i]
                        print 'Old MacDonald had a farm'
                        print 'E I E I O!'
                        print 'and on that farm he had a ' animal
                        print 'E I E I O!'
                        print 'with a ' sound sound ' here'
                        print 'and a ' sound sound ' there'
                        print 'here a ' sound
                        print 'there a ' sound
                        print 'everywhere a ' sound sound
                    ```
    default:
        name: Prezantim
        default_save_name: Hyrje
        description: Shpjegim i niveleve
        levels:
            1:
                story_text: "Në level 1 mund ti përdorni komandat `{print}`, `{ask}` dhe `{echo}`.\n Shkruani kodin në fushën e programimit. Ose shtypeni butonin e gjelbër në bllokun që tregon shembull, dhe kodi do të shkruhet për ju!\nProvojeni kodin tuaj duke shtypur butonin 'Ekzekuto kodin' ndër fushën e programimit.\n\n Mund të printoni tekst në ekran duke përdorur komandën `{print}`.     \n"
                example_code: |
                    ```
                    {print} Hello world!
                    ```
            2:
                story_text: |
                    Congratulations! You've reached level 2. Hopefully you've already made some awesome codes!
                    In the first level you might've notice that the `{echo}` command can only save one bit of information at a time.
                    For example in the restaurant adventure, you could echo what the costumer wanted to eat, or what they wanted to drink, but not both in one sentence.

                    That changes in level 2. In level 2 you'll learn to work with variables, that allow you to save multiple pieces of information and print them in any place you want.
                    So let's go to the next tab!
                example_code: |
                    **Warning! This code does not work!**
                    In Hedy commands will change sometimes. `{echo}` for example only works in level 1. In this level you'll learn a better way to echo answers back.
                    ```
                    {print} Welcome at Hedy's
                    {ask} What would you like to eat?
                    {echo} So you want
                    {ask} what would you like to drink?
                    {echo} So you want
                    ```
            3:
                story_text: |
                    Në level 3 ju mund të bëni një listë. Ju mund ta lejoni kompjuterin të zgjedhë një rastësisht. Ju mund ta bëni këtë me `{at} {random}`.
            4:
                story_text: |
                    Në nivelin 4 `{ask}` dhe `{print}` komandat kanë ndryshuar.

                    Ju duhet ta vendoni tekstin që doni ta printoni në thonjëza.

                    Kjo është e dobishme, sepse tani mund të printoni të gjitha fjalët që doni. Gjithashtu edhe fjalët që dikur i ruajtët me komandën `{is}`.

                    Shumica e gjuhëve programore përdorin thonjëza kur printojnë, kështu që ne jemi një hap më afër programimit real!
                example_code: |
                    ```
                    {print} 'Ju duhet të përdorni thonjëya prej tash e tutje!'
                    përgjigja {is} {ask} 'Çfarë duhet të përdorim prej tani e tutje?'
                    {print} 'Ne duhet të përdorim ' përgjigja
                    ```
            5:
                story_text: |
                    Në nivel 5 kemi diçka të re, `{if}` komanda! Me `{if}` komandën ju mund të zgjidhni një nga dy opsione .
                    Ky kodi printon Hedy si emër, dhe boo! nëse shkruani diçka tjetër.
                    `{ask}` dhe `{print}` komandat punojnë si në nivelin 4.
                example_code: |
                    ```
                    emri {is} {ask} 'si e keni emrin?'
                    {if} emri {is} Hedy {print} 'mirë' {else} {print} 'boo!'
                    ```
            6:
                story_text: |
                    Në këtë nivel ju do të mësoni diçka të re: ju tash mund të kalkuloni.

                    Plusi është i lehtë, mund ta shkruani si në matematik: për shembull `5 + 5`. Gjithashtu punon edhe minusi, është `5 - 5`.

                    Shumëzimi është pak më ndryshe, sepse nuk keni shumëzim në tastierë. Kërkojeni, sigurisht nuk është!
                    Kjo është përse ne shumëzojmë me yll që gjendet tek numri 8 lartë në tastierë: (mbajeni shtypur shift, pastaj shtypni numrin 8) `5 * 5`. Lexoni at si "5 herë 5" kjo do ju ndihmojë që ta mbani mend.
                example_code: |
                    ```
                    {print} '5 plus 5 është ' 5 + 5
                    {print} '5 minus 5 është ' 5 - 5
                    {print} '5 herë 5 është ' 5 * 5
                    ```
            7:
                story_text: |
                    Niveli 7 shton komandën `{repeat}`.  `{repeat}` komanda mund të përdoret që të ekzekutoni rreshtin e kodit disa herë.
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy është qejf!'
                    ```
            8:
                story_text: |
                    `{ask}` dhe `{print}` punojnë siç i mbani mend. Por `{if}`, `{else}` dhe `{repeat}` kanë ndryshuar!
                    Tani mund të ekzekutoni grup kodi së bashku, por do të duhet që para kodin të lëni hapësira.
                    Kjo do të thotë të vendosni 4 hapësira në fillim të rreshtit. Gjithashtu mund të lëni hapësira para kodit kur doni të krijoni një grup me një rresht.
                example_code: |
                    Kjo është si komanda `{repeat}` punon tani:
                    ```
                    {repeat} 5 {times}
                        {print} 'Përshëndetje të gjithë'
                        {print} 'Kjo e gjitha përsëritet 5 herë'
                    ```
                    Kjo është si tani komanda `{if}` dhe `{else}` punojnë tani:

                    ```
                    emri {is} {ask} 'Si e ke emrin?'
                    {if} emri {is} Hedy
                        {print} 'Mirë se erdhët Hady'
                        {print} 'Ju mund të luani në kompjuterin tuaj!'
                    {else}
                        {print} 'HAJDUT!'
                        {print} 'Nuk mund ta përdorni këtë kompjuter!'
                    ```
            9:
                story_text: |
                    Në këtë nivel jo veçse mund të përdorni shumë rreshta me komandat `{if}` dhe `{repeat}`, por mund ti vendoseni së bashku!
                    Në shembullin që shikoni komanda `{if}` është brenda komandës `{repeat}`. Gjithashtu mund edhe e kundërta, një komandë `{if}` lejohet brenda komandës tjetër `{if}` dhe komanda `{repeat}` brenda një tjetër `{repeat}`.
                    Give it a try!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        ushqimi= {ask} 'Çfarë doni?'
                        {if} ushqimi {is} pica
                            {print} 'bukur!'
                        {else}
                            {print} 'pica është më mirë'
                    ```
            10:
                story_text: |-
                    Në këtë nivel do mësojmë për komandë të re që quhet `{for}`. Me komandën`{for}` mund të bëni një listë dhe ti përdoreni të gjitha elementet.
                    `{for}` krijon një bllok, si në `{repeat}` dhe `{if}` kështu që të gjitha rreshtat në bllok duhet të fillojnë me hapësira.
                example_code: |
                    ```
                    kafshët {is} qeni, maca, peshku
                    {for} kafsha {in} kafshët
                      {print} 'Un e dua ' kafsha
                    ```
            11:
                story_text: |
                    You have reached level 11, you're doing great! In the higher levels, Hedy is focussing more and more on teaching you the programming language Python.
                    In Python there is no `{repeat}` command, but there is a command that works like {repeat}. Are you curious to find out how to say `{repeat}` in Python language? Quickly go on to find out!
            12:
                story_text: |-
                    **Numrat decimal**
                    Deri tani, Hedy nuk lejoji numrat decimal si 1.5, por tani ne e lejojmë këtë. Mbani mend se kompjuterët e përdorin `.` për numra decimal.
                example_code: |
                    ```
                    {print} 'Dy e gjysmë plus dy e gjysme është...'
                    {print} 2.5 + 2.5
                    ```

                    {print} 2.5 + 2.5
            13:
                story_text: Ne tash do të mësojmë për komandën `{and}` dhe `{or}`! Nëse doni të kontrolloni dy deklarata, nuk ka nevojë për dy komanda {if} por mund të përdorni `{and}` dhe `{or}`. Nëse përdorni `{and}`, të dyja deklaratat, majtë edhe djathtë `{and}` duhet të jenë të vërteta. Ne gjithashtu mund të përdorim `{or}` atëherë vetëm njëra deklaratë duhet të jetë e vërtetë.
                example_code: |
                    ```
                    emri= {ask} 'Si e ke emrin?'
                    mosha= {ask} 'Sa vjeçar jeni?'
                    {if} emri {is} 'Hedy' {and} mosha {is} 2
                        {print} 'Ju jeni Hedy i vërtetë!'
                    ```
            14:
                story_text: |
                    Ne do të mësojmë më shumë gjëra. Ju veçse mund ti dini nga matematika, `<` edhe `>`.
                    `<` kontrollon nëse numri i parë është më i vogël se i dyti, për shembull mosha `<` 12 kontrollon nëse mosha është më e vogël se 12.
                    Nëse doni të kontrolloni nëse numri i parë është më i madh ose barazi me numrin e dytë, ju mund të përdorni `<=`, për shembull mosha `<=` 11.
                    `>` kontrollon nëse numri i parë është më i madh se i dyti, për shembull pikët `>` 10 kontrollon nëse pikët janë më shumë se 10.
                    Nëse doni të kontrolloni nëse numri i parë është më i madh apo barazi me numrin e dytë, ju mund të përdorni `>=`, për shembull pikët`>=` 11.
                    Ju mund ti përdorni këto krahasime në komandën `{if}`, si kështu:
                example_code: |
                    ```
                    mosha= {ask} 'Sa vjeçar jeni?'
                    {if} mosha > 12
                        {print} 'Ju jeni më të vjetër se unë!'
                    ```

                    {if} mosha< 13
                        {print} 'Ju jeni më të ri se unë!'
                    {else}
                        {print} 'Ju jeni më të vjetër se unë!'
            15:
                story_text: |-
                    Ne do të mësojmë një tjetër kusht me përsëritje, `{while}` komanda! Ne e përsëritim bllokun e kodit derisa deklarata është e vërtetë.
                    Kështu që mos harroni ta ndërroni vlerën në kushtin e dhënë.

                    Në shembullin e dhënë, ne vazhdojmë derisa të jepet një përgjigje e saktë.
                    Nëse nuk jepet përgjigje e saktë, atëherë përsëritja nuk mbaron!
                example_code: |
                    ```
                    rezultati= 0
                    {while} rezultati != 25
                        rezultati = {ask} 'Sa bëjnë 5 herë 5?'
                    {print} 'Është dhënë përgjigje e saktë'
                    ```
            16:
                story_text: |-
                    Ne do ta bëjmë një listë si në Python, me kllapa katrore para dhe pas listës! Ne gjithashtu i mbajmë thonjëzat në secilin artikull siç e kemi mësuar në nivelet e mëparshme.
                    Mund të përdorni kllapa katrore që të treguar një vend në listë.
                example_code: |
                    ```
                    shokët = ['Agoni', 'Beni', 'Arsimi']
                    numrat_me_fat = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} 'numri me fatë i ' shokët[i]
                        {print} 'është ' numrat_me_fat[i]
                    ```
            17:
                story_text: |-
                    Tani do të ndryshojmë mënyrën e hapësirave para kodit. Çdoherë kur do na duhet hapësirë para kodit, neve na duhet `:` tek rreshti para hapësirës.

                    Në këtë nivel gjithashtu mund të përdorni: `{elif}`. `{elif}` është shkurt për `{else} {if}` dhe ju duhet kur doni të kontrolloni 3 apo më shumë opsione.
                    Shiheni!
            18:
                story_text: |-
                    Ne mbërritëm në kodin e vërtetë të gjuhës Python! Kjo do të thotë se duhet të përdorim kllapa në komandën {print} dhe {range} prej tani.
                    {print}('Emri im është ', emri)
    dice:
        name: Zare
        default_save_name: Zare
        description: Bëjeni zarin tuaj
        levels:
            3:
                story_text: |
                    Në këtë nivel mund të zgjedhim nga një listë. Me këtë mund ta lëmë që kompjuteri të zgjedhë një anë nga zari.
                    Shikoni tek lojërat që keni në dollap në shtëpinë tuaj.
                    A janë këto loja me një zar (special)? Gjithashtu mund ta kopjoni me këtë kod.
                    Si për shembull, the dice of the game Earthworms with the numbers 1 to 5 and an earthworm on it.

                    ![Kërmilli i tokës me 1 deri 5 dhe me një kërmill mbi të](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    zgjedhjet {is} 1, 2, 3, 4, 5, kërmilli
                    {print} zgjedhjet {at} {random}
                    ```
                story_text_2: |
                    Zarat në shembullin e mësipërm janë zare për një lojë specifike. Mund të bëni zare normale?
                    Apo zare të tjerë të veçantë nga një lojë tjetër?
                example_code_2: |
                    ```
                    zgjedhjet {is} _
                    ```
            4:
                story_text: |
                    Në këtë nivel ne mund ta bëjmë që fjalia të ketë vlerën e zarit, me thonjëza sigurisht.
                    Këtë herë shembulli i dhënë nuk është i plotësuar. A mund ta përfundoni kodin?
            5:
                story_text: |
                    Mund ta bëni prapë zarin në këtë nivel me komandën `{if}`.
                    Përfundojeni shembullin e dhënë që kodi të thotë "Ju mund të ndaloni së hedhuri" sapo të keni hedhur një krimb toke.

                    Ndoshta doni që të rikrijoni një zare nga një lojë tjetër. Është në rregull! Atëherë bëni reagimin tuaj. Shembull 'po' për numrin 6 dhe 'me keqardhje' për diçka tjetër {else}.
                example_code: |
                    ```
                    zgjedhjet {is} 1, 2, 3, 4, 5, krimb_toke
                    hidhe {is} _
                    {print} 'ti ke hedhur' _
                    {if} _ {is} krimb_toke {print} 'Mund të ndaloni së hedhuri.' _ {print} 'Duhet ta hidhni përsëri!'
                    ```
            6:
                story_text: |
                    Mund përsëri të bëni zarin e krimbit të tokës, por tani gjithashtu mund ta kalkuloni sa pikë keni hedhur.
                    Ju mund ta dini që krimbi njihet si 5 pikë. Pas një të hedhuri, ju mund menjëherë ta kalkuloni sa pikë keni hedhur.
                    Ky është kodi që kalkulon pikët për një zar:

                    ### Sfidë
                    A mund ta bëni kodin në mënyrë që të merrni rezultatin total për 8 zare? Për ta bërë këtë, duhet të prisni dhe ngjitni disa rreshta të kodit.
                example_code: |
                    ```
                    zgjedhjet = 1, 2, 3, 4, 5, krimi_tokes
                    pikët = 0
                    hedhja = zgjedhjet {at} {random}
                    {print} 'ju keni hedhur' hedhja
                    {if} hedhja {is} krimi_tokes pikët = pikët+ 5 {else} pikët= pikët + hedhja
                    {print} 'këto janë' pikët ' pikë'
                    ```
                example_code_2: |
                    A mundët që të kalkuloni pikët për 8 zare? U desh të kopjoni shumë apo? Ne do ta bëjmë më të lehtë në nivelin 7!
            7:
                story_text: |
                    Ju mund përsëri ta bëni një zare në nivelin 5. Me komandën `{repeat}` ju mund lehtë të hidhni një dorë me zare.
                    Tentoni ta përfundoni kodin e dhënë si shembull! Vijat duhet të kenë disa komanda dhe shkronja.

                    Ndoshta doni të bëni një zare komplet tjetër. Sigurisht që mundeni!
                example_code: |
                    ```
                    zgjedhjet = 1, 2, 3, 4, 5, krimi_tokes
                    {repeat} _ _ {print} _ _ _
                    ```
            10:
                story_text: |
                    A është secilit duke i marrë shumë kohë hedhja e zareve? Në këtë nivel ju mund ta bëni që Hedy ti hedhë të gjitha zaret në të njëjtën kohë!
                    A mund të plotësoni rreshtin e saktë të kodit në vendet bosh?
                example_code: |
                    ```
                    lojtarët = Ana, Jetoni, Agimi
                    zgjedhjet = 1, 2, 3, 4, 5, 6
                    _
                        {print} lojtari ' ka hedhur' zgjedhjet {at} {random}
                        {sleep}
                    ```
            15:
                story_text: |
                    ### Exercise
                    In this level you can create a little game in which you'll have to throw 6 as fast as possible.
                    We have started the code, it's up to you to get the game to work!

                    Firstly, add a `{while}` loop that checks if 6 has been thrown or not.
                    As long as you haven't thrown 6 already, throw the dice on a random number.
                    Print what the player has thrown.
                    Add a try to the amount of tries
                    Wait a second before you throw again, or - in case you've thrown a 6 - before the game ends.
                example_code: |
                    ```
                    options = 1, 2, 3, 4, 5, 6
                    {print} 'Throw 6 as fast as you can!'
                    thrown = 0
                    tries = 0
                    _
                    _
                    _
                    _
                    _
                    {print} 'Yes! You have thrown 6 in ' tries ' tries.'
                    ```
    dishes:
        name: Enët?
        default_save_name: Enët
        description: Përdorni kompjuterin ta shihni kur i lanë enët (Fillo në nivelin 2)
        levels:
            3:
                story_text: |
                    A nuk jeni dakord në shtëpi se kush ti lajë enët apo kush ta ndryshojë kutinë e mbeturinave?
                    Pastaj mund ta lëni kompjuterin të zgjedhë në mënyrë të drejtë. Mund ta programoni në këtë nivel!
                    E bëni një listë me pjesëtarët e familjes. Pastaj zgjidhni '{at} {random}' nga lista.
                example_code: |
                    ```
                    njerëzit {is} nëna, babi, Erza, Sara
                    {print} njerëzit {at} {random}
                    ```
                story_text_2: |
                    A nuk doni që ti lani enët? Ndryshoni programin që të hiqni emrin tuaj nga lista me komandën `{remove}` `{from}`.
            4:
                story_text: |
                    Me thonjëza mund ta bëni planin e larjeve të enëve më të bukur.
                    Këtë herë shembulli nuk është i plotësuar.

                    A mund ta plotësoni kodin? Çdo boshllëk duhet të zëvendësohet me një fjalë apo simbol.

                    Këshillë: Mos harroni thonjëzat!
                example_code: |
                    ```
                    njerëzit {is} nëna, babi, Erza, Sara
                    {print} _ enët janë larë nga _
                    {sleep}
                    {print} njerëzit {at} _
                    ```
            5:
                story_text: |
                    Me komandën `{if}` ju tani mund të argëtoheni më shumë me zgjedhje në program. Ju tani mund ta keni programim që i përgjigjet zgjedhjes së bërë nga kompjuteri.

                    A mund ta përfundoni kodin i cili printon 'shumë keq' kur është radha e juaj ndërsa në të kundërt 'po!'?
                    Mos harroni thonjëzat!
                example_code: "```\nnjerëzit {is} nëna, babi, Erza, Sara\nlarësiEnëve {is} njerëzit {at} {random}\n{if} larësiEnëve {is} Sara {print} _ shumë keq un e kam ti lajë enët _ \n{else} {print} 'fatmirësisht nuk ka enë sepse ' _ ' është veçse duke i larë'\n```\n"
            6:
                story_text: |
                    Sa shpesh duhet që secili ti lajë enët? A është e drejtë? Mund të numëroni në këtë nivel.
                example_code: |
                    ```
                    njerëzit = nëna, babi, Erza, Sara
                    erza_lanë = 0
                    larësi_enëve = njerëzit {at} {random}
                    {print} 'Larësi i enëve është' larësi_enëve
                    {if} larësi_enëve {is} Erza erza_lanë = erza_lanë + 1
                    {print} 'Erza do ti lajë enët këtë javë' erza_lanë 'herë'
                    ```

                    Tani kund të kopjoni rreshtat 3 deri 5 disa herë (p.sh. 7 herë për të gjithë javën) për të kalkuluar për të gjithë javën.
                    A e bëni kodin për të gjithë javën?
                story_text_2: |
                    Nëse jeni shumë pafat, programi mund të ju zgjedhë juve ti lani enët për të gjithë javën! Nuk është e drejtë!
                    Për të krijuar një sistem të drejtë, mund ta përdorni komandën `{remove}` për të hequr njeriun e zgjedhur nga lista. Kështu që nuk keni që ti lani enët derisa dikush tjetër ti kishte larë.

                    E hëna dhe e marta janë gati për ju! A mund ti shtoni ditët e mbetura të javës?
                    Dhe... A mund të gjeni një zgjidhje kur lista është bosh?
                example_code_2: |
                    ```
                    njerëzit = nëna, babi, Erza, Sara
                    larësi_enëve = njerëzit {at} {random}
                    {print} 'Të hënën enët janë larë nga: ' larësi_enëve
                    {remove} larësi_enëve {from} njerëzit
                    larësi_enëve = njerëzit {at} {random}
                    {print} 'Të martën enët janë larë nga: ' larësi_enëve
                    {remove} larësi_enëve {from} njerëzit
                    larësi_enëve = njerëzit {at} {random}
                    ```
            7:
                story_text: |
                    Me komandën `{repeat}` mund të përsëritni pjesë nga kodi. Mund ta përdorni që të kalkuloni kush do ti lajë enët për të gjithë javën.
                example_code: |
                    ```
                    njerëzit = nëna, babi, Erza, Sara
                    {repeat} _ _ {print} 'larësi i enëve është' _
                    ```
            10:
                story_text: |
                    Në këtë nivel, ju mund të bëni një orar më të mirë të larjes së enëve.
                example_code: |
                    ```
                    ditët = E hënë, E martë, E mërkurë, E enjte, E premte, E shtunë, E diel
                    emrat = nëna, babi, Erza, Sara
                    _ dita _ ditët
                        {print} emrat {at} {random} ' i lanë enët në ditën e ' dita
                    ```
    elif_command:
        name: '{elif}'
        default_save_name: elif
        description: elif
        levels:
            17:
                story_text: |
                    In this level you can also use a new command: `{elif}`. `{elif}` is a combination of the keywords `{else}` and `{if}` and you need it when you want to make 3 (or more!) options.
                    Check it out!
                example_code: |
                    ```
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
                    ```
    for_command:
        name: '{for}'
        default_save_name: for
        description: for command
        levels:
            10:
                story_text: |-
                    ## For
                    In this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.
                    `{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with 4 spaces.
                example_code: |
                    ```
                    animals = dog, cat, blobfish
                    {for} animal {in} animals
                        {print} 'I love ' animal
                    ```
                story_text_2: |
                    ### Exercise
                    Finish this code by adding `{for} action {in} actions` to line 2.
                example_code_2: |
                    ```
                    actions = clap your hands, stomp your feet, shout Hurray!
                    _
                        {repeat} 2 {times}
                            {print} 'If youre happy and you know it, ' action
                            {sleep} 2
                        {print} 'If youre happy and you know it, and you really want to show it'
                        {print} 'If youre happy and you know it, ' action
                        {sleep} 3
                    ```
            11:
                story_text: |-
                    In this level, we add a new form of the `{for}`. In earlier levels, we used `{for}` with a list, but we can also use `{for}` with numbers.
                    We do that by adding a variable name, followed by  `{in}` `{range}`. We then write the number to start at, `{to}` and the number to end at.
                    Try the example to see what happens! In this level again, you will need to use indentations in lines below the `{for}` statements.
                example_code: |
                    ```
                    {for} counter {in} {range} 1 {to} 10
                        {print} counter
                    {print} 'Ready or not. Here I come!'
                    ```
            17:
                story_text: |
                    Now we are going to change indentation a little bit. Every time that we need an indentation, we need `:` at the line before the indentation.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Ready or not, here I come!'
                    ```
            18:
                story_text: |
                    Lastly, we'll turn `{for} i {in} {range} 1 to 5` into real Python code, like this:
                example_code: |
                    ```
                    {for} i {in} {range}(1,5):
                        {print} (i)
                    ```
    fortune:
        name: Fallxhore
        default_save_name: Fallxhore
        description: Lëreni Hedy të parashikojë të ardhmen
        levels:
            1:
                story_text: |
                    A keni qenë ndonjëherë në një karnaval dhe të është parashikuar e ardhmja nga një fallxhore? Apo keni luajtur ndonjëherë me një top magjik tetë?
                    Atëherë ju ndoshta e dini se ata nuk mund ta parashikojnë vërtetë të ardhmen tuaj, por është akoma argëtuese të luash!

                    Në nivelet e ardhshme mund të mësoni se si të krijoni makinën tuaj të tregimit të fatit!
                    Në nivelin 1 mund të filloni lehtësisht duke e lënë Hedy-n të prezantohet si një fallxhore dhe ta lini të {echo} përgjigjet e lojtarëve.
                    Si kjo:
                example_code: |
                    ```
                    {print} Përshëndetje, unë jam Hedy fallxhori!
                    {ask} Kush jeni ju?
                    {print} Më lejoni t'i hedh një sy topit tim të kristaltë
                    {print} Ah po e shoh.. e shoh...
                    {echo} Emri yt është
                    ```
                story_text_2: |
                    Hedy tani ju tregon vetëm emrin tuaj. A mund ta zgjeroni kodin në mënyrë që Hedy të mund të parashikojë më shumë gjëra për ju?
                    Natyrisht, Hedy nuk është ende një fallxhore shumë e mirë, pasi ajo mund të përsërisë vetëm përgjigjet që janë dhënë nga lojtarët!
                    Hidhni një sy në nivelin 2 për të përmirësuar parashikuesin tuaj të fatit.
            3:
                story_text: |
                    Në nivelet e mëparshme ju keni krijuar makinën tuaj të parë të tregimit të fatit, por Hedy nuk mund të parashikonte asgjë, vetëm {echo}.
                    Në këtë nivel, ju mund të përdorni një variabël dhe komandën `{at} {random}` për ta lënë Hedy-n të zgjedhë një përgjigje për ju. Shikoni këtë kod për shembull:
                example_code: |
                    Në këtë shembull, lojtari mund të {ask} Hedy-t një pyetje po-jo dhe Hedy do të zgjedhë një përgjigje të rastësishme për ju.
                    ```
                    {print} I’m Hedy the fortune teller!
                    pyetja {is} {ask} What do you want to know?
                    {print} Kjo është ajo që ju dëshironi të dini: pyetja
                    përgjigje {is} po, jo, ndoshta
                    {print} Topi im i kristaltë thotë...
                    {sleep} 2
                    {print} përgjigje {at} {random}
                    ```
                story_text_2: |
                    Tani, Hedy mund të përgjigjet vetëm po, jo ose ndoshta. A mund t'i jepni Hedy-t më shumë opsione përgjigjeje, si 'definitivisht' ose '{ask}(pyet) përsëri'.
            4:
                story_text: |
                    ### Sfidë
                    Ne kemi hequr të gjitha thonjëzat nga ky kod shembull, a mund t'i shtoni ato në të gjitha vendet e duhura?
                    ### Sfidë 2
                    Go back to the previous level and copy your fortune teller code. Make the code work in this level by adding quotation marks in the right spots.
                example_code: |
                    ```
                    _ Shtoni thonjëzat në këtë kod _
                    {print} Jam Hedy fallxhori!
                    pyetja {is} {ask} Çfarë doni të dini?
                    {print} Kjo është pyetja juaj:  pyetja
                    përgjigja {is} po, jo, ndoshta
                    {print} Topi im i kristaltë thotë...
                    {sleep} 2
                    {print} përgjigja {at} {random}
                    ```
            5:
                story_text: |
                    Në këtë nivel do të mësoni të (fshehurazi) t'i ktheni shanset në favorin tuaj, kur përdorni fallxhoren!
                    Duke përdorur `{if}` dhe `{else}` mund të siguroheni që gjithmonë do të merrni një foto të mirë, ndërsa njerëzit e tjerë mund të mos kenë.
                    Shikoni këtë shembull për të zbuluar se si.
                example_code: |
                    ```
                    {print} 'Jam Hedy fallxhori!'
                    {print} 'Mund të parashikoj nëse do të fitosh llotarinë nesër!'
                    person {is} {ask} 'Kush jeni ju?'
                    {if} person {is} Hedy {print} 'Ju sigurisht do të fitoni!🤩' {else} {print} 'Fat i keq! Dikush tjetër do të fitojë!😭'
                    ```
            6:
                story_text: |
                    Në këtë nivel ju mund të përdorni matematikën në parashikimet tuaja si një fallxhor. Kjo ju lejon të krijoni formula (të pamenda) për të llogaritur të ardhmen.
                    Për shembull, mund të llogarisni sa të pasur do të bëheni ose sa fëmijë do të keni kur të rriteni.



                    ### Sfidë
                    A mund të mendoni për makinën tuaj të tregimit të fatit?
                example_code: |
                    ```
                    {print} 'Jam Hedy fallxhori!'
                    {print} 'Mund të parashikoj se sa fëmijë do të keni kur të rriteni!'
                    mosha = {ask} 'Sa vjeçar jeni?'
                    vëllezër_motra = {ask} 'Sa vëllezër ose motra keni?'
                    gjatësia = {ask} 'Sa i/e gjatë jeni në centimetra?'
                    fëmijët = gjatësia / mosha
                    fëmijët = fëmijët - vëllezër_motra
                    {print} 'Ju do keni ...'
                    {sleep}
                    {print} fëmijët ' fëmijë!'
                    ```

                    Nëse shembulli i mëparshëm nuk ishte mjaft budalla për ju, hidhini një sy këtij!
                    ```
                    {print} 'Jam Hedy fallxhori!'
                    {print} 'Un do të parashikoj sa të zgjuar jeni!'
                    futboll = {ask} 'Në shkallën 1-10 sa e pëlqeni futbollin?'
                    banane = {ask} 'Sa banane keni ngrënë këtë javë?'
                    higjiena = {ask} 'Sa herë i keni larë duart sot?'
                    rezultati = banane + higjiena
                    rezultati = rezultati * futboll
                    {print} 'Ju jeni ' rezultati ' përqind të zgjuar.'
                    ```
            7:
                story_text: |
                    Në këtë nivel mund të përdorni komandën `{repeat}`(përsërit) për ta bërë kompjuterin tuaj të tregojë fate të shumta në të njëjtën kohë.
                example_code: |
                    ```
                    {print} 'Jam Hedy fallxhori!'
                    {print} 'Ju mund të pyetni 3 pyetje!'
                    {repeat} 3 {times} pyetja = {ask} 'Çfarë doni të dini?'
                    përgjigja = po, jo, ndoshta
                    {repeat} 3 {times} {print} 'Topi im i kristaltë thotë... ' përgjigja {at} {random}
                    ```
            8:
                story_text: |
                    Në nivelet e mëparshme keni mësuar se si të përdorni `{repeat}` për ta bërë fallxhoren t'u përgjigjet 3 pyetjeve me radhë, por ne patëm një problem me printimin e pyetjeve.
                    Tani ai problem është zgjidhur, për shkak të mënyrës së re të përdorimit të komandës `{repeat}`.
                    Në shembullin tjetër mund të pyesni fallxhoren tuaj 3 pyetje dhe gjithashtu t'i printoni ato!

                    ### Sfidë
                    A mund ta plotësoni saktë komandën `{repeat}` në vendet bosh?
                example_code: |
                    ```
                    {print} 'Jam Hedy fallxhori!'
                    {print} 'Ju mund të pyetni 3 pyetje.'
                    përgjigja = po, jo, ndoshta
                    _ _ _
                       pyetja = {ask} 'Çfarë doni të dini?'
                       {print} pyetja
                       {sleep}
                       {print} 'Topi im i kristaltë thotë...' përgjigja {at} {random}
                    ```
            10:
                story_text: |
                    Në këtë nivel do të mësoni se si të programoni lojën MASH (rezidencë, apartament, kasolle, shtëpi). Në këtë lojë ju mund të parashikoni për të gjithë lojtarët menjëherë se si do të duket e ardhmja e tyre.
                example_code: |
                    ```
                    shtëpija = rezidencë, apartament, kasolle, shtëpi
                    dashuron = askënd, një mbretëror, fqinjin e tyre, dashurinë e tyre të vërtetë
                    kafshë_shtëpiake = qeni, maca, elefanti
                    emrat = Jehona, Valbona, Vetoni
                    {for} emri {in} emrat
                        {print} emri ' jeton në një ' shtëpija {at} {random}
                        {print} emri ' do të martohet me ' dashuron {at} {random}
                        {print} emri ' do të ketë ' kafshë_shtëpiake {at} {random} ' si kafshën e tyre shtëpiake.'
                        {sleep}
                    ```
            12:
                story_text: |
                    Në këtë nivel ju mund të bëni fatin tuaj me fjalë të shumta. Mund të shtoni më shumë pasuri të ndryshme në listë?
                example_code: |
                    ```
                    fati ='do të rrëshqasësh në lëkurën e bananes', _
                    {print} 'Do të hedh një sy në topin tim të kristaltë për të ardhmen tuaj.'
                    {print} 'E shikoj... E shikoj...'
                    {sleep}
                    {print} fati {at} {random}
                    ```
    functions:
        name: functions
        default_save_name: functions
        description: functions
        levels:
            12:
                story_text: |
                    In this level you'll learn how to use **functions**. A function is a block of code you can easily use multiple times. Using functions helps us organize pieces of code that we can use again and again.
                    To create a function, use `{define}` and give the function a name. Then put all the lines you want in the function in a indented block under the `{define}` line.
                    Leave one empty line in your code to make it look nice and neat. Great job! You have created a function!

                    Now, whenever we need that block of code, we just use <code>{call}</code> with the function's name to call it up! We don't have to type that block of code again.

                    Check out this example code of a game of Twister. The function 'turn' contains a block of code that chooses which limb should go where.

                    ### Exercise
                    Finish this code by setting the 2 variables chosen_limb and chosen_color.
                    Then, choose how many times you want to call the function to give the twister spinner a spin.

                    ### Exercise 2
                    Improve your code by adding a variable called 'people'. Use the variable to give all the players their own command in the game.
                    For example: 'Ahmed, right hand on green' or 'Jessica, left foot on yellow'.
                example_code: |
                    ```
                    sides = 'left', 'right'
                    limbs = 'hand', 'foot'
                    colors = 'red', 'blue', 'green', 'yellow'

                    {define} turn
                        chosen_side = sides {at} {random}
                        chosen_limb = limbs _
                        chosen_color = colors _
                        {print} chosen_side ' ' chosen_limb ' on ' chosen_color

                    {print} 'Lets play a game of Twister!'
                    {for} i {in} {range} 1 to _
                        {call} turn
                        {sleep} 2
                    ```
            13:
                story_text: |
                    Now that you've learned how to use functions, you'll learn how to use a function with an argument.
                    An **argument** is a variable that is used within a function. It is not used outside the function.

                    For example in this code we've programmed the first verse of the song 'My Bonnie is over the ocean'.
                    In this example code the argument `place` is used. Place is a variable that is only used in the function, so an argument.
                    To use `place` we have programmed the line `define song with place`.
                    When the function is called, computer will replace the argument `place`, with the piece of text after `call song with`.

                    ### Exercise
                    The next verse of this song goes:

                    Last night as I lay on my pillow
                    Last night as I lay on my bed
                    Last night as I lay on my pillow
                    I dreamed that my Bonnie is dead

                    Can you program this verse in the same way as the example?
                example_code: |
                    ```
                    {define} song {with} place
                        {print} 'My Bonnie is over the ' place

                    {call} song {with} 'ocean'
                    {call} song {with} 'sea'
                    {call} song {with} 'ocean'
                    ```
            14:
                story_text: |
                    In the previous levels you have learned to create functions and use arguments with them. Another great use of a function is to let it calculate something for you.
                    You can give the function a calculation and it will give you the answer of the calculation. This answer is called a **return value**.

                    For example, in this code the function calculate_new_price will calculate the new price of any item. It will give you the new price as a return value.

                    ### Exercise
                    Finish this code. We have already made the variable new_price for you, you only need to set it.
                    You should finish the line of code by calling the function that calculates the new price.
                example_code: |
                    ```
                    {define} calculate_new_price {with} amount, percentage
                        percentage = percentage / 100
                        discount_amount = amount * percentage
                        return amount - discount_amount

                    old_price = {ask} 'How much is on the price tag?'
                    discount = {ask} 'What percentage is the discount?'

                    new_price = _ calculate_new_price {with} old_price, _
                    {print} 'The new price is ' new_price ' dollar'
                    ```
            18:
                story_text: |
                    Let's make functions the Pythons way! To define a function, we no longer use:

                    `{define} name_function {with} argument_1, argument_2:`

                    but we use:

                    `{def} name_function(argument_1, argument_2):`.


                    If you don't want to use arguments, you just leave the space between the parantheses empty.
                    To call a function, we don't need the `{call}` command anymore. You just type the name of the function.
                example_code: |
                    ```
                    {def} calculate_score(answer, correct_answer):
                        {if} answer == correct_answer:
                            score = 1
                        {elif} answer == '?':
                            score = 0
                        {else}:
                            score = -1
                        {return} score

                    answer = {input} ('Where can you find the Eiffel Tower?')
                    correct_answer = 'Paris'
                    score = calculate_score(answer, correct_answer)
                    {print} ('Your score is... ', score)
                    ```
    guess_my_number:
        name: Guess my number
        default_save_name: guess my number
        description: guess my number
        levels:
            14:
                story_text: |
                    In this level you can program the game 'Guess my number'

                    ### Exercise
                    Fill in the correct symbols on the blanks to get the game to work.
                example_code: |
                    ```
                    {print} 'Guess my number'
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number = numbers {at} {random}
                    game = 'on'
                    {for} i {in} {range} 1 {to} 10
                        {if} game == 'on'
                            guess = {ask} 'Which number do you think it is?'
                            {if} guess _ number
                                {print} 'Lower!'
                            {if} guess _ number
                                {print} 'Higher!'
                            {if} guess _ number
                                {print} 'You win!'
                                game = 'over'
                    ```
    hangman:
        name: Hangman
        default_save_name: Hangman
        description: Guess the word
        levels:
            17:
                story_text: |
                    In this adventure we program a game of hangman. First we make some preparations, then we program the game and in the third part we add a drawing with the turtle.

                    ### Exercise
                    ***Set the variables*** In this game of hangman, Player 1 chooses an answer and Player 2 has to guess the letters in this answer.
                    To let the computer know all the letters in the word, we will turn the answer into a list of letters. We also do this with the guesses Player 2 makes.
                    We will start the game with 2 empty lists. We have made an empty list for the variable answer for you. Now make an empty list for guessed_letters as well.
                    Then we fill in how many mistakes were made. At the start of the game, this should be 0.
                    The variable `amount_letters` tells us how many letters are in the answer. Ask Player 1 to tell us how many letters their word has.
                    Lastly we tell the computer if the game is over. We use the variable `game_over` and set it to `False`.

                    ***Choosing the answer*** We want Player 1 to be able to choose the answer. We'll ask them, as many times as necessary, what the next letter is.
                    Then we add that letter to the answer. Lastly, we add an empty _ to the list of guessed letters, so we get as many _s as there are letters in the answer.

                    ***Player 2's turn***
                    Tell Player 2 its their turn. Then tell Player 2 how many letters there are in the answer. Finally, print the list of `guessed_letters`.

                    ***Go to the next tab*** Now that all the starting variables are set, we can start programming the game itself. Check out the next tab to learn how!
                example_code: |
                    ```
                    print 'Hangman!'

                    # Set the variables
                    answer = []
                    guessed_letters = _
                    mistakes_made = _
                    amount_letters = {ask} _
                    _ = 'False'

                    # Choosing the answer
                    {for} _
                        letter = {ask} 'Player 1, what is letter ' i '?'
                        _
                        {add} '_' {to} _

                    # Player 2 turn
                    print _
                    print _
                    print guessed_letters
                    ```
    hangman_2:
        name: Hangman 2
        default_save_name: Hangman_2
        description: Hangman 2
        levels:
            17:
                story_text: |
                    Now it's time to program the hangman game.

                    ### Exercise

                    ***Paste your code*** Copy your code from the previous tab and paste the code in the programming field.

                    ***The game*** This games continues playing until Player 2 is game over. Fill in the while command accordingly. Now, Player 2 is allowed to guess a letter, so ask Player 2 to guess a letter.
                    We need to check if their answer is correct, so check if their `guess` is (somewhere) in the (list) `answer`. Then we let the computer figure out which of the letter(s) is the guess. We have already programmed that part for you.
                    Next we want to compliment the player for finding a correct letter and we want to print the list `guessed_letters`, so the player can see their progress.

                    The next part we're going to program is what happens when the player has guessed all of the letters. So if their list of `guessed_letters` is the same as our list `answer`.
                    If the lists are the same, congratulate Player 2 with their victory and set the variable `game_over` to `True`.

                    Next we'll program what happens when Player 2 guesses wrong (so the `{else}` command). First, tell the player that their guess was wrong. Then increase the `mistakes_made` variable by 1.

                    For the last part we'll program what happens when Player 2 has made 10 mistakes. We'll print that Player 1 has won the game. Then we'll print the correct answer. And finally, we'll set our `game_over` variable to `True`, so the game stops.

                    ***Go to the next tab*** Amazing work! Your game is playable, but wouldn't it be fun if the hangman was actually drawn when Player 2 makes a mistake..?
                example_code: |
                    ```
                    # Paste your code here

                    # The game
                    {while} game_over _
                        guess = _
                        {if} _
                            {for} i {in} {range} 1 {to} amount_letters:
                                if answer[i] == guess:
                                    guessed_letters[i] = guess
                            {print} _
                            {if} guessed_letters == _:
                                {print} _
                                game_over = _
                        {else}:
                            {print} _
                            mistakes_made _
                            {if} _ == 10:
                                {print} _
                                {print} _
                                _
                    ```
    hangman_3:
        name: Hangman 3
        default_save_name: Hangman_3
        description: Hangman 3
        levels:
            17:
                story_text: |
                    In a game of hangman the mistakes are shown by drawing a part of the hangman each time a mistake has been made.
                    We now add those drawings with our turtle!

                    ### Exercise
                    ***Create a function that draws the hangman*** Create a function that draws the hangman in 10 steps. We have already made step 1 for you.

                    ***Test the function*** Test the function by calling the function with 10. If you are happy with the function, remove the line that calls the function for now. We will call the function when the player makes a mistake.

                    ***Paste your hangman game under your function*** Go back to the previous tab and copy your hangman game. Paste the game underneath your function.

                    ***Call the function when the player makes a mistake*** Under the line `mistakes_made = mistakes_made + 1` we will call the function. We want the turtle to take the same amount of steps as the player has made mistakes, so we call the function with `mistakes_made` as argument.

                    ***Enjoy your game!***
                    <div class="w-full flex flex-row gap-2">
                        The hangman could look like this <img src="https://github.com/hedyorg/hedy/assets/80678586/d385b691-5701-4342-b5d9-dfae1589c129" width="100">
                    </div>
                example_code: |
                    ```
                    # Create a function that draws the hangman
                    {define} draw_hangman {with} step:
                        {if} step == 1:
                            {color} white
                            {forward} -100
                            {turn} 90
                            {forward} -50
                            {color} black
                            {forward} 100
                            {forward} -50

                        {if} step == 2:
                            _
                    # Paste your hangman game here

                    ```
    harry_potter:
        name: Harry Potter
        default_save_name: Harry Potter
        description: Harry Potter adventures
        levels:
            10:
                story_text: |
                    ### Exercise
                    We can also make a Harry Potter themed fortune teller. Fill in blanks such that 9 lines are printed.
                    **Extra** Change the theme of the fortune teller into something else, such as your favorite book, film or tv show.
                example_code: |
                    ```
                    houses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    subjects = potions, defence against the dark arts, charms, transfiguration
                    fears = Voldemort, spiders, failing your OWL test
                    names = Harry, Ron, Hermione
                    _
                    _ {print} name ' is placed in ' houses {at} {random}
                    _ {print} name ' is great at ' subjects {at} {random}
                    _ {print} name 's greatest fear is ' fears {at} {random}
                    ```
    haunted:
        name: Shtëpia e përhumbur
        default_save_name: Shtëpia e përhumbur
        description: Ik nga shtëpia e përhumbur
        levels:
            1:
                story_text: |
                    Në këtë aventurë ju po punoni për të bërë një lojë në të cilën ju duhet të ikni nga një shtëpi e përhumbur duke zgjedhur derën e duhur.
                    Nëse zgjidhni derën e duhur do të mbijetoni, por nëse jo një përbindësh i tmerrshëm mund të...

                    Në nivelin 1, ne fillojmë lojën tonë të shtëpisë së përhumbur duke krijuar një histori të frikshme dhe e pyesim lojtarin se çfarë përbindëshi do të shohë në shtëpinë e përhumbur.
                example_code: |
                    ```
                    {print} Si arrita këtu?
                    {print} Mbaj mend që shoku im më tha të shkoja në rezidencën e vjetër...
                    {print} dhe papritmas gjithçka u nxi.
                    {print} Por si përfundova në dysheme...?
                    {print} Më dhemb koka sikur jam goditur nga një shkop bejsbolli!
                    {print} Çfarë është ai tingull?
                    {print} Oh jo! Ndihem sikur nuk jam vetëm në këtë shtëpi!
                    {print} Më duhet të iki nga këtu!
                    {print} Janë 3 dyer para meje..
                    {ask} Cilën derë duhet të zgjedh?
                    {echo} Zgjedh derën
                    {print} ...?
                    ```
                story_text_2: |
                    Mund ta përfundoni historinë e frikshme? Apo krijoni historinë tuaj të shtëpisë së përhumbur?
            2:
                story_text: |
                    Në këtë shtëpi të përhumbur ju mund të zgjidhni përbindëshat tuaja me emoji. Sigurisht që mund të përdorësh edhe fjalë.
                example_code: |
                    ```
                    përbindëshi_1 {is} 👻
                    përbindëshi_2 {is} 🤡
                    përbindëshi_3 {is} 👶
                    {print} Ju hyni në shtëpinë e përhumbur.
                    {print} Papritur shihni një përbindëshi_1
                    {print} Ju vraponi në dhomën tjetër, por një përbindëshi_2 ju pret atje!
                    {print} Oh jo! Shkoni shpejt në kuzhinë.
                    {print} Por ndërsa hyni, përbindëshi_3 ju sulmon!
                    ```
                story_text_2: |
                    Në shembullin e mësipërm, përbindëshat janë të paracaktuar. Pra, sa herë që ekzekutoni kodin tuaj, dalja është e njëjtë.
                    A mund të shtoni komandat `{ask}` për ta bërë shtëpinë e përhumbur ndërvepruese dhe për t'i bërë lojtarët të zgjedhin përbindëshat që hasin?
                example_code_2: |
                    ```
                    përbindësh_1 {is} _
                    përbindësh_2 {is} _
                    përbindësh_3 {is} _
                    {print} Ju hyni në shtëpinë e përhumbur.
                    {print} Papritur shihni një përbindësh_1
                    {print} Ju vraponi në dhomën tjetër, por një përbindësh_2 ju pret atje!
                    {print} Oh jo! Shkoni shpejt në kuzhinë.
                    {print} Por ndërsa hyni, përbindësh_3 ju sulmon!
                    ```
            3:
                story_text: |
                    Në nivelet e mëparshme ju keni bërë një hyrje në lojën tuaj të shtëpisë së përhumbur, por siç mund ta keni vënë re, historia do të kishte gjithmonë një fund të tmerrshëm.
                    Në këtë nivel ju mund ta bëni historinë tuaj më interaktive duke ndryshuar rezultatin e lojës; herë do të hahet, ndonjëherë do të ikësh!
                    Lëreni Hedy të vendosë rastësisht!
                example_code: |
                    ```
                    _ Escape from the haunted house!
                    _ There are 3 doors in front of you...
                    _ _ _ Which door do you choose?
                    _ You picked door ... choice
                    monsters _ a zombie, a vampire, NOTHING YOUVE ESCAPED
                    _ You see...
                    {sleep}
                    _ _ _ _
                    ```
            4:
                story_text: |
                    Në këtë nivel ju mësoni se si të përdorni thonjëza në lojërat tuaja.
                    A mund të bëni prova të nivelit 4 të Shtëpisë së Përhumbur?
                example_code: |
                    ```
                    {print} _ Ik nga shtëpia e përhumbur! _
                    {print} _ Ka 3 dyer perpara... _
                    zgjedhja {is} {ask} _ Cilën derë zgjidhni? _
                    {print} _ Zgjodhe derën ... _ zgjedhja
                    përbindëshit {is} një mumje, një vampir, ASGJE JU KENI IKUR
                    {print} _ E shihni... _
                    {sleep}
                    {print} përbindëshit {at} {random}
                     ```
            5:
                story_text: |
                    Deri në këtë nivel, loja e shtëpisë së përhumbur gjithmonë i kërkonte lojtarit të zgjidhte një derë, por siç mund ta keni vënë re, ata nuk duhej të përgjigjeshin saktë.
                    Nëse lojtari plotësonte një përgjigje krejtësisht të rastësishme, loja do të funksiononte akoma dhe lojtari mund të fitonte (pavarësisht se nuk kishte zgjedhur një derë).
                    Në këtë nivel ju mund ta fitoni lojën vetëm duke zgjedhur të njëjtën derë që Hedy zgjodhi rastësisht.

                    ### Sfidë
                    A mund të gjeni 4 fjalët që mungojnë për të plotësuar kodin?
                example_code: |
                    ```
                    {print} 'Ik nga shtëpia e përhumbur!'
                    {print} 'Ka 3 dyer para jush...'
                    dyert {is} 1, 2, 3
                    përbindëshit {is} ujk, mumje, vampir, zombi
                    dera_zgjedhur {is} {ask} 'Cilën derë zgjidhni?'
                    {print} 'Ti zgjodhe derën...' dera_zgjedhur
                    {sleep}
                    dera_saktë {is} dyert {at} {random}
                    _ _ _ _ {print} 'Shkëlqyeshëm! Ju keni shpëtuar!'
                    {else} {print} 'Oh jo! Ju jeni duke u ngrënë nga një...' përbindëshit {at} {random}
                    ```
            9:
                story_text: |
                    Në këtë nivel mund të përdorni folenë, e cila ju lejon ta bëni shtëpinë e përhumbur edhe më ndërvepruese!

                    ### Sfidë
                    Tani është shumë e vështirë të fitosh këtë lojë, a mund ta bësh më të lehtë të fitosh?
                    Për shembull duke pasur vetëm 1 derë të gabuar dhe 2 dyer të sakta në vend të 1 dere të saktë dhe 2 të gabuara?
                example_code: |
                    ```
                    {print} 'Ik nga shtëpia e përhumbur!'
                    lojtari = gjallë
                    dyert = 1, 2, 3
                    përbindëshit = mumje, vampir, merimangë gjigante
                    {repeat} 3 {times}
                        {if} lojtari {is} gjallë
                            dera_saktë {is} dyert {at} {random}
                            {print} 'Ka 3 dyer para jush...'
                            dera_zgjedhur = {ask} 'Cilën derë zgjidhni?'
                            {if} dera_zgjedhur {is} dera_saktë
                                {print} 'Nuk ka përbindësh këtu!'
                            {else}
                                {print} 'Ju jeni ngrënë nga një ' përbindëshit {at} {random}
                                lojtari = vdekur
                        {else}
                            {print} 'LOJA PËRFUNDOI'
                    {if} lojtari {is} gjallë
                        {print} 'Shkëlqyeshëm! Ju mbijetuat!'
                    ```
            11:
                story_text: |
                    Në këtë nivel ne kemi ndryshuar komandën e përsëritjes dhe kemi shtuar një linjë në shtëpinë tonë të përhumbur që i tregon lojtarit në cilën dhomë janë.

                    ### Sfidë
                    Përfundoni programin me rreshtin e saktë të kodit. Mendje: Ka 3 dhoma që lojtarit i duhen për të mbijetuar përpara se të fitojë!
                example_code: |
                    ```
                    {print} 'Ik nga shtëpia e përhumbur!'
                    lojtari {is} gjallë
                    dyert = 1, 2, 3
                    përbindëshit = mumje, vampir, merimangë gjigante
                    _
                        {if} lojtari {is} gjallë
                            dera_saktë = dyert {at} {random}
                            {print} 'Dhoma' i
                            {print} 'Ka 3 dyer para jush...'
                            dera_zgjedhur = {ask} 'Cilën derë zgjidhni?'
                            {if} dera_zgjedhur {is} dera_saktë
                                {print} 'Nuk ka përbindësh këtu!'
                            {else}
                                {print} 'Ju jeni ngrënë nga një ' përbindëshit {at} {random}
                                lojtari = vdekur
                        {else}
                            {print} 'LOJA PËRFUNDOI'
                    {if} lojtari {is} gjallë
                        {print} 'Shkëlqyeshëm! Ju mbijetuat!'
                    ```
            14:
                story_text: |
                    ### Exercise
                    In this level you can use the `<` and `>` symbol to introduce lives to your game.
                    Make sure the player loses a life when they come across the wrong monster and that the game stops if you have no lives left.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house'
                    lives = 3
                    doors = 1, 2, 3
                    monsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'
                    {for} i {in} {range} 1 {to} 10
                        {if} lives _
                            good_door = doors {at} {random}
                            monster = monsters {at} {random}
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} good_door == chosen_door
                                {print} 'You have chosen the correct door'
                            {else}
                                {print} 'You see...' monster
                                {if} monster == 'a sleeping 3 headed dog'
                                    {print} 'Pffieuw.... Its asleep'
                                {else}
                                    {print} 'You lose one life'
                                    lives = _
                        {else}
                            {print} 'GAME OVER'
                    ```
            16:
                story_text: |
                    ### Exercise
                    This haunted house game uses the connection between the lists you can use in this level.
                    For example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.
                    Check out the code and fill in  `weapons[i]`, `monsters[i]` , `bad_fate[i]`, `good_fate[i]`, `hint[i]` on the correct blanks to get the code to work!
                example_code: |
                    ```
                    numbers = [1, 2, 3]
                    i = numbers[{random}]
                    hint = ['growling', 'a cackling laugh', 'fluttering batwings']
                    monsters = ['zombie', 'witch', 'vampire']
                    bad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']
                    good_fate = ['You throw the ham. The zombie is distracted and starts eating it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']
                    weapons = ['ham', 'lighter', 'garlic']
                    {print} 'You are standing in front of an old mansion'
                    {print} 'Something is not right here'
                    {print} 'You hear ' _
                    {print} 'You are going to explore it'
                    {print} 'You enter the kitchen and see a lighter, a raw ham and a garlic.'
                    your_weapon = {ask} 'What do you bring with you?'
                    {print} 'With your ' your_weapon ' you enter the living room'
                    {print} 'There you find a ' _
                    needed_weapon = _
                    {if} your_weapon == needed_weapon
                        {print} 'You use your ' your_weapon
                        {print} _
                        {print} 'YOU WIN!'
                    {else}
                        {print} 'You have chosen the wrong weapon...'
                        {print} _
                        {print} 'GAME OVER'
                    ```
    hotel:
        name: hotel
        default_save_name: hotel
        description: hotel
        levels:
            13:
                story_text: |
                    In the previous adventure you have learned how to use an argument in a function, and you've learned how to combine it with an {ask}.
                    You might have wondered why you would use functions, because the functions in the example were only one line of code.
                    Now we will show you what a bigger function looks like and we will use multiple agruments now as well. You'll see how much better it is to use a function once the function gets bigger.
                    Here is an example of a function with arguments combined with {ask} commands.
                example_code: |
                    ```
                    {define} welcome_message {with} title, last_name, country, room_number
                        {print} 'Welcome to Hotel Hedy, ' title ' ' last_name
                        nice_trip {is} {ask} 'Did you have a nice trip from, ' country '?'
                        {if} nice_trip {is} 'yes'
                            {print} 'Lovely!'
                        {else}
                            {print} 'Sorry to hear that.'
                            {print} 'Hopefully you can take a nice rest in you room.'
                        {print} 'Your room number is ' room_number

                    {print} 'Hello. Please fill in your information to check in.'
                    title = {ask} 'What is your title (mr, mrs, ms, dr, etc.)?'
                    name = {ask} 'What is you last name?'
                    homecountry = {ask} 'What country do you come from?'

                    {call} welcome_message {with} title, name, homecountry, 105
                    ```

                    title = {ask} 'What is your title (mr, mrs, ms, dr, etc.)?'
                    name = {ask} 'What is you last name?'
                    homecountry = {ask} 'What country do you come from?'

                    {call} welcome_message {with} title, name, homecountry, 105
    if_command:
        name: '{if} & {else}'
        default_save_name: if_command
        description: Introducing the if command
        levels:
            5:
                story_text: |
                    ## If... else....
                    In level 5 there is something new, the `{if}`! With the `{if}` you can choose between two different options.
                    This code prints nice if you enter Hedy as a name, and boo! if you enter something else.
                    `{ask}` and `{print}` still work like they did in level 4.
                example_code: |
                    ```
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'
                    ```
                story_text_2: |
                    Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:
                example_code_2: |
                    ```
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice'
                    {else} {print} 'boo!'
                    ```
                story_text_3: |
                    ### Exercise
                    Try to create your own code with `{if}` and `{else}`. You can use the example code if you want.
                example_code_3: |
                    ```
                    answer {is} {ask} '2 + 2 = ?'
                    _ _ _ 4 _ 'Great job!'
                    _ _ 'No 2 + 2 = 4'
                    ```
            8:
                story_text: |
                    ## If... Else...
                    You have learned to repeat a block of lines of code after a `{repeat}` command.
                    Now you can also use indentation to make blocks after a {if} or {else} command.
                    Check out the example code.

                    ### Exercise
                    Add an {else} command to the example code. Make a block of line using indentation. You do this by starting each line with 4 spaces.
                example_code: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name {is} Hedy
                        {print} 'Welcome Hedy'
                        {print} 'You can play on your computer!'
                    ```
            9:
                story_text: |
                    In this level you can also put an {if} command inside another {if} command.
                example_code: |
                    ```
                    continue = {ask} 'Do you want to continue?'
                    {if} continue = yes
                        sure = {ask} 'Are you sure?'
                        {if} sure {is} yes
                            {print} 'We will continue'
                        {else}
                            {print} 'You are not sure'
                    {else}
                        {print} 'You do not want to continue'
                    ```
    in_command:
        name: '{in}'
        default_save_name: in_command
        description: Introducing the in command
        levels:
            5:
                story_text: |
                    ## Lists
                    When we want to check if something is in a list, we can now use the `{in}` command.
                    This code prints pretty! if you choose green or yellow, and meh otherwise.
                example_code: |
                    ```
                    pretty_colors {is} green, yellow
                    favorite_color {is} {ask} 'What is your favorite color?'
                    {if} favorite_color {in} pretty_colors {print} 'pretty!'
                    {else} {print} 'meh'
                    ```
                story_text_2: |
                    ### Exercise
                    Finish the example code by filling in the blanks with commands that you've learned.
                    When you've finished the code, try to create a code of your own and use a question that you've thought of yourself.
                example_code_2: |
                    ```
                    animals is dog, cow, sheep
                    answer is ask 'What is your favorite animal?'
                    _ answer _ animals _ 'Mine too!'
                    _ _ 'My favorite animals are dogs, cows and sheep'
                    ```
    is_command:
        name: '{is}'
        default_save_name: is_command
        description: introducing is command
        levels:
            2:
                story_text: |
                    ## Variables
                    You can name a word with `{is}`. This is called a **variable**. In this example we made a variable called name and a variable called age. You can use the word name anywhere in your code and it will be replaced by Hedy, like this:
                example_code: |
                    ```
                    name {is} Hedy
                    age {is} 15
                    {print} name is age years old
                    ```
                story_text_2: |
                    ### Exercise
                    Time to make your own variables!
                    In the example code we made an example of the variable `favorite_animal`. In line 1 the variable is set, and in line 2 we haved used the variable in a print command.
                    Firstly, finish our example by filling in your favorite animal in the blanks. Then make at least 3 of these codes yourself. Pick a variable, and set the variable with the {is} command. Then use it with a {print} command, just like we did.
                example_code_2: |
                    ```
                    favorite_animal {is} _
                    {print} I like favorite_animal
                    ```
            6:
                story_text: |
                    We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:
                example_code: |
                    ```
                    name = Hedy
                    answer = 20 + 4
                    ```
            14:
                story_text: |
                    We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.
                    The `<` checks if the first number is smaller than the second, for example age `<` 12 checks if age is smaller than 12.
                    If you want to check if the first number is smaller or equal to the second, you can use `<=`, for example age `<=` 11.
                    The `>` checks if the first number is bigger than the second, for example points `>` 10 checks if points is larger than 10.
                    If you want to check if the first number is bigger or equal to the second, you can use `>=`, for example points `>=` 11.
                    You use these comparisons in an `{if}`, like this:
                example_code: |
                    ```
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
                    ```
                story_text_2: |
                    From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:
                example_code_2: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name == 'Hedy'
                        {print} 'You are cool!'
                    ```
                story_text_3: |
                    You can also compare if something is *not* equal to something else using `!=` like this:
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name != 'Hedy'
                        {print} 'You are not Hedy'
                    ```

                    {if} age < 13
                        {print} 'You are younger than me!'
                    {else}
                        {print} 'You are older than me!'
    language:
        name: Gjuha
        default_save_name: Gjuha
        description: Praktikoni fjalët në një gjuhë të huaj
        levels:
            5:
                story_text: |
                    Bëni programin tuaj për të praktikuar fjalorin tuaj në një gjuhë të re.

                    ### Sfidë
                    A mund ta bëni këtë program për një gjuhë tjetër? Apo mund të shtoni më shumë fjalë në frëngjisht?
                example_code: |
                    ```
                    {print} 'Mëso frëngjisht!'
                    macja {is} {ask} '🐱'
                    {if} macja {is} chat {print} 'E mrekullueshme!'
                    {else} {print} 'Jo, macja është chat'
                    bretkocë {is} {ask} '🐸'
                    {if} bretkocë {is} grenouille {print} 'Super!'
                    {else} {print} 'Jo, bretkosa është grenuille'
                    ```
            16:
                story_text: |
                    ### Exercise
                    Take a look at the example code. This is a program to practise French vocabulary. Now make your own program to practice your vocabulary in a new language.
                    If you don't know any other languages, you can use Google translate or you can use emojis and your native language.
                example_code: |
                    ```
                    fjalë_franceze = ['bonjour', 'ordinator', 'pomme de terre']
                    përkthimi = ['përshëndetje', 'kompjuter', 'patate']
                    rezultati = 0
                    {for} i {in} {range} 1 {to} 3
                        përgjigje = {ask} 'Çfarë do të thotë 'fjalë_franceze[i]'?'
                        saktë = përkthimi[i]
                        {if} përgjigje == saktë
                            {print} 'E saktë!'
                            rezultati = rezultati + 1
                        {else}
                            {print} 'E gabuar, 'fjalë_franceze[i]' do të thotë 'përkthimi[i]
                    {print} 'Ju dhatë ' rezultati ' përgjigje të sakta.'
                    ```
    maths:
        name: maths
        default_save_name: maths
        description: Introducing maths
        levels:
            6:
                story_text: |
                    In this level you learn something new: you can now also calculate.

                    The plus is easy, you write it like with math: `5 + 5` for example. The minus also works fine, it is `5 - 5`.

                    The times is a bit different, because there is no times symbol on your keyboard. Just search, there really isn't!
                    That is why we multiply with the asterisk above 8: `5 * 5`. Read that as "5 times 5" that helps you remember it best.
                example_code: |
                    ```
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 minus 5 is ' 5 - 5
                    {print} '5 times 5 is ' 5 * 5
                    ```
            12:
                story_text: |-
                    **Decimal numbers**
                    So far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.
                example_code: |
                    ```
                    {print} 'Two and a half plus two and a half is...'
                    {print} 2.5 + 2.5
                    ```
                story_text_2: |-
                    **Maths with words**
                    In this level you can also do addition with words like this:
                example_code_2: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```

                    {print} 2.5 + 2.5
    music:
        name: music
        default_save_name: music
        description: Play a tune!
        levels:
            1:
                story_text: |-
                    In this level you'll learn how to use the `{play}` command to play a tune!

                    Type `{play}` followed by the note you want to play. The scale goes C-D-E-F-G-A-B.
                    As you can see there are 7 different letters, but we can play more than just 7 notes.
                    Type a number between 1 and 10 behind the letter to choose the scale, for example after B4 comes C5.
                    C1 is the lowest note you can play, C10 is the highest.

                    ### Exercise
                    Try out the example code and then play around with it! Can you create your own melody?
                    In the next level you'll learn how to play some existing songs.
                example_code: |-
                    ```
                    {play} C4
                    {play} D4
                    {play} E4
                    {play} F4
                    {play} G4
                    {play} A4
                    {play} B4
                    {play} C5
                    ```
            2:
                story_text: |
                    ### Exercise
                    Finish the songs! We have started the codes for some melodies.
                example_code: |
                    ```
                    {print} Old Mac Donald had a farm
                    {play} C5
                    {play} C5
                    {play} C5
                    {play} G4
                    {play} A4
                    {play} A4
                    {play} G4
                    ```
                story_text_2: As you can see, you can also use the `{sleep}` command to add a little pause in the song.
                example_code_2: |
                    ```
                    {print} Twinkle Twinkle Little Star
                    {play} C
                    {play} C
                    {play} G
                    {play} G
                    {play} A
                    {play} A
                    {play} G
                    {sleep} 1
                    {play} F
                    {play} F
                    ```
            3:
                story_text: |
                    Create a random melody!

                    ### Exercise
                    The example code creates a random melody, but it's very short and not many notes are used.
                    Add more notes to the list and create a longer melody by copying the last line a couple more times.
                example_code: |
                    ```
                    notes {is} A4, B4, C4
                    {play} notes {at} {random}
                    {play} notes {at} {random}
                    {play} notes {at} {random}
                    ```
            4:
                story_text: |
                    Use the `{clear}` command to create a karaoke machine!

                    ### Exercise
                    Finish the karaoke version of 'Mary had a little lamb'.
                    Then, create a karaoke version of any song you'd like!
                example_code: |
                    ```
                    {print} 'Mary had a little lamb'
                    {play} E
                    {play} D
                    {play} C
                    {play} D
                    {play} E
                    {play} E
                    {play} E
                    {clear}
                    {print} 'Little lamb, little lamb'
                    {play} D
                    {play} D
                    {play} D
                    {play} E
                    {play} E
                    {play} E
                    {clear}
                    {print} 'Mary had a little lamb'
                    {play} E
                    ```
            5:
                story_text: |
                    You don't always have to use the `{play}` command to play a whole song, sometimes you just want to play one note.
                    For example, if you want to make a quiz, you can play a happy high note if the answer is right and a sad low note if the answer is wrong.

                    ### Exercise
                    Finish the first question by adding a line of code that plays a C3 note if the wrong answer is given.
                    Then think of 3 more questions to add to this quiz.
                example_code: |
                    ```
                    answer {is} {ask} 'What is the capital of Zimbabwe?'
                    {if} answer {is} Harare {play} C6
                    _
                    ```
            6:
                story_text: "Instead of playing notes, you can also play numbers now. Simply type `{play} 1` for the lowest note, `{play} 70` for the highest note, or anything in between.\n\n### Exercise\n This calls for musical maths! Try out the example code a couple of times with different starting numbers. \nThen, see if you can compose a song using the numbers.\n"
                example_code: |
                    ```
                    number = {ask} 'Say a starting number between 1 and 67'
                    {print} number
                    {play} number
                    number = number + 1
                    {print} number
                    {play} number
                    number = number + 1
                    {print} number
                    {play} number
                    ```
            7:
                story_text: |
                    Using the `{repeat}` command can make your codes for melodies a lot shorter!

                    ### Exercise
                    Finish the code for Twinkle Twinkle Little Star by using the `{repeat}`command.
                    Then go back to the songs you've made in the previous levels. Can you shorten those codes too?
                example_code: |
                    ```
                    {print} 'Twinkle Twinkle Little Star'
                    {repeat} 2 {times} {play} C4
                    {repeat} 2 {times} {play} G4
                    _
                    ```
            8:
                story_text: |
                    Now that we can use the `{repeat}` command for multiple lines, we can make songs even more easily!

                    ### Exercise
                    Finish the song of Brother John (Frère Jacques). Don't forget to use `{repeat}`!
                example_code: |
                    ```
                    {print} 'Brother John'
                    {repeat} 2 {times}
                        {play} C
                        {play} D
                        {play} E
                        {play} C
                    {repeat} 2 {times}
                        {play} E
                        {play} F
                        {play} G
                        {sleep} 1
                    ```
            9:
                story_text: |
                    From this level on you can - among other things - use a {repeat} command inside a {repeat} command.
                    That makes songs like 'Happy birthday' even shorter!

                    ### Exercise
                    Finish the song!
                example_code: |
                    ```
                    first_time = yes
                    {repeat} 2 {times}
                        {repeat} 2 {times}
                            {play} C
                        {play} D
                        {play} C
                        {if} first_time {is} yes
                            {play} F
                            {play} E
                            first_time {is} no
                        {else}
                            _
                    ```
            12:
                story_text: |
                    Use functions in your songs! As you can see in the example code, you can make a function for each line of Twinkle Twinkle Little Star. Once you've programmed the first three lines, all you have to do is call the functions in the order you want them played in.

                    ### Exercise
                    Finish the song of Twinkle Twinkle Little Star.
                    Then look back at all the songs you've programmed in the levels before, can you make those codes better and shorter using functions too?
                example_code: |
                    ```
                    {define} first_line
                        {play} C
                        {play} C
                        {play} G
                        {play} G
                        {play} A
                        {play} A
                        {play} G
                        {sleep}

                    {define} second_line
                        {play} F
                        {play} F
                        {play} E
                        {play} E
                        {play} D
                        {play} D
                        {play} C
                        {sleep}

                    {define} third_line
                        {play} G
                        {play} G
                        {play} F
                        {play} F
                        {play} E
                        {play} E
                        {play} D
                        {sleep}

                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    ```
            13:
                story_text: |
                    You can use a function with an argument for songs that have line that are almost the same, but slightly different each time.
                    One example is the song 'Yankee Doodle'. The first 4 notes of the first lines are the same, but each time they are followed by a different couple of notes.

                    ### Exercise
                    Can you finish the song of Yankee Doodle?
                    Can you think of another song to program this way?
                example_code: |
                    ```
                    {print} 'Yankee Doodle'
                    {define} _ {with} note_1, note_2, note_3
                        {play} C4
                        {play} C4
                        {play} D4
                        {play} E4
                        {play} _
                        {play} _
                        {play} _

                    {call} line_1 {with} 29, 31, 30
                    {call} line_1 {with} 29, 28, 0
                    {call} line_1 {with} 32, 31, 30

                    {play} C4
                    {play} B3
                    {play} G3
                    {play} A3
                    {play} B3
                    {play} C4
                    {play} C4
                    ```
            14:
                story_text: |
                    You can program music for fun, but you can also use the musical notes to make something useful like a fire alarm!

                    ### Exercise
                    Make sure the fire alarm rings when there is a fire!
                example_code: |
                    ```
                    {define} fire_alarm
                        {print} 'FIRE!'
                        note = 40
                        {for} i {in} {range} 1 {to} 100
                            {if} note _ 50
                                note = note + 5
                                {play} _
                            {else}
                                note = 40

                    fire = {ask} 'Is there a fire?'
                    {if} fire _ 'yes'
                        {call} fire_alarm
                    ```
            15:
                story_text: |
                    **Warning** This adventure can become extremely annoying!
                    We can also use the {while} command to repeat a song forever.

                    ### Exercise
                    Finish the never-ending song.
                example_code: |
                    ```
                    {define} song
                        {play} _

                    yes_or_no = {ask} 'Do you want to hear my never-ending song?'
                    {while} yes_or_no = 'yes'
                        {call} song
                        {print} '🥳'
                    ```
            16:
                story_text: |
                    Upgrade your Old MacDonald code!

                    ### Exercise
                    Take your code from the 'Sing a Song' adventure and add musical notes to it!
                    You can make a function for each line in the song and call that function after the line is printed.
                    We defined the first line for you and called it in the code. Can you finish the whole song?
                example_code: |
                    ```
                    {define} line_1
                        {for} i {in} {range} 1 {to} 3
                            {play} G
                        {play} D
                        {for} i {in} {range} 1 {to} 2
                            {play} E
                        {play} D

                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    for i in range 1 to 3
                        animal = animals[i]
                        sound = sounds[i]
                        print 'Old MacDonald had a farm'
                        call line_1
                        print 'E I E I O!'
                        _
                    ```
            17:
                story_text: |
                    You can use the {elif} to create different options.

                    ### Exercise
                    Firstly, add colons to get the code to work.
                    Then finish this code by adding at least 2 other songs for other moods. For example a happy song and an angry song.
                example_code: |
                    ```
                    {define} scary_song
                        {for} i {in} {range} 1 {to} 3
                            {play} G
                        {play} E
                        {sleep} 2
                        {for} i {in} {range} 1 {to} 3
                            {play} F
                        {play} D

                    mood = {ask} 'Which emotion are you feeling?'
                    {if} mood {is} 'fear'
                        {call} scary_song
                    {elif} _
                    ```
            18:
                story_text: |
                    ### Exercise
                    Even in this last level of Hedy we can make some music! Be careful of all the syntax that is needed now.
                    Take a good look at how the functions are defined and called upon in the example code.
                    Finish the song!
                example_code: |
                    ```
                    {def} line_1():
                        {for} i {in} {range}(1, 5):
                            {play} A
                        {play} D
                        {play} F
                        {play} A

                    {def} line_2():
                        {for} i {in} {range}(1, 5):
                            {play} G
                        {play} C
                        {play} E
                        {play} G

                    {def} line_3():
                    _

                    {print} ('The drunken sailor')
                    {print} ('What shall we do with the drunken sailor?')
                    line_1()
                    line_2()
                    line_3()
                    {print} ('Early in the morning')
                    ```
    parrot:
        name: Papagalli
        default_save_name: Papagalli
        description: Krijo papagallin tënd online që do të ju kopjojë!
        levels:
            1:
                story_text: |
                    Krijo papagallin tuaj online që do të ju kopjojë!
                example_code: |
                    ```
                    {print} Jam Hedy papagalli
                    {ask} Si e keni emrin?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    A mund ta bëni papagallin të bëjë një pyetje tjetër? Plotësoni vendet bosh në shembull!
                example_code_2: |
                    ```
                    {print} Jam Hedy papagalli
                    {ask} _
                    {echo}
                    {echo}
            2:
                story_text: |
                    Krijo papagallin tuaj online që do të ju kopjojë!
                example_code: |
                    ```
                    {print} Jam Hedy papagalli
                    emri {is} {ask} Si është emri juaj?
                    {print} emri
                    {sleep}
                    {print} kuak
                    {sleep}
                    {print} emri
                    ```
                story_text_2: |
                    Ju mund të përdorni variabla për ta bërë papagallin të thotë më shumë se vetëm emrin tuaj. A mund ta plotësoni këtë kod?
            3:
                story_text: |
                    Mëso papagallin tënd fjalë të re me komandën `{add}`.
                    ### Sfidë
                    Si mund ta bëni papagallin tuaj të thotë shumë fjalë?
                example_code: |
                    ```
                    fjalët {is} kuak, Hedy
                    {print} Mëso papagallin tënd!
                    fjala_re {is} {ask} Cilën fjalë doni ti ja mësoni?
                    {add} fjala_re {to_list} fjalët
                    {print} 🧒 Thuaj fjala_re, Hedy!
                    {print} 🦜 fjalët {at} {random}
                    ```
            4:
                story_text: |
                    In this level we have to use quotation marks with the commands `{ask}` and `{print}`.
                    Can you complete the code by adding quotation marks?
                example_code: |
                    ```
                    words {is} squawk, Hedy
                    {print} _ Train your parrot! _
                    new_word {is} {ask} _ Which word do you want to teach them? _
                    {add} new_word {to_list} words
                    {print} _ 🧒 Say _ new_word _, Hedy!_
                    {print} _ 🦜 _ words {at} {random}
                    ```
            5:
                story_text: |
                    Shpërbleni papagallin tuaj nëse thot një fjalë të saktë!
                    Përfundoni kodin duke plotësuar 4 komandat që mungojnë.
                example_code: |
                    ```
                    fjalët {is} kuak, Hedy
                    {print} 'Mëso papagallin tënd!'
                    fjala_re {is} {ask} 'Cilën fjalë doni ti ja mësoni?'
                    {add} fjala_re {to_list} fjalët
                    fjala_thënë {is} fjalët {at} {random}
                    {print} '🧒 Thuaj ' fjala_re ', Hedy!'
                    {print} '🦜 ' fjala_thënë
                    _ fjala_thënë {is} fjala_re _'🧒 Punë e mrekullueshme, Hedy! 🍪'
                    _ _ '🧒 Jo, Hedy! Thuaj ' fjala_re
                    ```
    piggybank:
        name: Kutia kursimit
        default_save_name: Kutia kursimit
        description: Numëroni paratë tuaja të xhepit!
        levels:
            12:
                story_text: "Në këtë aventurë ju mësoni se si të bëni një kuti kursimi digjitale. \nPërfundojeni kodin dhe llogarisni sa para keni dhe sa kohë ju duhet të kurseni për të blerë atë që dëshironi!\n"
                example_code: |
                    ```
                    {print} 'Kutia kursimit digjitale'
                    dëshira = {ask} 'Çfarë do të dëshironit të blinit?'
                    çmimi = {ask} 'Sa kushton?'
                    ruajtur = {ask} 'Sa para keni kursyer tashmë?'
                    kompensim = {ask} 'Sa para xhepi merrni në javë?'
                    për_të_ruajtur = çmimi - ruajtur
                    javë = për_të_ruajtur / kompensim
                    {print} 'Mund të blesh një ' _' në ' _ ' javë.'
                    ```
            14:
                story_text: |
                    ### Exercise
                    In this level you can let Hedy tell you if you have saved up enough money!
                    Finish this code by filling in the blanks!
                example_code: |
                    ```
                    _ calculate_budget with wish, money, allowance
                        to_save = wish - money
                        weeks = to_save / allowance
                        {if} wish _ money
                            {print} 'You need to save up some more!'
                            {print} 'Youll need ' weeks ' more weeks.'
                        {else}
                            {print} 'Great! You have enough'
                            {print} 'Lets go shopping!'

                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'

                    {call} calculate_budget with _, _, _
                    ```
    pressit:
        name: Key presses
        default_save_name: Pressed
        description: Try linking a keyboard key to a command!
        levels:
            5:
                story_text: |
                    In this level there is another new keyword: `{pressed}`!
                    With `{pressed}` you can use keys on your keyboard to control what lines are used.

                    ### Exercise
                    Look at the example and add one more line of code that reacts to a key press.
                example_code: |
                    ```
                    {print} 'Do you want a good (g) or bad (b) ending?'
                    {if} g {is} {pressed} {print} 'They lived happily ever after ❤'
                    {else} {print} 'The prince was eaten by a hippopotamus 😭'
                    ```
                story_text_2: |
                    You can also link turtle commands to keys.

                    ### Exercise
                    Copy the lines a few times so you can create a larger drawing.
                example_code_2: |
                    ```
                    {if} y {is} {pressed} {forward} 15
                    {else} {turn} 90
                    ```
            7:
                story_text: |
                    Now that you have learned about `{repeat}`, we can press keys multiple times.
                    You can use it to make the turtle walk forward and turn.

                    ### Exercise
                    The code you have seen in level 5 only checks the key once. Copy the example code and add a `{repeat}` to it, so that you can press the keys many times.
                    Use this code to draw something nice.
                example_code: |
                    ```
                    {if} x {is} {pressed} {forward} 15 {else} {turn} 90
                    ```
            9:
                story_text: |
                    Now that you know how to combine statements, you can create a touch type tool with `{pressed}`.

                    ### Exercise
                    Finish the code. Each time a random letter should be chosen, which you have to press. You get a point for a correct press, and and two points deduction for a wrong press.
                    **(extra)** Clear the screen after each letter, and show the user how many points they have scored.
                example_code: |
                    ```
                    points = 0
                    letters = a, b, c, d, e
                    {repeat} 10 {times}
                        letter = _ _ _
                        {print} 'Press the letter ' letter
                        {if} letter {is} {pressed}
                        _
                        _
                        _
                    ```
    print_command:
        name: '{print}'
        default_save_name: print
        description: Introduction print command
        levels:
            1:
                story_text: |
                    ## The print command
                    You can print text to the screen using the `{print}` command.
                example_code: |
                    ```
                    {print} Hi there, programmer!
                    {print} Welcome to Hedy!
                    ```
                story_text_2: |
                    ### Exercise
                    In Hedy you will find exercises in every adventure. An exercise allows you to practise the new commands and concepts, and lets you give your own twist to the example codes.
                    In this exercise you will see a pink blank space. You have to fill something in the place of the blank space before the code can be run.

                    Fill in the `{print}` command in the blank space and then add five more lines of code. Each line has to start with a `{print}` command.
                    Have fun!
                example_code_2: |
                    ```
                    _ Hello!
                    ```
            18:
                story_text: |-
                    We arrived at real Python code! That means we need to use parentheses with `{print}` and `{range}` from now on.
                    It also means you can use Hedy code from this level in any Python environment as long as you use the English commands. If you haven't until now, you can switch the toggle in the commands menu to do so.
                example_code: |
                    ```
                    {print}('Hello!')
                    {for} i {in} {range}(1, 10):
                        {print}('This is line ', i)
                    ```
                story_text_2: If you want to print more than one item, you need to separate them by commas.
                example_code_2: |
                    ```
                    temperature = 25
                    {print}('It is ', temperature, ' degrees outside')
                    ```

                    {print}('My name is ', name)
    quizmaster:
        name: Drejtues konkursi
        default_save_name: Drejtues konkursi
        description: Bëni kuizin tuaj!
        levels:
            14:
                story_text: |
                    Në këtë aventurë ju mund të bëni kuizin tuaj! Plotësoni vendet bosh, shtoni më shumë pyetje dhe shijoni kuizin tuaj!
                    Ju mund të bëni një kuiz për çdo gjë që ju pëlqen: hobi juaj, kafshën tuaj të preferuar, librin tuaj të preferuar apo ndonjë gjë fare!
                example_code: |
                    ```
                    {print} 'Bëni kuizin tuaj'
                    pikë_a = 0
                    pikë_b = 0
                    {print} 'Pyetje'
                    {print} 'Opsioni i përgjigjes A'
                    {print} 'Opsioni i përgjigjes B'
                    përgjigje = {ask} 'Cila përgjigje?'
                    {if} përgjigje == 'A'
                         pikë_a = pikë_a + 1
                    {if} përgjigje == 'B'
                         pikë_b = pikë_b + 1
                    {print} 'Fundi i kuizit!'
                    {print} 'Le ti shohim rezultatet!'
                    {if} pikë_a > pikë_b
                         {print} 'Ti i përket klubit A'
                    {if} pikë_b > pikë_a
                         {print} 'Ti i përket klubit B'
                    ```
    quotation_marks:
        name: '''quotation marks'''
        default_save_name: quotation_marks
        description: Introduction quotation marks
        levels:
            4:
                story_text: |
                    ## 'Quotation marks'
                    In level 4 `{ask}` and `{print}` have changed.
                    You must put text that you want to print between quotation marks.
                    This is useful, because now you can print all the words you want. Also the words you used to store something with `{is}`.
                    Most programming languages also use quotation marks when printing, so we are also getting a step closer to real programming!
                example_code: |
                    ```
                    {print} 'You need to use quotation marks from now on!'
                    answer {is} {ask} 'What do we need to use from now on?'
                    {print} 'We need to use ' answer
                    ```
                story_text_2: |
                    ## Contractions
                    Important! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.
                    Make sure to remove those apostrophes and change the spelling to I am or What is.
                    Check out the example code to see the wrong way of using apostrophes.
                example_code_2: |
                    ```
                    _ This is the wrong way of using apostrophes _
                    {print} 'I'm babysitting my sister's kids'
                    {print} 'What's more fun than that?'
                    ```
            12:
                story_text: |
                    **All texts need to be in quotation marks**
                    For this level on you will also have to use quotation marks when storing a text with `=`:
                example_code: |
                    ```
                    name = 'Hedy the Robot'
                    {print} 'Hello ' name
                    ```
                story_text_2: |
                    **All items in lists need quotation marks too**
                    Lists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.
                    This allows you to save two words as 1 item on the list, for example 'Black Widow'.
                example_code_2: |
                    ```
                    superheroes = 'Spiderman', 'Batman', 'Black Widow'
                    {print} superheroes {at} {random}
                    ```
                story_text_3: |
                    **All text after `{if}` comparisons need quotation marks too**
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy the Robot'
                        {print} 'Hi there!'
                    ```
                story_text_4: |
                    **Numbers don't need quotation marks**
                    For numbers, you do not use quotation marks in the `=`:
                example_code_4: |
                    ```
                    score = 25
                    {print} 'You got ' score
                    ```
    random_command:
        name: '{random}'
        default_save_name: random_command
        description: introducing at random command
        levels:
            3:
                story_text: |
                    ## At random
                    In this level you can make a list using the `{is}` command. You can let the computer choose a random item from that list. You do that with `{at} {random}`.
                example_code: |
                    ```
                    animals {is} dogs, cats, kangaroos
                    {print} animals {at} {random}
                    ```
                story_text_2: |
                    You can use the `{at} {random}` command in a sentence as well.
                example_code_2: |
                    ```
                    food {is} sandwich, slice of pizza, salad, burrito
                    {print} I am going to have a food {at} {random} for lunch.
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the `{at} {random}` command by making your own gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!
                    Can you do it? We have already put the first lines into the example code.
                example_code_3: |
                    ```
                    {print} The big gameshow!
                    {print} There are 3 suitcases in front of you...
                    chosen {is} {ask} Which suitcase do you choose?
                    prices {is} _
                    _
                    ```
            16:
                story_text: |-
                    We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
                    We use square brackets to point out a place in a list. For example: `friends[1]` is the first name on the list of friends, as you can see in the first part of the example code. The second part of the example code shows you that we can also match 2 lists using the variable i.
                example_code: |
                    ```
                    friends = ['Ahmed', 'Ben', 'Cayden']
                    {print} friends[1] ' is the first friend on the list.'
                    {print} friends[2] ' is the second friend on the list.'
                    {print} friends[3] ' is the third friend on the list.'
                    #now we will match 2 lists using the variable i
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} friends[i] 's lucky number is ' lucky_numbers[i]
                    ```
                story_text_2: |-
                    Now that you've learned to use the brackets in lists, you can also start using the {at} {random} command in the Python way!
                    You simply type the name of your list with `[random]` behind it!
                example_code_2: |-
                    ```
                    fruit = ['apple', 'banana', 'cherry']
                    {print} fruit[random]
                    ```
    repeat_command:
        name: '{repeat}'
        default_save_name: repeat_command
        description: repeat command
        levels:
            7:
                story_text: |
                    ## Repeat! Repeat! Repeat!
                    Level 7 adds the `{repeat}` command.  `{repeat}` can be used to execute one line of code multiple times. Like this:

                    ### Exercise
                    Play around with the repeat command. Can you make the happy birthday song in only 3 lines of code instead of 4 now?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy is fun!'
                    ```
            8:
                story_text: |
                    ### Repeat commands and indentation
                    In this level you can repeat multiple lines of code with only 1 repeat command.
                    You do this by making a block of lines that you want to repeat.
                    The lines in this block will need **indentation** .
                    That means putting four spaces at the beginning of each line. You will also have to indent when you just want to create a block of one line.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} 'Hello everyone'
                        {print} 'This is all repeated 5 times'
                    ```
            9:
                story_text: |
                    Great job! You've reached another new level! In the previous level you've learned to use multiple lines of code in an {if} or {repeat} command. But you can't yet combine the two...
                    Good news! In this level you will be allowed to put an {if} inside an {if}, or inside a {repeat} command. Putting a block of code inside another block of code is called nesting.                     ``` Putting a block of code inside another block of code is called nesting.
                example_code: |
                    ```
                    answer = {ask} 'Are you ready to learn something new?'
                    {if} answer {is} yes
                        {print} 'Great! You can learn to use the repeat command in the if command!'
                        {print} 'Hooray!'
                        {print} 'Hooray!'
                        {print} 'Hooray!'
                    {else}
                        {print} 'Maybe you should practice some more in the previous level'
    repeat_command_2:
        name: '{repeat} 2'
        default_save_name: repeat_command_2
        description: repeat command 2
        levels:
            7:
                story_text: |
                    ## Repeat with other commands and with variables
                    You have practiced the `{repeat}` command in combination with the `{print}` command now, but did you know you could also use other commands with `{repeat}` ?
                    In this example code you can see that `{repeat}` can also be used with an `{ask}`, `{if}` or `{else}` command.
                example_code: |
                    ```
                    {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                    {if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'
                    {else} {repeat} 3 {times} {print} 'You have learned something new!'
                    ```
                story_text_2: |
                    Another interesting thing you can so with the `{repeat}` command is using variables to set the amount of times something should be repeated. In the example code you can see that we first ask the person how old they are.
                    Then, in line 3, the question is repeated 'age' times. So we have used the variable 'age' with the `{repeat}` command.
                example_code_2: |
                    ```
                    {print} 'Yay! It is your birthday!'
                    age = {ask} 'How old are you now?'
                    {repeat} age {times} {print} 'Hip Hip Hurray!'
                    ```
            8:
                story_text: |
                    ### In the block or not?
                    In this level you have to think carefully which lines of code should be in the block and which shouldn't.
                    For example: If you want to sing the song *the muffin man*. You only want the line with 'the muffin man' to be repeated twice.
                    This means the last line shouldn't start with indentation as it doesn't belong to the block.
                    If you do start the last line with indentation the song will turn out wrong.

                    ### Exercise
                    Each line in the example code starts with a blank. Remove the blanks and try to figure out which line need indentation and which don't to make the muffin man song.
                example_code: |
                    ```
                    _ {print} 'Do you know the muffin man?'
                    _ {repeat} 2 {times}
                    _ {print} 'The muffin man'
                    _ {print} 'Do you know the muffin man, who lives on Drury Lane?'
                    ```
    restaurant:
        name: Restorant
        default_save_name: Restorant
        description: Krijoni restorantin tuaj virtual
        levels:
            1:
                story_text: |
                    Në nivelin 1 ju mund të bëni restorantin tuaj virtual dhe të merrni porosi nga klientët.
                story_text_2: |
                    A mendoni rreshta tjerë që mund të shtoni në kodin e restorantit? Si për shembull, a mund ta {ask}(pyesni) klientit se çfarë do të pijë, tregojuni çmimin, ose uroj atyre një vakt të këndshëm?
                example_code_2: |
                    ```
                    {print} Mirë se erdhët në Restorantin e Hedy-it🍟
                    {ask} Çfarë doni të porositni?
                    {echo} Pra ju doni të porositni
                    {print} Faleminderit për porosinë tuaj!
                    {print} Është duke u bërë!
                    ```
            2:
                story_text: |
                    Në nivelin 2 mund ta zmadhoni kodin e restorantin duke përdorur variabla. Në nivelin 1 Hedy vetëm mund të përdorte komandën {echo} dhe të shfaq porosinë një herë dhe vetëm e mban mend porosinë e fundit.
                    Tani mund të përdorni variabla dhe Hedy mund të mbaje mend ushqimin dhe ëmëlsirat!
                example_code: |
                    ```
                    {print} Mirë se erdhët ne Restorantin e Hedy-it!
                    {print} Sot ne shërbejmë pica ose lazanja.
                    ushqimi {is} {ask} Çfarë doni të hani?
                    {print} Zgjedhje e mirë! Ky ushqim është e kam të preferuar!
                    majë {is} {ask} Dëshironi mish apo perime në të?
                    {print} ushqimi me majë është duke u bërë!
                    ```
                story_text_2: |
                    A mund ta bëni këtë kod më të përpunuar? Për shembull duke shtuar pije në porosi? Apo...?
            3:
                story_text: |
                    Having trouble to decide what you wanna have for dinner? You can let Hedy choose for you!
                    Simply add lists of your favorite (or least favorite) meals and Hedy can randomly choose your dinner.
                    You can also have a bit of fun, by letting Hedy choose the price for your dinner as well! What will you get?
                example_code: |
                    ```
                    {print} Mirë se erdhët në Restorantin e rastësishëm të Hedy-it!
                    {print} Restoranti i vetëm që do të zgjedhë ushqimin dhe çmimin për ju!
                    fillimi {is} sallatë, supë, karpacio
                    kryesore {is} pica, lakra brukseli, spageti
                    ëmbëlsirë {is} brownies, akullore, djathë francezë
                    pije {is} kola, birrë, water
                    çmimet {is} 10 lekë, 100 lekë, 1000 lekë
                    {print} Ju do të filloni me: fillimi {at} {random}
                    {print} Pastaj ne do të shërbejmë: kryesore {at} {random}
                    {print} Dhe pastaj: ëmbëlsirë {at} {random}
                    {print} Ju do të keni pije {at} {random} për të pirë
                    {print} Kjo do të jetë: çmimet {at} {random}
                    {print} Faleminderit dhe shijoni ushqimin tuaj!
                    ```
                story_text_2: |
                    A ka klienti juaj alergji apo nuk i pëlqejnë disa pjata? Më pas mund të përdorni komandën `{remove}` për ta hequr atë nga menyja juaj.
                example_code_2: |
                    ```
                    {print} Koktej me qumësht misterioze
                    shijet {is} luleshtrydhe, çokollatë, vanilje
                    alergjitë {is} {ask} A jeni alergji nga ndonjë shije?
                    _
                    {print} Ju keni shijet {at} {random} koktej me qumësht
                    ```
            4:
                story_text: |
                    ### Exercise
                    Add the quotation marks to this code to make it work! Be careful: variables should not be in quotation marks.
                    Then, use the `{clear}` command to only show one line at a time in your output screen.

                    ### Exercise 2
                    Go back to the previous level and copy your restaurant code. Make the code work in this level by adding quotation marks in the right spots and add some `{clear}` commands.
                example_code: |
                    ```
                    _ Add the quotation marks to this code _
                    {print} Mirë se erdhët ne restorantin Hedy!
                    {print} Sot ne shërbejmë pica ose lazanja.
                    ushqimi {is} {ask} Çfarë doni të hani?
                    {print} Zgjedhje e mirë!  ushqimi  është e preferuara ime!'
                    majë {is} {ask} Dëshironi mish apo perime në të?
                    {print} ushqimi  me  majë  është duke u bërë!'
                    pije {is} {ask} Çfarë do të dëshironit të pini me të?
                    {print} Faleminderit per porosinë.
                    {print} ushqimi  juaj dhe  pije  do të jenë këtu!'
                    ```
            5:
                story_text: |
                    Në këtë nivel komanda `{if}` ju lejon që të `{ask}`(pyesni) klientët tuaj dhe të trajtoni përgjigje të ndryshme.
                    Në shembullin më poshtë, ju mund ta shikoni që mund ta `{ask}`(pyesni) klientin `{if}`(nëse) duan ta dëgjojnë specialitetin dhe Hedy mund të përgjigjet varësisht çka thotë klienti .
                example_code: |
                    ```
                    {print} 'Mirë se erdhët në Restorant Hedy!'
                    specialitet {is} {ask} 'A doni të dëgjoni specilialitetin tonë sotë?'
                    {if} specialitet {is} po {print} 'E veçanta e sotme është mishi i pulës dhe orizi.' {else} {print} 'Ska problem.'
                    ushqimi {is} {ask} 'Çfarë dëshironi të hani?'
                    {print} 'Një ' ushqimi ', është duke arritur!'
                    pije {is} {ask} 'Çfarë dëshironi të pini?'
                    {if} pije {is} kola {print} 'Më falni, nuk kemi kola!' {else} {print} 'Zgjedhje e mirë!'
                    çfarëdo {is} {ask} 'A dëshironi diçka {else}(tjetër)?'
                    {print} 'Më lejo të përsërisë porosinë tuaj...'
                    {print} 'Një ' ushqimi
                    {if} pije {is} kola {print} 'dhe...' {else} {print} 'Një ' pije
                    {if} çfarëdo {is} jo {print} 'Kjo ishte!' {else} {print} 'Një ' çfarëdo
                    {print} 'Faleminderit për porosinë tuaj dhe shijoni ushqimin tuaj!'
                    ```
            6:
                story_text: |
                    Në këtë nivel mund të përdorni matematikën për të kalkuluar çmimin total të klientit tuaj, e cila do ta bëjë restorantin tuaj më reale.
                example_code: |
                    Ju mund ta bëni një kod të thjeshtë për restorant, si kështu:
                    ```
                    {print} 'Mirë se erdhët në Restorant Hedy'
                    {print} 'Kjo është menu-ja jonë:'
                    {print} 'Kurset tona kryesore janë pica, lazanja ose spageti'
                    kryesore = {ask} 'Cilin pjatë kryesore do të dëshironit?'
                    çmimi = 0
                    {if} kryesore {is} pica çmimi = 10
                    {if} kryesore {is} lazanja çmimi = 12
                    {if} kryesore {is} spageti çmimi = 8
                    {print} 'Ju keni porositur ' kryesore
                    {print} 'Kjo do të kushtojë ' çmimi ' lekë.'
                    {print} 'Faleminderit, shijoni vaktin tuaj!'
                    ```
            7:
                story_text: |
                    Në këtë nivel keni mësuar të përdorni komandën `{repeat}` që të përsëritni një rresht kodi disa herë.
                    Ju mund ta përdorni atë në restorant që të `{ask}`(pyesni) disa njerëz se çfarë duan të hanë.

                    ### Sfidë
                    Mund të plotësoni vendet bosh? Hedy duhet ta përsërisë këtë pyetje sa herë ka njerëz. Pra, nga 5 persona, pyetja duhet bërë 5 herë.
                example_code: |
                    ```
                    {print} 'Mirë se erdhët në Restorant Hedy!'
                    njerëzit = {ask} 'Sa njerëz po na bashkohen sot?'
                    {repeat} _ {times} ushqimi = {ask} 'Çfarë doni të hani?'
                    {print} 'Faleminderit për porosinë tuaj. Është duke u bërë!'
                    ```
            8:
                story_text: |
                    Në këtë nivel mund ta bëni restorantin tuaj virtual më të përpunuar duke përsëritur disa rreshta kodi. Si kështu:

                    ### Exercise
                    This code can be expanded with more items on the menu, for example offering drinks, and/or multiple courses or desserts. Add at least one more item.
                    **Extra** Add even more items, as many options as you like!
                example_code: |
                    ```
                    {print} 'Mirë se erdhët në Restorant Hedy!'
                    njerëzit = {ask} 'Sa njerëz do të na bashkohen sot?'
                    {print} 'Mirë!'
                    {repeat} njerëzit {times}
                        ushqimi = {ask} 'Çfarë doni të porositni?'
                        {print} ushqimi
                    {print} 'Faleminderit për porosinë!'
                    {print} 'Enjoy your meal!'
                    ```
            9:
                story_text: |
                    Në këtë nivel ju mund të përdorni komandë ndër komandë për ta bërë restorantin tuaj më realist dhe më argëtues!
                    Për shembull, ju do të kërkoni salcë nëse dikush porosit patate të skuqura, por nuk do të kërkoni nëse dikush porosit pica!

                    ### Sfidë
                    Kjo është një sfidë për trurinakët e vërtetë! Çdo rresht që ka nevojë për hapësirë përpara i është dhënë një vijë bosh.
                    A mund të kuptoni se sa hapësirë para rreshti i nevojitet çdo rreshti në mënyrë që kodi të funksionojë siç duhet?
                    Paç fat!
                    KËSHILLA: Nëse klienti porosit pica, Hedy nuk duhet të pyesë se çfarë salce dëshiron klienti.
                example_code: |
                    ```
                    {print} 'Mirë se erdhët në Restorant Hedy!'
                    njerëzit = {ask} 'Sa njerëz do të na bashkohen sot?'
                    {print} 'Mirë!'
                    çmimi = 0
                    {repeat} njerëzit {times}
                    _ ushqimi = {ask} 'Çfarë dëshironi të porosisni?'
                    _ {print} ushqimi
                    _ {if} ushqimi {is} patate
                    _ çmimi = çmimi + 3
                    _ salcë = {ask} 'Çfarë lloj salce do të dëshironit me patatet tuaja?'
                    _ {if} salcë {is} jo
                    _ {print} 'ska salcë'
                    _ {else}
                    _ çmimi = çmimi + 1
                    _ {print} 'me ' salcë
                    _ {if} ushqimi {is} pica
                    _ çmimi = çmimi + 4
                    {print} 'Kjo do të jetë ' çmimi ' lekë'
                    {print} 'Të bëftë mirë!'
                    ```
            10:
                story_text: |
                    Në këtë nivel do të mësoni se si të {ask} (pyesni) me lehtësi për porositë e mysafirëve tuaj në një kod të shkurtër.
                example_code: |
                    ```
                    kurset = meze, pjatë kryesore, ëmbëlsirë
                    {for} kurs {in} kurset
                        ushqimi = {ask} 'Çfarë do të dëshironit të hani si ' kurs ' tuaj?'
                        {print} ushqimi ' do të jetë ' kurs
                    ```
                story_text_2: |
                    Sigurisht, mund të porosisni edhe për shumë njerëz!
                    A mund të shtoni sasinë e saktë të hapësirave para rreshtit për ta bërë kodin të funksionojë siç duhet?
                    KËSHILLA: disa rreshta nuk kanë nevojë fare për ndonjë dhëmbëzim.
                example_code_2: |
                    ```
                    _ kurset = meze, pjatë kryesore, ëmbëlsirë
                    _ emrat = Timi, Onati
                    _ {for} emri {in} emrat
                    _ {for} kurs {in} kurset
                    _ ushqimi = {ask} emri ', çfarë do të dëshironit të hani si 'kurs' tuaj?'
                    _ {print} emri ' porositën ' ushqimi ' si ' kurs
                    ```
            11:
                story_text: |
                    Mund ta përdorim `{for} i {in} {range} 1 {to} 5` për të `{print}` porositë nga shumë klientë në mënyrë të rregullt.

                    ### Exercise
                    Can you handle another indentation challenge? Get the code to work properly by adding the right amount of indentation before each line!
                example_code: |
                    ```
                    {print} 'Mirë se erdhët në Restorant Hedy!'
                    njerëzit = {ask} 'Për sa persona dëshironi të porosisni?'
                    {for} i {in} {range} 1 {to} njerëzit
                    _ {print} 'Porosija numër ' i
                    _ ushqimi = {ask} 'Çfarë do të dëshironit të hani?'
                    _ {print} ushqimi
                    _ {if} ushqimi {is} patate
                    _ salcë = {ask} 'Çfarë lloj salce do të dëshironit me të?'
                    _ {print} sauce
                    _ pije = {ask} 'Çfarë dëshironi të pini?'
                    _ {print} pijet
                    çmimi = 4 * njerëzit
                    {print} 'Kjo do të jetë ' çmimi ' lekë!'
                    ```
            12:
                story_text: |
                    Nga ky nivel e tutje, mund të përdorni numra dhjetorë për ta bërë menu-në tuaj më realiste.

                    ### Sfidë
                    A mund të mendoni për një kod për t'u dhënë miqve dhe familjes suaj një zbritje prej 15%?
                example_code: |
                    ```
                    çmimi = 0
                    ushqimi = {ask} 'Çfarë dëshironi të porosisni?'
                    pije = {ask} 'Cfare do te pish?'
                    {if} ushqimi {is} 'hamburger'
                        çmimi = çmimi + 6.50
                    {if} pije {is} 'pica'
                        çmimi = çmimi + 5.75
                    {if} pije {is} 'uj'
                        çmimi = çmimi + 1.20
                    {if} pije {is} 'kola'
                        çmimi = çmimi + 2.35
                    {print} 'Kjo do të jetë ' çmimi ' lekë'
                    ```
            13:
                story_text: |
                    Në këtë nivel ne mund të përdorim komandat e reja për të përmirësuar restorantin tonë.
                    Ne përdorim komandën `{and}` të shikojmë {if}(nëse) dy gjera jane të njëjta.
                example_code: |
                    ```
                    çmimi = 10
                    ushqimi = {ask} 'Çfarë do të dëshironit të hani?'
                    pije = {ask} 'Çfare do te pish?'
                    {if} ushqimi {is} 'sanduiç' {and} pije {is} 'lëng'
                        {print} 'Kjo është menyja jonë e zbritjes'
                        çmimi = çmimi - 3
                    {print} 'Kjo do të jetë ' çmimi ' lekë'
                    ```
            15:
                story_text: |
                    Me komandën `{while}` mund të siguroheni që klientët tuaj të mund të vazhdojnë të shtojnë porosi derisa të mbarojnë.
                    ### Exercise
                    Correctly add the `{while}` command to this code.
                example_code: |
                    ```
                    {print} 'Mirë se vini në McHedy'
                    më_shumë = 'po'
                    _
                        porosia = {ask} 'Çfarë dëshironi të porosisni?'
                        {print} porosia
                        më_shumë = {ask} 'A dëshironi diçka {else}(tjetër)?'
                    {print} 'Falemenderit!'
                    ```
    rock:
        name: Gur, letër, gërshërë
        default_save_name: Gur
        description: Bëjeni lojën tuaj me gur, letër, gërshërë
        levels:
            1:
                story_text: |
                    Në nivelin 1, ju mund të filloni me lojën gur, letër, gërshërë.

                    Me komandën `{ask}` ju mund të bëni një zgjidhje, dhe me komandën `{echo}` ju mund ta përsëritni atë zgjidhje.
                example_code: |
                    ```
                    {print} çfarë zgjidhni?
                    {ask} zgjidhni gur, letër apo gërshërë
                    {echo} zgjidhja e juaj ishte:
                    ```
                story_text_2: |
                    Në vend që të përdorni fjalë, mund të përdorni edhe emoji: ✊✋✌
                    A mund të krijoni një kod duke përdorur emojis?
                example_code_2: |
                    ```
                    {print} çfarë zgjidhni?
                    {ask} zgjidhni nga _
                    {echo} kështu që zgjedhja juaj ishte:
                    ```
            2:
                story_text: |
                    Në këtë nivel mund ti praktikoni variablat, kështu që mund ta bëni lojën gur, letër, gërshërë në nivelin tjetër!
                example_code: |
                    ```
                    _ {is} {ask} gur, letër, ose gërshërë?
                    {print} Unë zgjedh _
                    ```
            3:
                story_text: |
                    Në këtë nivel mund të futni një listë and të zgjidhni nga ajo.
                    Në fillim e bëni një listë me komandën `{is}`. Dhe pastaj mund ta bëni që kompjuteri za zgjedhë një nga lista me komandën `{at} {random}`.
                    Si për shembull, ju mund ta bëni që kompjuteri të zgjedhë gur, letër, gërshërë.
                example_code: |
                    ```
                    zgjedhjet {is} gur, letër, gërshërë
                    {print} zgjedhjet {at} {random}
                    ```
                story_text_2: |
                    Tani ju keni vetëm një lojtar, kështu që mund të shtoni një lojtar të dytë?
                    Mund të përdorni edhe variabla për të emërtuar lojtarin 1 dhe lojtarin 2.
                example_code_2: |
                    ```
                    zgjedhje {is} gur, letër, gërshërë
                    {print} lojtari 1 zgjedh... zgjedhje {at} {random}
                    {print} lojtari 2 _
                    ```
            4:
                story_text: |
                    In this level we can further program rock, paper, scissors. But if you want to add text, you have to use quotation marks here too.
                    ### Exercise
                    Fill in quotation marks on the blanks. Mind that the variable `choices` should be outside the quotes.
                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} _The computer chooses..._ choices {at} {random}
                    ```
            5:
                story_text: |
                    Në këtë nivel mund ta përcaktoni kush fitoi.
                    Për këtë ju duhet komanda `{if}`.

                    Rruani zgjedhjen tuaj me emrin zgjedhja dhe zgjedhjen e kompjuterit me emrin zgjedhja_kompjuterit.
                    Pastaj mund të përdorni komandën `{if}` të shikoni {if} (nëse) janë të njëjta apo të ndryshme.
                    A do ta përfundoni kodin?
                example_code: |
                    ```
                    opsionet {is} gur, letër, gërshërë
                    zgjedhja_kompjuterit {is} _
                    zgjedhja {is} {ask} 'Çfarë zgjidhni?'
                    {print} 'Ju zgjodhët ' _
                    {print} 'Kompjuteri zgjodhi ' _
                    {if} _ {is} _ {print} 'barazim!' {else} {print} 'ska barazim'
                    ```

                    Mbusheni boshllëqet {if} (nëse) është barazim.
            9:
                story_text: |
                    Në këtë nivel mund ta programi gjithë lojën gur, letër, gërshërë duke përdorur komandën {if} një mbi një. A mund ta përfundoni kodin?
                example_code: |
                    ```
                    zgjedhjet = gur, letër, gërshërë
                    zgjedhja_juaj = {ask} 'Çfarë zgjidhni?'
                    {print} 'Ju zgjodhët ' zgjedhja_juaj
                    zgjedhja_kompjuterit = zgjedhjet {at} {random}
                    {print} 'Kompjuteri zgjodhi ' zgjedhja_kompjuterit
                    {if} zgjedhja_kompjuterit {is} zgjedhja_juaj
                        {print} 'Barazim'
                    {if} zgjedhja_kompjuterit {is} gur
                        {if} zgjedhja_juaj {is} letër
                            {print} 'Ju fitoni!'
                        {if} zgjedhja_juaj {is} gërshërë
                            {print} 'Ju humbët!'
                    # përfundoni kodin
                    ```
            10:
                story_text: |
                    Ju mërzitet që të luani lojën vetë? Lëreni Hedy të luajë për ju!
                    Mjafton të plotësoni emrat e lojtarëve.
                example_code: |
                    ```
                    zgjedhjet = gur, letër, gërshërë
                    lojtarët = _
                    {for} lojtari {in} lojtarët
                         {print} lojtari ' ka zgjedhur ' zgjedhjet {at} {random}
                    ```
            13:
                story_text: |
                    Me komandën `{and}` mund ta shkurtoni kodin tuaj për gur, letër, gërshërë! Shikoni shembullin më poshtë dhe tentoni ta përfundoni.
                example_code: |
                    ```
                    opsionet = 'gur', 'letër', 'gërshërë'
                    zgjedhja_juaj = {ask} 'Çfarë zgjidhni?'
                    zgjedhja_kompjuterit = opsionet {at} {random}
                    {print} 'Ju keni zgjedhur ' zgjedhja_juaj
                    {print} 'Kompjuteri ka zgjedhur ' zgjedhja_kompjuterit
                    {if} zgjedhja_kompjuterit {is} zgjedhja_juaj
                        {print} 'Barazim'
                    {if} zgjedhja_kompjuterit {is} 'gur' {and} zgjedhja_juaj {is} 'letër'
                        {print} 'Ju fitoni!'
                    {if} zgjedhja_kompjuterit {is} 'gur' {and} zgjedhja_juaj {is} 'gërshërë'
                        {print} 'Kompjuteri fiton!'
                    _
                    ```
            15:
                story_text: |
                    Luani derisa ta fitoni kompjuterin! Por fillimisht, përfundoni shembullin e dhënë...
                example_code: |
                    ```
                    fituat = 'jo'
                    opsionet = 'gur', 'letër', 'gërshërë'
                    {while} fituat == 'jo'
                        zgjedhja_juaj = {ask} 'Çfarë zgjidhni?'
                        zgjedhja_kompjuterit = opsionet {at} {random}
                        {print} 'Ju zgjodhët ' zgjedhja_juaj
                        {print} 'Kompjuteri zgjodhi ' zgjedhja_kompjuterit
                        {if} zgjedhja_kompjuterit == zgjedhja_juaj
                            {print} 'Barazim!'
                        {if} zgjedhja_kompjuterit == 'gur' {and} zgjedhja_juaj == 'gërshërë'
                            {print} 'Ju humbët!'
                        {if} zgjedhja_kompjuterit == 'gur' {and} zgjedhja_juaj == 'letër'
                            {print} 'Ju fitoni!'
                            fituat = 'po'
                    _
                    ```
    rock_2:
        name: Rock, paper, scissors 2
        default_save_name: rock_2
        description: Part 2 of rock, paper, scissors
        levels:
            2:
                story_text: |
                    Now that you have learned how to use the `{ask} command, you can make your rock, paper, scissors code interavtive too!

                    ### Exercise
                    Make the rock, paper, scissors code interactive by adding the `{ask}` command and a question to your rock, paper, scissors code.
                example_code: |
                    ```
                    choice is _
                    {print} I choose choice
                    ```
    secret:
        name: Super spiuni
        default_save_name: Super spiuni
        description: Bëni kodin tuaj të spiunazhit
        levels:
            12:
                story_text: |
                    Në këtë aventurë ju mund të krijoni kodin tuaj super spiun. Kodoni një mesazh që vetëm agjenti i duhur mund ta deshifrojë.
                    Nëse armiku përpiqet të thyejë kodin, ata do të marrin disa informacione të rreme për të humbur kohën e tyre.

                    ### Sfidë
                    Bëni kodin tuaj sekret për superspiunin tuaj. A mund ta bëni atë të përbëhet nga edhe më shumë variabla?
                example_code: |
                    ```
                    emri = {ask} 'Cili është emri juaj?'
                    {if} emri {is} 'Agent007'
                         a = 'Shko në aeroport'
                    {else}
                         a = 'Shko në stacionin e trenit'
                    fjalëkalimi = {ask} "Cili është fjalëkalimi?"
                    {if} fjalëkalimi {is} "TOPSECRET"
                         b = 'nesër në 02:00'
                    {else}
                         b = 'sot në orën 10:00'
                    {print} a + b
                    ```
            13:
                story_text: |
                    A mund të plotësoni komandën e duhur në vendin bosh? Mendja: Superspiuni duhet t'u përgjigjet saktë të DY pyetjeve, përpara se të marrë informacionin konfidencial!
                example_code: |
                    ```
                    emri = {ask} 'Cili është emri juaj?'
                    fjalëkalimi = {ask} "Cili është fjalëkalimi juaj?"
                    {if} emri {is} 'Agent007' _ fjalëkalimi {is} 'TOPSECRET'
                         {print} 'Shko në aeroport në orën 02:00'
                    {else}
                         {print} 'Shko në stacionin e trenit në orën 10:00'
                     ```
    simon:
        name: Simon Says
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    Let's make a game of Simon Says! Simon Says is a memory game in which the player will be given a color. They have to repeat that color back.
                    If they get it right a color is added to the sequence, so they now have to remember 2 colors, then 3, then 4 etc. the game stops as soon as the player makes a mistake.

                    ### Exercise
                    In this first part of the Simon Says adventure, we'll let the computer pick a random color and add it to a list.

                    ***Make 2 lists*** First, make a list called `colors` and fill it with the colors red, yellow, green and blue.
                    Then make a list called `simon_sequence`. This list will be used as the answer.
                    At the start of the game this lists need to be empty. unfortunately, we can't create an empty list (yet), so we'll fill it with the words 'empty' and 'list' and we'll remove them from the list immediately.

                    ***Create a function that adds a color to the sequence*** Now that we have an empty list called simon_sequence, we can start filling it with random colors.
                    We do that with a function, so we can call it everytime there's a new level in our game. Create a function called `add_random_color`.
                    Then create the variable random_color and set it to a random color. Next, add this random color to the simon_sequence.

                    ***Create a function that shows the simon_sequence*** Start by naming the new function `show_simon_sequence` with `level` as an argument. Now we want to show as many colors as the level we are in (in level 1 you see 1 color, in level 2 you see 2 colors etc).
                    So we repeat `level` times, to print the `simon_sequence[i]`. Each time a color is shown, wait for 1 second and then clear the screen.

                    ***Test your program*** Before you go to the next level, test if the functions are working by calling both of the functions. If they're working you should see a random color in your output screen.
                    Remove this testing part of your code, copy the code and continue to the next tab to learn more about the simon says game!
                example_code: |
                    ```
                    # Make 2 lists
                    colors = _
                    _ = ['empty', 'list']
                    {remove} _ {from} simon_sequence
                    {remove} _

                    # Create a function that adds a color
                    _ add_random_color
                        _
                        {add} _

                    # Create a function that shows the simon_sequence
                    {define} _
                        {for} i {in} {range} 1 {to} _
                            {print} _
                            _
                            _

                    # Test your program
                    {call} _
                    {call} show_simon_sequence {with} 1
                    ```
    simon_2:
        name: Simon Says 2
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    We'll continue with our Simon Says game!

                    ### Exercise
                    ***Paste your code here*** Paste your code from the previous level here. Don't forget to remove the part that was just used for testing the functions.

                    ***Create a function that creates the player_sequence*** The list `player_sequence` is used to capture the answers of the player. First we define the function with the argument level.
                    Next, we ask level times what the color is that they choose. We call that variable `answer`. Then we add the variable `answer` to the list player_sequence.

                    ***Setting up the game*** Before we program the game in the next tab, we'll need some starting variables. First, we'll set the variable `level` to 1 and the variable `game_over` to False.
                    Then we make an introduction for the game. We'll print 'Welcome to Simon Says!' and clear the screen after 1 second.

                    ***Continue to the next tab to finish the game!**** Don't forget to copy your code and take it with you to the next tab.
                example_code: |
                    ```
                    # Paste your code here


                    # Create a function that creates the player_sequence
                    {define} _
                        {for} _
                            _ 'What is color number ' i '?'
                            {add} answer {to} _

                    # Set up
                    level = _
                    game_over = _
                    {print} _
                    _ 1
                    _
                    ```
    simon_3:
        name: Simon Says 3
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    In this tab we'll program the game of Simon Says!

                    ### Exercise
                    ***Paste your code*** Copy your code from the previous tab and paste it here.

                    ***Program the game*** We start by making sure the game goes on while the game isn't over. Then we print what level the player is on, we use the variable level for that. We only show that for 1 second and then we clear the screen again.
                    Now, we have to create the empty list player_sequence. We've already programmed how to fill the list, with our function `player_sequence`, but we never made the list itself. To create the list we use the same trick as we did in the previous tab.
                    We'll make a list with the words 'empty' and 'list' on it, and then we remove both these words. Next, we'll call all of the 3 functions that we've created.
                    Lastly, we'll have to check if the player gave the correct answers (so if the player_sequence and the simon_sequence are the same).
                    If that's the case, we'll compliment the player. Wait for 1 second and increase the level with 1.
                    Did the player give the wrong answer, we'll tell them and end the game by setting game_over to 'True'

                    ***Enjoy your game!*** Great job! Does your game not work? Use the ladybug button to debug your code!
                example_code: |
                    ```
                    # Paste your code here

                    # The game
                    {while} game_over _
                        {print} _
                        _
                        _
                        _ = ['empty', 'list']
                        {remove} _
                        {remove} _
                        {call} _
                        {call} _ {with} _
                        {call} _ {with} _
                        {if} player_sequence == _
                            _
                            _
                            _
                        {else}
                            _
                            game_over = _
                    ```
    sleep_command:
        name: '{sleep}'
        default_save_name: sleep_command
        description: introducing sleep command
        levels:
            2:
                story_text: |
                    ## The sleep command
                    Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.
                example_code: |
                    ```
                    {print} My favorite colour is...
                    {sleep} 2
                    {print} green!
                    ```
    songs:
        name: Këndo një këngë!
        default_save_name: Këngë
        description: Printo një këngë
        levels:
            6:
                story_text: |
                    Këngët shpesh herë kanë shumë përsëritje. Ndonjëherë përsëritja është e bazuar në numërim.
                    Për shembull, në këngën e njohur 'Shishe birre'. Ju mund ta programoni këngën me pak matematik.

                    Këshillë: Përdorni funksionin e leximit me zë për ta lënë Hedy-n t'ju këndojë këngën!

                    ### Sfidë
                    Tani mund të përsërisni rreshtat 2 deri në 7 sa herë të dëshironi duke kopjuar rreshtat.
                example_code: |
                    ```
                    vargu = 99
                    {print} vargu ' shishe birre në mur'
                    {print} vargu ' shishe birre'
                    {print} 'Hiqe njërën, kaloje përreth'
                    vargu = vargu - 1
                    {print} vargu ' shishe birre në mur'
                    {sleep}
                    ```
                story_text_2: |
                    Kjo këngë për fëmijë numëron mbrapsht nga 5 majmunë të vegjël në 1 majmun.
                    Nëse kopjoni rreshtin 2 - 7 dhe ngjisni nën kodin, mund të këndoni të gjithë këngën!
                example_code_2: |
                    ```
                    numri = 6
                    numri = numri - 1
                    print numri "majmunët e vegjël që kërcejnë në shtrat"
                    print 'Një ra dhe përplasi kokën'
                    print 'Mami thirri doktorin dhe doktori tha'
                    print 'JO MË MAJMUNE QË KËRREN NË SHTRAT!'
                    sleep
                    ```
            7:
                story_text: |
                    Këngët shpesh herë kanë përsëritje. Për shembull... Peshkaqeni i vogël! Nëse e këndoni, ju vazhdoni të këndoni të njëjtën gjë:

                    Peshkaqeni i vogël tututudutudu <br>
                    Peshkaqeni i vogël tututudutudu <br>
                    Peshkaqeni i vogël tututudutudu <br>
                    Peshkaqeni i vogël

                    Ju mund ta bëni këtë këngë më të shkurtë me komdanën `{repeat}`! A mund ta përfundoni kodin?
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Peshkaqeni i vogël tututudutudu'
                    {print} 'Pëshkaqeni i vogël'
                    ```

                    Pas Peshkani i vogël, ju mund të programi këngë të tjera. Ka shumë këngë me përsëritje.
            8:
                story_text: |
                    Në nivelin e mëparshëm, ju e keni programuar këngën 'Shishe birre'. Ju e bëtë një varg dhe u deshtë që të kopjoni vargun 99 herë. Në nivelin 7 ju mund të përsëritni këngën 99 herë, vetëm duke shtuar një rresht kodi!
                    A e dini se cilën rresht kodi të shtoni në boshllëqet?
                example_code: |
                    ```
                    vargu = 99
                    _ _ _
                        {print} vargu ' shishe birre në mur'
                        {print} vargu ' shishe birre'
                        {print} 'Hiqeni njërën, kaloje përreth'
                        vargu = vargu - 1
                        {print} vargu ' shishe birre në murr'
                    ```
            10:
                story_text: |
                    Në këtë nivel ju mund thjeshtë të bëni këngën për fëmijë ' këngën 'Pesë fëmijët majmun'. A mund ta bëni korin e fundit?
                    Ju mund ta bëni të gjithë këngën e Peshkaqenit të vogël (duke përmbajtur të gjithë peshkaqenët në familje) në vetëm 6 rreshta, Duke përdorur komandën `{for}`
                    Ose ju mund ta bëni Mek Donald i vjetër me të gjitha kafshët e ndryshme.



                    A mund të shtoni vargun e fundit të majmunëve në shtrat, kur ka mbetur vetëm një majmun?

                    A mund ta bëni kodin e foshnjës së peshkaqenit edhe më të shkurtër duke përdorur një komandë `{repeat}`?

                    A mund të shtoni kafshë të reja në fermën e Old MacDonald's?
                example_code: |
                    ```
                    majmunët = 5, 4, 3, 2
                    {for} majmuni {in} majmunët
                        {print} majmuni ' majmunët e vogël duke kërcyer në shtrat'
                        {print} 'Njëri rra dhe vrau kokën'
                        {print} 'Nëna e thëriti doktorin dhe doktori tha'
                        {print} 'Jo më majmunët të kërcojnë në shtrat!'
                    ```

                    ```
                    peshkaqenët = i vogli, nëna , babai, gjyshja, gjyshi
                    {for} peshkaqeni {in} peshkaqenët
                        {print} peshkaqeni ' peshkaqeni tututututudu'
                        {print} peshkaqeni ' peshkaqeni tututututudu'
                        {print} peshkaqeni ' peshkaqeni tututututudu'
                        {print} peshkaqeni ' peshkaqeni '
                    ```
                    ```
                    kafshët = derri, qeni, lopa
                    {for} kafsha {in} kafshët
                        {if} kafsha {is} derri
                            zëri = oink
                        {if} kafsha {is} qeni
                            zëri = auf
                        {if} kafsha {is} lopa
                            zëri = muuuu
                        {print} 'Mek Donald i vjetër kishte një fermë'
                        {print} 'I A I A O!'
                        {print} 'dhe në këtë fermë ai kishte një ' kafsha
                        {print} 'I A I A O!'
                        {print} 'me një ' zëri zëri ' këtu'
                        {print} 'dhe një ' zëri zëri' atje'
                        {print} 'këtu një ' zëri
                        {print} 'atje një ' zëri
                        {print} 'gjithkund një ' zëri zëri
                    ```
                story_text_2: |
                    ### Exercise 2
                    Print the song Five little moneys jumping on the bed. Look up the text if you don't remember.

                    **(extra)** Print the song Old MacDonald had a farm, and make sure all animals make a different sound, using an `{if}`.
                example_code_2: |
                    ```
                    monkeys = 5, 4, 3, 2, 1
                    ```
            11:
                story_text: |
                    Në këtë nivel ju mund të përdorni komandën `{for} i {in} {range}` të bëni muzika që përdorin numërim, si në 5 majmunët e vegjël.

                    ### Sfidë
                    Plotësoni vendet bosh dhe bëni kodin të funksionojë!
                example_code: |
                    ```
                    _ _ _ _ 5 _ 1
                        {print} i 'majmunët e vogël kërcejnë në shtrat'
                        {print} 'Njëri rra dhe vrau kokën'
                        {print} 'Nëna thërriti doktorin dhe doktori tha'
                        {if} i {is} 1
                            {print} 'Vendoseni këto majmunë drejt në shtrat!'
                        {else}
                            {print} 'Jo më majmunët të kërcejnë në shtrat'
                    ```
            12:
                story_text: |
                    Në këtë këngë ne mund ta bëjmë ende më të lehtë të programojmë '{if} jeni të lumtur dhe e dini, duartrokitni'. Sepse mund ti vendosim të gjitha veprimet në një variabël, shiheni:

                    ### Sfidë
                    A mund të shtoni sasinë e duhur të hapësirave përpara, në çdo rresht për ta bërë që kënga të luajë saktë?
                    Mendje: Jo të gjitha rreshtat kanë nevojë për hapësirë përpara
                example_code: |
                    ```
                    _ veprimet = 'duartrokitni', 'sheklni me këmbët tuaja', 'thirrni URAA!'
                    _ {for} veprim {in} veprimet
                    _ {for} i {in} {range} 1 {to} 2
                    _ {print} 'Nëse jeni të lumtur dhe e dini'
                    _ {print} veprim
                    _ {print} 'Nëse jeni të lumtur dhe e dini dhe vërtet doni ta tregoni'
                    _ {print} 'Nëse jeni të lumtur dhe e dini'
                    _ {print} veprim
                    ```
            13:
                story_text: |
                    In the previous adventure you have learned how to use an argument in a function, but did you know that you could combine them with {ask} commands as well?
                    In this example we have changed the 'My Bonnie' program and made it interactive. You are now asked where Bonnie is.
                example_code: |
                    ```
                    {define} song {with} place
                        {print} 'My Bonnie is ' place

                    chosen_place = {ask} 'Where do you want Bonnie to be?'
                    synonym = {ask} 'What is another word for that?'

                    {call} song {with} chosen_place
                    {call} song {with} synonym
                    {call} song {with} chosen_place
                    ```
            16:
                story_text: |
                    Në këtë nivel, ju mund ta programoni një këngë si Mek Donald i vjetër edhe më shpejtë. Ju mund ta lidhni kafshën e saktë me zërin e saktë thjeshtë duke i vënë me një vend në listë.
                    Marinari i dehur gjithashtu mund të bëhet shpejtë. Ju duhet vetëm 8 rreshta për të gjithë këngën, shiheni!
                example_code: |
                    ```
                    kafshët = ['derri', 'qeni', 'lopa']
                    zërat = ['oink', 'auf', 'muuu']
                    {for} i {in} {range} 1 {to} 3
                        kafsha = _
                        zëri = _
                        {print} 'Mek Donald i vjetër kishte një fermë'
                        {print} 'I A I A O!'
                        {print} 'dhe në këtë fermë ai kishtë një ' kafsha
                        {print} 'E I E I O!'
                        {print} 'me një ' zëri zëri ' këtu'
                        {print} 'dhe një ' zëri zëri ' atje'
                        {print} 'këtu një ' zëri
                        {print} 'atje një ' zëri
                        {print} 'gjithkund një ' zëri zëri
                    ```

                    ```
                    rreshtat = ['Çfarë duhet të bëjmë me marinarin e dehur', 'Rruajeni barkun e tij me brisk të ndryshkur', 'futeni në një varg derisa të jetë esëll']
                    {for} rreshti {in} rreshtat
                        {for} i {in} {range} 1 {to} 3
                            {print} rreshti
                        {print} 'herët në mëngjes'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'Eheei dhe ja ku ngritet'
                        {print} 'herët në mëngjes'
                    ```
            18:
                story_text: |
                    In level 16 we made songs using lists. These programs however are no longer working properly in this level. The colons from level 17 and the brackets from level 18 still need to be added.

                    ### Exercise 1
                    The Drunken sailor song is given as sample code, but not yet working.
                    Can you make sure everything works again? To help you, we've put _ in the places of _some_ errors.

                    ### Exercise 2
                    Now also look up your Old MacDonald song from level 16, and correct it.
                example_code: |
                    ```
                    lines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} line {in} lines _
                        {for} i {in} {range} 1 {to} 3 _
                            {print} _ line _
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
    songs_2:
        name: Sing a song! 2
        default_save_name: Song 2
        description: Sing a song 2
        levels:
            12:
                story_text: |
                    Songs contain a lot of repetition. We can capture it with a function!
                    ### Exercise
                    Look at the example code with the function. Fill out the two lines so the full song is printed.
                example_code: |
                    ```
                    {define} twinkle
                        {print} 'Twinkle'
                        {print} '...'

                    {call} twinkle
                    {print} 'Up above the world so high'
                    {print} 'Like a diamond in the sky'
                    {call} _
                    ```
            16:
                story_text: |
                    ### Exercise
                    Finish the nursery rhyme!
                example_code: |
                    ```
                    number = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
                    object = ['on his drum', 'on his shoe', 'on his knee', 'on his door', 'on his hive', 'on his sticks', 'up in heaven', 'on his gate', 'on his vine', 'once again']

                    _
                        {print} 'This old man'
                        {print} 'He played ' _
                        {print} 'He played knick-knack ' _
                        {print} 'With a knick-knack paddywhack'
                        {print} 'Give the dog a bone'
                        {print} 'This old man came rolling home'
                        {sleep} 8
                        {clear}
                    ```
                story_text_2: |
                    ### Exersice 2
                    Now create your own code for the nursery rhyme 'The wheels on the bus' on the same way!
                example_code_2: |
                    ```
                    object = ['wheels', 'doors', _]
                    movement = [ 'round and round', 'open and shut', _]
                    ```
    tic:
        name: Tic-Tac-Toe
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    Let's program a game of tic-tac-toe!

                    ### Exercise
                    In this adventure we'll start with creating an empty field.

                    ***Create a list called field*** This list will be our playing field. This list is filled with 9 dots, since there are no x's and o's yet at the start of our game.

                    ***Create a function that prints the field*** Firstly, clear the screen so the old playing fields will be removed. Then we print the first line of our Tic Tac Toe field. This line constists of the first 3 spots in our list field.
                    We have already programmed this line for you. Now finish the field by printing spot 4, 5, and 6 on the second row and spot 7, 8 and 9 in the third row.

                    ***Call the function that prints the field*** Now call the function.
                    <div class="w-full flex flex-row gap-2">
                        Run the code. Your output should look like this: <img src="https://github.com/hedyorg/hedy/assets/80678586/bcbd156e-4b48-4e82-84ae-f86d21b0cbcc" width="100">
                    </div>

                    ***Continue in the next tab*** In the next tab you'll learn how to program the game itself.
                example_code: |
                    ```
                    # Create a list called field
                    _ = ['.', '.', '.', '.', '.', '.', '.', '.', '.']

                    # Create a function that prints the field
                    {define} print_field
                        _
                        {print} 'TIC TAC TOE'
                        {print} field[1] field[2] field[3]
                        _
                        _

                    # Call the function
                    ```
            17:
                story_text: |
                    In the previous level you've learned how to make a tic-tac-toe game. The game works, but is quite annoying as it keeps asking you if you've won yet.
                    Now that we have the {elif} command, we can let the game decide if someone has won and it can stop asking us!

                    ### Exercise
                    ***Paste your code*** Paste your code from the previous level here and make it level 17 proof. In this level you've learned to use a colon everytime you create a block of code. Please add the colons in the correct spots.

                    ***Create a function that detects if someone's won*** We have started the function for you, paste it under the function `print_field` and finish the function. You can see that this first piece of code checks to see if spot 1, 2 and 3 are the same, because if they are you have 3 in a row.
                    It also checks if they are not a dot, because if they are, the line might have the same symbols on them, but that's just because it's still empty.
                    If all these conditions are met, the game is over and the winner is printed.
                    Finish this function with all possible ways to win. This means you have to make this for the other 2 rows, 3 columns and 2 diagonals.
                    If you've finished all the other options, the function should return the variable `game_over` so we can use it in our game.

                    ***Call the function in the game*** Go to the line `game_over = {ask} 'Did you win?'` and change it to `game_over = {call} detect_winner {with} field, sign`. Now the function will check if there's a winner and the game doesn't need to keep asking anymore!

                    ***Enjoy your game!*** Great job! You have finished the game! Enjoy playing it!

                example_code: |
                    ```
                    # Paste your code here and make it level 17 proof

                    # Create a function that detects if someone has won
                    {define} detect_winner {with} field, sign:
                        {if} field[1] == field[2] {and} field[2] == field[3] {and} field[1] != '.':
                            game_over = 'yes'
                            {print} 'Player ' sign 'wins!'
                        {elif}:
                            _
                        {else}:
                            game_over = 'no'
                    {return} _
                    ```
    tic_2:
        name: Tic-Tac-Toe 2
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    In the previous adventure you've learned how to create a playing field. Now you'll learn how to create the game!

                    ### Exercise
                    ***Paste your code*** Start by pasting your code from the previous adventure here.

                    ***Add variables*** Underneath your list called `field` we'll add 2 more variables that we'll need to program the game.
                    The variable `game_over` tells us if the game is over, and should be 'no' at the start of the game.
                    The variable `sign` tells us if it's the turn of player x or player o. Set the variable to 'x'.

                    ***The game*** First use a {while} command, to make sure the game keeps on playing the variable while game_over is set to no.
                    During the game, we first ask the player which spot they choose. Then we change the field with the number they chose into their sign.
                    Then we print the field again and we ask the player if they've won yet. Lastly we want to switch whose turn it is, so if the sign is 'x' it should be 'o' and the other way around.

                    ***Test your game*** Does your game work? Great, have fun playing the game! If not, use the ladybug button to debug your code.
                    You might have noticed one mistake in the code though, you can steal the other player's spot! If the other person chose spot 1, you could simply enter 1 after them and steal their spot.
                    That's not fair! Go to the next tab to learn how to fix this problem.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Add variables
                    game_over = _
                    sign = _

                    # The game
                    {while} _
                        choice = _ 'Player ' sign '_?'
                        field[choice] = _
                        _ print_field
                        game_over = {ask} _
                        {if} sign = 'o'
                            sign = _
                        _
                            sign = _
                    ```
    tic_3:
        name: Tic-Tac-Toe 3
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    You might have noticed one mistake in the code you've made in the previous adventure. You can steal the other player's spot! If the other person chose spot 1, you could simply enter 1 after them and steal their spot.
                    That's not fair! In this tab we'll fix that mistake.

                    ### Exercise
                    ***Paste your code here*** Paste your code from the previous adventure here.

                    ***Fix the mistake*** To fix the mistake we replace the line that says `field[choice] = sign`. This turns any spot that the player has chosen into their sign.
                    Go to the header that says 'Use this to fix the mistake' and finish the code. We first want to check if the chosen spot is still empty, so `if field[choice] = '.'`. If that is the case, you are allowed to take it.
                    Then we make an else command and print 'Sorry, this spot is already taken' if the spot is not empty. Lastly, we add a {sleep} command, so the players can actually read the text before it gets cleared again.
                    Now copy this piece of code and replace the line `field[choice] = sign` with this new piece of code.

                    ***Play your game!*** Now the game should work properly! Good job!
                    The only flaw is that you can get a bit annoyed that the game keeps asking you if you've won yet. Do you want to fix that? Go to level 17 and we'll fix it!
                example_code: |
                    ```
                    # Paste your code here

                    # Use this to fix the mistake
                    {if} _ = '.'
                        field[choice] = sign
                    {else}
                        {print} _
                        _
                    ```
    turtle:
        name: Breshka
        default_save_name: Breshka
        description: Bëje vizatimin tënd
        levels:
            1:
                story_text: |
                    Ju mund ta përdorni Hedy për të vizatuar. Duke bashkangjitur kthesa dhe vija, Ju mund të bëni një katror apo shkallë!

                    Duke përdorur komandën `{forward}` ju vizatoni një vijë përpara. Numri pas komandës përcakton sa larg do të ecë breshka. `{turn} {right}` kthen një çerek drejt akrepave të orës, `{turn} {left}` kthen kundër akrepave të orës.

                    Nëse do të shkosh mbrapa, duhet ta përdorni komandën `{forward}` por me numër negativ. Si për shembull `{forward} -100`
                example_code: |
                    ```
                    {forward} 100
                    {turn} {left}
                    ```
                story_text_2: |
                    ### Sfidë
                    Ky është fillimi e një shkalle të vogël. A mund ta bëni të ketë 5 hapa?
                example_code_2: |
                    ```
                    {forward} 20
                    {turn} {right}
                    {forward} 20
                    {turn} {left}
                    {forward} 20
                    ```
            2:
                story_text: |
                    Në këtë nivel ju mund të përdorni variabla që të bëni breshkën interaktive. Si për shembull mund ta pyetni lojtarin sa hapa duhet që të bëje breshka.
                example_code: |
                    ```
                    rezultati {is} {ask} Sa hapa duhet të bëje breshka?
                    {forward} rezultati
                    ```
                story_text_2: |
                    Gjithashtu në nivelin 1, breshka mund që të shkonte vetëm majtas apo djathtas. Ajo është pak e mërzitshme!
                    Në nivelin e 2 ajo mund të tregoje një drejtin me hundën e saj në të gjitha anët.

                    Përdor 90 që të kthehet një çerek. Ne i thuam kësaj shkallë. Një kthesë e plot është 360 shkallë.

                    ### Sfidë
                    A mund të vizatoni një figurë me këtë kod? Ndoshta një trekëndësh apo rreth?
                example_code_2: |
                    ```
                    {print} Duke vizatuar figura
                    këndi {is} 90
                    {turn} këndi
                    {forward} 25
                    {turn} këndi
                    {forward} 25
                    ```
            3:
                story_text: "Në këtë nivel ju mund të përdorni komandën `{at} {random}` me vizatimin e breshkës. Një zgjedhje random e bën breshkën të ecë rrugë të ndryshme çdo herë. Përdorni `{at} {random}` për të zgjedhur një vlerë nga një listë. \n\n### Sfidë\nA mund të bëni kopjoni rreshtat 2 dhe 3 për të krijuar një rrugë më të gjatë random.\n"
                example_code: |
                    ```
                    kënde {is} 10, 50, 90, 150, 250
                    {turn} kënde {at} {random}
                    {forward} 25
                    ```
            4:
                story_text: |
                    Në nivelin 4 do duhet të përdorni thonjëza me komandën `{print}` dh `{ask}`. Gjithashtu duke vizatuar!
                example_code: |
                    ```
                    {print} _ Duke vizatuar figura _
                    këndi {is} 90
                    {turn} këndi
                    {forward} 25
                    {turn} këndi
                    {forward} 25
                    ```
                story_text_2: |
                    Ju gjithashtu mund të ndryshoni ngjyrën e rreshtave me komandën `{color}`. Shikoni shembullin.
                    Ju gjithashtu mund të përdorni komandën `{color} {white}` për të bërë vija "të padukshme". Ju mund t'i përdorni këto vija të bardha për të lëvizur breshkën kudo në ekran përpara se të filloni të vizatoni.
                example_code_2: |
                    ```
                    {color} {white}
                    {forward} -80
                    {color} {green}
                    {forward} 50
                    {color} {yellow}
                    {forward} 50
                    {color} {red}
                    {forward} 50
                    ```
            5:
                story_text: |
                    Në nivelin 5 ju mund të bëni një zgjidhje me komandën `{if}`. Si për shembull ndërmjet dy lloje të figurave.
                example_code: |
                    ```
                    {print} 'Duke vizatuar figurë'
                    figura {is} {ask} 'A doni një katror apo një trekëndësh?'
                    {if} figura {is} trekëndësh këndi {is} 120
                    {else} këndi {is} 90
                    {turn} këndi
                    {forward} 25
                    {turn} këndi
                    {forward} 25
                    {turn} këndi
                    {forward} 25
                    {turn} këndi
                    {forward} 25
                    ```
                story_text_2: |
                    ### Exercise
                    Fill in the correct numbers in this code to get it to work.
                    After you've done that, you can try to add the option backwards.

                    **Extra** Instead of using 'left' and 'right', remake the program with North, East, South and West.
                    This way you could add even more directions like Northeast and Southwest etc.
                example_code_2: |
                    ```
                    direction {is} {ask} 'Do you want to go left, right, or straight ahead?'
                    if direction is left turn _
                    if direction is right turn _
                    forward 100
                    ```
            6:
                story_text: |
                    Në këtë nivel mund të përdorni kalkulime për të vizatuar figura të ndryshme.
                    Mund të keni mësuar në shkollë se nëse ktheni komplet rreth ,është 360 shkalle. Nëse jo, tani e dini!
                    Për këtë shkak përdorni 90 shkallë për një katror. 360 pjesëtuar me 4 është 90.
                    Tani mund të bëjmë matematikë me Hady, mund të vizatojmë të gjithë figurat që duam!
                example_code: |
                    ```
                    këndet = {ask} 'Sa kënde doni?'
                    këndi = 360 / këndet
                    {forward} 50
                    {turn} këndi
                    {forward} 50
                    {turn} këndi
                    {forward} 50
                    {turn} këndi
                    {forward} 50
                    {turn} këndi
                    {forward} 50
                    {turn} këndi
                    {forward} 50
                    {turn} këndi
                    ```
            8:
                story_text: |
                    Tani që mund të përsërisim shumë rreshta, mund të bëjmë figura më lehtë.
                    Duhet vetëm të vendosim këndin një herë, pastaj mund ta përdorim at variabël në komandën `{repeat}`.
                example_code: |
                    ```
                    këndi = 90
                    {repeat} 10 {times}
                        {turn} këndi
                        {forward} 50
                    ```
                story_text_2: |
                    Gjithashtu, mund ta përmirësojmë programin që vizaton figura.
                    A mund ta kuptoni sa herë duhet që breshka të kthehet këtu? Përfundojeni kodin dhe pastaj mund të vizatoni çdo poligon që dëshironi!
                example_code_2: "```\nkëndet = {ask} 'Sa kënde duhet të vizatoj?'\nkëndi = 360 / këndet \n{repeat} këndet {times}\n    {turn} _\n    {forward} _\n```\n"
            9:
                story_text: |
                    Now that we can use a `{repeat}` inside a `{repeat}`, we can create more complex figures.

                    ### Exercise 1
                    This code creates three black triangles, change that into five pink squares.

                     **(extra)** Create a figure of your own choosing consisting of at least two different shapes types.
                example_code: |
                    ```
                    {color} {black}
                    {repeat} 3 {times}
                        {repeat} 3 {times}
                            {forward} 10
                            {turn} 120
                        {color} {white}
                        {forward} 50
                        {color} {black}
                    ```
            10:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.
                    ### Exercise 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                     **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!
                    ### Exercise 2
                    The spiral is drawn outwards, make it go inwards?
                example_code: |
                    ```
                    {turn} 90
                    distances = 10, 20, 30, 40, 50, 60
                    {for} distance {in} distances
                        {forward} distance
                    ```
            12:
                story_text: |
                    We can use functions to draw more complex figures with less code.
                    ### Exercise 1
                    Fill the function so that three squares are created. If you want the image to look nicer, you can make the lines between the squares white.

                    ### Exercise 2
                    The code can be made even shorter. Place the final lines into a `{repeat}` so the figure remains the same.

                    ### Exercise 3
                    Create your own drawing with different figures.
                    Change both the number of figures with the `{repeat}` and the shape of the figures in the `{define}`
                example_code: |
                    ```
                    {define} square
                        {repeat} 4 {times}
                            {turn} _
                            {forward} _
                    {call} square
                    {forward} 50
                    {call} square
                    {forward} 50
                    {call} square
                    ```
    turtle_draw_it:
        name: Draw it!
        default_save_name: Draw it
        description: Draw this picture with the turtle
        levels:
            1:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                        Rectangle <img src="https://github.com/hedyorg/hedy/assets/80678586/77aa99d5-cd8f-4969-b49d-e8fed34ac550" width="100">
                        Square <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                        Stairs<img src="https://github.com/hedyorg/hedy/assets/80678586/d4301e62-ec66-4031-827c-7d21f73ba106" width="200">
                    </div>
            2:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/e974b62c-f0cf-445a-8bd4-5ad9f1f71204" width="100">
                    Arrow <img src="https://github.com/hedyorg/hedy/assets/80678586/803d8f42-9708-448c-82ea-d035697f08c9" width="150">
                    Boat <img src="https://github.com/hedyorg/hedy/assets/80678586/94ef7189-442a-4c8f-827d-12a69203c2e9" width="150">
                    </div>
            3:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/71e04d98-9545-4614-9caf-a5f179b756a1" width="150">
                    Star <img src="https://github.com/hedyorg/hedy/assets/80678586/421c4d28-cb99-424b-be26-dcae30d65c80" width="150">
                    Arrow <img src="https://github.com/hedyorg/hedy/assets/80678586/3cbebcae-5258-47c5-a6ac-e7ee36c1d1ce" width="200">
                    </div>
            4:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Colored Star <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Rainbow <img src="https://github.com/hedyorg/hedy/assets/80678586/2728b10f-9f7f-45ea-964e-5b284033e4f0" width="500">
                    Nested squares <img src="https://github.com/hedyorg/hedy/assets/80678586/f013f9fa-bc68-4c60-b778-2c457799d6f7" width="200">
                    </div>
                example_code: |
                    **Extra** Up for a real challenge? Make sure that the colors of these figures are selected randomly, so that each time you run your programs they'll look differently!

                    ```
                    colors {is} red, orange, yellow, green, blue, purple, pink, brown, gray, black
                    color _
                    ```
            5:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** Make only one code that lets the player decide which letter they'd like to see! And can you add even more letters?

                    <div class="w-full flex flex-row gap-2">
                    F <img src="https://github.com/hedyorg/hedy/assets/80678586/8a021b76-c24b-4e7c-b960-48d57f3bcb20" width="100">
                    E <img src="https://github.com/hedyorg/hedy/assets/80678586/12821803-6422-416a-8e36-9902d14e57a4" width="100">
                    L <img src="https://github.com/hedyorg/hedy/assets/80678586/3af6f919-7b67-4ee7-b923-11e56f2b6b24" width="100">
                    </div>
                example_code: |
                    Hint:
                    ```
                    chosen_letter {is} {ask} 'Which letter would you like to see? F, E or L?'
                    {if} _
                    ```
            6:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** Let the player decide which color the square should be.

                    ***Extra*** Can you make the letter of your own first name and the flag of your own country too?

                    <div class="w-full flex flex-row gap-2">
                    Square <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="150">
                    Letters <img src="https://github.com/hedyorg/hedy/assets/80678586/e75f4fa5-f1f5-4b48-806c-916c28e4e8ad" width="100">
                    Flag <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hint for the square:
                    ```
                    chosen_color = {ask} _
                    ```
            7:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Hexagon <img src="https://github.com/hedyorg/hedy/assets/80678586/92e492e1-1593-489b-aaf0-51d2a29755f4" width="200">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/3629a5e6-1f02-4851-aab9-c5430ba4a1f1" width="200">
                    Fan <img src="https://github.com/hedyorg/hedy/assets/80678586/1ba2ff71-1230-4fe3-8255-b2c504cf1b4e" width="200">
                    </div>
            8:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** The number in brackets indicates in how many lines of code this figure can be drawn. Can you do it in the same amount of lines?

                    <div class="w-full flex flex-row gap-2">
                    Square (3) <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                    Randomly colored star (5) <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Randomly colored spiral (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/9bcdb3f1-367d-4ae0-878f-d09005424a35" width="150">
                    </div>
            9:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** The number in brackets indicates in how many lines of code this figure can be drawn. Can you do it in the same amount of lines?

                    **Extra** Give the player a choice which country they would like to see the flag of.

                    <div class="w-full flex flex-row gap-2">
                    Cross (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/76e42c76-aa3f-4863-8eee-ead73c09a186" width="150">
                    Randomly colored nested squares (8) <img src="https://github.com/hedyorg/hedy/assets/80678586/17f878cc-e893-4c10-b32e-a09a50bf08de" width="200">
                    Flags <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hint for the nested squares:
                    ```
                    colors = red, blue, orange, yellow, pink, purple, green, brown, black
                    distance = 120
                    repeat 5 times
                    _
                    ```
                    Hint for the flags:
                    ```
                    country = ask 'which country would you like to see the flag of?'
                    if country is 'the Netherlands'
                        color_1 = red
                        color_2 = white
                        color_3 = blue
                    ```
            10:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Nested Hexagon <img src="https://github.com/hedyorg/hedy/assets/80678586/3629e908-3cd5-44ac-bbcd-1f1cceb15654" width="150">
                    Traffic lights  <img src="https://github.com/hedyorg/hedy/assets/80678586/edbbb608-5ff8-4349-85a6-e47809adde43" width="100">
                    </div>
                example_code: |
                    Hint Nested Hexagon:
                    ```
                    distances = 100, 80, 60, 40, 20
                    {for} distance {in} distances
                    _
                    ```

                    Hint Traffic Lights:
                    ```
                    colors = red, yellow, green
                    {for} chosen_color {in} colors
                        color _
                        {repeat} _
                    ```
                story_text_2: |
                    Christmas lights <img src="https://github.com/hedyorg/hedy/assets/80678586/9637ea6d-6edc-4d88-a6f7-10271bfc5371" width="500">
                example_code_2: |
                    Hint Christmas Lights:

                    Start by moving to the left side of the screen with an invisible white line. Then hang up the Christmas lights!
                    ```
                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 90

                    colors = red, blue, yellow, purple, green, orange, pink
                    {for} chosen_color {in} colors
                    _
                    ```
            11:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Beehive (6) <img src="https://github.com/hedyorg/hedy/assets/80678586/ec02469c-907b-4695-9382-d39a8f3c00ec" width="150">
                    Fan (5)  <img src="https://github.com/hedyorg/hedy/assets/80678586/a032ab35-c70c-4e67-9b4e-036a03ecce87" width="150">
                    Snowflake (13) <img src="https://github.com/hedyorg/hedy/assets/80678586/90f56bbb-86e5-448d-8aec-16f8c2c05cf2" width="150">
                    </div>
                example_code: |
                    Hint Beehive:
                    ```
                    {for} amount_of_combs {in} {range} 1 {to} _
                        {for} walls_of_one_comb {in} {range} 1 {to} _
                            {forward} _
                            {turn} _
                        {forward} _
                        {turn} _
                    ```

                    Hint Fan:
                    Start out like the fan you made in level 7. Or take a peak at the hint for the beehive, because the codes are very similar.

                    Hint Snowflake: Start by making one 'leg' and repeat it 6 times.
            12:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!
                    Hint: Bracelet designing program. Firstly, define a function **for each shape** you want to use on the bacelet. Then, add the shapes to the bacelet like this:
                    </div>
                    Bracelet Designing program <img src="https://github.com/hedyorg/hedy/assets/80678586/549d7f3a-c492-4b4a-b173-746eb3400951" width="500">
                example_code: |
                    ```
                    {define} draw_a_square
                    _

                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 180

                    {for} i {in} {range} 1 {to} 5
                        {color} gray
                        {forward} 100
                        shape = {ask} 'What kind of shape would you like next on the bracelet?'
                        chosen_color = {ask} 'In which color?'
                        {color} chosen_color
                        {if} shape = 'square'
                            {call} draw_a_square
                    ```
            13:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    Street in different sizes <img src="https://github.com/hedyorg/hedy/assets/80678586/cdae9d97-d5ef-46f3-8838-24fa7b5b1bec" width="300">
                    Colored street  <img src="https://github.com/hedyorg/hedy/assets/80678586/9893e0bd-c0f8-49bc-a5a7-217182407724" width="300">
                    Snow Storm <img src="https://github.com/hedyorg/hedy/assets/80678586/111b0a1b-b0e1-47c3-b032-81cea05e6bbc" width="300">
                example_code: |
                    Hint Street in different sizes
                    ```
                    {define} draw_a_house {with} size
                    _

                    {call} draw_a_house {with} 90
                    {call} draw_a_house {with} 60
                    {call} draw_a_house {with} 30
                    ```

                    Hint Colored street
                    ```
                    {define} draw_a_house {with} chosen_color
                    _
                    ```

                    Hint Snow Storm
                    ```
                    {define} draw_snowflake {with} length, color
                        _

                    numbers = 10, 20, 30
                    colors = _

                    {for} i {in} {range} 1 {to} 5
                        random_number = _
                        random_color = _
                        {call} draw_snowflake {with} random_number, random_color
                        {color} white
                        {turn} random_number * 5
                        {forward} 80
                    ```
            14:
                story_text: |
                    ### Exercise
                    Create a program that asks the player how many corners their figure should have and then creates that figure.
                    The figure in the image is the output when the player fills in 10.

                    <div class="w-full flex flex-row gap-2">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/ee32f40e-dea1-4e7c-a813-3ef63671254b" width="300">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/3621bf77-527d-41e8-a44f-c5a21bb4ffd2" width="200">
                    </div>
                example_code: |
                    ```
                    {define} calculate_degrees {with} amount_of_corners
                        _ 360 / amount_of_corners


                    {define} draw_figure {with} degrees
                        _
                            {forward} 400/amount_of_corners
                            {turn} _

                    amount_of_corners = {ask} _
                    degrees = {call} _ {with} _

                    {call} _ {with}
                    {call} _ {with}
                    ```
            15:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    Spiral <img src="https://github.com/hedyorg/hedy/assets/80678586/6943223c-018b-435b-a391-23723cc7a6ad" width="150">
                example_code: |
                    Spiral
                    ```
                    distance = 5
                    {while} distance < 200
                        distance = distance + 5
                         _
                    ```
                story_text_2: |
                    Fan <img src="https://github.com/hedyorg/hedy/assets/80678586/cb671065-b47b-49f0-b298-dcbcd2a5e28f" width="150">
                example_code_2: |
                    Fan
                    ```
                    {define} draw_a_square {with} side
                    _

                    i = 100
                    {while} i > 1
                        _ {with} i
                        _
                        i = i - 3
                    ```
                story_text_3: |
                    Star <img src="https://github.com/hedyorg/hedy/assets/80678586/17564e0a-63e1-4794-8d41-15ac8c1a5a93" width="150">
                example_code_3: |
                    Star
                    A star is usually drawn using 144-degree-turns. If you change this slightly to 143 degrees for example and repeat the pattern multiple times with a {while} loop you can make this figure.
    while_command:
        name: '{while}'
        default_save_name: while_command
        description: while
        levels:
            15:
                story_text: |-
                    We are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.
                    So don't forget to change the value in the loop.

                    In the example code, we continue until a correct answer has been given.
                    If the correct answer is never given, the loop never ends!
                example_code: |
                    ```
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
                    ```
    years:
        name: New Year's
        default_save_name: New Year's Countdown
        description: Countdown to the new year!
        levels:
            11:
                story_text: |
                    In this level you can use the `{for} i {in} {range}` command to countdown to the New Year.

                    ### Exercise
                    Fill in the blanks and make the code work!
                example_code: |
                    ```
                    for _ in _ 10 to 1
                        {print} i
                    {print} 'Happy New Year!'
                    ```
