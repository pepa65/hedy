adventures:
    story:
        name: Cerita
        default_save_name: Cerita
        description: Cerita
        levels:
            1:
                story_text: |-
                    Pada level 1 kamu dapat membuat cerita dengan karakter utama yang kamu tuliskan sendiri.

                    Sebagai baris pertama, gunakan kode berikut:

                    ```
                    ask siapakah karakter utama di cerita kamu?
                    ```

                    Setelah baris pertama, mulai dengan `print` jika sebuah kalimat perlu ditampilkan.
                    Kamu bisa menggunakan `echo` jika kamu mau nama karakter utamamu muncul diakhir kalimat.
                example_code: "```\nask Karakter utama dalam cerita ini adalah\nprint Karakter utama ini sekarang akan berjalan di dalam hutan\necho Dia sedikit ketakutan, si \nprint Dia mendengar bunyi-bunyi menyeramkan dari sekitar\nprint Dia takut kalau hutan tersebut berhantu\n```\n"
                story_text_2: |
                    ### Exercise
                    Can you make your own story in Hedy now by using `{print}` , `{ask}` and `{echo}`?
            2:
                story_text: |-
                    Pada level 2, kamu dapat membuat ceritanya lebih menyenangkan. Karakter utama kamu sekarang dapat muncul dimanapun pada kalimat-kalimatnya.

                    Kamu dapat memiliki program yang lebih baik dari itu. Tapi kamu harus memberi nama karakter utama kamu terlebih dahulu.

                    Kamu lalu dapat menuliskan nama tersebut dimanapun pada sebuah kalimat.
                example_code: |
                    ```
                    nama is ask Siapa nama karakter utama dalam cerita ini?
                    print nama sekarang akan berjalan di dalam hutan
                    print nama sedikit ketakutan
                    print Dia mendengar bunyi-bunyi menyeramkan dari sekitar
                    print nama takut kalau hutan tersebut berhantu
                    ```
                story_text_2: |
                    ### Latihan
                    Sekarang saatnya untuk menambahkan variabel ke cerita Anda sendiri yang telah Anda buat di level sebelumnya.
                    Pergi ke ‘Program Saya’, cari petualangan cerita level 1 Anda dan salin kode tersebut. Tempelkan kode tersebut di layar input Anda di level ini.

                    Kode ini tidak akan berfungsi di level ini, karena Anda belum menggunakan variabel.
                    Ubah perintah '{ask}' dan '{echo}' dalam kode Anda ke bentuk yang benar yang telah Anda pelajari di level ini.

                    **Ekstra** Tambahkan perintah '{sleep}' ke kode Anda untuk membangun ketegangan dalam cerita Anda.
            3:
                story_text: |-
                    Kamu dapat menambahkan sesuatu secara acak di cerita kamu. Monster, hewan, atau benda apapun.

                    Contohnya seperti ini:
                    ```
                    hewan is burung, landak, armadilo
                    print Dia sekarang mendengar suara seekor hewan at random
                    ```
                example_code: |
                    ```
                    animals {is} 🦔, 🐿, 🦉, 🦇
                    {print} They now hear the sound of an animals {at} {random}
                    ```
                story_text_2: |
                    The command `{add}` can also come in handy in your story. For example
                example_code_2: |
                    ```
                    {print} Dia mendengarkan sebuah suara
                    hewan_hewan {is} 🐿, 🦔, 🦇, 🦉
                    hewan {is} {ask} apa yang kamu pikirkan?
                    {add} hewan {to_list} hewan_hewan
                    {print} itu adalah hewan_hewan {at} {random}
                    ```
                story_text_3: |
                    Ini adalah contoh perintah `{remove}` dalam cerita Anda

                    ### Latihan
                    Salin cerita Anda dari level sebelumnya ke level ini.
                    Di level ini Anda telah mempelajari 3 perintah baru `{at} {random}` , `{add} {to_list}` dan `{remove} {from}`.
                    Tambahkan baris kode baru ke cerita Anda, sehingga semua perintah baru ditampilkan setidaknya sekali dalam cerita Anda.
                example_code_3: |
                    ```
                    {print} His backpack got way too heavy.
                    {print} Inside were a bottle of water, a flashlight and a brick.
                    bag {is} water, flashlight, brick
                    dump {is} {ask} Which item should he dump?
                    {remove} dump {from} bag
                    ```
            4:
                story_text: |
                    ### Latihan
                    Salin kode contoh dan selesaikan dengan menambahkan tanda kutip pada bagian kosong di baris 1 dan 2.
                    Bagian kosong pada baris 3 dan 4 tidak boleh diganti dengan tanda kutip, melainkan dengan perintah `{sleep}` dan `{clear}`. Bisakah Anda membuatnya berhasil?

                    ### Latihan 2
                    Kembali ke level sebelumnya dan salin kode cerita Anda. Jadikan kode berfungsi pada level ini dengan menambahkan tanda kutip di tempat yang tepat.
                    Pikiran: Variabel dalam cerita Anda sendiri harus berada di luar tanda kutip. Sama seperti baris kedua dari kode contoh. Pada baris tersebut nama variabel diletakkan di luar tanda kutip.
                example_code: |
                    ```
                    nama {is} {ask} _ Siapa namamu? _
                    {print} _Karakter utama dipanggil _nama
                    _
                    _
                    {print} nama   _ sekarang akan berjalan-jalan di hutan _
                    {print} nama _ agak takut _
                    hewan {is} 🦔, 🐿, 🦉, 🦇
                    {print} _Dia mendengar suara _ binatang {at} {random}
                    {print} nama _takut ini hutan angker _
                    ```
            5:
                story_text: |-
                    Apa yang kamu bisa lakukan di level 4 adalah membuat cerita kamu semakin menyenangkan. Pada level 4 kamu dapat membuat akhir cerita yang berbeda.

                    Pikirkan dua alternatif akhir cerita kamu. Misalnya:

                    - Seorang putri menjelajahi hutan
                    - Dia bertemu dengan seekor monster

                    - Akhir yang bahagia: Dia mengambil pedangnya dan monster tersebut lari
                    - Akhir yang buruk: Monster tersebut memakan sang putri

                    Kamu juga dapat menggunakan nama yang dimasukkan. Ini sama dengan yang ada di level 3. Kamu dapat menggabungkan ini dengan `if` dan akhirnya sebuah cerita dengan dua alternatif akhir jadi!
                example_code: |
                    ```
                    nama {is} {ask} 'Siapa yang berjalan di hutan?'
                    {print} nama 'berjalan melewati hutan'
                    {print} nama 'bertemu monster'
                    akhir {is} {ask} 'Apakah kamu ingin akhir yang baik atau buruk?'
                    {if} akhir {is} nama {print}  nama 'yang bagus  mengambil pedang dan monster itu segera lari'
                    {else} {print} nama 'Monster itu memakan '
                    ```
            7:
                story_text: |
                    Dalam sebuah cerita, seseorang mengucapkan kata-kata beberapa kali. Misalnya saja ketika seseorang meminta bantuan atau menyanyikan sebuah lagu.
                    Anda dapat memasukkan pengulangan seperti itu ke dalam cerita Anda, di level ini dengan `{repeat}`.

                    ### Latihan
                    Tambahkan pengulangan pada cerita Anda sendiri. Kembali ke program simpanan Anda, pilih program cerita Anda dari level sebelumnya dan
                    temukan baris yang berisi `{print}` dan ulangi!
                example_code: |
                    ```
                    print 'Sang pangeran mencari bantuan'
                    repeat 5 times print 'Tolong!'
                    print 'Kenapa tidak ada seorangpun yang menolongku?'
                    ```
            8:
                story_text: |
                    In this level you can use multiple lines in your `{if}` commands, this way you can upgrade your happy or sad ending!

                    ### Exercise 1
                    The example code shows two different endings; one where the characters jump in a time machine and one where they do not.
                    Complete the blanks with at least one sentence per ending.
                    **Extra** Make the story longer. What happens in the story? You can also add a second `{ask}` with different options.

                    ### Exercise 2
                    Go back to your saved programs, choose your story program from level 5. Now write a good and a bad ending of at least three lines long each!
                example_code: |
                    ```
                    {print} 'OH TIDAK! T-rex mendekat!'
                    akhir = {ask} 'Kamu ingin akhir yang bahagia atau sedih?'
                    {if} akhir {is} senang
                        {print} 'Tepat pada waktunya Richard melompat kembali ke mesin waktu!'
                        {print} _
                    {else}
                        {print} 'Oh tidak! Richard terlalu lambat.'
                        {print} _
                    ```
            9:
                story_text: |
                    In this level you can use nesting to put {if}, {repeat} or {for} commands inside other {if}, {repeat} or {for} commands. This gives you many options and really helps you to make your story interactive.
                example_code: |
                    ```
                    {print} 'Robin sedang berjalan di pusat kota'
                    lokasi = {ask} 'Apakah Robin pergi ke toko atau pulang?'
                    {if} lokasi {is} toko
                        {print} 'Dia memasuki toko.'
                        {print} 'Robin melihat buku yang tampak menarik'
                        buku = {ask} 'Apakah Robin yang membeli bukunya?'
                        {if} buku {is} ya
                        _ {print} 'Robin membeli buku itu dan pulang'
                        _ {else}
                        _ {print} 'Robin meninggalkan toko dan pulang'
                    {else}
                        {print} 'Robin pulang'
                    ```
            10:
                story_text: |
                    Pada level ini Anda dapat menggunakan perintah {for} dalam cerita Anda. Dengan cara ini Anda dapat dengan mudah memprogram buku anak-anak 'Beruang coklat, Beruang coklat, apa yang kamu lihat'.

                    ### Latihan

                    Lihat <a href="https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf"> ceritanya</a> jika Anda belum mengetahuinya , dan pastikan tercetak seperti di buku.
                example_code: |
                    ```
                    hewan = _ , _ , _
                    {print} 'Beruang coklat, Beruang coklat'
                    {print} 'Apa yang kamu lihat?'
                    ```
            12:
                story_text: |
                    In this level you can use the quotation marks to save multiple words in a variable.
                example_code: |
                    ```
                    nama = 'Ratu Inggris'
                    {print} nama ' sedang memakan sepotong kue, tiba-tiba...'
                    ```
            13:
                story_text: |
                    By using the `{and}` and `{or}` commands, you can shorten your stories. For example, check out the dragon story.
                example_code: |
                    ```
                    {print} 'Pahlawan kita sedang berjalan melewati hutan'
                    {print} 'Jalurnya terbagi dua'
                    jalan = {ask} 'Jalan mana yang harus dia pilih?'
                    senjata = {ask} 'Senjata apa yang dia gunakan?'
                    {if} jalur {is} 'kiri' {and} senjata {is} 'pedang'
                        _
                    ```
            15:
                story_text: |
                    Using the `{while}` loop can make your stories more interesting. For example, you can use `{while} game == 'on'` so you can play until the game is over.
                    Or you can use `{while} sword == 'lost'` so the player can't continue the game until they have found something.

                    ### Exercise
                    The example code shows you how to use the `{while}` loop in a story. Now **think of your own scenario** in which the player has to find something before they can continue.
                example_code: |
                    ```
                    keys = 'lost'
                    {print} 'You are standing in your garden and you have lost your keys.'
                    {print} 'Where do you want to look for them?'
                    {print} 'You can choose: tree, flowerbed, rock, postbox'
                    {while} keys == 'lost'
                        location = {ask} 'Where do you want to look?'
                        {if} location == 'flowerbed'
                            {print} 'Here they are!'
                            keys = 'found'
                        {else}
                            {print} 'Nope they are not at the ' location
                    {print} 'Now you can enter the house!'
            18:
                story_text: |
                    We are going to print another story, but now we have to use brackets with `{print}`.

                    ### Exercise 1
                    Create a story of at least 5 sentences. You don't have to use 'name' just yet.
                example_code: |
                    ```
                    {print}('Selamat datang di cerita ini!')
                    ```
                story_text_2: |
                    ### Latihan 2
                    Kami telah menyiapkan `{input}` untuk Anda. Pertama, gunakan variabel `name` dalam cerita Anda.
                    Kemudian tambahkan `{ask}` kedua dan gunakan variabel itu juga.
                    Tip: Ingat koma di `{print}` antara teks dan variabel!
                example_code_2: |
                    ```
                    naam = {input}("Siapa namamu?")
                    {print}('Selamat datang di cerita ini!')
                    ```
    add_remove_command:
        name: '{add} {to} & {remove} {from}'
        default_save_name: tambahkan_perintah_hapus
        description: memperkenalkan menambah dan menghapus dari
        levels:
            3:
                story_text: |
                    ## Tambahkan
                    Anda dapat menambahkan item ke daftar dengan perintah `{add} {to_list}`. Untuk menambahkan item ke daftar Anda cukup mengetik: `{add} penguin {to} animals` atau Anda dapat menggunakan perintah `{ask}` seperti pada kode contoh.
                example_code: |
                    ```
                    binatang {is} anjing, kucing, kanguru
                    seperti {is} {ask} Apa hewan favoritmu?
                    {add} seperti {to_list} binatang
                    {print} Saya memilih binatang {at} {random}
                    ```
                story_text_2: |
                    ## Hapus dari
                    Jika Anda dapat menambahkan item ke dalam daftar, tentu saja Anda juga dapat menghapusnya. Hal ini dilakukan dengan perintah `{remove} {from}`.
                example_code_2: |
                    ```
                    binatang {is} anjing, kucing, kanguru
                    tidak_suka {is} {ask} Hewan apa yang tidak kamu suka?
                    {remove} tidak_suka {from} binatang
                    {print} Saya memilih binatang {at} {random}
                    ```
                story_text_3: |
                    ### Latihan
                    Cobalah perintah baru di restoran virtual ini. Tambahkan rasa yang diharapkan pemain ke dalam daftar dan hilangkan rasa yang membuat mereka alergi.
                example_code_3: |
                    ```
                    {print} Milkshake misteri
                    rasa {is} stroberi, coklat, vanila
                    hope {is} {ask} Rasa apa yang kamu harapkan?
                    _
                    alergi {is} {ask} Apakah Anda alergi terhadap rasa apa pun?
                    _
                    {print} Anda mendapatkan milkshake rasa {at} {random}
                    ```
    and_or_command:
        name: '{and} & {or}'
        default_save_name: dan atau
        description: memperkenalkan dan atau
        levels:
            13:
                story_text: |-
                    Kita sekarang akan mempelajari `{and}` dan `{or}`! Jika Anda ingin memeriksa dua pernyataan, Anda tidak harus menggunakan dua `{if}` tetapi dapat menggunakan `{and}` dan `{or}`.

                    Jika Anda menggunakan `{and}`, kedua pernyataan, kiri dan kanan `{and}` harus benar. Kita juga bisa menggunakan `{or}`. Maka hanya satu pernyataan yang perlu benar.
                example_code: |
                    ```
                    nama = {ask} 'siapa namamu?'
                    umur = {ask} 'berapa umurmu?'
                    {if} nama {is} 'Hedy' {and} umur {is} 2
                        {print} 'Kamu adalah Hedy yang asli!'
                    ```
    ask_command:
        name: '{ask}'
        default_save_name: tanya_perintah
        description: Pendahuluan menanyakan perintah
        levels:
            1:
                story_text: |
                    ## Perintah tanya
                    Sekarang Anda dapat menggunakan perintah `{print}`, Anda siap mempelajari perintah berikutnya: `{ask}`. Dengan perintah `{ask}`, Anda dapat mengajukan pertanyaan. Coba lihat:
                example_code: |
                    ```
                    {print} Halo!
                    {ask} Siapa namamu?
                    ```
                story_text_2: |
                    ## Perintah `{echo}`
                    Jika Anda ingin komputer mengulangi jawabannya kepada Anda, Anda dapat menggunakan perintah `{echo}`. Jawabannya akan digaungkan kembali di akhir kalimat, jadi dalam contoh ini setelah halo.
                example_code_2: |
                    ```
                    {print} Halo!
                    {ask} Siapa namamu?
                    {echo} halo
                    ```
                story_text_3: |
                    ### Latihan
                    Cobalah perintah `{ask}` dan `{echo}`. Pertama, isi bagian yang kosong agar program ini berfungsi.
                    Kemudian ajukan 2 pertanyaan lagi menggunakan perintah `{ask}`, setelah setiap `{ask}` gunakan `{echo}` untuk mencetak jawabannya di layar.
                example_code_3: |
                    ```
                    _ Apa kabarmu?
                    _
                    ```
            2:
                story_text: |
                    ## Perintah tanya
                    Sekarang kita dapat menggunakan **variabel** dalam kode kita, kita tidak lagi memerlukan perintah `{echo}`.
                    Kita dapat menggunakan variabel untuk menyimpan jawaban atas pertanyaan kita dan dengan cara ini kita dapat menggunakan jawaban atas beberapa pertanyaan dalam kode kita.
                    Coba lihat:

                    Dengan cara ini kode Anda menjadi interaktif!
                example_code: |
                    ```
                    nama {is} {ask} Siapa namamu?
                    {print} Halo nama
                    umur {is} {ask} Berapa umurmu?
                    {print} nama berumur tahun.
                    ```
                story_text_2: |
                    ### Latihan
                    Pada tab sebelumnya Anda telah berlatih mengatur variabel dengan perintah `{is}`.
                    Anda telah membuat setidaknya 3 variabel dan menggunakannya dengan perintah cetak.
                    Sekarang, daripada mengatur variabel, kami ingin Anda membuat variabel menjadi interaktif, seperti yang kami lakukan pada contoh kami.

                    Salin kode Anda dari tab sebelumnya dan buat variabelnya interaktif dengan menggunakan perintah `{ask}`.
                example_code_2: |
                    ```
                    favorit_animals {is} {ask} Apa hewan favoritmu?
                    {print} Saya suka binatang_favorit
                    ```
            18:
                story_text: The final change we will need to make to get Python code is changing `{ask}` into `{input}`.
                example_code: |
                    ```
                    {print}('My name is Hedy!')
                    name = {input}('What is your name?')
                    {print}('So your name is ', name)
                    ```
    blackjack:
        name: Blackjack
        default_save_name: Blackjack
        description: Try to get as close to 21 as you can
        levels:
            17:
                story_text: |
                    Blackjack is a simple game of cards in which you have to get as close to 21 points as possible. You get two cards. Each card is worth their numeral value, and the face cards (Jack, Queen and King) are worth 10 points.
                    The Ace is worth either 1 or 11 points (you can choose). The dealer, your opponent, also gets two cards.
                    If you want, you can get another card, and its points will be added to your total. The dealer can also choose to take another card.
                    But be careful not to get more than 21 points, because if you do, you lose!
                    The player who gets closest to 21, without going over it, wins!

                    ### Exercise
                    In this adventure we code the first part of our Blackjack game. We'll create a function to calculate how many points a card is worth.

                    ***Set the variables***
                    Start by making a list of all the cards, from 2 to Ace. Next make a list of the face cards, so Jack, Queen and King. Then pick a random card from the list of cards to be card_1.

                    ***Create a function to calculate the points***
                    Create a function that calculates how many points a card is worth.
                    All the face cards are worth 10 points, the Ace is worth 11 and all the other cards are worth their numeral.
                    Return the variable `points` at the end of the function.

                    ***Test the function***
                    Test if your function is working properly. Finish the first print command by filling in which card you've drawn. Then finish the second line by calling the function with card_1.
                    Run the code a couple of times. Are you happy with the results? Great! Then you can remove the testing part and move on the the next tab!
                example_code: |
                    ```
                    {print} 'BLACKJACK'

                    # Set these variables
                    cards = _
                    face_cards = _
                    card_1 =

                    # Create a function to calculate the points
                    {define} calculate_points {with} card:
                        {if} card {in} face_cards:
                            points = _
                        {elif} _
                            _
                        {else}:
                            _
                        _ points

                    # Test your function
                    {print} 'Your card is a ' _
                    {print} 'That is worth ' _ ' points'.
                    ```
    blackjack_2:
        name: Blackjack 2
        default_save_name: Blackjack_2
        description: Blackjack part 2
        levels:
            17:
                story_text: |
                    ### Exercise
                    In this adventure we code the second part of our Blackjack game.

                    ***Paste your code from the previous adventure***
                    In the previous adventure you've started a list of variables and created a function to calculate how many points a card is worth. Copy your code and paste it here. Mind that you don't need the testing part, so if you haven't removed that yet, please do so now.

                    ***Add more variables***
                    You have already set the lists `cards` and `face_cards` and the variable `card_1`. Underneath those variables create 3 more variables: `card_2`, dealer_card_1` and `dealer_card_2`. These variables are all set to a random card from the list of cards.

                    ***Add up points***
                    To calculate how many points you have scored we call the function with card 1 and we do it again for card 2. Then we add both these scores together to get your total.
                    Do the same thing for the dealers points, but be sure to use the dealer's cards and not your own!

                    ***2 Aces***
                    You're doing great! Almost all scores can be calculated now. There is only one exception: 2 Aces. If you get 2 Aces, your total is 12 points and not 22 (because 22 points would be losing!). This of course also goes for the dealer.

                    ***Show the score***
                    Lastly, you want to tell the program to tell you which cards you have drawn and how many points that is. Then show which cards the dealer has and how many points they have.

                    ***Continue in the next tab***
                    Great! You have finished this part of the game! Copy your code and go to the next tab to learn how to ask for an extra card and to declare a winner.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Add these variables to the list of variables
                    card_2 = _
                    dealer_card_1 = _
                    dealer_card_2 = _

                    # Add up your points
                    your_points_1 = {call} _ {with} card_1
                    your_points_2 = _
                    your_total = _

                    # Add up the dealers points
                    dealer_points_1 = _
                    _
                    _

                    # 2 Aces
                    {if} card_1 == 'Ace' {and} _
                        your_total = 12
                    {if} dealer_card_1 _
                        dealer_total = _

                    # Show the score
                    {print} 'You have drawn a ' _ ' and a ' _ '. That is ' _ ' points'
                    {print} 'The dealer has drawn a ' _ ' and a ' _ '. That is ' _ ' points'
                    ```
    blackjack_3:
        name: Blackjack 3
        default_save_name: Blackjack_3
        description: Blackjack part 3
        levels:
            17:
                story_text: |
                    In the previous tabs you have learned how to draw 2 random cards for yourself and for the dealer and to calculate how many points you both got.
                    In this adventure we add the option to ask for an extra card for both you and the dealer.

                    ### Exercise
                    ***Paste your code from the previous adventure*** Firstly, copy your code from the previous tab and paste it here.

                    ***Extra card for you*** If you want, you can get an extra card to get your total as close to 21 as possible. First ask the player if they want an extra card.
                    If they do, pick a random card and print what they have drawn. If the card is not an Ace, you can call the function and add the points to your total.
                    In case the card is an Ace, you can't use the function, because the Ace can be either 1 point or 11 points, depending on how many points you already have earned.
                    If your total is less than 11, you want the ace to be 11 points (because this is closest to 21). So you add 11 points to your total.
                    If the total is more than or equal to 11, you want the ace to be 1 point (because you don't want more than 21 points). So you add 1 point to your total.
                    Lastly, print your new total of points.

                    ***Extra card for the dealer*** The dealer can also get an extra card. The dealer doesn't need to be asked, because they always get an extra card if their total is less than 17.
                    Copy the 'Extra card for you code' and paste it in the dealers section. Then change it to fit the dealer picking an extra card and getting points added to their total.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Extra card for you
                    hit = {ask} _
                    {if} hit == 'yes':
                        card_3 = _
                        {print} _
                        {if} card_3 _ 'Ace':
                            your_points_3 = _
                            your_total = _
                        {else}:
                           {if} your_total _
                                _
                            {else}:
                                _
                        {print} _

                    # Extra card for the dealer
                    {if} dealer_total < 17
                    _
                    ```
    blackjack_4:
        name: Blackjack 4
        default_save_name: Blackjack_4
        description: Blackjack part 4
        levels:
            17:
                story_text: |
                    In the last 3 adventures you have alsmost created a working blackjack game! The only thing left to do is to decide a winner!

                    ### Exercise
                    ***Paste your code from the previous adventure*** Start by pasting the code that you've made so far into your programming field.

                    ***Decide a winner***
                    Firstly, if you and the dealer have an equal amount of points, it's a draw.
                    Secondly, if the dealer has more than 21 points and you don't, you are the winner.
                    Thirdly, if both you and the dealer have less than 22 points, we have to see who came closest to 21. We do that by comparing who has the highest score. Is your total higher than the dealer's total, then you are the winner. If not, the dealer wins.
                    Lastly, in all other scenarios (e.g. you have more than 21 points and the dealer doesn't, or you both have more than 21 points) you are the loser.

                    ***Enjoy the game!***
                    Does your game work properly? Amazing! You have done a great job! Enjoy your game!
                    If it doesn't work right away, no worries, you might have made a mistake. Just keep calm and bebug your code using the ladybug button.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Decide a winner
                    {if} _
                        {print} 'Its a draw! Play again!'
                    {elif} _
                        {print} 'You win!'
                    {elif} _ :
                        {if} _:
                            {print} _
                        {else}:
                            {print} _
                    {else}:
                        _
                    ```
    calculator:
        name: Kalkulator
        default_save_name: kalkulator
        description: Membuat sebuah kalkulator
        levels:
            6:
                story_text: |
                    Now that you can calculate, you can also create a program to practice maths calculations. You can make up the calculations yourself, for example:
                example_code: |
                    ```
                    angka_1 = {ask} 'Isi angka pertama:'
                    angka_2 = {ask} 'Isi angka kedua:'
                    jawaban_benar = angka_1 * angka_2
                    {print} angka_1 ' dikalikan ' angka_2 ' adalah ' jawaban_benar
                    ```
                story_text_2: |
                    You can also let the computer do random calculations on its own using {random}.
                example_code_2: |
                    ```
                    jawaban_benar = 11 * 27
                    jawaban = {ask} 'Berapa 11 dikalikan 27?'
                    {if} jawaban {is} _ {print} 'kerja bagus!'
                    {else} {print} 'Salah! Dulu ' _
                    ```
                story_text_3: |
                    **Tambahan** Anda juga dapat membiarkan komputer melakukan penjumlahan acak sendiri menggunakan `{random}`.
                example_code_3: |
                    angka = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    angka_1 = _
                    angka_2 = _
                    jawaban_benar = angka_1 * angka_2
                    diberikan_jawaban = 'Berapakah 'angka_1' dikalikan 'angka_2'?'
                    {if} _
                    {else} _
            9:
                story_text: |
                    Di level 6 Anda membuat kalkulator, di level ini Anda dapat memperluas kode tersebut sehingga menanyakan banyak pertanyaan.

                    ### Latihan 1
                    Bisakah Anda menyelesaikan baris 10 agar program berfungsi?

                    ### Latihan 2
                    Berikan umpan balik kepada pemain ketika memasukkan jawaban benar atau salah. Untuk mencapai hal tersebut, perluas program Anda dengan `{else}`.
                example_code: |
                    ```
                    skor = 0
                    {repeat} 10 {times}
                        angka = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        angka1 = angka {at} {random}
                        angka2 = angka {at} {random}
                        jawaban_benar = angka1 * angka2
                        {print} 'Berapakah 'angka1' dikalikan 'angka2'?'
                        jawaban = {ask} 'Ketikkan jawaban Anda di sini...'
                        {print} Jawaban 'Anda adalah'
                        {if} _ {is} _
                            skor = skor + 1
                    {print} 'Kerja bagus! Skor Anda adalah... 'skor' dari 10!'
                    ```
            10:
                story_text: |
                    This calculator game helps you practise your tables of multiplication!
                    ### Exercise
                    Fill in the blanks. We want this program to ask the player these questions:
                    ```
                    How much is 1 times 1?
                    How much is 1 times 2?
                    How much is 1 times 3?
                    How much is 2 times 1?
                    How much is 2 times 2?
                    How much is 2 times 3?
                    How much is 3 times 1?
                    How much is 3 times 2?
                    How much is 3 times 3?
                    _
                    ```
                example_code: |
                    ```
                    numbers = 1, 2, 3
                    {for} _
                        {for} _
                            answer = {ask} _
                            correct = number_1 * number_2
                            {if} answer {is} correct
                                {print} 'Great job!'
                            {else}
                                {print} 'That is wrong. The right answer is ' correct
                    ```
            11:
                story_text: |
                    With a `{for}` you can simplify tables of multiplication practise program.

                    ### Exercise 1
                    Improve the example code such that it prints a nice multiplication table: <br> "1 times 10 is 10", "2 times 10 is 20", etc.

                    ### Exercise 2
                    Go back to your level 10 multiplication code, and modify it so that it uses a `{for}` and `{range}`.
                example_code: |
                    ```
                    nomor = 10
                    {for} i {in} {range} 1 {to} 10
                        {print} i * nomor
                    ```
            12:
                story_text: |
                    Di level ini, Anda bisa membuat kalkulator yang berfungsi untuk angka desimal.

                    ### Latihan 1
                    Isilah bagian yang kosong untuk melengkapi kalkulator. Ingatlah untuk menggunakan titik dan bukan koma untuk angka desimal.

                    ### Latihan 2
                    Buat program latihan matematika baru, tapi sekarang gunakan angka desimal.
                    Buat daftar angka, pilih dua hingga kelipatan dan biarkan pemain menjawab.
                    Dan tentunya Anda harus memvalidasi jawabannya! **Ekstra** Tingkatkan kesulitan dengan menambahkan nyawa: Seorang pemain kehilangan nyawa karena jawaban yang salah dan setelah tiga jawaban salah, permainan berakhir.
                example_code: |
                    ```
                    nomor1 = {ask} 'Berapa angka pertama?'
                    nomor2 = {ask} 'Berapakah bilangan kedua?'
                    jawaban = _
                    {print} nomor1 ' ditambah ' nomor2 ' adalah ' _
                    ```
            13:
                story_text: |
                    ### Latihan 1
                    Mari kita buat program latihannya sedikit lebih sulit. Pemain sekarang harus menjawab dua pertanyaan dengan benar. Isilah bagian yang kosong untuk menyelesaikan program.

                    ### Latihan 2 Ekstra
                    Terkadang, perhitungan memiliki beberapa jawaban yang benar. Misalnya 10 bisa dibagi 5 dan 2. Jadi pertanyaannya 'Bilangan berapa yang membagi 10?' bisa dijawab 2 dan 5.
                    Mintalah perhitungan yang memiliki beberapa jawaban benar, minta pemain menjawabnya, dan tentukan apakah benar menggunakan `{or}`.
                    Kosongkan bidang pemrograman dan buat solusi Anda sendiri.
                example_code: |
                    ```
                    jawaban1 = {ask} 'Berapa 10 dikali 7?'
                    jawaban2 = {ask} 'Berapa 6 kali 7?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
            14:
                story_text: |
                    In this adventure you will build a calculator that calculates your mean grade for you. If you get your calculator to work, you can move on to the next adventure, which allows you to add two extra features.

                    ### Exercise 1
                    Fill in the blanks to get the calculator to work.
                    * Start with the fourth line, add a question to figure out what grade the student got.
                    * In the fifth line you'll want to calculate the total of all grades, so the total = total + grade.
                    * Then we get to set the return value. We want to return the mean, so the total devided by the amount of tests (4).
                    * Lastly we finish the code by calling the function in line 8.

                    Did you get it? Awesome! Would you like to add even more to your calculator? **This adventure continues in the next tab!**
                example_code: |
                    ```
                    {define} calculate_mean_grade
                        total = 0
                        {for} i {in} {range} 1 {to} 4
                            grade = {ask} _
                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
                    ```

                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
            15:
                story_text: |
                    You can add the `{while}` loop to the calculator game you've learned to make in a previous level.
                    This makes sure the player can't continue to the next question if they answer incorrectly.

                    ### Exercise
                    Add the `{while}` loop in the function, ask the player what number_1 times number_2 is and print their answer.
                    Then `{call}` the function.
                example_code: |
                    ```
                    {define} new_question
                        numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        number_1 = numbers {at} {random}
                        number_2 = numbers {at} {random}
                        correct = number_1 * number_2
                        answer = 0
                        _
                        _
                        _
                        {print} 'Well done!'

                    {print} 'Give 10 correct answers to win!'
                    {for} i {in} {range} 1 {to} 10
                        _
                    {print} 'You win!'
                    ```
    calculator_2:
        name: Calculator 2
        default_save_name: Calculator 2
        description: Calculator 2
        levels:
            14:
                story_text: |
                    ### Exercise 2
                    **This is the second part of this adventure.** The adventure starts in the previous tab.
                    Of course, you don't always want to calculate the mean of 4 tests. You might want to calculate the mean of 10 tests or only 2...
                    We can fix this problem by adding the argument and variable 'amount_of_tests'.
                    * Start a new line on line 3. Set the amount_of_tests argument by asking the student how many tests they have made.
                    * Change the 4 in line 4 to the new argument amount_of_tests.
                    * Lastly, change the 4 in line 6 to amount_of_tests

                    Try out your new program. Does it work?

                    ### Exercise 3
                    Did you want to make your program even better? Great! In the previous program you could only calculate the mean grade of 1 subject, but it would be better if you could calculate the mean grade for all subjects you want!
                    We won't tell you how to do it, but we will give you one tip: Start your code in line 1 with: define calculate_mean_grade with subject.
                example_code: |
                    ```
                    # Use your own code from the previous adventure.
                    ```
    clear_command:
        name: '{clear}'
        default_save_name: perintah_jelas
        description: perintah yang jelas
        levels:
            4:
                story_text: |
                    Saatnya untuk perintah baru! Dengan `{clear}` Anda dapat menghapus semua teks dari layar keluaran Anda. Dengan cara ini Anda dapat mencegah layar Anda menjadi terlalu penuh dengan teks.
                    Awas! Jika Anda menggunakan perintah `{clear}`, ingatlah untuk menggunakan `{sleep}` di atasnya. Jika tidak, Hedy akan menghapus layar Anda tanpa memberi Anda waktu untuk membaca!
                example_code: |
                    ```
                    {print} '3'
                    {clear}
                    {print} '2'
                    {clear}
                    {print} '1'
                    {clear}
                    {print} 'wait for it...'
                    {sleep} 3
                    {clear}
                    {print} 'KEJUTAN!'
                    ```
    debugging:
        name: melakukan debug
        default_save_name: melakukan debug
        description: Petualangan memperbaiki kesalahan
        levels:
            1:
                story_text: |-
                    Selamat datang di petualangan debugging. Men-debug suatu kode berarti menghilangkan kesalahan dalam kode.
                    Artinya, dalam petualangan debugging ini, kami akan menunjukkan kepada Anda kode yang belum berfungsi.
                    Anda harus mencari tahu apa yang salah dan memperbaiki kesalahannya.

                    ### Latihan
                    Debug kode ini. Semoga beruntung!
                example_code: |
                    **Peringatan! Kode ini perlu di-debug!**
                    ```
                    {print} Saya suka pemrograman
                    Apakah Anda juga menyukai pemrograman?
                    {echo}
                    {print} Apa hobimu?
                    {echo} Hobimu adalah
                    ```
            2:
                story_text: |-
                    Selamat datang di petualangan debugging. Men-debug suatu kode berarti menghilangkan kesalahan dalam kode.
                    Artinya, dalam petualangan debugging ini, kami akan memberi Anda kode yang belum berfungsi.
                    Anda harus mencari tahu apa yang salah dan memperbaiki kesalahannya.

                    ### Latihan
                    Debug kode ini. Semoga beruntung!
                example_code: |
                    **Peringatan! Kode ini perlu di-debug!**
                    ```
                    tujuan {ask} Liburan kemana?
                    {print} Penerbangan menuju tujuan berangkat jam 3 sore.
                    {ask} Apakah Anda sudah mendaftarkan bagasi Anda?
                    {echo}
                    {print} Izinkan saya mencetak boarding pass Anda.
                    {sleep}
                    Ini dia! Semoga perjalanan anda menyenangkan!
                    ```
            3:
                story_text: |-
                    Selamat datang di petualangan debugging. Men-debug suatu kode berarti menghilangkan kesalahan dalam kode.
                    Artinya, dalam petualangan debugging ini, kami akan memberi Anda kode yang belum berfungsi.
                    Anda harus mencari tahu apa yang salah dan memperbaiki kesalahannya.

                    ### Latihan
                    Debug kode ini. Semoga beruntung!
                example_code: |
                    **Peringatan! Kode ini perlu di-debug!**
                    ```
                    pilihan_film {is} drakula, cepat dan geram, sendirian di rumah, barbie
                    film_dipilih {is} film {at} {random}
                    {print} Malam ini kita akan menonton _film pilihan
                    seperti {ask} Apakah kamu suka film itu?
                    {print} Besok kita nonton yang lain.
                    {add} film_yang dipilih {to} pilihan_film
                    {print} Besok kita nonton besok_movie
                    besok_film {is} pilihan_film {at} {random}
                    Aku akan mengambil popcorn! {print}
                    ```
            4:
                story_text: |-
                    ### Latihan
                    Perbaiki kode ini. Semoga beruntung!
                example_code: |
                    **Peringatan! Kode ini perlu di-debug!**
                    ```
                    {print} 'Selamat datang di perpustakaan online!'
                    {ask} 'Genre buku apa yang kamu suka?'
                    {print} 'Kamu suka genre'
                    author {is} {ask} 'Siapa penulis favoritmu?'
                    {print} 'Penulis favoritmu adalah'
                    {print} 'Hmm... aku pikir kamu sebaiknya mencoba... buku {at} {random}'
                    ```
            5:
                story_text: |-
                    ### Latihan
                    Perbaiki kode ini. Semoga beruntung!
                example_code: |
                    **Peringatan! Kode ini perlu diperbaiki!**
                    ```
                    {print} Selamat datang di Kolam Renang Hedy!
                    kelas {is} {ask} 'Apakah Anda di sini untuk bergabung dengan kelas hari ini?'
                    {if} kelas ya
                    {print} 'Bagus! Anda bergabung dengan kelas!'
                    {print} {else} 'Anda tidak akan bergabung dengan kelas'
                    diskon {is} {ask} 'Apakah Anda punya kode diskon?'
                    {if} diskon {is} ya
                    discount_answer {is} {ask} 'Apa kode diskon Anda?'
                    discount_codes = Senior4231, Student8786, NewMember6709
                    {if} discount_answer {is} {in} discount_codes
                    {print} 'Harganya $3,50'
                    {else} 'Kode itu tidak valid
                    {else} 'Harganya $5,50'
                    {print} 'Selamat berenang!'
                    ```
            6:
                story_text: |-
                    ### Latihan
                    Perbaiki kode ini. Semoga beruntung!
                example_code: |
                    **Peringatan! Kode ini perlu di-debug!**
                    ```
                    {print} 'Mesin penjual otomatis'
                    produk_terpilih = {ask} 'Silakan pilih produk'
                    produk_1_dolar = coke jus jeruk air
                    produk_2_dolar = cokelat, kue, bar museli
                    produk3_dolar = keripik kentang, daging sapi asap, roti pisang
                    {if} produk_terpilih {in} produk_1_dolar
                    harga = 1
                    {if} produk_terpilih {is} produk_2_dolar
                    harga = 2
                    {if} produk_terpilih {in} produk_3_dolar
                    harga = 3
                    jumlah_produk = '{ask} Berapa banyak ' produk_terpilih ' yang ingin Anda beli?'
                    total = harga + jumlah_produk
                    {print} 'Totalnya akan menjadi $' harga 'silakan'
                    ```
            7:
                story_text: |-
                    ### Latihan
                    Kejutan! Program ini lebih terlihat seperti keluaran daripada kode. Namun, kami tidak ingin Anda hanya menambahkan perintah `{print}` di depan setiap baris.
                    Perbaiki program ini untuk mengubahnya menjadi lagu anak-anak 'Saudara John (Frère Jaques)' tentu saja dengan menggunakan perintah {repeat}!
                example_code: |
                    **Peringatan! Kode ini perlu diperbaiki!**
                    ```
                    Apa kau tidur?
                    Bang John!
                    Lonceng pagi berbunyi!
                    Ding, dang, dong!
                    ```
            8:
                story_text: |-
                    ### Latihan
                    Perbaiki kode ini. Semoga beruntung!
                example_code: |
                    **Peringatan! Kode ini perlu diperbaiki!**
                    ```
                    {print} 'Selamat datang di Manikur dan Pedikur oleh Hedy'
                    bagian_tubuh = {ask} 'Apakah Anda ingin merapikan kuku jari atau kuku kaki hari ini? Atau keduanya?'
                    {if} bagian_tubuh {is} keduanya
                            {print} 'Itu akan menjadi $25'
                            harga = 25
                        {else}
                            {print} 'Itu akan menjadi $18'
                            harga = 18
                    warna = {ask} 'Warna apa yang Anda inginkan?'
                    kilauan = {ask} 'Apakah Anda ingin ada kilauan di atasnya?'
                    {if} kilauan {is} ya
                        {print} 'Kami menambahkan biaya tambahan $3 untuk itu'
                    harga = harga + 3
                    {else} {print} 'Tidak ada kilauan' {print} 'Jadi tidak ada biaya tambahan'
                    {sleep} 5
                    {print} 'Semua selesai! Harganya $' harga ' tolong!'
                    {print} 'Terima kasih! Selamat tinggal!'
                    ```
            9:
                story_text: |-
                    ### Latihan
                    Perbaiki kode ini. Semoga beruntung!
                example_code: |
                    **Peringatan! Kode ini perlu di-debug!**
                    ```
                    {print} 'Selamat datang di toko sandwich kami'
                    jumlah 'Berapa banyak sandwich yang ingin Anda beli?'
                    {repeat} jumlah {times}
                    {ask} {is} {ask} 'Anda ingin sandwich jenis apa atau roti apa?'
                    jenis_roti {is} putih, gandum, gandum hitam, bawang putih, bebas gluten
                    {if} roti_dipilih dalam jenis_roti_roti
                    {print} 'Indah sekali!'
                    {else}
                    'Maaf kami tidak menjualnya'
                    topping {is} {ask} 'Topping apa yang kamu mau?'
                    saus {is} {ask} 'Saus apa yang kamu mau?'
                    {print} Satu roti_pilihan dengan topping dan saus.
                    harga = jumlah * 6
                    {print} 'Tolong, itu 'harga dolar''
                    ```

                    harga = jumlah * 6
                    {print} 'Tolong, itu 'harga dolar''
            10:
                story_text: |-
                    ### Latihan
                    Perbaiki kode ini. Semoga beruntung!
                example_code: |
                    **Peringatan! Kode ini perlu diperbaiki!**
                    ```
                    nama = Muad Hasan Samira Noura
                    kegiatan = menerbangkan layang-layang, berenang, mendaki gunung, berjemur di bawah sinar matahari
                    {for} nama {is} nama
                    {print} Di pantai namanya suka beraktivitas {at} {random}
                    ```
            11:
                story_text: |-
                    ### Latihan
                    Perbaiki program kalender ini. Output dari program ini seharusnya terlihat seperti daftar tanggal.
                    Misalnya:

                    ```
                    Kalender Hedy
                    Ini semua hari-hari di bulan November
                    1 November
                    2 November
                    3 November
                    ```
                    Dan seterusnya.

                    Ingatlah bahwa Anda harus menguji kode Anda dengan ekstra hati-hati untuk bulan Februari, karena jumlah hari di bulan ini berubah berdasarkan tahun kabisat.
                example_code: |
                    **Peringatan! Kode ini perlu diperbaiki!**
                    ```
                    print 'Kalender Hedy'
                    bulan_dengan_31 hari = Januari, Maret, Mei, Juli, September, Oktober, Desember
                    bulan_dengan_30_hari = April, Juni, Agustus, November
                    bulan = tanya 'Bulan apa yang ingin Anda lihat?'
                    jika bulan dalam bulan_dengan_31_hari
                        hari = 31
                        jika bulan dalam bulan_dengan30_hari
                            hari = 30
                    jika bulan = Februari
                        tahun_kabisat = 2020, 2024, 2028, 2036, 2040, 2044, 2028
                        tahun = tanya 'Tahun berapa sekarang?'
                    jika tahun dalam tahun_kabisat
                        hari = 29
                    kalau tidak
                        hari = 28

                    print 'Inilah hari-hari' ngengat
                    untuk i dalam rentang 1 hingga hari
                        cetak bulan i
                    ```

                    print 'Inilah hari-hari' ngengat
                    untuk i dalam rentang 1 hingga hari
                        cetak bulan i
            12:
                story_text: |-
                    ### Latihan
                    Perbaiki kode ini. Semoga beruntung!
                example_code: |
                    **Peringatan! Kode ini perlu diperbaiki!**
                    ```
                    mendefinisikan salam
                    salam = 'Halo', 'Halo', 'Selamat malam'
                        cetak salam secara acak

                    tentukan mengambil_pesanan
                        makanan = tanya 'Kamu mau makan apa?'
                        print 'Satu makanan'
                        minum = 'Kamu ingin minum apa?'
                        print minuman 'Satu'
                        more = tanya 'Apakah Anda ingin yang lain?'
                            jika lebih berarti 'tidak'
                        cetak 'Baiklah'
                            kalau tidak
                            print 'Dan' lagi
                    print 'Terima kasih'

                    ptint 'Selamat datang di restoran kami'
                    people = tanya 'Berapa orang yang ada di pestamu malam ini?'
                    untuk saya dalam rentang 0 hingga orang
                        hubungi salam_pelanggan
                    ```
            13:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    defin movie_recommendation with name
                        action_movies == 'Die Hard', 'Fast and Furious', 'Inglorious Bastards'
                        romance_movies = 'Love Actually', 'The Notebook', 'Titanic'
                        comedy_movies = 'Mr Bean' 'Barbie''Deadpool'
                        kids_movies = 'Minions', 'Paddington', 'Encanto'
                        if name is 'Camila' or name is 'Manuel'
                            recommended_movie = kids_movie at random
                        if name is 'Pedro' or 'Gabriella'
                                mood = ask 'What you in the mood for?'
                            if mood is 'action'
                                recommended_movie = comedy_movies at random
                            if mood is 'romance'
                                recommended_movie = romance_movies
                        if mood is 'comedy'
                                recommended_movie = comedy_movies at random

                    print 'I would recommend ' recommended_movie ' for ' name

                    name = ask 'Who is watching?'
                    recommendation = ask 'Would you like a recommendation?'
                    if recommendaion is 'yes'
                    print movie_recommendation with name
                    else
                    print 'No problem!'
                    ```
            14:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define calculate_heartbeat
                        print 'Press your fingertips gently against the side of your neck'
                        print '(just under your jawline)'
                        print 'Count the number of beats you feel for 15 seconds'
                        beats == ask 'How many beats do you feel in 15 seconds?'
                        heartbeat = beats*4
                        print 'Your heartbeat is ' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print 'Your heartbeat seems fine'
                        else
                            if heartbeat > 60
                                print 'Your heartbeat seems to be too low'
                            if heartbeat < 100
                                print 'Your heartbeat seems to be too high'
                            print 'You might want to contact a medical professional'

                    measure_heartbeat = ask 'Would you like to measure your heartbeat?'
                    if measure_heartbeat = 'yes'
                        call measure_heartbeat
                    else
                        'no problem'
                    ```

                        print '(just under your jawline)'
                        print 'Count the number of beats you feel for 15 seconds'
                        beats == ask 'How many beats do you feel in 15 seconds?'
                        heartbeat = beats*4
                        print 'Your heartbeat is ' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print 'Your heartbeat seems fine'
                        else
                            if heartbeat > 60
                                print 'Your heartbeat seems to be too low'
                            if heartbeat < 100
                                print 'Your heartbeat seems to be too high'
                            print 'You might want to contact a medical professional'

                    measure_heartbeat = ask 'Would you like to measure your heartbeat?'
                    if measure_heartbeat = 'yes'
                        call measure_heartbeat
                    else
                        'no problem'
            15:
                story_text: |-
                    ### Exercise
                    Debug this random children's story. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    names = 'Tanya', 'Romy', 'Kayla', 'Aldrin', 'Ali'
                    verbs='walking', 'skipping', 'cycling', 'driving', 'running'
                    locations = 'on a mountaintop', 'in the supermarket', 'to the swimming pool'
                    hiding_spots = 'behind a tree', under a table', in a box'
                    sounds = 'a trumpet', 'a car crash', 'thunder'
                    causes_of_noise = 'a television', 'a kid with firecrackers', 'a magic elephant', 'a dream'

                    chosen_ name = names at random
                    chosen_verb = verbs at random
                    chosen_location = 'locations at random'
                    chosen_sounds = noises at random
                    chosen_spot = hiding_spots random
                    chosen_causes = causes_of_noise at random

                    print chosen_name ' was ' chosen_verb ' ' chosen_location
                    print 'when they suddenly heard a sound like ' sounds at random
                    print chosen_name ' looked around, but they couldn't discover where the noise came from'
                    print chosen_name ' hid ' chosen_spot'
                    print 'They tried to look around, but couldn't see anything from there'
                    hidden = 'yes'
                    while hidden = 'yes'
                        print chosen_name 'still didn't see anything'
                    answer = ask 'does ' chosen_name ' move from their hiding spot?'
                        if answer = 'yes'
                            hidden == 'no'
                    print 'chosen_name moved from' chosen_spot
                    print 'And then they saw it was just' chosen_cause
                    print chosen_name 'laughed and went on with their day'
                    print The End
                    ```
            16:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                    Tip: Make sure that you only see your score once in the end.
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    country = ['The Netherlands', 'Poland', 'Turkey', 'Zimbabwe', 'Thailand', 'Brasil', 'Peru', 'Australia', 'India', 'Romania' ]
                    capitals = 'Amsterdam', 'Warshaw' 'Istanbul', 'Harare', 'Bangkok', 'Brasilia', 'Lima', 'Canberra', 'New Delhi', 'Bucharest'
                    score = 0
                    for i in range 0 to 10
                        answer = ask 'What's the capital of ' countries[i]
                        correct = capital[i]
                        if answer = correct
                            print 'Correct!'
                        score = score + 1
                        else
                            print 'Wrong,' capitals[i] 'in the capital of' countries[i]
                        print 'You scored ' score ' out of 10'

                    ```
            17:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define food_order
                        toppings = ask 'pepperoni, tuna, veggie or cheese?'
                        size = ask 'big, medium or small?'
                        number_of_pizza = ask 'How many these pizzas would you like?'

                        print 'YOU ORDERED'
                        print number_of_pizzas ' size  ' topping ' pizza'

                    define drinks_order
                        drink = ask 'water, coke, icetea, lemonade or coffee?'
                        number_of_drinks = ask 'How many of these drinks would you like?'

                        print 'YOU ORDERED'
                        print number_of_drinks ' ' drink

                    'Welcome to Hedy pizza'
                    more_food = ask 'Would you like to order a pizza?'
                    while more_food = 'yes'
                        return food_order
                        more_food = ask 'Would you like to order a pizza?'
                    more_drinks = ask 'Would you like to order some drinks?'
                    while more_drinks == 'yes'
                        call drink_order
                        more_drinks == ask 'Would you like to order more drinks?'


                    print 'Thanks for ordering!'
                    ```
            18:
                story_text: |-
                    ### Exercise
                    Debug this Old MacDonald program from level 16. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    for i in range 1 to 3
                        animal = animals[i]
                        sound = sounds[i]
                        print 'Old MacDonald had a farm'
                        print 'E I E I O!'
                        print 'and on that farm he had a ' animal
                        print 'E I E I O!'
                        print 'with a ' sound sound ' here'
                        print 'and a ' sound sound ' there'
                        print 'here a ' sound
                        print 'there a ' sound
                        print 'everywhere a ' sound sound
                    ```
    default:
        name: Pengantar
        default_save_name: intro
        description: Penjelasan level
        levels:
            1:
                story_text: "Pada level 1 kamu dapat menggunakan perintah `{print}`, `{ask}` dan `{echo}`.\nTulis kodingan kamu di bagian tampilan kode. Atau tekan tombol hijau di contoh kode, dan kode akan dituliskan sendiri!\nCoba jalankan kodenya dengan menekan tombol 'Run code' di bawah tampilan kode.\n\nAnda dapat print text di tampilan dengan menggunakan perintah `{print}` .     \n"
                example_code: |
                    ```
                    {print} Hello world!
                    ```
            2:
                story_text: |
                    Congratulations! You've reached level 2. Hopefully you've already made some awesome codes!
                    In the first level you might've notice that the `{echo}` command can only save one bit of information at a time.
                    For example in the restaurant adventure, you could echo what the costumer wanted to eat, or what they wanted to drink, but not both in one sentence.

                    That changes in level 2. In level 2 you'll learn to work with variables, that allow you to save multiple pieces of information and print them in any place you want.
                    So let's go to the next tab!
                example_code: |
                    **Warning! This code does not work!**
                    In Hedy commands will change sometimes. `{echo}` for example only works in level 1. In this level you'll learn a better way to echo answers back.
                    ```
                    {print} Welcome at Hedy's
                    {ask} What would you like to eat?
                    {echo} So you want
                    {ask} what would you like to drink?
                    {echo} So you want
                    ```
            3:
                story_text: |-
                    Pada level 3 kamu juga dapat membuat list. Kamu dapat meminta komputer memilih sesuatu secara acak dari list tersebut. Kamu dapat melakukan itu dengan `at random`.

                    ```
                    hewan is anjing, kucing, kangguru
                    print hewan at random
                    ```

                    Kamu bisa menemukan semua kode contoh level 3 pada bagian kiri. Ada juga diberikan latihan pada tab-tab diatas.
            4:
                story_text: |
                    Pada level 4 `{ask}` dan `{print}` sudah diubah.

                    Kamu harus memasukkan teks yang mau kamu tampilkan diantara tanda kutip.

                    Ini berguna, karena sekarang kamu bisa menampilkan semua kata yang kamu mau, termasuk kata yang sebelumnya digunakan untuk menyimpan sesuatu dengan `{is}`.

                    Kebanyakan bahasa pemrograman juga menggunakan tanda kutip ketika menampilkan, jadi sebenarnya kita satu langkah lebih dekat dengan pemrograman yang sebenarnya!
                example_code: |
                    ```
                    {print}'You need to use quotation marks from now on!'
                    answer {is} {ask} 'What do we need to use from now on?'
                    print 'We need to use ' answer
                    ```
            5:
                story_text: "Perintah `ask` dan `print` tetap sama seperti pada level 4.\n \nPada level 5, ada hal baru, `if`! Dengan `if` kamu bisa memilih antara dua pilihan.\n\n```\nnama is ask 'siapa nama kamu?'\nif nama is Hedy print 'keren' else print 'boo'\n```\n\nKode ini menampilkan keren jika kamu memasukkan Hedy sebagai nama, dan boo jika kamu memasukkan yang lain.\n\nTerkadang kode dengan `if` bisa menjadi sangat panjang dan tidak cukup menggunakan satu baris <br> \nKamu dapat memisah kodenya menjadi dua baris; baris kedua dimulai dengan `else` seperti ini:\n```\nnama is ask 'siapa nama kamu?'\n if nama is Hedy print 'keren' \nelse print 'boo'\n```\n\n\nPada level 5, tugas-tugas yang ada pada tab-tab terlampir akan menjadi makin kompleks semakin posisi tabnya ke kanan. Jadi, pastikan untuk mengerjakan mulai dari kiri ke kanan."
                example_code: |
                    ```
                    password {is} {ask} 'Apa kata sandi yang benar?'
                    ```
            6:
                story_text: |-
                    `ask`, `print`, dan `if` berfungsi sama persis dengan yang ada pada level 4 dan level 5.
                    Tapi di level 6 ada sesuatu yang baru, kamu sekarang bisa melakukan perhitungan matematika.

                    Pada level 6, kode baru sudah ditambahkan untuk perhitungan matematika.

                    Penambahan itu mudah, kamu menuliskannya persis seperti di matematika: `5 + 5` sebagai contoh. Pengurangan juga mudah dituliskan, seperti `5 - 5`.

                    Perkalian sedikit berbeda, karena tidak ada simbol perkalian di keyboard kita. Cobalah cari, ini beneran tidak ada!
                    Karenanya kita melakukan perkalian dengan tanda bintang diatas tombol '8': `5 * 5`. Baca itu sebagai 5 kali 5 dan kamu akan lebih mudah mengingatnya.

                    ```
                    print '5 tambah 5 adalah ' 5 + 5
                    print '5 kurang 5 adalah ' 5 - 5
                    print '5 kali 5 adalah ' 5 * 5
                    ```
                example_code: |
                    ```
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 minus 5 is ' 5 - 5
                    {print} '5 {times} 5 is ' 5 * 5
                    ```
            7:
                story_text: |-
                    `ask`, `print`, dan `if` berfungsi sama persis dengan yang ada pada level 6.
                    Tapi level 7 menambahkan perintah `repeat`. Perintah repeat dapat digunakan untuk menjalankan satu baris kode beberapa kali

                    ```
                    repeat 3 times print 'Hedy itu menyenangkan!'
                    ```
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy is fun!'
                    ```
            8:
                story_text: "`ask` dan `print` tetap berfungsi sama seperti sebelumnya. Tapi `if` dan `repeat` berubah. \nKamu sekarang dapat mengeksekusi kumpulan kode secara bersamaan, tapi kamu harus memberikan indentasi pada kode tersebut.\n Indentasi berarti memberikan empat spasi diawal baris. Ini juga berlaku ketika kamu hanya mau mengeksekusi satu baris kode saja.\n\n```\nrepeat 5 times\n    print 'halo semua'\n    print 'Ini akan ditampilkan lima kali'\n```"
                example_code: |
                    Ini adalah cara perintah `{repeat}` bekerja:
                    ```
                    {repeat} 5 {times}
                        {print} 'Halo semua'
                        {print} 'Ini adalah pengulangan 5 kali'
                    ```
                    Ini bagaimana perintah `{if}` dan `{else}` bekerja:

                    ```
                    nama {is} {ask} 'Siapa nama kamu?'
                    {if} nama {is} Hedy
                        {print} 'Selamat datang Hedy'
                        {print} 'Kamu bisa bermain di komputer kamu!'
                    {else}
                        {print} 'PENGACAU!'
                        {print} 'Kamu tidak bisa menggunakan komputer ini!'
                    ```
            9:
                story_text: |-
                    Pada level ini kamu tidak hanya bisa menggunakan beberapa baris baru untuk  `if` and `repeat`, namun juga dapat menggabungkan mereka!
                    Pada contoh kamu lihat sebuah perintah `if` didalam perintah `repeat`. Kamu juga dimungkinkan untuk melakukan sebaliknya, dan `if` juga boleh didalam `if` dan `repeat` didalam `repeat`.
                    Cobalah!

                    ```
                    repeat 3 times
                        makanan = ask 'Apa yang kamu mau?'
                        if makanan is 'pizza'
                            print 'bagus!'
                        else
                            print 'pizza lebih enak'
                    ```
                example_code: |
                    ```
                    {repeat} 3 {times}
                        food = {ask} 'What do you want?'
                        {if} food {is} pizza
                            {print} 'nice!'
                        else
                            {print} 'pizza is better'
                    ```
            10:
                story_text: |
                    Pada level ini kita akan belajar perintah `for`. Dengan `for` kamu dapat membuat sebuah daftar dan mengakses semua isinya.
                    `for` membentuk sebuah blok seperti `repeat` dan `if` jadi semua baris untuk aksi harus diawali dengan beberapa spasi.

                    ```
                    hewanhewan is anjing, kucing, ikan
                    for hewan in hewanhewan
                      print 'Aku suka ' hewan
                    ```
                example_code: |
                    ```
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                      {print} 'I love ' animal
                    ```
            11:
                story_text: |
                    You have reached level 11, you're doing great! In the higher levels, Hedy is focussing more and more on teaching you the programming language Python.
                    In Python there is no `{repeat}` command, but there is a command that works like {repeat}. Are you curious to find out how to say `{repeat}` in Python language? Quickly go on to find out!
            12:
                story_text: |-
                    **Angka Desimal**
                    Sejauh ini, Hedy tidak diperbolehkan untuk menggunakan angka desimal seperti 1.5, tapi sekarang kita diperbolehkan untuk itu. Catatan untuk itu gunakan `.` untuk angka desimal itu
                example_code: |
                    ```
                    {print} 'Two and a half plus two and a half is...'
                    {print} 2.5 + 2.5
                    ```
            13:
                story_text: |
                    Pada level sebelumnya Anda telah mempelajari cara menempatkan dua perintah `{if}` di dalam satu sama lain. Ini berfungsi dengan baik, tetapi ini memberi Anda kode yang sangat panjang dan tidak praktis seperti ini:

                    Dalam sistem ini Anda harus memberikan nama pengguna dan kata sandi yang benar.
                    Di level ini Anda akan mempelajari perintah `{and}` yang akan membuat kode ini lebih pendek dan mudah dimengerti!
                    Coba lihat!
                example_code: |
                    ```
                    name = ask 'what is your name?'
                    age = ask 'what is your age?'
                    if name is 'Hedy' and age is 2
                        print 'You are the real Hedy!'
                    ```
            14:
                story_text: 'Kita akan mulai belajar untuk menggunakan banyak hal baru! Kamu mungkin sudah tahu hal-hal ini dari matematika: simbol `<` dan `>`. Simbol `<` mengecek apakah angka pertama lebih kecil daripada angka kedua, seperti `4 < 5`. Simbol `>` mengecek apakah angka pertama lebih besar daripada angka kedua, seperti `6 > 5`.'
                example_code: |
                    ```
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
                    ```

                    if umur < 13
                        print 'Kamu lebih muda daripada aku!'
                    else
                        print 'Kamu lebih tua daripada aku!'
            15:
                story_text: Kita akan belajar tentang jenis pengulangan baru, pengulangan `while`! Kita akan melakukan pengulangan tersebut terus-menerus selama kondisinya dipenuhi. Jadi di contoh tersebut, kita terus melakukan pengulangan hingga jawaban benar telah diberikan. Jika jawaban benar tidak diberikan, pengulangan tidak akan pernah berakhir!
                example_code: |
                    ```
                    answer = 0
                    while answer != 25
                        answer = ask 'What is 5 times 5?'
                    print 'A correct answer has been given'
                    ```
            16:
                story_text: Kita akan menggunakan kurung siku untuk membungkus nilai-nilai didalam list! Kita juga akan membutuhkan tanda kutip satu (') untuk membungkus setiap nilai didalam list.
                example_code: |
                    ```
                    friends = ['Ahmed', 'Ben', 'Cayden']
                    {print} friends[1] ' is the first friend on the list.'
                    {print} friends[2] ' is the second friend on the list.'
                    {print} friends[3] ' is the third friend on the list.'
                    #now we will match 2 lists using the variable i
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} friends[i] 's lucky number is ' lucky_numbers[i]
                    ```
            17:
                story_text: Kali ini kita akan mengganti proses indentasi sedikit. Setiap kali kita membutuhkan indentasi, kita perlu menambahkan `:` pada akhir baris sebelumnya
            18:
                story_text: |-
                    We arrived at real Python code! That means we need to use parentheses with {print} and {range} from now on.
                    {print}('My name is ', naam)
    dice:
        name: Dadu
        default_save_name: dadu
        description: Membuat dadu kamu sendiri
        levels:
            3:
                story_text: |-
                    Pada level 2 kamu dapat memilih dari dalam list. Dengan itu, kamu dapat meminta komputer untuk memilih salah satu sisi dari dadu.

                    Lihatlah permainan yang kamu punya di rumah.

                    Apakah ada permainan yang menggunakan dadu khusus? Kamu juga bisa mengimplementasikannya dalam kode ini.

                    Sebagai contoh, dadu permainan Earthworms memiliki angka 1 hingga 5 dan satu sisi bergambar cacing tanah.

                    ![Dadu earthworms dengan angka 1 sampai 5 dan sebuah cacing tanah](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    pilihan is 1, 2, 3, 4, 5, cacing
                    print pilihan at random
                    ```
                story_text_2: |
                    ### Exercise
                    The dice in the example above are dice for a specific game. Can you make normal dice?
                    Or other special dice from a different game?
                example_code_2: |
                    ```
                    choices {is} _
                    ```
            4:
                story_text: |-
                    Pada level 3 kita dapat membuat kalimat-kalimat dengan nilai dadu didalamnya, menggunakan tanda kutip satu tentunya.
                    Kali ini kode contoh belum sempurna. Dapatkah kamu menyempurnakannya?
            5:
                story_text: |-
                    Kamu juga dapat membuat dadu di level 4 dengan menggunakan `if`
                    Lengkapi kode berikut agar kode mengatakan 'Kamu dapat berhenti melempar' ketika kamu mendapatkan cacing sebagai hasil lemparan.

                    Tapi mungkin kamu mau membuat dadu dari permainan yang lain. Itu juga tidak masalah!
                    Karenanya buatlah respon milikmu sendiri. Misal 'yeah!' untuk 6 dan 'Kasihan' untuk nilai lainnya.
                example_code: |
                    ```
                    pilihan is 1, 2, 3, 4, 5, cacing
                    lemparan is _
                    print 'kamu memiliki' _ 'lemparan'
                    if _ is cacing print 'Kamu dapat berhenti melempar.' _ print 'Kamu harus mendengarnya sekali lagi!'
                    ```
            6:
                story_text: |
                    Anda juga dapat membuat Cacing Tanah mati lagi di sini, tetapi sekarang Anda juga dapat menghitung berapa banyak poin yang telah diperoleh.
                    Anda mungkin tahu bahwa cacing menghitung 5 poin untuk Cacing Tanah. Nah setelah melakukan roll anda bisa langsung menghitung berapa poin yang sudah anda lempar.
                    Ini adalah kode untuk menghitung poin untuk satu dadu:

                    ### Latihan
                    Bisakah kamu membuat kodenya sehingga mendapatkan total skor untuk 8 dadu? Untuk melakukannya, Anda harus menyalin dan menempelkan beberapa baris kode.
                example_code: |
                    ```
                    pilihan is 1, 2, 3, 4, 5, cacing
                    poin is 0
                    lemparan is pilihan at random
                    print 'kamu mendapatkan' lemparan
                    if lemparan is cacing poin is poin + 5 else poin is poin + lemparan
                    print 'ini adalah poinnya: ' poin
                    ```
                    Dapatkan kamu membuat kodenya untuk menghitung total poin dari lemparan dadu 8 kali? Untuk melakukannya, kamu harus menyalin beberapa baris kode.

                    Apakah kamu berhasil menghitung poin dari lemparan dadu 8 kali? Ini memerlukan banyak salinan kode, betul? Kita akan membuatnya lebih mudah pada level 7!
                example_code_2: |
                    Did you manage to calculate the score for 8 dice? That required a lot of cutting and pasting, right? We are going to make that easier in level 7!
            7:
                story_text: |-
                    Kamu juga dapat membuat dadu kembali di level 5. Dengan `repeat` kamu dapat dengan mudah melempar dadu beberapa kali.
                    Cobalah lengkapi kode berikut! Bagian dengan garis bawah harus berisi beberapa perintah dan karakter.

                    Tapi mungkin kamu mau membuat dadu baru. Tentu kamu boleh melakukannya!
                example_code: |
                    ```
                    pilihan is 1, 2, 3, 4, 5, cacing
                    repeat _ _ print _ _ _
                    ```
            10:
                story_text: |
                    Is everybody taking too long throwing the dice? In this level you can let Hedy throw all the dice at once!
                example_code: |
                    ```
                    players = Ann, John, Jesse
                    choices = 1, 2, 3, 4, 5, 6
                    {for} player {in} players
                        {print} player ' throws ' choices {at} {random}
                        {sleep}
                    ```
            15:
                story_text: |
                    ### Exercise
                    In this level you can create a little game in which you'll have to throw 6 as fast as possible.
                    We have started the code, it's up to you to get the game to work!

                    Firstly, add a `{while}` loop that checks if 6 has been thrown or not.
                    As long as you haven't thrown 6 already, throw the dice on a random number.
                    Print what the player has thrown.
                    Add a try to the amount of tries
                    Wait a second before you throw again, or - in case you've thrown a 6 - before the game ends.
                example_code: |
                    ```
                    options = 1, 2, 3, 4, 5, 6
                    {print} 'Throw 6 as fast as you can!'
                    thrown = 0
                    tries = 0
                    _
                    _
                    _
                    _
                    _
                    {print} 'Yes! You have thrown 6 in ' tries ' tries.'
                    ```
    dishes:
        name: Cuci piring?
        default_save_name: Piring
        description: Gunakan komputer untuk mengetahui siapa yang akan mencuci piring (dimulai di level 2)
        levels:
            3:
                story_text: |-
                    Apakah kamu selalu berdebat di rumah tentang siapa yang harus mencuci piring atau membuang sampah hari ini?

                    Maka kamu dapat meminta komputer untuk memilih secara adil. Kamu dapat membuat programnya di level 2!

                    Kamu pertama harus membuat daftar anggota keluargamu. Lalu pilihlah dengan `at random` dari dalam daftar tersebut.
                example_code: |
                    ```
                    orang is ibu, ayah, Emma, Sophie
                    print orang at random
                    ```
                story_text_2: |
                    Don't feel like doing the dishes yourself? Hack the program to remove your name from the list.
            4:
                story_text: |-
                    Dengan kutip satu, kamu dapat membuat rencana cuci piring kamu lebih cantik.
                    Kali ini kode contohnya tidak terlalu lengkap.

                    Dapatkah kamu melengkapi kode tersebut dengan mengisi bagian yang kosong? Setiap bagian harus diisi dengan sebuah kata atau simbol.

                    Tip: Jangan lupa tanda kutip satu!
                example_code: |
                    ```
                    orang is ibu, ayah, Emma, Sophie
                    print _ cuci piring akan dilakukan oleh _
                    print orang at _
                    ```
            5:
                story_text: "Dengan `if` kamu bisa melakukan banyak hal menyenangkan dalam pengambilan pilihan dalam program tersebut. Kamu dapat membuat program kamu merespon pilihan yang sudah diberikan oleh komputer.\n\nDapatkah kamu melengkapi kode ini agar menampilkan 'Yahh' ketika yang dipilih adalah giliranmu dan 'Yeah!' untuk yang lainnya. \nJangan lupakan tanda kutip satu!"
                example_code: |
                    ```
                    orang is ibu, ayah, Emma, Sophie
                    pencucipirng is orang at random
                    if pencucipiring is Sophie print _ Yahh aku harus mencuci piring _ else print 'untungnya tidak ada piring yang perlu dicuci karena'  _ 'sudah mencucinya'
                    ```
            6:
                story_text: Dengan `repeat`, kamu dapat mengulang bagian-bagian kode. Kamu dapat melakukan ini untuk menentukan siapa yang akan mencuci piring selama seminggu kedepan.
                example_code: |
                    ```
                    orang is ibu, ayah, Emma, Sophie
                    repeat _ _ print 'pencuci piringnya adalah' _
                    ```
                story_text_2: |
                    Jika Anda sangat kurang beruntung, program sebelumnya mungkin memilih Anda untuk mencuci piring selama seminggu penuh! Itu tidak adil!
                    Untuk membuat sistem yang lebih adil Anda dapat menggunakan perintah `{remove}` untuk menghapus orang yang dipilih dari daftar. Dengan cara ini Anda tidak perlu mencuci piring lagi sampai semua orang mendapat giliran.

                    Senin dan Selasa siap untuk Anda! Bisakah Anda menambahkan sisa minggu ini?
                    Dan… dapatkah Anda menemukan solusi ketika daftar Anda kosong?
                example_code_2: |
                    ```
                    people = mom, dad, Emma, Sophie
                    dishwasher = people {at} {random}
                    {print} 'Monday the dishes are done by: ' dishwasher
                    {remove} dishwasher {from} people
                    dishwasher = people {at} {random}
                    {print} 'Tuesday the dishes are done by: ' dishwasher
                    {remove} dishwasher {from} people
                    dishwasher = people {at} {random}
                    ```
            7:
                story_text: Seberapa sering semua orang mencuci piring? Apakah adil? Kamu harus menghitungnya di level 6.
                example_code: |
                    ```
                    orang is ibu, ayah, Emma, Sophie
                    emma_cuci is 0
                    pencucipiring is orang at random
                    print 'Pencuci piringnya adalah' pencucipiring
                    if pencucipiring is Emma emma_cuci is emma_cuci + 1
                    print 'Emma akan mencuci piring minggu ini sebanyak' emma_cuci 'kali'
                    ```

                    Sekarang kamu dapat menyalin baris 3 ke 5 beberapa kali (misal 7 kali untuk seminggu penuh) untuk menghitung jumlah jatah cuci piring selama seminggu.
                    Apakah kamu mau membuat kodenya untuk seminggu penuh?
            10:
                story_text: |
                    In this level you could make an even better dish washing shedule.
                example_code: |
                    ```
                    days = Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
                    names = mom, dad, Emma, Sophie
                    {for} day {in} days
                        {print} names {at} {random} ' does the dishes on ' day
                    ```
    elif_command:
        name: '{elif}'
        default_save_name: elif
        description: elif
        levels:
            17:
                story_text: |
                    In this level you can also use a new command: `{elif}`. `{elif}` is a combination of the keywords `{else}` and `{if}` and you need it when you want to make 3 (or more!) options.
                    Check it out!
                example_code: |
                    ```
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
                    ```
    for_command:
        name: '{for}'
        default_save_name: for
        description: for command
        levels:
            10:
                story_text: |-
                    ## For
                    In this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.
                    `{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with 4 spaces.
                example_code: |
                    ```
                    animals = dog, cat, blobfish
                    {for} animal {in} animals
                        {print} 'I love ' animal
                    ```
                story_text_2: |
                    ### Exercise
                    Finish this code by adding `{for} action {in} actions` to line 2.
                example_code_2: |
                    ```
                    actions = clap your hands, stomp your feet, shout Hurray!
                    _
                        {repeat} 2 {times}
                            {print} 'If youre happy and you know it, ' action
                            {sleep} 2
                        {print} 'If youre happy and you know it, and you really want to show it'
                        {print} 'If youre happy and you know it, ' action
                        {sleep} 3
                    ```
            11:
                story_text: |-
                    In this level, we add a new form of the `{for}`. In earlier levels, we used `{for}` with a list, but we can also use `{for}` with numbers.
                    We do that by adding a variable name, followed by  `{in}` `{range}`. We then write the number to start at, `{to}` and the number to end at.
                    Try the example to see what happens! In this level again, you will need to use indentations in lines below the `{for}` statements.
                example_code: |
                    ```
                    {for} counter {in} {range} 1 {to} 10
                        {print} counter
                    {print} 'Ready or not. Here I come!'
                    ```
            17:
                story_text: |
                    Now we are going to change indentation a little bit. Every time that we need an indentation, we need `:` at the line before the indentation.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Ready or not, here I come!'
                    ```
            18:
                story_text: |
                    Lastly, we'll turn `{for} i {in} {range} 1 to 5` into real Python code, like this:
                example_code: |
                    ```
                    {for} i {in} {range}(1,5):
                        {print} (i)
                    ```
    fortune:
        name: Peramal
        default_save_name: peramal
        description: Minta Hedy untuk meramal masa depan
        levels:
            1:
                story_text: |
                    Pernahkah Anda menghadiri karnaval dan masa depan Anda diramalkan oleh seorang peramal? Atau pernahkah Anda bermain dengan bola delapan ajaib?
                    Maka Anda mungkin tahu bahwa mereka tidak bisa memprediksi masa depan Anda, tapi tetap menyenangkan untuk dimainkan!

                    Di level mendatang, Anda dapat mempelajari cara membuat mesin peramal sendiri!
                    Di level 1 Anda dapat memulai dengan mudah dengan membiarkan Hedy memperkenalkan dirinya sebagai peramal dan membiarkannya `{echo}` jawaban para pemain.
                    Seperti ini:
                example_code: "```\nprint Halo, aku Hedy sang peramal!\nask Siapa kamu?\nprint Ijinkan aku melihat bola kristal ku\nprint Aku lihat... Aku lihat...\necho Nama kamu adalah \n```\n\nHedy sekarang hanya memberitahukan nama kamu. Dapatkah kamu membuat Hedy dapat memberitahukan hal-hal lain tentang masa depan kamu?\n\nTentu saja, Hedy bukan peramal yang baik, karena dia hanya bisa mengulang jawaban yang diberikan oleh pengguna!\nLihatlah level 2 dan tingkatkan kemampuan peramal kamu.\n"
                story_text_2: |
                    ### Exercise
                    Hedy now only tells you your name. Can you expand the code so that Hedy can predict more things about you?
                    Obviously, Hedy isn't a very good fortune teller yet, as she can only repeat the answers that were given by the players!
                    Take a look in level 2 to improve your fortune teller.
            3:
                story_text: |-
                    Pada level 1 kamu telah membuat mesin peramal pertama kamu, tapi Hedy tidak bisa benar-benar meramal, hanya mengulang.
                    Pada level 2 kamu dapat menggunakan variabel dan perintah `at random` untuk membantu Hedy memilih sebuah jawaban untukmu. Lihatlah kode berikut sebagai contoh.
                example_code: |
                    Pada contoh ini kamu bisa menanyakan pertanyaan benar-salah ke Hedy dan Hedy akan merespon dengan jawaban acak untukmu.
                    ```
                    print Aku Hedy sang peramal!
                    pertanyaan is ask Apa yang ingin kamu tahu?
                    print Ini apa yang ingin kamu tahu: pertanyaan
                    jawaban is ya, tidak, mungkin
                    print Bola kristal ku menyatakan.. jawaban at random
                    ```

                    Sekarang, Hedy hanya dapat menjawab ya, tidak, atau mungkin. Dapatkah kamu memberikan Hedy alternatif jawaban yang lebih banyak, seperti 'tentu saja' atau 'tanya lagi'.
                story_text_2: |
                    ### Exercises
                    Now, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or '{ask} again'.
            4:
                story_text: |
                    ### Exercise
                    We have removed all the quotation marks from this example code, can you add them in all the right places?

                    ### Exercise 2
                    Go back to the previous level and copy your fortune teller code. Make the code work in this level by adding quotation marks in the right spots.
                example_code: |
                    ```
                    _ Add the quotation marks to this code _
                    {print} Im Hedy the fortune teller!
                    question {is} {ask} What do you want to know?
                    {print} This is your question:  question
                    answers {is} yes, no, maybe
                    {print} My crystal ball says...
                    {sleep} 2
                    {print} answers {at} {random}
                    ```
            5:
                story_text: |-
                    Pada level 4 kamu akan belajar untuk membuat kemungkinan jawabannya sesuai dengan keinginanmu, ketika menggunakan jasa sang peramal!
                    Dengan menggunakan `if` dan `else` kamu dapat memastikan bahwa kamu akan mendapatkan ramalan yang baik walaupun orang lain belum tentu.
                    Cek contoh berikut dan temukan caranya.
                example_code: |
                    ```
                    print 'Aku Hedy sang peramal!'
                    print 'Aku dapat meramal apakah kamu akan memenangkan undian besok!'
                    orang is ask 'Siapa kamu?'
                    if orang is Hedy print 'Kamu pasti menang!' else print 'Nasib buruk! Orang lain yang akan menang!'
                    ```
            6:
                story_text: |-
                    Pada level 5 kamu dapat menggunakan matematika dalam ramalan sang peramal. Ini mengijinkan kamu untuk membuat formula (yang mungkin lucu) untuk meramal masa depan.
                    Sebagai contoh kamu dapat meramal seberapa kaya kamu dan berapa banyak anak yang akan kamu dapat ketika kamu dewasa.
                example_code: |
                    ```
                    print 'Aku Hedy sang peramal'
                    print 'Aku dapat meramal berapa banyak anak yang akan kamu peroleh ketika kamu dewasa!'
                    umur is ask 'Berapa umurmu?'
                    saudara is ask 'Berapa banyak saudara yang kamu miliki?'
                    tinggi is ask 'Seberapa tinggi kamu dalam satuan sentimeter?'
                    anak is tinggi / umur
                    anak is anak - saudara
                    print 'Kamu akan memiliki...'
                    print anak ' anak!'
                    ```

                    Jika contoh sebelumnya kurang lucu, lihatlah yang ini!

                    ```
                    print 'Aku Hedy sang peramal!'
                    print 'Aku akan meramal seberapa pintar kamu!'
                    sepakbola is ask 'Dalam skala 1-10 seberapa tertarik kamu dengan sepakbola?'
                    pisang is ask 'Berapa banyak pisang yang kamu makan minggu ini?'
                    higienis is ask 'Berapa kali kamu mencuci tangan hari ini?'
                    hasil is pisang + higienis
                    hasil is hasil * sepakbola
                    print 'Kamu ' hasil ' persen pintar.'
                    ```
            7:
                story_text: Pada level 6 kamu dapat menggunakan perintah `repeat` untuk membuat mesin kamu meramal beberapa kali
                example_code: "```\nprint 'Aku Hedy sang peramal!'\nprint 'Kamu dapat bertanya 3 pertanyaan!'\nrepeat 3 times pertanyaan is ask 'Apa yang ingin kamu tahu?'\njawaban {is} ya, tidak, mungkin\nrepeat 3 times print 'Bola kristal saya mengatakan... 'jawaban {at} {random}\n```\n\nSeperti yang kamu lihat, pertanyaan-pertanyaan yang diberikan tidak ditampilkan pada contoh. Ini karena variabel 'pertanyaan' telah diulang tiga kali.\nSetiap kali pemain memberikan pertanyaan baru, Hedy menimpa pertanyaan sebelumnya. \nArtinya kamu tidak bisa menanyakan dengan cara seperti ini.\n\nDengan menggunakan tiga variabel (misal 'pertanyaan1', 'pertanyaan2' dan 'pertanyaan3') kamu dapat memecahkan masalah ini dan menampilkan semua pertanyaan.\nIni berarti kamu hanya dapat menggunakan perintah `repeat` untuk jawaban. Kamu harus menanyakan dan menampilkan semua pertanyaan secara terpisah.\nDapatkah kamu melakukannya?\n\nPada level 7 tampilan perintah `repeat` akan berubah, memungkinkan kamu untuk mengulang beberapa baris sekaligus.\n"
            8:
                story_text: |-
                    Pada level 5 kamu telah belajar bagaimana menggunakan perintah `repeat` untuk membuat sang peramal menjawab tiga pertanyaan sekaligus, namun kita masih tidak bisa menampilkan pertanyaan-pertanyaannya sekaligus.
                    Pada level 7 masalah ini dapat diselesaikan, karena cara baru dalam penggunaan perintah `repeat`.
                    Pada contoh berikut kamu dapat membuat sang peramal menanyakan 3 pertanyaan dan juga menampilkannya sekaligus!
                example_code: |
                    ```
                    {print} 'Aku Hedy sang peramal!'
                    {print} 'Kamu dapat bertanya 3 pertanyaan!'
                    jawaban {is} ya, tidak, mungkin
                    {repeat} 3 {times}
                        pertanyaan {is} {ask} 'Apa yang ingin kamu tahu?'
                        {print} pertanyaan
                        {print} 'Bola kristal saya menyatakan...' jawaban {at} {random}
                    ```
            10:
                story_text: |
                    In this level you'll learn how to program the game MASH (mansion, apartement, shack, house). In this game you can predict for all the players at once, what their future will look like.
                example_code: |
                    ```
                    houses = mansion, apartment, shack, house
                    loves = nobody, a royal, their neighbour, their true love
                    pets = dog, cat, elephant
                    names = Jenna, Ryan, Jim
                    {for} name {in} names
                        {print} name ' lives in a ' houses {at} {random}
                        {print} name ' will marry ' loves {at} {random}
                        {print} name ' will get a ' pets {at} {random} ' as their pet.'
                        {sleep}
                    ```
            12:
                story_text: |
                    In this level you can make your fortunes multiple words. Like in this example below:
                example_code: |
                    ```
                    fortunes = 'you will be rich', 'you will fall in love', 'you will slip on a banana peel'
                    {print} 'I will take a look in my crystall ball for your future.'
                    {print} 'I see... I see...'
                    {sleep}
                    {print} fortunes {at} {random}
                    ```
    functions:
        name: functions
        default_save_name: functions
        description: functions
        levels:
            12:
                story_text: |
                    In this level you'll learn how to use **functions**. A function is a block of code you can easily use multiple times. Using functions helps us organize pieces of code that we can use again and again.
                    To create a function, use `{define}` and give the function a name. Then put all the lines you want in the function in a indented block under the `{define}` line.
                    Leave one empty line in your code to make it look nice and neat. Great job! You have created a function!

                    Now, whenever we need that block of code, we just use <code>{call}</code> with the function's name to call it up! We don't have to type that block of code again.

                    Check out this example code of a game of Twister. The function 'turn' contains a block of code that chooses which limb should go where.

                    ### Exercise
                    Finish this code by setting the 2 variables chosen_limb and chosen_color.
                    Then, choose how many times you want to call the function to give the twister spinner a spin.

                    ### Exercise 2
                    Improve your code by adding a variable called 'people'. Use the variable to give all the players their own command in the game.
                    For example: 'Ahmed, right hand on green' or 'Jessica, left foot on yellow'.
                example_code: |
                    ```
                    sides = 'left', 'right'
                    limbs = 'hand', 'foot'
                    colors = 'red', 'blue', 'green', 'yellow'

                    {define} turn
                        chosen_side = sides {at} {random}
                        chosen_limb = limbs _
                        chosen_color = colors _
                        {print} chosen_side ' ' chosen_limb ' on ' chosen_color

                    {print} 'Lets play a game of Twister!'
                    {for} i {in} {range} 1 to _
                        {call} turn
                        {sleep} 2
                    ```
            13:
                story_text: |
                    Now that you've learned how to use functions, you'll learn how to use a function with an argument.
                    An **argument** is a variable that is used within a function. It is not used outside the function.

                    For example in this code we've programmed the first verse of the song 'My Bonnie is over the ocean'.
                    In this example code the argument `place` is used. Place is a variable that is only used in the function, so an argument.
                    To use `place` we have programmed the line `define song with place`.
                    When the function is called, computer will replace the argument `place`, with the piece of text after `call song with`.

                    ### Exercise
                    The next verse of this song goes:

                    Last night as I lay on my pillow
                    Last night as I lay on my bed
                    Last night as I lay on my pillow
                    I dreamed that my Bonnie is dead

                    Can you program this verse in the same way as the example?
                example_code: |
                    ```
                    {define} song {with} place
                        {print} 'My Bonnie is over the ' place

                    {call} song {with} 'ocean'
                    {call} song {with} 'sea'
                    {call} song {with} 'ocean'
                    ```
            14:
                story_text: |
                    In the previous levels you have learned to create functions and use arguments with them. Another great use of a function is to let it calculate something for you.
                    You can give the function a calculation and it will give you the answer of the calculation. This answer is called a **return value**.

                    For example, in this code the function calculate_new_price will calculate the new price of any item. It will give you the new price as a return value.

                    ### Exercise
                    Finish this code. We have already made the variable new_price for you, you only need to set it.
                    You should finish the line of code by calling the function that calculates the new price.
                example_code: |
                    ```
                    {define} calculate_new_price {with} amount, percentage
                        percentage = percentage / 100
                        discount_amount = amount * percentage
                        return amount - discount_amount

                    old_price = {ask} 'How much is on the price tag?'
                    discount = {ask} 'What percentage is the discount?'

                    new_price = _ calculate_new_price {with} old_price, _
                    {print} 'The new price is ' new_price ' dollar'
                    ```
            18:
                story_text: |
                    Let's make functions the Pythons way! To define a function, we no longer use:

                    `{define} name_function {with} argument_1, argument_2:`

                    but we use:

                    `{def} name_function(argument_1, argument_2):`.


                    If you don't want to use arguments, you just leave the space between the parantheses empty.
                    To call a function, we don't need the `{call}` command anymore. You just type the name of the function.
                example_code: |
                    ```
                    {def} calculate_score(answer, correct_answer):
                        {if} answer == correct_answer:
                            score = 1
                        {elif} answer == '?':
                            score = 0
                        {else}:
                            score = -1
                        {return} score

                    answer = {input} ('Where can you find the Eiffel Tower?')
                    correct_answer = 'Paris'
                    score = calculate_score(answer, correct_answer)
                    {print} ('Your score is... ', score)
                    ```
    guess_my_number:
        name: Guess my number
        default_save_name: guess my number
        description: guess my number
        levels:
            14:
                story_text: |
                    In this level you can program the game 'Guess my number'

                    ### Exercise
                    Fill in the correct symbols on the blanks to get the game to work.
                example_code: |
                    ```
                    {print} 'Guess my number'
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number = numbers {at} {random}
                    game = 'on'
                    {for} i {in} {range} 1 {to} 10
                        {if} game == 'on'
                            guess = {ask} 'Which number do you think it is?'
                            {if} guess _ number
                                {print} 'Lower!'
                            {if} guess _ number
                                {print} 'Higher!'
                            {if} guess _ number
                                {print} 'You win!'
                                game = 'over'
                    ```
    hangman:
        name: Hangman
        default_save_name: Hangman
        description: Guess the word
        levels:
            17:
                story_text: |
                    In this adventure we program a game of hangman. First we make some preparations, then we program the game and in the third part we add a drawing with the turtle.

                    ### Exercise
                    ***Set the variables*** In this game of hangman, Player 1 chooses an answer and Player 2 has to guess the letters in this answer.
                    To let the computer know all the letters in the word, we will turn the answer into a list of letters. We also do this with the guesses Player 2 makes.
                    We will start the game with 2 empty lists. We have made an empty list for the variable answer for you. Now make an empty list for guessed_letters as well.
                    Then we fill in how many mistakes were made. At the start of the game, this should be 0.
                    The variable `amount_letters` tells us how many letters are in the answer. Ask Player 1 to tell us how many letters their word has.
                    Lastly we tell the computer if the game is over. We use the variable `game_over` and set it to `False`.

                    ***Choosing the answer*** We want Player 1 to be able to choose the answer. We'll ask them, as many times as necessary, what the next letter is.
                    Then we add that letter to the answer. Lastly, we add an empty _ to the list of guessed letters, so we get as many _s as there are letters in the answer.

                    ***Player 2's turn***
                    Tell Player 2 its their turn. Then tell Player 2 how many letters there are in the answer. Finally, print the list of `guessed_letters`.

                    ***Go to the next tab*** Now that all the starting variables are set, we can start programming the game itself. Check out the next tab to learn how!
                example_code: |
                    ```
                    print 'Hangman!'

                    # Set the variables
                    answer = []
                    guessed_letters = _
                    mistakes_made = _
                    amount_letters = {ask} _
                    _ = 'False'

                    # Choosing the answer
                    {for} _
                        letter = {ask} 'Player 1, what is letter ' i '?'
                        _
                        {add} '_' {to} _

                    # Player 2 turn
                    print _
                    print _
                    print guessed_letters
                    ```
    hangman_2:
        name: Hangman 2
        default_save_name: Hangman_2
        description: Hangman 2
        levels:
            17:
                story_text: |
                    Now it's time to program the hangman game.

                    ### Exercise

                    ***Paste your code*** Copy your code from the previous tab and paste the code in the programming field.

                    ***The game*** This games continues playing until Player 2 is game over. Fill in the while command accordingly. Now, Player 2 is allowed to guess a letter, so ask Player 2 to guess a letter.
                    We need to check if their answer is correct, so check if their `guess` is (somewhere) in the (list) `answer`. Then we let the computer figure out which of the letter(s) is the guess. We have already programmed that part for you.
                    Next we want to compliment the player for finding a correct letter and we want to print the list `guessed_letters`, so the player can see their progress.

                    The next part we're going to program is what happens when the player has guessed all of the letters. So if their list of `guessed_letters` is the same as our list `answer`.
                    If the lists are the same, congratulate Player 2 with their victory and set the variable `game_over` to `True`.

                    Next we'll program what happens when Player 2 guesses wrong (so the `{else}` command). First, tell the player that their guess was wrong. Then increase the `mistakes_made` variable by 1.

                    For the last part we'll program what happens when Player 2 has made 10 mistakes. We'll print that Player 1 has won the game. Then we'll print the correct answer. And finally, we'll set our `game_over` variable to `True`, so the game stops.

                    ***Go to the next tab*** Amazing work! Your game is playable, but wouldn't it be fun if the hangman was actually drawn when Player 2 makes a mistake..?
                example_code: |
                    ```
                    # Paste your code here

                    # The game
                    {while} game_over _
                        guess = _
                        {if} _
                            {for} i {in} {range} 1 {to} amount_letters:
                                if answer[i] == guess:
                                    guessed_letters[i] = guess
                            {print} _
                            {if} guessed_letters == _:
                                {print} _
                                game_over = _
                        {else}:
                            {print} _
                            mistakes_made _
                            {if} _ == 10:
                                {print} _
                                {print} _
                                _
                    ```
    hangman_3:
        name: Hangman 3
        default_save_name: Hangman_3
        description: Hangman 3
        levels:
            17:
                story_text: |
                    In a game of hangman the mistakes are shown by drawing a part of the hangman each time a mistake has been made.
                    We now add those drawings with our turtle!

                    ### Exercise
                    ***Create a function that draws the hangman*** Create a function that draws the hangman in 10 steps. We have already made step 1 for you.

                    ***Test the function*** Test the function by calling the function with 10. If you are happy with the function, remove the line that calls the function for now. We will call the function when the player makes a mistake.

                    ***Paste your hangman game under your function*** Go back to the previous tab and copy your hangman game. Paste the game underneath your function.

                    ***Call the function when the player makes a mistake*** Under the line `mistakes_made = mistakes_made + 1` we will call the function. We want the turtle to take the same amount of steps as the player has made mistakes, so we call the function with `mistakes_made` as argument.

                    ***Enjoy your game!***
                    <div class="w-full flex flex-row gap-2">
                        The hangman could look like this <img src="https://github.com/hedyorg/hedy/assets/80678586/d385b691-5701-4342-b5d9-dfae1589c129" width="100">
                    </div>
                example_code: |
                    ```
                    # Create a function that draws the hangman
                    {define} draw_hangman {with} step:
                        {if} step == 1:
                            {color} white
                            {forward} -100
                            {turn} 90
                            {forward} -50
                            {color} black
                            {forward} 100
                            {forward} -50

                        {if} step == 2:
                            _
                    # Paste your hangman game here

                    ```
    harry_potter:
        name: Harry Potter
        default_save_name: Harry Potter
        description: Harry Potter adventures
        levels:
            10:
                story_text: |
                    ### Exercise
                    We can also make a Harry Potter themed fortune teller. Fill in blanks such that 9 lines are printed.
                    **Extra** Change the theme of the fortune teller into something else, such as your favorite book, film or tv show.
                example_code: |
                    ```
                    houses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    subjects = potions, defence against the dark arts, charms, transfiguration
                    fears = Voldemort, spiders, failing your OWL test
                    names = Harry, Ron, Hermione
                    _
                    _ {print} name ' is placed in ' houses {at} {random}
                    _ {print} name ' is great at ' subjects {at} {random}
                    _ {print} name 's greatest fear is ' fears {at} {random}
                    ```
    haunted:
        name: Rumah berhantu
        default_save_name: rumahhantu
        description: Keluar dari rumah berhantu
        levels:
            1:
                story_text: |-
                    Pada petualangan ini kamu akan membuat permainan dimana kamu harus keluar dari sebuah rumah berhantu dengan cara memilih pintu yang benar.
                    Jika kamu memilih pintu yang benar kamu akan bertahan hidup, tapi kalau tidak seekor monster akan...

                    Pada level 1 kita memulai permainan rumah berhantu dengan membuat cerita menyeramkan dan menanyakan monster apa yang pemain akan lihat di rumah berhantu.
                example_code: "```\nprint Kenapa aku ada disini?\nprint Aku ingat temanku menyarankan untuk tidak ke rumah besar tua itu...\nprint dan tiba-tiba semuanya menjadi gelap.\nprint Tapi bagaimana caranya aku tergeletak di lantai...?\nprint Kepalaku sakit seperti telah dipukul dengan tongkat pemukul basebal!\nprint Suara apa itu?\nprint Oh tidak! Aku merasa kalau aku tidak sendiri di rumah ini!\nprint Aku perlu keluar dari sini!\nprint Ada 3 pintu didepanku...\n{ask} Pintu mana yang harus kupilih?\necho Aku memilih pintu \nprint ...?\n ```\n\nDapatkah kamu menyelesaikan cerita menyeramkan ini dengan menanyakan monster apa yang akan muncul? Atau membuat cerita rumah berhantu milik kamu sendiri?\n"
                story_text_2: |
                    ### Exercise
                    Can you finish the scary story? Or make up your own haunted house story?
            2:
                story_text: |
                    In this haunted house you can choose your monsters with emojis. Of course you could also use words.

                    ```
                    monster1 {is} 👻
                    monster2 {is} 🤡
                    monster3 {is} 👶
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster1
                    {print} You run into the other room, but a monster2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster3 attacks you!
                    ```
                example_code: |
                    ```
                    monster_1 {is} 👻
                    monster_2 {is} 🤡
                    monster_3 {is} 👶
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room, but a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
                story_text_2: |
                    ### Exercise
                    In the example above the monsters are predetermined. So each time you run your code, the output is the same.
                    Can you add `{ask}` commands to make the haunted house interactive and have the players choose the monsters they come across?
                example_code_2: |
                    ```
                    monster_1 {is} _
                    monster_2 {is} _
                    monster_3 {is} _
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room, but a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
            3:
                story_text: |-
                    Pada level 1 kamu telah membuat pendahuluan tentang permainan rumah berhantu kamu, tapi seperti yang mungkin sudah kamu ketahui, ceritanya selalu memiliki akhir yang mengerikan.
                    Pada level 2 kamu bisa membuat ceritanya lebih interaktif dengan mengganti akhir dari permainan; kadang kamu akan dimakan monster; kadang kamu akan berhasil kabur!
                    Biarkan Hedy menentukannya secara acak!
                example_code: |
                    ```
                    _ Escape from the haunted house!
                    _ There are 3 doors in front of you...
                    _ _ _ Which door do you choose?
                    _ You picked door ... choice
                    monsters _ a zombie, a vampire, NOTHING YOUVE ESCAPED
                    _ You see...
                    {sleep}
                    _ _ _ _
                    ```
            4:
                story_text: |-
                    Pada level 3 kamu belajar bagaimana menggunakan tanda kutip satu di permainan kamu.
                    Dapatkah kamu membuat permainan rumah berhantu kamu berjalan di level 3?
                example_code: |
                    ```
                    {print} _Escape from the haunted house!_
                    {print} _There are 3 doors in front of you..._
                    choice {is} {ask} _Which door do you choose?_
                    {print} _You picked door ..._ choice
                    monsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED
                    {print} _You see..._
                    {sleep}
                    {print} monsters {at} {random}
                     ```
            5:
                story_text: |-
                    Sampai pada level ini permainan rumah berhantu kamu pasti menanyakan ke pemain tentang pintu mana yang akan dipilih, namun seperti yang mungkin kamu sadari, mereka tidak harus menjawab dengan benar.
                    Meskipun pemain memberikan jawaban acak, permainan akan tetap berjalan seperti biasa dan pemain bisa menang (bahkan tanpa memilih salah satu pintu yang ada)
                    Pada level 4 kamu hanya bisa memenangkan permainan dengan memilih pintu yang sama dengan yang dipilih Hedy secara acak.
                example_code: |
                    ```
                    print 'Kabur dari rumah berhantu!'
                    print 'Ada 3 pintu di depan kamu...'
                    pintu is 1,2,3
                    monster is werewolf, mumi, vampir, zombie
                    pintuterpilih is ask 'Pintu mana yang mau kamu pilih?'
                    print 'Kamu memilih pintu... ' pintuterpilih
                    pintutepat is pintu {at} {random}
                    if pintuterpilih is pintutepat print 'Bagus! Kamu berhasil kabur!'
                    else print 'Oh tidak! Kamu dimakan oleh ... ' monster {at} {random}
                    ```
            9:
                story_text: Pada level 7 kamu bisa mengulangi beberapa baris kode, memungkinkan kamu untuk membuat permainan rumah berhantu kamu semakin interaktif.
                example_code: |
                    ```
                    print 'Kabur dari rumah berhantu!'
                    pemain is hidup
                    pintu is 1, 2, 3
                    monster is zombie, vampir, laba-laba besar
                    repeat 3 times
                        if pemain is hidup
                            pintubenar is pintu {at} {random}
                            print 'Ada 3 pintu di depan kamu...'
                            pintuterpilih is ask 'Pintu mana yang mau kamu pilih?'
                            if pintuterpilih is pintubenar
                                print 'Tidak ada monster disini!'
                            else
                                print 'Kamu dimakan oleh ' monster {at} {random}
                                pemain is meninggal
                        else
                            print 'PERMAINAN BERAKHIR'
                    if pemain is hidup
                        print 'Bagus! Kamu berhasil bertahan hidup!'
                    ```

                    Sekarang permainan ini jadi cukup sulit untuk dimenangkan. Dapatkah kamu membuat permainan ini lebih mudah?
                    Sebagai contoh dengan hanya memiliki 1 pintu yang salah dan 2 pintu benar ketimbang 2 pintu salah dan 1 pintu benar?
            11:
                story_text: Pada level 8 kita telah mengubah perintah `repeat` dan menambahkan beberapa baris ke kode permainan rumah berhantu kita, yang menginformasikan ke pemain lokasi ruangan mereka.
                example_code: |
                    ```
                    print 'Kabur dari rumah berhantu!'
                    pemain is hidup
                    pintu is 1, 2, 3
                    monster is zombie, vampir, laba-laba besar
                    for i in range 1 to 3
                        if pemain is hidup
                            pintubenar is pintu {at} {random}
                            print 'Ruangan ' i
                            print 'Ada 3 pintu di depan kamu...'
                            pintuterpilih is ask 'Pintu mana yang mau kamu pilih?'
                            if pintuterpilih is pintubenar
                                print 'Tidak ada monster disini!'
                            else
                                print 'Kamu dimakan oleh ' monster {at} {random}
                                pemain is meninggal
                        else
                            print 'PERMAINAN BERAKHIR'
                    if pemain is hidup
                        print 'Bagus! Kamu berhasil bertahan hidup!'
                    ```
            14:
                story_text: |
                    ### Exercise
                    In this level you can use the `<` and `>` symbol to introduce lives to your game.
                    Make sure the player loses a life when they come across the wrong monster and that the game stops if you have no lives left.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house'
                    lives = 3
                    doors = 1, 2, 3
                    monsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'
                    {for} i {in} {range} 1 {to} 10
                        {if} lives _
                            good_door = doors {at} {random}
                            monster = monsters {at} {random}
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} good_door == chosen_door
                                {print} 'You have chosen the correct door'
                            {else}
                                {print} 'You see...' monster
                                {if} monster == 'a sleeping 3 headed dog'
                                    {print} 'Pffieuw.... Its asleep'
                                {else}
                                    {print} 'You lose one life'
                                    lives = _
                        {else}
                            {print} 'GAME OVER'
                    ```
            16:
                story_text: |
                    ### Exercise
                    This haunted house game uses the connection between the lists you can use in this level.
                    For example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.
                    Check out the code and fill in  `weapons[i]`, `monsters[i]` , `bad_fate[i]`, `good_fate[i]`, `hint[i]` on the correct blanks to get the code to work!
                example_code: |
                    ```
                    numbers = [1, 2, 3]
                    i = numbers[{random}]
                    hint = ['growling', 'a cackling laugh', 'fluttering batwings']
                    monsters = ['zombie', 'witch', 'vampire']
                    bad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']
                    good_fate = ['You throw the ham. The zombie is distracted and starts eating it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']
                    weapons = ['ham', 'lighter', 'garlic']
                    {print} 'You are standing in front of an old mansion'
                    {print} 'Something is not right here'
                    {print} 'You hear ' _
                    {print} 'You are going to explore it'
                    {print} 'You enter the kitchen and see a lighter, a raw ham and a garlic.'
                    your_weapon = {ask} 'What do you bring with you?'
                    {print} 'With your ' your_weapon ' you enter the living room'
                    {print} 'There you find a ' _
                    needed_weapon = _
                    {if} your_weapon == needed_weapon
                        {print} 'You use your ' your_weapon
                        {print} _
                        {print} 'YOU WIN!'
                    {else}
                        {print} 'You have chosen the wrong weapon...'
                        {print} _
                        {print} 'GAME OVER'
                    ```
    hotel:
        name: hotel
        default_save_name: hotel
        description: hotel
        levels:
            13:
                story_text: |
                    In the previous adventure you have learned how to use an argument in a function, and you've learned how to combine it with an {ask}.
                    You might have wondered why you would use functions, because the functions in the example were only one line of code.
                    Now we will show you what a bigger function looks like and we will use multiple agruments now as well. You'll see how much better it is to use a function once the function gets bigger.
                    Here is an example of a function with arguments combined with {ask} commands.
                example_code: |
                    ```
                    {define} welcome_message {with} title, last_name, country, room_number
                        {print} 'Welcome to Hotel Hedy, ' title ' ' last_name
                        nice_trip {is} {ask} 'Did you have a nice trip from, ' country '?'
                        {if} nice_trip {is} 'yes'
                            {print} 'Lovely!'
                        {else}
                            {print} 'Sorry to hear that.'
                            {print} 'Hopefully you can take a nice rest in you room.'
                        {print} 'Your room number is ' room_number

                    {print} 'Hello. Please fill in your information to check in.'
                    title = {ask} 'What is your title (mr, mrs, ms, dr, etc.)?'
                    name = {ask} 'What is you last name?'
                    homecountry = {ask} 'What country do you come from?'

                    {call} welcome_message {with} title, name, homecountry, 105
                    ```

                    title = {ask} 'What is your title (mr, mrs, ms, dr, etc.)?'
                    name = {ask} 'What is you last name?'
                    homecountry = {ask} 'What country do you come from?'

                    {call} welcome_message {with} title, name, homecountry, 105
    if_command:
        name: '{if} & {else}'
        default_save_name: if_command
        description: Introducing the if command
        levels:
            5:
                story_text: |
                    ## If... else....
                    In level 5 there is something new, the `{if}`! With the `{if}` you can choose between two different options.
                    This code prints nice if you enter Hedy as a name, and boo! if you enter something else.
                    `{ask}` and `{print}` still work like they did in level 4.
                example_code: |
                    ```
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'
                    ```
                story_text_2: |
                    Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:
                example_code_2: |
                    ```
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice'
                    {else} {print} 'boo!'
                    ```
                story_text_3: |
                    ### Exercise
                    Try to create your own code with `{if}` and `{else}`. You can use the example code if you want.
                example_code_3: |
                    ```
                    answer {is} {ask} '2 + 2 = ?'
                    _ _ _ 4 _ 'Great job!'
                    _ _ 'No 2 + 2 = 4'
                    ```
            8:
                story_text: |
                    ## If... Else...
                    You have learned to repeat a block of lines of code after a `{repeat}` command.
                    Now you can also use indentation to make blocks after a {if} or {else} command.
                    Check out the example code.

                    ### Exercise
                    Add an {else} command to the example code. Make a block of line using indentation. You do this by starting each line with 4 spaces.
                example_code: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name {is} Hedy
                        {print} 'Welcome Hedy'
                        {print} 'You can play on your computer!'
                    ```
            9:
                story_text: |
                    In this level you can also put an {if} command inside another {if} command.
                example_code: |
                    ```
                    continue = {ask} 'Do you want to continue?'
                    {if} continue = yes
                        sure = {ask} 'Are you sure?'
                        {if} sure {is} yes
                            {print} 'We will continue'
                        {else}
                            {print} 'You are not sure'
                    {else}
                        {print} 'You do not want to continue'
                    ```
    in_command:
        name: '{in}'
        default_save_name: in_command
        description: Introducing the in command
        levels:
            5:
                story_text: |
                    ## Lists
                    When we want to check if something is in a list, we can now use the `{in}` command.
                    This code prints pretty! if you choose green or yellow, and meh otherwise.
                example_code: |
                    ```
                    pretty_colors {is} green, yellow
                    favorite_color {is} {ask} 'What is your favorite color?'
                    {if} favorite_color {in} pretty_colors {print} 'pretty!'
                    {else} {print} 'meh'
                    ```
                story_text_2: |
                    ### Exercise
                    Finish the example code by filling in the blanks with commands that you've learned.
                    When you've finished the code, try to create a code of your own and use a question that you've thought of yourself.
                example_code_2: |
                    ```
                    animals is dog, cow, sheep
                    answer is ask 'What is your favorite animal?'
                    _ answer _ animals _ 'Mine too!'
                    _ _ 'My favorite animals are dogs, cows and sheep'
                    ```
    is_command:
        name: '{is}'
        default_save_name: is_command
        description: introducing is command
        levels:
            2:
                story_text: |
                    ## Variables
                    You can name a word with `{is}`. This is called a **variable**. In this example we made a variable called name and a variable called age. You can use the word name anywhere in your code and it will be replaced by Hedy, like this:
                example_code: |
                    ```
                    name {is} Hedy
                    age {is} 15
                    {print} name is age years old
                    ```
                story_text_2: |
                    ### Exercise
                    Time to make your own variables!
                    In the example code we made an example of the variable `favorite_animal`. In line 1 the variable is set, and in line 2 we haved used the variable in a print command.
                    Firstly, finish our example by filling in your favorite animal in the blanks. Then make at least 3 of these codes yourself. Pick a variable, and set the variable with the {is} command. Then use it with a {print} command, just like we did.
                example_code_2: |
                    ```
                    favorite_animal {is} _
                    {print} I like favorite_animal
                    ```
            6:
                story_text: |
                    We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:
                example_code: |
                    ```
                    name = Hedy
                    answer = 20 + 4
                    ```
            14:
                story_text: |
                    We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.
                    The `<` checks if the first number is smaller than the second, for example age `<` 12 checks if age is smaller than 12.
                    If you want to check if the first number is smaller or equal to the second, you can use `<=`, for example age `<=` 11.
                    The `>` checks if the first number is bigger than the second, for example points `>` 10 checks if points is larger than 10.
                    If you want to check if the first number is bigger or equal to the second, you can use `>=`, for example points `>=` 11.
                    You use these comparisons in an `{if}`, like this:
                example_code: |
                    ```
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
                    ```
                story_text_2: |
                    From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:
                example_code_2: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name == 'Hedy'
                        {print} 'You are cool!'
                    ```
                story_text_3: |
                    You can also compare if something is *not* equal to something else using `!=` like this:
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name != 'Hedy'
                        {print} 'You are not Hedy'
                    ```

                    {if} age < 13
                        {print} 'You are younger than me!'
                    {else}
                        {print} 'You are older than me!'
    language:
        name: Language
        default_save_name: language
        description: Practice words in a foreign language
        levels:
            5:
                story_text: |
                    Make your own program to practice your vocabulary in a new language.

                    ```
                    {print} 'Learn French!'
                    cat {is} {ask} '🐱'
                    {if} cat {is} chat {print} 'Terrific!'
                    {else} {print} 'No, cat is chat'
                    frog {is} {ask} '🐸'
                    {if} frog {is} grenouille {print} 'Super!'
                    {else} {print} 'No, frog is grenouille'
                    ```
                example_code: |
                    ```
                    {print} 'Learn French!'
                    cat {is} {ask} '🐱'
                    {if} cat {is} chat {print} 'Terrific!'
                    {else} {print} 'No, cat is chat'
                    frog {is} {ask} '🐸'
                    {if} frog {is} grenouille {print} 'Super!'
                    {else} {print} 'No, frog is grenouille'
                    ```
            16:
                story_text: |
                    ### Exercise
                    Take a look at the example code. This is a program to practise French vocabulary. Now make your own program to practice your vocabulary in a new language.
                    If you don't know any other languages, you can use Google translate or you can use emojis and your native language.
                example_code: |
                    ```
                    french_words = ['bonjour', 'ordinateur', 'pomme de terre']
                    translation = ['hello', 'computer', 'potato']
                    score = 0
                    {for} i {in} {range} 1 {to} 3
                        answer = {ask} 'What does ' french_words[i] ' mean?'
                        correct = translation[i]
                        {if} answer == correct
                            {print} 'Correct!'
                            score = score + 1
                        {else}
                            {print} 'Wrong, ' french_words[i] ' means ' translation[i]
                    {print} 'You gave ' score ' correct answers.'
                    ```
    maths:
        name: maths
        default_save_name: maths
        description: Introducing maths
        levels:
            6:
                story_text: |
                    In this level you learn something new: you can now also calculate.

                    The plus is easy, you write it like with math: `5 + 5` for example. The minus also works fine, it is `5 - 5`.

                    The times is a bit different, because there is no times symbol on your keyboard. Just search, there really isn't!
                    That is why we multiply with the asterisk above 8: `5 * 5`. Read that as "5 times 5" that helps you remember it best.
                example_code: |
                    ```
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 minus 5 is ' 5 - 5
                    {print} '5 times 5 is ' 5 * 5
                    ```
            12:
                story_text: |-
                    **Decimal numbers**
                    So far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.
                example_code: |
                    ```
                    {print} 'Two and a half plus two and a half is...'
                    {print} 2.5 + 2.5
                    ```
                story_text_2: |-
                    **Maths with words**
                    In this level you can also do addition with words like this:
                example_code_2: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```

                    {print} 2.5 + 2.5
    music:
        name: music
        default_save_name: music
        description: Play a tune!
        levels:
            1:
                story_text: |-
                    In this level you'll learn how to use the `{play}` command to play a tune!

                    Type `{play}` followed by the note you want to play. The scale goes C-D-E-F-G-A-B.
                    As you can see there are 7 different letters, but we can play more than just 7 notes.
                    Type a number between 1 and 10 behind the letter to choose the scale, for example after B4 comes C5.
                    C1 is the lowest note you can play, C10 is the highest.

                    ### Exercise
                    Try out the example code and then play around with it! Can you create your own melody?
                    In the next level you'll learn how to play some existing songs.
                example_code: |-
                    ```
                    {play} C4
                    {play} D4
                    {play} E4
                    {play} F4
                    {play} G4
                    {play} A4
                    {play} B4
                    {play} C5
                    ```
            2:
                story_text: |
                    ### Exercise
                    Finish the songs! We have started the codes for some melodies.
                example_code: |
                    ```
                    {print} Old Mac Donald had a farm
                    {play} C5
                    {play} C5
                    {play} C5
                    {play} G4
                    {play} A4
                    {play} A4
                    {play} G4
                    ```
                story_text_2: As you can see, you can also use the `{sleep}` command to add a little pause in the song.
                example_code_2: |
                    ```
                    {print} Twinkle Twinkle Little Star
                    {play} C
                    {play} C
                    {play} G
                    {play} G
                    {play} A
                    {play} A
                    {play} G
                    {sleep} 1
                    {play} F
                    {play} F
                    ```
            3:
                story_text: |
                    Create a random melody!

                    ### Exercise
                    The example code creates a random melody, but it's very short and not many notes are used.
                    Add more notes to the list and create a longer melody by copying the last line a couple more times.
                example_code: |
                    ```
                    notes {is} A4, B4, C4
                    {play} notes {at} {random}
                    {play} notes {at} {random}
                    {play} notes {at} {random}
                    ```
            4:
                story_text: |
                    Use the `{clear}` command to create a karaoke machine!

                    ### Exercise
                    Finish the karaoke version of 'Mary had a little lamb'.
                    Then, create a karaoke version of any song you'd like!
                example_code: |
                    ```
                    {print} 'Mary had a little lamb'
                    {play} E
                    {play} D
                    {play} C
                    {play} D
                    {play} E
                    {play} E
                    {play} E
                    {clear}
                    {print} 'Little lamb, little lamb'
                    {play} D
                    {play} D
                    {play} D
                    {play} E
                    {play} E
                    {play} E
                    {clear}
                    {print} 'Mary had a little lamb'
                    {play} E
                    ```
            5:
                story_text: |
                    You don't always have to use the `{play}` command to play a whole song, sometimes you just want to play one note.
                    For example, if you want to make a quiz, you can play a happy high note if the answer is right and a sad low note if the answer is wrong.

                    ### Exercise
                    Finish the first question by adding a line of code that plays a C3 note if the wrong answer is given.
                    Then think of 3 more questions to add to this quiz.
                example_code: |
                    ```
                    answer {is} {ask} 'What is the capital of Zimbabwe?'
                    {if} answer {is} Harare {play} C6
                    _
                    ```
            6:
                story_text: "Instead of playing notes, you can also play numbers now. Simply type `{play} 1` for the lowest note, `{play} 70` for the highest note, or anything in between.\n\n### Exercise\n This calls for musical maths! Try out the example code a couple of times with different starting numbers. \nThen, see if you can compose a song using the numbers.\n"
                example_code: |
                    ```
                    number = {ask} 'Say a starting number between 1 and 67'
                    {print} number
                    {play} number
                    number = number + 1
                    {print} number
                    {play} number
                    number = number + 1
                    {print} number
                    {play} number
                    ```
            7:
                story_text: |
                    Using the `{repeat}` command can make your codes for melodies a lot shorter!

                    ### Exercise
                    Finish the code for Twinkle Twinkle Little Star by using the `{repeat}`command.
                    Then go back to the songs you've made in the previous levels. Can you shorten those codes too?
                example_code: |
                    ```
                    {print} 'Twinkle Twinkle Little Star'
                    {repeat} 2 {times} {play} C4
                    {repeat} 2 {times} {play} G4
                    _
                    ```
            8:
                story_text: |
                    Now that we can use the `{repeat}` command for multiple lines, we can make songs even more easily!

                    ### Exercise
                    Finish the song of Brother John (Frère Jacques). Don't forget to use `{repeat}`!
                example_code: |
                    ```
                    {print} 'Brother John'
                    {repeat} 2 {times}
                        {play} C
                        {play} D
                        {play} E
                        {play} C
                    {repeat} 2 {times}
                        {play} E
                        {play} F
                        {play} G
                        {sleep} 1
                    ```
            9:
                story_text: |
                    From this level on you can - among other things - use a {repeat} command inside a {repeat} command.
                    That makes songs like 'Happy birthday' even shorter!

                    ### Exercise
                    Finish the song!
                example_code: |
                    ```
                    first_time = yes
                    {repeat} 2 {times}
                        {repeat} 2 {times}
                            {play} C
                        {play} D
                        {play} C
                        {if} first_time {is} yes
                            {play} F
                            {play} E
                            first_time {is} no
                        {else}
                            _
                    ```
            12:
                story_text: |
                    Use functions in your songs! As you can see in the example code, you can make a function for each line of Twinkle Twinkle Little Star. Once you've programmed the first three lines, all you have to do is call the functions in the order you want them played in.

                    ### Exercise
                    Finish the song of Twinkle Twinkle Little Star.
                    Then look back at all the songs you've programmed in the levels before, can you make those codes better and shorter using functions too?
                example_code: |
                    ```
                    {define} first_line
                        {play} C
                        {play} C
                        {play} G
                        {play} G
                        {play} A
                        {play} A
                        {play} G
                        {sleep}

                    {define} second_line
                        {play} F
                        {play} F
                        {play} E
                        {play} E
                        {play} D
                        {play} D
                        {play} C
                        {sleep}

                    {define} third_line
                        {play} G
                        {play} G
                        {play} F
                        {play} F
                        {play} E
                        {play} E
                        {play} D
                        {sleep}

                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    ```
            13:
                story_text: |
                    You can use a function with an argument for songs that have line that are almost the same, but slightly different each time.
                    One example is the song 'Yankee Doodle'. The first 4 notes of the first lines are the same, but each time they are followed by a different couple of notes.

                    ### Exercise
                    Can you finish the song of Yankee Doodle?
                    Can you think of another song to program this way?
                example_code: |
                    ```
                    {print} 'Yankee Doodle'
                    {define} _ {with} note_1, note_2, note_3
                        {play} C4
                        {play} C4
                        {play} D4
                        {play} E4
                        {play} _
                        {play} _
                        {play} _

                    {call} line_1 {with} 29, 31, 30
                    {call} line_1 {with} 29, 28, 0
                    {call} line_1 {with} 32, 31, 30

                    {play} C4
                    {play} B3
                    {play} G3
                    {play} A3
                    {play} B3
                    {play} C4
                    {play} C4
                    ```
            14:
                story_text: |
                    You can program music for fun, but you can also use the musical notes to make something useful like a fire alarm!

                    ### Exercise
                    Make sure the fire alarm rings when there is a fire!
                example_code: |
                    ```
                    {define} fire_alarm
                        {print} 'FIRE!'
                        note = 40
                        {for} i {in} {range} 1 {to} 100
                            {if} note _ 50
                                note = note + 5
                                {play} _
                            {else}
                                note = 40

                    fire = {ask} 'Is there a fire?'
                    {if} fire _ 'yes'
                        {call} fire_alarm
                    ```
            15:
                story_text: |
                    **Warning** This adventure can become extremely annoying!
                    We can also use the {while} command to repeat a song forever.

                    ### Exercise
                    Finish the never-ending song.
                example_code: |
                    ```
                    {define} song
                        {play} _

                    yes_or_no = {ask} 'Do you want to hear my never-ending song?'
                    {while} yes_or_no = 'yes'
                        {call} song
                        {print} '🥳'
                    ```
            16:
                story_text: |
                    Upgrade your Old MacDonald code!

                    ### Exercise
                    Take your code from the 'Sing a Song' adventure and add musical notes to it!
                    You can make a function for each line in the song and call that function after the line is printed.
                    We defined the first line for you and called it in the code. Can you finish the whole song?
                example_code: |
                    ```
                    {define} line_1
                        {for} i {in} {range} 1 {to} 3
                            {play} G
                        {play} D
                        {for} i {in} {range} 1 {to} 2
                            {play} E
                        {play} D

                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    for i in range 1 to 3
                        animal = animals[i]
                        sound = sounds[i]
                        print 'Old MacDonald had a farm'
                        call line_1
                        print 'E I E I O!'
                        _
                    ```
            17:
                story_text: |
                    You can use the {elif} to create different options.

                    ### Exercise
                    Firstly, add colons to get the code to work.
                    Then finish this code by adding at least 2 other songs for other moods. For example a happy song and an angry song.
                example_code: |
                    ```
                    {define} scary_song
                        {for} i {in} {range} 1 {to} 3
                            {play} G
                        {play} E
                        {sleep} 2
                        {for} i {in} {range} 1 {to} 3
                            {play} F
                        {play} D

                    mood = {ask} 'Which emotion are you feeling?'
                    {if} mood {is} 'fear'
                        {call} scary_song
                    {elif} _
                    ```
            18:
                story_text: |
                    ### Exercise
                    Even in this last level of Hedy we can make some music! Be careful of all the syntax that is needed now.
                    Take a good look at how the functions are defined and called upon in the example code.
                    Finish the song!
                example_code: |
                    ```
                    {def} line_1():
                        {for} i {in} {range}(1, 5):
                            {play} A
                        {play} D
                        {play} F
                        {play} A

                    {def} line_2():
                        {for} i {in} {range}(1, 5):
                            {play} G
                        {play} C
                        {play} E
                        {play} G

                    {def} line_3():
                    _

                    {print} ('The drunken sailor')
                    {print} ('What shall we do with the drunken sailor?')
                    line_1()
                    line_2()
                    line_3()
                    {print} ('Early in the morning')
                    ```
    parrot:
        name: Parrot
        default_save_name: Parrot
        description: Create your own online pet parrot that will copy you!
        levels:
            1:
                story_text: |
                    Create your own online pet parrot that will copy you!
                example_code: |
                    ```
                    {print} Im Hedy the parrot
                    {ask} whats your name?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### Exercise
                    Can you make the parrot ask a different question? Fill in the blanks in the example!
                example_code_2: |
                    ```
                    {print} Im Hedy the parrot
                    {ask} _
                    {echo}
                    {echo}
            2:
                story_text: |
                    Create your own online pet parrot that will copy you!
                example_code: |
                    ```
                    {print} Im Hedy the parrot
                    name {is} {ask} whats your name?
                    {print} name
                    {sleep}
                    {print} squawk
                    {sleep}
                    {print} name
                    ```
                story_text_2: |
                    ### Exercise
                    You can use variables to make the parrot say more than only your name. Can you complete this code?
            3:
                story_text: |
                    Teach your parrot a new word with `{add}`.
                example_code: |
                    ```
                    words {is} squawk, Hedy
                    {print} Train your parrot!
                    new_word {is} {ask} Which word do you want to teach them?
                    {add} new_word {to_list} words
                    {print} 🧒 Say new_word , Hedy!
                    {print} 🦜 words {at} {random}
                    ```
            4:
                story_text: |
                    In this level we have to use quotation marks with the commands `{ask}` and `{print}`.
                    Can you complete the code by adding quotation marks?
                example_code: |
                    ```
                    words {is} squawk, Hedy
                    {print} _ Train your parrot! _
                    new_word {is} {ask} _ Which word do you want to teach them? _
                    {add} new_word {to_list} words
                    {print} _ 🧒 Say _ new_word _, Hedy!_
                    {print} _ 🦜 _ words {at} {random}
                    ```
            5:
                story_text: |
                    Reward your parrot {if} it says the correct word!
                example_code: |
                    ```
                    kata-kata {is} mengoceh, Hedy
                    {print} 'Latih burung beomu!'
                    kata_baru {is} {ask} 'Kata mana yang ingin Anda ajarkan kepada mereka?'
                    {add} kata_baru {to_list} kata
                    kata_kata {is} kata {at} {random}
                    {print} '🧒 Ucapkan 'kata_baru', Hedy!'
                    {print} '  ' kata_kata
                    _ kata_kata {is} kata_baru _ '🧒 Kerja bagus, Hedy! 🍪'
                    _ _ '🧒 Tidak, Hedy! Ucapkan 'kata_baru
                    ```
    piggybank:
        name: Piggy Bank
        default_save_name: Piggy Bank
        description: Count your pocketmoney!
        levels:
            12:
                story_text: |
                    In this adventure you learn how to make a digital piggy bank, to calculate how much money you have and how long you need to save up to buy what you want!
                example_code: |
                    ```
                    {print} 'The digital piggy bank'
                    wish = {ask} 'What would you like to buy?'
                    price = {ask} 'How much does that cost?'
                    saved = {ask} 'How much money have you saved already?'
                    allowance = {ask} 'How much pocket money do you get per week?'
                    to_save = price - saved
                    weeks = to_save / allowance
                    {print} 'You can buy a ' wish ' in ' weeks ' weeks.'
            14:
                story_text: |
                    ### Exercise
                    In this level you can let Hedy tell you if you have saved up enough money!
                    Finish this code by filling in the blanks!
                example_code: |
                    ```
                    _ hitung_anggaran {with} keinginan, uang, tunjangan
                        untuk_menyimpan = keinginan - uang
                        minggu = untuk_menyimpan / uang saku
                        {if} berharap _ uang
                            {print} 'Anda perlu menabung lebih banyak lagi!'
                            {print} 'Anda memerlukan ' minggu ' minggu lagi.'
                        {else}
                            {print} 'Bagus! Kamu punya cukup'
                            {print} 'Ayo berbelanja!'

                    uang = {ask} 'Berapa banyak uang yang sudah kamu tabung?'
                    harapan = {ask} 'Berapa banyak uang yang Anda perlukan?'
                    tunjangan = {ask} 'Berapa uang jajan yang anda dapat setiap minggunya?'

                    {call} _
                    ```
    pressit:
        name: Key presses
        default_save_name: Pressed
        description: Try linking a keyboard key to a command!
        levels:
            5:
                story_text: |
                    In this level there is another new keyword: `{pressed}`!
                    With `{pressed}` you can use keys on your keyboard to control what lines are used.

                    ### Exercise
                    Look at the example and add one more line of code that reacts to a key press.
                example_code: |
                    ```
                    {print} 'Do you want a good (g) or bad (b) ending?'
                    {if} g {is} {pressed} {print} 'They lived happily ever after ❤'
                    {else} {print} 'The prince was eaten by a hippopotamus 😭'
                    ```
                story_text_2: |
                    You can also link turtle commands to keys.

                    ### Exercise
                    Copy the lines a few times so you can create a larger drawing.
                example_code_2: |
                    ```
                    {if} y {is} {pressed} {forward} 15
                    {else} {turn} 90
                    ```
            7:
                story_text: |
                    Now that you have learned about `{repeat}`, we can press keys multiple times.
                    You can use it to make the turtle walk forward and turn.

                    ### Exercise
                    The code you have seen in level 5 only checks the key once. Copy the example code and add a `{repeat}` to it, so that you can press the keys many times.
                    Use this code to draw something nice.
                example_code: |
                    ```
                    {if} x {is} {pressed} {forward} 15 {else} {turn} 90
                    ```
            9:
                story_text: |
                    Now that you know how to combine statements, you can create a touch type tool with `{pressed}`.

                    ### Exercise
                    Finish the code. Each time a random letter should be chosen, which you have to press. You get a point for a correct press, and and two points deduction for a wrong press.
                    **(extra)** Clear the screen after each letter, and show the user how many points they have scored.
                example_code: |
                    ```
                    points = 0
                    letters = a, b, c, d, e
                    {repeat} 10 {times}
                        letter = _ _ _
                        {print} 'Press the letter ' letter
                        {if} letter {is} {pressed}
                        _
                        _
                        _
                    ```
    print_command:
        name: '{print}'
        default_save_name: print
        description: Introduction print command
        levels:
            1:
                story_text: |
                    ## The print command
                    You can print text to the screen using the `{print}` command.
                example_code: |
                    ```
                    {print} Hi there, programmer!
                    {print} Welcome to Hedy!
                    ```
                story_text_2: |
                    ### Exercise
                    In Hedy you will find exercises in every adventure. An exercise allows you to practise the new commands and concepts, and lets you give your own twist to the example codes.
                    In this exercise you will see a pink blank space. You have to fill something in the place of the blank space before the code can be run.

                    Fill in the `{print}` command in the blank space and then add five more lines of code. Each line has to start with a `{print}` command.
                    Have fun!
                example_code_2: |
                    ```
                    _ Hello!
                    ```
            18:
                story_text: |-
                    We arrived at real Python code! That means we need to use parentheses with `{print}` and `{range}` from now on.
                    It also means you can use Hedy code from this level in any Python environment as long as you use the English commands. If you haven't until now, you can switch the toggle in the commands menu to do so.
                example_code: |
                    ```
                    {print}('Hello!')
                    {for} i {in} {range}(1, 10):
                        {print}('This is line ', i)
                    ```
                story_text_2: If you want to print more than one item, you need to separate them by commas.
                example_code_2: |
                    ```
                    temperature = 25
                    {print}('It is ', temperature, ' degrees outside')
                    ```

                    {print}('My name is ', name)
    quizmaster:
        name: Quizmaster
        default_save_name: Quizmaster
        description: Make your own quiz!
        levels:
            14:
                story_text: |
                    ### Exercise
                    In this adventure you can make your own quiz! Fill in the blanks, add more questions and enjoy your own quiz!
                    You can make a quiz about anything you like: your hobby, your favorite animal, your favorite book or anything at all!
                example_code: |
                    ```
                    {print} 'Make your own quiz'
                    points_a = 0
                    points_b = 0
                    {print} 'Question'
                    {print} 'Answer option A'
                    {print} 'Answer option B'
                    answer = {ask} 'Which answer?'
                    {if} answer == 'A'
                        points_a = points_a + 1
                    {if} answer == 'B'
                        points_b = points_b + 1
                    {print} 'End of the quiz!'
                    {print} 'Lets see the results!'
                    {if} points_a > points_b
                        {print} 'You belong to the A club'
                    {if} points_b > points_a
                        {print} 'You belong to the B club'
                    ```
    quotation_marks:
        name: '''quotation marks'''
        default_save_name: quotation_marks
        description: Introduction quotation marks
        levels:
            4:
                story_text: |
                    ## 'Quotation marks'
                    In level 4 `{ask}` and `{print}` have changed.
                    You must put text that you want to print between quotation marks.
                    This is useful, because now you can print all the words you want. Also the words you used to store something with `{is}`.
                    Most programming languages also use quotation marks when printing, so we are also getting a step closer to real programming!
                example_code: |
                    ```
                    {print} 'You need to use quotation marks from now on!'
                    answer {is} {ask} 'What do we need to use from now on?'
                    {print} 'We need to use ' answer
                    ```
                story_text_2: |
                    ## Contractions
                    Important! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.
                    Make sure to remove those apostrophes and change the spelling to I am or What is.
                    Check out the example code to see the wrong way of using apostrophes.
                example_code_2: |
                    ```
                    _ This is the wrong way of using apostrophes _
                    {print} 'I'm babysitting my sister's kids'
                    {print} 'What's more fun than that?'
                    ```
            12:
                story_text: |
                    **All texts need to be in quotation marks**
                    For this level on you will also have to use quotation marks when storing a text with `=`:
                example_code: |
                    ```
                    name = 'Hedy the Robot'
                    {print} 'Hello ' name
                    ```
                story_text_2: |
                    **All items in lists need quotation marks too**
                    Lists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.
                    This allows you to save two words as 1 item on the list, for example 'Black Widow'.
                example_code_2: |
                    ```
                    superheroes = 'Spiderman', 'Batman', 'Black Widow'
                    {print} superheroes {at} {random}
                    ```
                story_text_3: |
                    **All text after `{if}` comparisons need quotation marks too**
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy the Robot'
                        {print} 'Hi there!'
                    ```
                story_text_4: |
                    **Numbers don't need quotation marks**
                    For numbers, you do not use quotation marks in the `=`:
                example_code_4: |
                    ```
                    score = 25
                    {print} 'You got ' score
                    ```
    random_command:
        name: '{random}'
        default_save_name: random_command
        description: introducing at random command
        levels:
            3:
                story_text: |
                    ## At random
                    In this level you can make a list using the `{is}` command. You can let the computer choose a random item from that list. You do that with `{at} {random}`.
                example_code: |
                    ```
                    animals {is} dogs, cats, kangaroos
                    {print} animals {at} {random}
                    ```
                story_text_2: |
                    You can use the `{at} {random}` command in a sentence as well.
                example_code_2: |
                    ```
                    food {is} sandwich, slice of pizza, salad, burrito
                    {print} I am going to have a food {at} {random} for lunch.
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the `{at} {random}` command by making your own gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!
                    Can you do it? We have already put the first lines into the example code.
                example_code_3: |
                    ```
                    {print} The big gameshow!
                    {print} There are 3 suitcases in front of you...
                    chosen {is} {ask} Which suitcase do you choose?
                    prices {is} _
                    _
                    ```
            16:
                story_text: |-
                    We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
                    We use square brackets to point out a place in a list. For example: `friends[1]` is the first name on the list of friends, as you can see in the first part of the example code. The second part of the example code shows you that we can also match 2 lists using the variable i.
                example_code: |
                    ```
                    friends = ['Ahmed', 'Ben', 'Cayden']
                    {print} friends[1] ' is the first friend on the list.'
                    {print} friends[2] ' is the second friend on the list.'
                    {print} friends[3] ' is the third friend on the list.'
                    #now we will match 2 lists using the variable i
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} friends[i] 's lucky number is ' lucky_numbers[i]
                    ```
                story_text_2: |-
                    Now that you've learned to use the brackets in lists, you can also start using the {at} {random} command in the Python way!
                    You simply type the name of your list with `[random]` behind it!
                example_code_2: |-
                    ```
                    fruit = ['apple', 'banana', 'cherry']
                    {print} fruit[random]
                    ```
    repeat_command:
        name: '{repeat}'
        default_save_name: repeat_command
        description: repeat command
        levels:
            7:
                story_text: |
                    ## Repeat! Repeat! Repeat!
                    Level 7 adds the `{repeat}` command.  `{repeat}` can be used to execute one line of code multiple times. Like this:

                    ### Exercise
                    Play around with the repeat command. Can you make the happy birthday song in only 3 lines of code instead of 4 now?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy is fun!'
                    ```
            8:
                story_text: |
                    ### Repeat commands and indentation
                    In this level you can repeat multiple lines of code with only 1 repeat command.
                    You do this by making a block of lines that you want to repeat.
                    The lines in this block will need **indentation** .
                    That means putting four spaces at the beginning of each line. You will also have to indent when you just want to create a block of one line.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} 'Hello everyone'
                        {print} 'This is all repeated 5 times'
                    ```
            9:
                story_text: |
                    Great job! You've reached another new level! In the previous level you've learned to use multiple lines of code in an {if} or {repeat} command. But you can't yet combine the two...
                    Good news! In this level you will be allowed to put an {if} inside an {if}, or inside a {repeat} command. Putting a block of code inside another block of code is called nesting.                     ``` Putting a block of code inside another block of code is called nesting.
                example_code: |
                    ```
                    answer = {ask} 'Are you ready to learn something new?'
                    {if} answer {is} yes
                        {print} 'Great! You can learn to use the repeat command in the if command!'
                        {print} 'Hooray!'
                        {print} 'Hooray!'
                        {print} 'Hooray!'
                    {else}
                        {print} 'Maybe you should practice some more in the previous level'
    repeat_command_2:
        name: '{repeat} 2'
        default_save_name: repeat_command_2
        description: repeat command 2
        levels:
            7:
                story_text: |
                    ## Repeat with other commands and with variables
                    You have practiced the `{repeat}` command in combination with the `{print}` command now, but did you know you could also use other commands with `{repeat}` ?
                    In this example code you can see that `{repeat}` can also be used with an `{ask}`, `{if}` or `{else}` command.
                example_code: |
                    ```
                    {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                    {if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'
                    {else} {repeat} 3 {times} {print} 'You have learned something new!'
                    ```
                story_text_2: |
                    Another interesting thing you can so with the `{repeat}` command is using variables to set the amount of times something should be repeated. In the example code you can see that we first ask the person how old they are.
                    Then, in line 3, the question is repeated 'age' times. So we have used the variable 'age' with the `{repeat}` command.
                example_code_2: |
                    ```
                    {print} 'Yay! It is your birthday!'
                    age = {ask} 'How old are you now?'
                    {repeat} age {times} {print} 'Hip Hip Hurray!'
                    ```
            8:
                story_text: |
                    ### In the block or not?
                    In this level you have to think carefully which lines of code should be in the block and which shouldn't.
                    For example: If you want to sing the song *the muffin man*. You only want the line with 'the muffin man' to be repeated twice.
                    This means the last line shouldn't start with indentation as it doesn't belong to the block.
                    If you do start the last line with indentation the song will turn out wrong.

                    ### Exercise
                    Each line in the example code starts with a blank. Remove the blanks and try to figure out which line need indentation and which don't to make the muffin man song.
                example_code: |
                    ```
                    _ {print} 'Do you know the muffin man?'
                    _ {repeat} 2 {times}
                    _ {print} 'The muffin man'
                    _ {print} 'Do you know the muffin man, who lives on Drury Lane?'
                    ```
    restaurant:
        name: Rumah makan
        default_save_name: rumahmakan
        description: Buat restoran virtual kamu sendiri!
        levels:
            1:
                story_text: Pada level 1 kamu bisa membuat rumah makan kamu sendiri dan menerima pesanan dari pembeli
                story_text_2: |
                    ### Exercise
                    Can you think of more lines to add to your restaurant code? For example, can you {ask} the guests what they'd like to drink, tell them the price, or wish them a pleasant meal?
                example_code_2: |
                    ```
                    print Selamat datang di rumah makan Hedy
                    ask Apa yang mau kamu pesan?
                    echo Jadi kamu mau pesan
                    print Terima kasih atas pesanannya!
                    print Makanan kamu sedang disiapkan!
                    ```

                    Dapatkah kamu menambahkan beberapa baris di kode program rumah makan kamu? Misal, dapatkah kamu menanyakan pembeli apa yang mau mereka minum, memberitahukan harga, atau menyampaikan 'selamat menikmati'?
            2:
                story_text: |-
                    Pada level 2 kamu bisa mengembangkan kode rumah makan kamu dengan menggunakan variabel. Pada level 1 Hedy hanya dapat mengulang pesanan dan hanya mengingat pesanan terakhir.
                    Sekarang kamu dapat menggunakan variabel dan Hedy dapat mengingat makanan dan minuman yang dipesan!
                example_code: |
                    ```
                    print Selamat datang di rumah makan Hedy!
                    print Hari ini kami menyediakan pizza atau lasagna.
                    makanan is ask Apa yang ingin kamu makan?
                    print Pilihan baik! makanan itu juga kesukaanku!
                    topping is ask Apakah kamu mau daging atau sayuran diatas makanan itu?
                    print makanan dengan topping sedang dipersiapkan!
                    minuman is ask Apa minuman yang kamu inginkan?
                    print Terima kasih atas pesanannya.
                    print makanan dan minuman kamu akan segera tersedia!
                    ```
                story_text_2: |
                    ### Exercise
                    Can you make this code more elaborate? For example by adding drinks to the order? Or...?
            3:
                story_text: |-
                    Punya masalah untuk menentukan apa yang akan kamu makan untuk malam? Kamu dapat meminta Hedy untuk memilihkannya untukmu!
                    Tambahkan daftar makanan kesukaan kamu dan Hedy dapat memilih makan malam kamu secara acak.
                    Kamu juga dapat membuat ini menjadi lebih menyenangkan, dengan meminta Hedy untuk memilih harga makan malam kamu juga. Berapa harga yang akan kamu dapatkan?
                example_code: |
                    ```
                    print Selamat datang di rumah makan Hedy!
                    print Satu-satunya rumah makan yang akan memilih makananmu acak juga harganya!
                    pembuka is salad, sup, carpaccio
                    makanan_utama is pizza, kubis, spaghetti
                    penutup is brownies, es krim, keju
                    minuman is cola, sirup, air
                    harga is sepuluh ribu rupiah, seratus ribu rupiah, satu juta rupiah
                    print Kamu akan mulai dengan: pembuka at random
                    print Lalu kami akan menyajikan: makanan_utama at random
                    print Dan sebagai pencuci mulut: penutup at random
                    print Kamu akan mendapatkan minuman at random untuk diminum
                    print Harganya akan menjadi harga at random
                    print Terima kasih dan selamat menikmati!
                    ```

                    Dapatkan kamu memikirkan hal apa yang bisa membuat kode rumah makan kamu semakin menarik?
                story_text_2: |
                    Does your costumer have any allergies or do they dislike certain dishes? Then you can use the `{remove}`command to remove it from your menu.
                example_code_2: |
                    ```
                    {print} Mystery milkshake
                    flavors {is} strawberry, chocolate, vanilla
                    allergies {is} {ask} Are you allergic to any falvors?
                    {remove} allergies {from} flavors
                    {print} You get a flavors {at} {random} milkshake
                    ```
            4:
                story_text: |-
                    ### Exercise
                    Add the quotation marks to this code to make it work! Be careful: variables should not be in quotation marks.
                    Then, use the `{clear}` command to only show one line at a time in your output screen.

                    ### Exercise 2
                    Go back to the previous level and copy your restaurant code. Make the code work in this level by adding quotation marks in the right spots and add some `{clear}` commands.
                example_code: |
                    ```
                    _ Add the quotation marks to this code _
                    print Selamat datang di rumah makan Hedy!
                    print Hari ini kami menyediakan pizza atau lasagna.
                    makanan is ask Apa yang ingin kamu makan?
                    print Pilihan baik! Makanan itu juga kesukaanku!
                    topping is ask Apakah kamu mau daging atau sayuran diatas makanan itu?
                    print makanan  dengan  topping sedang dipersiapkan!
                    minuman is ask Apa minuman yang kamu inginkan?
                    print Terima kasih atas pesanannya.
                    print makanan  dan minuman kamu akan segera tersedia!
                    ```
            5:
                story_text: |-
                    Pada level 4 perintah `if` memungkinkan kamu untuk menanyakan pertanyaan ke pembeli dan memberi respon yang berbeda bergantung pada jawaban yang diberikan.
                    Pada contoh dibawah, kamu dapat melihat bahwa kamu dapat menanyakan pembeli apakah mereka ingin tahu menu spesial dan Hedy dapat merespon sesuai dengan jawaban yang diberikan.
                example_code: |
                    ```
                    print 'Selamat datang di rumah makan Hedy!'
                    spesial is ask 'Apakah kamu ingin tahu menu spesial kami hari ini?'
                    if spesial is ya print 'Menu spesial hari ini adalah ayam dan nasi' else print 'Tidak masalah.'
                    makanan is ask 'Apa makanan yang ingin kamu makan?'
                    print 'Satu ' makanan ', akan segera datang!'
                    minuman is ask 'Apa minuman yang kamu inginkan?'
                    if minuman is cola print 'Saya minta maaf karena kami kehabisan cola!' else print 'Pilihan yang baik!'
                    apapun is ask 'Apakah kamu ingin yang lain?'
                    print 'Saya akan mengulang pesanan kamu...'
                    print 'Satu ' makanan
                    if minuman is cola print 'dan... ' else print 'Satu ' minuman
                    if apapun is tidak print 'Itu saja!' else print 'Satu ' apapun
                    print 'Terima kasih atas pesanannya dan selamat menikmati!'
                    ```

                    Dapatkah kamu memikirkan pertanyaan-pertanyaan lain untuk pembeli ketika mereka memesan makanan, dan membuat respon yang bervariasi bergantung dari jawaban mereka?
            6:
                story_text: Pada level 5 kamu dapat menggunakan matematika untuk menghitung total harga dari pesanan pembeli. Ini dapat membuat rumah makan virtual kamu semakin realistis.
                example_code: |
                    Kamu dapat membuat kode rumah makan sederhana, seperti ini
                    ```
                    print 'Selamat datang di rumah makan Hedy'
                    print 'Ini menu kami:'
                    print 'Makanan utama kami ada pizza, lasagna, atau spaghetti'
                    main is ask 'Makanan mana yang kamu mau?'
                    harga is 0
                    if main is pizza harga is 10000
                    if main is lasagna harga is 12000
                    if main is spaghetti harga is 8000
                    print 'Kamu sudah memesan ' main
                    print 'Itu akan seharga ' harga ' rupiah'
                    print 'Terima kasih, selamat menikmati!'
                    ```
            7:
                story_text: |-
                    Pada level 5 kamu telah belajar bagaimana menggunakan perintah `repeat` untuk mengulang satu baris kode beberapa kali.
                    Kamu dapat menggunakan itu di rumah makan kamu dengan cara menanyakan ke beberapa orang apa yang mau mereka makan, seperti ini:

                    ```
                    print 'Selamat datang di rumah makan Hedy!'
                    orang is ask 'Berapa banyak orang yang akan datang hari ini?'
                    repeat orang times makanan is ask 'Apa yang ingin kamu makan?'
                    print 'Terima kasih atas pesanannya! Makanan akan segera datang!'
                    ```

                    Pada level 5 kamu dapat menanyakan ke beberapa orang tentang apa yang mau dia makan namun kamu tidak bisa menampilkan pesanannya secara terpisah karena kamu hanya bisa mengulang satu baris kode.
                    Pada level 7 kamu akan bisa mengulang beberapa baris kode sekaligus, memungkinkan kamu untuk menanyakan beberapa pesanan dan menampilkannya juga.
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people are joining us today?'
                    {repeat} people times food = {ask} 'What would you like to eat?'
                    {print} 'Thanks for your order! Its coming right up!'
                    ```
            8:
                story_text: |
                    In this level you can make your virtual restaurant more elaborate by repeating multiple lines of code. Like this:

                    ### Exercise
                    This code can be expanded with more items on the menu, for example offering drinks, and/or multiple courses or desserts. Add at least one more item.
                    **Extra** Add even more items, as many options as you like!
                example_code: |
                    ```
                    {print} 'Welcome to Restaurant Chez Hedy!'
                    people = {ask} 'How many people will be joining us today?'
                    {print} 'Great!'
                    {repeat} people {times}
                        food = {ask} 'What would you like to order?'
                        {print} food
                    {print} 'Thank you for ordering!'
                    {print} 'Enjoy your meal!'
                    ```
            9:
                story_text: |-
                    Pada level 7 kamu bisa membuat rumah makan virtual kamu lebih detil dengan mengulang beberapa baris kode. Seperti ini:

                    ```
                    print 'Selamat datang di rumah makan Hedy!'
                    orang is ask 'Berapa banyak orang yang akan bergabung dengan kita?'
                    print 'Baik!'
                    print 'Menu hari ini adalah pizza atau salad'
                    harga is 0
                    repeat orang times
                        makanan is ask 'Apa yang kamu mau pesan?'
                        print makanan
                        if makanan is pizza
                            harga is harga + 10000
                        else
                            harga is harga + 8000
                    print 'Terima kasih untuk pesanannya!'
                    print 'Harganya akan menjadi ' harga ' rupiah'
                    print 'Selamat menikmati!'
                    ```

                    Tentu, kode kamu dapat diperdetil dengan penambahan jenis makanan dan minuman pada menu. Jadi, silakan menambahkan pilihan-pilihan tersebut sesuai dengan keinginanmu!
                example_code: |
                    ```
                    {print} 'Selamat datang di Restoran Chez Hedy!'
                    people = {ask} 'Berapa banyak orang yang akan bergabung dengan kami hari ini?'
                    {print} 'Bagus!'
                    harga = 0
                    {repeat} orang {times}
                    _ food = {ask} 'Mau pesan apa?'
                    _ {print} makanan
                    _ {if} makanan {is} kentang goreng
                    _ harga = harga + 3
                    _ saus = {ask} 'Saus apa yang kamu mau dengan kentang gorengmu?'
                    _ {if} saus {is} tidak
                    _ {print} 'tanpa saus'
                    _ {else}
                    _ harga = harga + 1
                    _ {print} 'dengan' saus
                    _ {if} makanan {is} pizza
                    _ harga = harga + 4
                    {print} 'Itu akan menjadi ' harga ' dolar'
                    {print} 'Selamat menikmati makananmu!'
                    ```
            10:
                story_text: |
                    In this level you'll learn how to easily {ask} your guests' orders in a short code.
                example_code: |
                    ```
                    courses = appetizer, main course, dessert
                    {for} course {in} courses
                        food = {ask} 'What would you like to eat as your ' course '?'
                        {print} food ' will be your ' course
                    ```
                story_text_2: |
                    Of course, you could also order for multiple people!
                example_code_2: |
                    ```
                    courses = appetizer, main course, dessert
                    names = Timon, Onno
                    {for} name {in} names
                        {for} course {in} courses
                            food = {ask} name ', what would you like to eat as your ' course '?'
                            {print} name ' orders ' food ' as their ' course
                    ```
            11:
                story_text: |
                    We can use the `{for}` with `{range}` to print the orders from multiple customers in an orderly manner.

                    ### Exercise
                    Finish the restaurant code, so that you can ask for the order of multiple people. Print the order number each time: 'Order 1', 'Order 2', etc.
                    Are you not sure how to go about this? Have a peek at your level 8 code.

                    **Extra** In level 9 the restaurant also used prices. You can add that here too!
                example_code: |
                    ```
                    print 'Selamat datang di rumah makan Hedy!'
                    orang is ask 'For how many orang would you like to order?'
                    for i in range 1 to orang
                        print 'Nomor pesanan ' i
                        makanan is ask 'Apa yang ingin kamu makan?'
                        print makanan
                        if makanan is kentang
                            saus is ask 'Saus apa yang kamu inginkan untuk kentang itu?'
                            print saus
                        minuman is ask 'Apa yang ingin kamu minum?'
                        print minuman
                    harga is 40000 * orang
                    print 'Harganya akan menjadi ' harga ' rupiah!'
                    ```
            12:
                story_text: |
                    From this level on you can use decimal numbers to make you menu more realistic.
                example_code: |
                    ```
                    price = 0
                    food = {ask} 'What would you like to order?'
                    drink = {ask} 'What would you like to drink?'
                    {if} food {is} 'hamburger'
                        price = price + 6.50
                    {if} food {is} 'pizza'
                        price = price + 5.75
                    {if} drink {is} 'water'
                        price = price + 1.20
                    {if} drink {is} 'soda'
                        price = price + 2.35
                    {print} 'That will be ' price ' dollar, please'
                    ```
            13:
                story_text: |
                    In this level we can use the new commands to upgrade our restaurant.
                    We use `{and}` to see {if} two things are both the case.
                example_code: |
                    ```
                    price = 10
                    food = {ask} 'What would you like to eat?'
                    drinks = {ask} 'What would you like to drink?'
                    {if} food {is} 'sandwich' {and} drinks {is} 'juice'
                        {print} 'Thats our discount menu'
                        price = price - 3
                    {print} 'That will be ' price ' dollars'
                    ```
            15:
                story_text: |
                    With the `{while}` you can make sure your costumers can keep adding orders until they are done.

                    ### Exercise
                    Correctly add the `{while}` command to this code.
                example_code: |
                    ```
                    {print} 'Welcome at McHedy'
                    more = 'yes'
                    _
                        order = {ask} 'What would you like to order?'
                        {print} order
                        more = {ask} 'Would you like to order anything else?'
                    {print} 'Thank you!'
                    ```
    rock:
        name: Batu, gunting, kertas
        default_save_name: Batu
        description: Buat permainan batu gunting kertas sendiri
        levels:
            1:
                story_text: |-
                    Pada level 1 kamu dapat memulai dengan permainan batu gunting kertas

                    Dengan perintah `ask` kamu bisa mengambil salah satu pilihan, dan dengan `echo` kamu bisa menampilkan pilihan tersebut.
                example_code: "```\nprint apa yang kamu pilih?\nask pilih dari batu, gunting, atau kertas\necho jadi pilhan kamu adalah: \n```\n"
                story_text_2: |
                    ### Exercise
                    Instead of using words, you could also use emojis: ✊✋✌
                    Can you create a code using emojis?
                example_code_2: |
                    ```
                    {print} what do you choose?
                    {ask} choose from _
                    {echo} so your choice was:
                    ```
            2:
                story_text: |
                    In this level you can practise using the variables, so that you can make the rock, paper, scissors game in the next level!
                example_code: |
                    ```
                    choice {is} _
                    {print} I choose choice
                    ```
            3:
                story_text: |
                    Kamu bisa menggunakan `{at} {random}` perintah untuk membiarkan komputer mengambil batu, kertas atau gunting!

                    ### Latihan
                    Selesaikan kode menggunakan `{at} {random}` perintah.
                example_code: |
                    ```
                    pilihan is batu, gunting, kertas
                    print pilihan at random
                    ```

                    Kamu dapat menggunakan perintah `ask` lagi pada level 2. Dapatkah kamu menampilkan pilihan kamu dan pilihan komputer?
                    Berhati-hatilah, `ask` sedikit berbeda dengan yang kamu gunakan di level 1. Sekarang perrintah ini memerlukan nama didepannya.
                story_text_2: |
                    ### Exercise
                    Now you only have one player, so can you add a second player?
                    You can even use variables to name player 1 and player 2.
                example_code_2: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} player 1 chooses... choices {at} {random}
                    {print} player 2 _
                    ```
            4:
                story_text: |
                    In this level we can further program rock, paper, scissors. But if you want to add text, you have to use quotation marks here too.
                    ### Exercise
                    Fill in quotation marks on the blanks. Mind that the variable `choices` should be outside the quotes.
                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} _The computer chooses..._ choices {at} {random}
                    ```
            5:
                story_text: "Pada level 4 kamu bisa menentukan siapa yang menang. \nUntuk hal itu, kamu memerlukan perintah `if`\n\nSimpan pilihan kamu dengan sebuah nama favoritmu dan pilihan komputer dengan nama pilihan komputer.\nLalu kamu bisa menggunakan `if` untuk melihat apakah kedua pilihan tersebut sama atau berbeda.\nDapatkah kamu menyelesaikan kode ini?"
                example_code: "```\npilihan is batu, gunting, kertas\npil_komputer is _\n pil_kamu is ask Apa yang kamu pilih?\nprint 'kamu memilih ' _\nprint 'komputer memilih ' _\nif _ is _ print 'seri' else print 'tidak seri'\nif pil_kamu is batu and pil_komputer is kertas print 'komputer menang'\n```\n\nPertama-tama, kamu perlu mengisi kotak kosong yang tersedia dengan kode yang benar untuk melihat apakah hasil permainan seri. \n"
            9:
                story_text: |
                    In this level you can program the whole rock, paper, scissors game by nesting the {if}-commands. Can you finish the code?
                example_code: |
                    ```
                    choices = rock, paper, scissors
                    your_choice = {ask} 'What do you choose?'
                    {print} 'You choose ' your_choice
                    computer_choice = choices {at} {random}
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} rock
                        {if} your_choice {is} paper
                            {print} 'You win!'
                        {if} your_choice {is} scissors
                            {print} 'You lose!'
                    # finish this code
                    ```
            10:
                story_text: |
                    Feeling too lazy to play the game yourself? Let Hedy play it for you!
                example_code: |
                    ```
                    choices = rock, paper, scissors
                    players = Marleen, Michael
                    {for} player {in} players
                         {print} player ' chooses ' choices {at} {random}
                    ```
            13:
                story_text: |
                    With the `{and}` command you can shorten your rock, paper, scissors code! Check out the example code below and try to finish it.
                example_code: |
                    ```
                    options = 'rock', 'paper', 'scissors'
                    your_choice = {ask} 'What do you choose?'
                    computer_choice = options {at} {random}
                    {print} 'You choose ' your_choice
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'paper'
                        {print} 'You win!'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'scissors'
                        {print} 'The computer wins!'
                    ```
            15:
                story_text: |
                    ### Exercise
                    Play until you beat the computer! But first, finish the example code...
                example_code: |
                    ```
                    won = 'no'
                    options = 'rock', 'paper', 'scissors'
                    {while} won == 'no'
                        your_choice = {ask} 'What do you choose?'
                        computer_choice = options {at} {random}
                        {print} 'you chose ' your_choice
                        {print} 'the computer chose ' computer_choice
                        {if} computer_choice == your_choice
                            {print} 'Tie!'
                        {if} computer_choice == 'rock' {and} your_choice == 'scissors'
                            {print} 'You lose!'
                        {if} computer_choice == 'rock' {and} your_choice == 'paper'
                            {print} 'You win!'
                            won = 'yes'
    rock_2:
        name: Rock, paper, scissors 2
        default_save_name: rock_2
        description: Part 2 of rock, paper, scissors
        levels:
            2:
                story_text: |
                    Now that you have learned how to use the `{ask} command, you can make your rock, paper, scissors code interavtive too!

                    ### Exercise
                    Make the rock, paper, scissors code interactive by adding the `{ask}` command and a question to your rock, paper, scissors code.
                example_code: |
                    ```
                    choice is _
                    {print} I choose choice
                    ```
    secret:
        name: SuperSpy
        default_save_name: language
        description: Make your own spy code
        levels:
            12:
                story_text: |
                    In this adventure you can create your own super spy code. Encode a message that only the right agent can decipher.
                    If the enemy tries to crack the code, they will get some false info to waste their time.
                example_code: |
                    ```
                    name {is} {ask} 'What is your name?'
                    {if} name {is} '_'
                        a {is} 'Go to the airport '
                    {else}
                        a {is} 'Go to the trainstation '
                    password {is} {ask} 'What is the password?'
                    {if} password {is} _
                        b {is} 'tomorrow at 02.00'
                    {else}
                        b {is} 'today at 10.00'
                    {print} _ _ _
                    ```
            13:
                story_text: |
                    The code you made in the previous level can be made a lot easier in this one with the `{and}` command.
                example_code: |
                    ```
                    name = {ask} 'What is your name?'
                    password = {ask} 'What is your password?'
                    {if} name {is} 'Agent007' _ password {is} 'TOPSECRET'
                        {print} 'Go to the airport at 02.00'
                    {else}
                        {print} 'Go to the trainstation at 10.00'
                     ```
    simon:
        name: Simon Says
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    Let's make a game of Simon Says! Simon Says is a memory game in which the player will be given a color. They have to repeat that color back.
                    If they get it right a color is added to the sequence, so they now have to remember 2 colors, then 3, then 4 etc. the game stops as soon as the player makes a mistake.

                    ### Exercise
                    In this first part of the Simon Says adventure, we'll let the computer pick a random color and add it to a list.

                    ***Make 2 lists*** First, make a list called `colors` and fill it with the colors red, yellow, green and blue.
                    Then make a list called `simon_sequence`. This list will be used as the answer.
                    At the start of the game this lists need to be empty. unfortunately, we can't create an empty list (yet), so we'll fill it with the words 'empty' and 'list' and we'll remove them from the list immediately.

                    ***Create a function that adds a color to the sequence*** Now that we have an empty list called simon_sequence, we can start filling it with random colors.
                    We do that with a function, so we can call it everytime there's a new level in our game. Create a function called `add_random_color`.
                    Then create the variable random_color and set it to a random color. Next, add this random color to the simon_sequence.

                    ***Create a function that shows the simon_sequence*** Start by naming the new function `show_simon_sequence` with `level` as an argument. Now we want to show as many colors as the level we are in (in level 1 you see 1 color, in level 2 you see 2 colors etc).
                    So we repeat `level` times, to print the `simon_sequence[i]`. Each time a color is shown, wait for 1 second and then clear the screen.

                    ***Test your program*** Before you go to the next level, test if the functions are working by calling both of the functions. If they're working you should see a random color in your output screen.
                    Remove this testing part of your code, copy the code and continue to the next tab to learn more about the simon says game!
                example_code: |
                    ```
                    # Make 2 lists
                    colors = _
                    _ = ['empty', 'list']
                    {remove} _ {from} simon_sequence
                    {remove} _

                    # Create a function that adds a color
                    _ add_random_color
                        _
                        {add} _

                    # Create a function that shows the simon_sequence
                    {define} _
                        {for} i {in} {range} 1 {to} _
                            {print} _
                            _
                            _

                    # Test your program
                    {call} _
                    {call} show_simon_sequence {with} 1
                    ```
    simon_2:
        name: Simon Says 2
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    We'll continue with our Simon Says game!

                    ### Exercise
                    ***Paste your code here*** Paste your code from the previous level here. Don't forget to remove the part that was just used for testing the functions.

                    ***Create a function that creates the player_sequence*** The list `player_sequence` is used to capture the answers of the player. First we define the function with the argument level.
                    Next, we ask level times what the color is that they choose. We call that variable `answer`. Then we add the variable `answer` to the list player_sequence.

                    ***Setting up the game*** Before we program the game in the next tab, we'll need some starting variables. First, we'll set the variable `level` to 1 and the variable `game_over` to False.
                    Then we make an introduction for the game. We'll print 'Welcome to Simon Says!' and clear the screen after 1 second.

                    ***Continue to the next tab to finish the game!**** Don't forget to copy your code and take it with you to the next tab.
                example_code: |
                    ```
                    # Paste your code here


                    # Create a function that creates the player_sequence
                    {define} _
                        {for} _
                            _ 'What is color number ' i '?'
                            {add} answer {to} _

                    # Set up
                    level = _
                    game_over = _
                    {print} _
                    _ 1
                    _
                    ```
    simon_3:
        name: Simon Says 3
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    In this tab we'll program the game of Simon Says!

                    ### Exercise
                    ***Paste your code*** Copy your code from the previous tab and paste it here.

                    ***Program the game*** We start by making sure the game goes on while the game isn't over. Then we print what level the player is on, we use the variable level for that. We only show that for 1 second and then we clear the screen again.
                    Now, we have to create the empty list player_sequence. We've already programmed how to fill the list, with our function `player_sequence`, but we never made the list itself. To create the list we use the same trick as we did in the previous tab.
                    We'll make a list with the words 'empty' and 'list' on it, and then we remove both these words. Next, we'll call all of the 3 functions that we've created.
                    Lastly, we'll have to check if the player gave the correct answers (so if the player_sequence and the simon_sequence are the same).
                    If that's the case, we'll compliment the player. Wait for 1 second and increase the level with 1.
                    Did the player give the wrong answer, we'll tell them and end the game by setting game_over to 'True'

                    ***Enjoy your game!*** Great job! Does your game not work? Use the ladybug button to debug your code!
                example_code: |
                    ```
                    # Paste your code here

                    # The game
                    {while} game_over _
                        {print} _
                        _
                        _
                        _ = ['empty', 'list']
                        {remove} _
                        {remove} _
                        {call} _
                        {call} _ {with} _
                        {call} _ {with} _
                        {if} player_sequence == _
                            _
                            _
                            _
                        {else}
                            _
                            game_over = _
                    ```
    sleep_command:
        name: '{sleep}'
        default_save_name: sleep_command
        description: introducing sleep command
        levels:
            2:
                story_text: |
                    ## The sleep command
                    Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.
                example_code: |
                    ```
                    {print} My favorite colour is...
                    {sleep} 2
                    {print} green!
                    ```
    songs:
        name: Nyanyikan sebuah lagu!
        default_save_name: Lagu
        description: Tampilkan sebuah lagu
        levels:
            6:
                story_text: |-
                    Lagu-lagu sering memiliki banyak pengulangan. Sebagai contoh... Baby Shark! Jika mau menyanyikannya, kamu mengucapkan hal yang sama berkali-kali.

                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark

                    Kamu dapat membuat lagu ini menjadi lebih pendek dengan sebuah `repeat`! Bisakah kamu menyelesaikan kodenya?
                example_code: |
                    ```
                    repeat _ _ print 'Baby Shark tututudutudu'
                    print 'Baby Shark'
                    ```

                    Setelah Baby Shark, kamu juga dapat membuat program untuk menyanyikan lagu lain. Ada banyak lagu yang mengulang-ulang kalimat.
                story_text_2: |
                    This children's song counts down from 5 little monkeys to 1 monkey.
                    If you copy line 2 - 7 and paste it under the the code, you can sing the whole song!
                example_code_2: |
                    ```
                    number = 6
                    number = number - 1
                    print number ' little monkeys jumping on the bed'
                    print 'One fell off and bumped his head'
                    print 'Mama called the doctor and the doctor said'
                    print 'NO MORE MONKEYS JUMPING ON THE BED!'
                    sleep
                    ```
            7:
                story_text: Lagu-lagu sering memiliki banyak pengulangan. Terkadang pengulangannya didasarkan dari perhitungan. Misal, di sebuah lagu 'Botol'. Kamu dapat membuat program untuk menyanyikan lagu tersebut dengan sedikit matematika.
                example_code: |
                    ```
                    reff is 99
                    print reff ' botol di dinding'
                    print reff ' botol'
                    print 'Ambil satu, berikan ke teman'
                    reff is reff - 1
                    print reff ' botol di dinding'
                    ```

                    Kamu sekarang dapat mengulang baris 2 ke baris 6 sebanyak yang kamu mau dengan menyalin ulang baris-baris tersebut.

                    # Melihat kedepan
                    Pada level 5, kita belajar untuk mengulang satu baris dengan `repeat` seperti ini:

                    ` repeat 3 times print 'Baby Shark Tutududududu`

                    Tapi kamu akan lihat pada materi ini, terkadang kamu perlu untuk mengulang beberapa baris bersamaan. Ini bisa dilakukan dengan menyalin ulang, namun itu merepotkan. Pada level 7 kamu akan belajar bagaimana cara melakukannya dengan lebih mudah.
            8:
                story_text: Pada level 6, kamu menuliskan lagu 'botol'. Kamu membuat sebuah reff lalu mengulangnya hingga 99 kali. Pada level 7, kamu dapat melakukannya hanya dengan menambahkan satu baris program.
                example_code: |
                    ```
                    reff is 99
                    repeat 99 times
                        print reff ' botol di dinding'
                        print reff ' botol'
                        print 'Ambil satu, berikan ke teman'
                        reff is reff - 1
                        print reff ' botol di dinding'
                    ```
            10:
                story_text: |
                    In this level you can easily make the childrens' song 'Five little monkeys'. Can you make the last chorus?
                    You can also make the whole baby shark song (including all the other sharks in the family) in only 6 lines!
                    Or you can make Old MacDonald with all the different animals.
                example_code: |
                    ```
                    keluarga = bayi, ibu, ayah, nenek, kakek
                    _ _ _ _
                      {print} _
                    ```
                story_text_2: |
                    ### Exercise 2
                    Print the song Five little moneys jumping on the bed. Look up the text if you don't remember.

                    **(extra)** Print the song Old MacDonald had a farm, and make sure all animals make a different sound, using an `{if}`.
                example_code_2: |
                    ```
                    monkeys = 5, 4, 3, 2, 1
                    ```
            11:
                story_text: |
                    In this level you can use the `{for} i {in} {range}` command to make songs that use counting.
                example_code: |
                    ```
                    {for} i {in} {range} 5 {to} 1
                        {print} i ' little monkeys jumping on the bed'
                        {print} 'One fell off and bumped his head'
                        {print} 'Mama called the doctor and the doctor said'
                        {if} i {is} 1
                            {print} 'PUT THOSE MONKEYS RIGHT TO BED!'
                        {else}
                            {print} 'NO MORE MONKEYS JUMPING ON THE BED!'
                    ```
            12:
                story_text: |
                    In this song we can make it even easier to program '{if} you're happy and you know it, clap your hands'. Because we can put all of the actions in a variable, check it out:
                example_code: |
                    ```
                    actions = 'clap your hands', 'stomp your feet', 'shout Hurray!'
                    {for} action {in} actions
                        {for} i {in} {range} 1 {to} 2
                            {print} '{if} youre happy and you know it'
                            {print} action
                        {print} '{if} youre happy and you know it and you really want to show it'
                        {print} '{if} youre happy and you know it'
                        {print} action
                    ```
            13:
                story_text: |
                    In the previous adventure you have learned how to use an argument in a function, but did you know that you could combine them with {ask} commands as well?
                    In this example we have changed the 'My Bonnie' program and made it interactive. You are now asked where Bonnie is.
                example_code: |
                    ```
                    {define} song {with} place
                        {print} 'My Bonnie is ' place

                    chosen_place = {ask} 'Where do you want Bonnie to be?'
                    synonym = {ask} 'What is another word for that?'

                    {call} song {with} chosen_place
                    {call} song {with} synonym
                    {call} song {with} chosen_place
                    ```
            16:
                story_text: |
                    Di level ini, Anda dapat memprogram lagu seperti OldMacDonald dengan lebih cepat. Anda dapat menghubungkan hewan yang tepat dengan suara yang tepat hanya dengan menempatkannya di tempat yang sama dalam daftar.
                    Pelaut Mabuk juga dengan cepat dibuat di level ini. Anda hanya membutuhkan 8 baris untuk keseluruhan lagu, lihatlah!

                    ### Latihan
                    Selesaikan lagu Old MacDonald dengan mengatur variabel `animal` menjadi `animals[i]` dan `sound` menjadi `sounds[i]`.
                example_code: |
                    ```
                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    {for} i {in} {range} 1 {to} 3
                        animal = _
                        sound = _
                        {print} 'Old MacDonald had a farm'
                        {print} 'E I E I O!'
                        {print} 'and on that farm he had a ' animal
                        {print} 'E I E I O!'
                        {print} 'with a ' sound sound ' here'
                        {print} 'and a ' sound sound ' there'
                        {print} 'here a ' sound
                        {print} 'there a ' sound
                        {print} 'everywhere a ' sound sound
                    ```

                    ```
                    lines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} line {in} lines
                        {for} i {in} {range} 1 {to} 3
                            {print} line
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
            18:
                story_text: |
                    In level 16 we made songs using lists. These programs however are no longer working properly in this level. The colons from level 17 and the brackets from level 18 still need to be added.

                    ### Exercise 1
                    The Drunken sailor song is given as sample code, but not yet working.
                    Can you make sure everything works again? To help you, we've put _ in the places of _some_ errors.

                    ### Exercise 2
                    Now also look up your Old MacDonald song from level 16, and correct it.
                example_code: |
                    ```
                    lines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} line {in} lines _
                        {for} i {in} {range} 1 {to} 3 _
                            {print} _ line _
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
    songs_2:
        name: Sing a song! 2
        default_save_name: Song 2
        description: Sing a song 2
        levels:
            12:
                story_text: |
                    Songs contain a lot of repetition. We can capture it with a function!
                    ### Exercise
                    Look at the example code with the function. Fill out the two lines so the full song is printed.
                example_code: |
                    ```
                    {define} twinkle
                        {print} 'Twinkle'
                        {print} '...'

                    {call} twinkle
                    {print} 'Up above the world so high'
                    {print} 'Like a diamond in the sky'
                    {call} _
                    ```
            16:
                story_text: |
                    ### Exercise
                    Finish the nursery rhyme!
                example_code: |
                    ```
                    number = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
                    object = ['on his drum', 'on his shoe', 'on his knee', 'on his door', 'on his hive', 'on his sticks', 'up in heaven', 'on his gate', 'on his vine', 'once again']

                    _
                        {print} 'This old man'
                        {print} 'He played ' _
                        {print} 'He played knick-knack ' _
                        {print} 'With a knick-knack paddywhack'
                        {print} 'Give the dog a bone'
                        {print} 'This old man came rolling home'
                        {sleep} 8
                        {clear}
                    ```
                story_text_2: |
                    ### Exersice 2
                    Now create your own code for the nursery rhyme 'The wheels on the bus' on the same way!
                example_code_2: |
                    ```
                    object = ['wheels', 'doors', _]
                    movement = [ 'round and round', 'open and shut', _]
                    ```
    tic:
        name: Tic-Tac-Toe
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    Let's program a game of tic-tac-toe!

                    ### Exercise
                    In this adventure we'll start with creating an empty field.

                    ***Create a list called field*** This list will be our playing field. This list is filled with 9 dots, since there are no x's and o's yet at the start of our game.

                    ***Create a function that prints the field*** Firstly, clear the screen so the old playing fields will be removed. Then we print the first line of our Tic Tac Toe field. This line constists of the first 3 spots in our list field.
                    We have already programmed this line for you. Now finish the field by printing spot 4, 5, and 6 on the second row and spot 7, 8 and 9 in the third row.

                    ***Call the function that prints the field*** Now call the function.
                    <div class="w-full flex flex-row gap-2">
                        Run the code. Your output should look like this: <img src="https://github.com/hedyorg/hedy/assets/80678586/bcbd156e-4b48-4e82-84ae-f86d21b0cbcc" width="100">
                    </div>

                    ***Continue in the next tab*** In the next tab you'll learn how to program the game itself.
                example_code: |
                    ```
                    # Create a list called field
                    _ = ['.', '.', '.', '.', '.', '.', '.', '.', '.']

                    # Create a function that prints the field
                    {define} print_field
                        _
                        {print} 'TIC TAC TOE'
                        {print} field[1] field[2] field[3]
                        _
                        _

                    # Call the function
                    ```
            17:
                story_text: |
                    In the previous level you've learned how to make a tic-tac-toe game. The game works, but is quite annoying as it keeps asking you if you've won yet.
                    Now that we have the {elif} command, we can let the game decide if someone has won and it can stop asking us!

                    ### Exercise
                    ***Paste your code*** Paste your code from the previous level here and make it level 17 proof. In this level you've learned to use a colon everytime you create a block of code. Please add the colons in the correct spots.

                    ***Create a function that detects if someone's won*** We have started the function for you, paste it under the function `print_field` and finish the function. You can see that this first piece of code checks to see if spot 1, 2 and 3 are the same, because if they are you have 3 in a row.
                    It also checks if they are not a dot, because if they are, the line might have the same symbols on them, but that's just because it's still empty.
                    If all these conditions are met, the game is over and the winner is printed.
                    Finish this function with all possible ways to win. This means you have to make this for the other 2 rows, 3 columns and 2 diagonals.
                    If you've finished all the other options, the function should return the variable `game_over` so we can use it in our game.

                    ***Call the function in the game*** Go to the line `game_over = {ask} 'Did you win?'` and change it to `game_over = {call} detect_winner {with} field, sign`. Now the function will check if there's a winner and the game doesn't need to keep asking anymore!

                    ***Enjoy your game!*** Great job! You have finished the game! Enjoy playing it!

                example_code: |
                    ```
                    # Paste your code here and make it level 17 proof

                    # Create a function that detects if someone has won
                    {define} detect_winner {with} field, sign:
                        {if} field[1] == field[2] {and} field[2] == field[3] {and} field[1] != '.':
                            game_over = 'yes'
                            {print} 'Player ' sign 'wins!'
                        {elif}:
                            _
                        {else}:
                            game_over = 'no'
                    {return} _
                    ```
    tic_2:
        name: Tic-Tac-Toe 2
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    In the previous adventure you've learned how to create a playing field. Now you'll learn how to create the game!

                    ### Exercise
                    ***Paste your code*** Start by pasting your code from the previous adventure here.

                    ***Add variables*** Underneath your list called `field` we'll add 2 more variables that we'll need to program the game.
                    The variable `game_over` tells us if the game is over, and should be 'no' at the start of the game.
                    The variable `sign` tells us if it's the turn of player x or player o. Set the variable to 'x'.

                    ***The game*** First use a {while} command, to make sure the game keeps on playing the variable while game_over is set to no.
                    During the game, we first ask the player which spot they choose. Then we change the field with the number they chose into their sign.
                    Then we print the field again and we ask the player if they've won yet. Lastly we want to switch whose turn it is, so if the sign is 'x' it should be 'o' and the other way around.

                    ***Test your game*** Does your game work? Great, have fun playing the game! If not, use the ladybug button to debug your code.
                    You might have noticed one mistake in the code though, you can steal the other player's spot! If the other person chose spot 1, you could simply enter 1 after them and steal their spot.
                    That's not fair! Go to the next tab to learn how to fix this problem.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Add variables
                    game_over = _
                    sign = _

                    # The game
                    {while} _
                        choice = _ 'Player ' sign '_?'
                        field[choice] = _
                        _ print_field
                        game_over = {ask} _
                        {if} sign = 'o'
                            sign = _
                        _
                            sign = _
                    ```
    tic_3:
        name: Tic-Tac-Toe 3
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    You might have noticed one mistake in the code you've made in the previous adventure. You can steal the other player's spot! If the other person chose spot 1, you could simply enter 1 after them and steal their spot.
                    That's not fair! In this tab we'll fix that mistake.

                    ### Exercise
                    ***Paste your code here*** Paste your code from the previous adventure here.

                    ***Fix the mistake*** To fix the mistake we replace the line that says `field[choice] = sign`. This turns any spot that the player has chosen into their sign.
                    Go to the header that says 'Use this to fix the mistake' and finish the code. We first want to check if the chosen spot is still empty, so `if field[choice] = '.'`. If that is the case, you are allowed to take it.
                    Then we make an else command and print 'Sorry, this spot is already taken' if the spot is not empty. Lastly, we add a {sleep} command, so the players can actually read the text before it gets cleared again.
                    Now copy this piece of code and replace the line `field[choice] = sign` with this new piece of code.

                    ***Play your game!*** Now the game should work properly! Good job!
                    The only flaw is that you can get a bit annoyed that the game keeps asking you if you've won yet. Do you want to fix that? Go to level 17 and we'll fix it!
                example_code: |
                    ```
                    # Paste your code here

                    # Use this to fix the mistake
                    {if} _ = '.'
                        field[choice] = sign
                    {else}
                        {print} _
                        _
                    ```
    turtle:
        name: Kura-kura
        default_save_name: kurakura
        description: Buat gambar milikmu sendiri
        levels:
            1:
                story_text: |-
                    Pada level 1 kamu juga dapat menggunakan Hedy untuk menggambar. Dengan cara menggabungkan belokan dan garis, kamu bisa membuat kotak atau tangga!

                    Gunakan `forward` untuk membentuk garis lurus kedepan. Angka dibelakangnya menyatakan seberapa jauh kura-kura kamu akan bergerak. `turn right` membuat kura-kura menghadap kanan searah jarum jam. `turn left` membuat kura-kura menghadap kiri berlawanan arah jarum jam.
                example_code: |
                    ```
                    {forward} 100
                    {turn} {left}
                    ```
                story_text_2: |
                    ### Exercise
                    Ini merupakan awal dari gambar sebuah tangga kecil. Dapatkan kamu membuatnya memiliki lima anak tangga?
                example_code_2: |
                    ```
                    {forward} 20
                    {turn} {right}
                    {forward} 20
                    {turn} {left}
                    {forward} 20
                    ```
            2:
                story_text: |-
                    Pada level 1 sang kura-kura hanya bisa menghadap kiri dan kanan. Itu cukup membosankan!
                    Pada level 2, dia dapat menghadap ke berbagai arah.

                    Gunakan 90 untuk memindahkan arahnya seperempat lingkaran. Kita sebut ini sudut. Satu putaran penuh bernilai 360 derajat. Dapatkah kamu mengerti hasil kode ini? Mungkinkah sebuah segitiga atau sebuah lingkaran?
                example_code: |
                    ```
                    print Menggambar bentuk
                    sudut is 90
                    turn sudut
                    forward 25
                    turn sudut
                    forward 25
                    ```
                story_text_2: |
                    Also, in level 1 the turtle could only turn left or right. That is a bit boring!
                    In level 2 he can point his nose in all directions.

                    Use 90 to turn a quarter. We call this degrees. A full turn is 360 degrees.
                    Can you make a figure with this code? Maybe a triangle or a circle?
                example_code_2: |
                    ```
                    {print} Drawing figures
                    angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
            3:
                story_text: |-
                    Kamu juga dapat menggunakan `random` ketika menggambar dengan kura-kura. Pergerakan acak akan membuat sang kura-kura bergerak dalam jalur tidak terduga untuk setiap eksekusi program.
                    Gunakan `at random` untuk memilih nilai dari sebuah list. Kamu dapat menyalin baris 2 dan 3 sehingga membentuk jalur pergerakan yang lebih acak.
                example_code: |
                    ```
                    sudut is 10, 50, 90, 150, 250
                    turn sudut at random
                    forward 25
                    ```
            4:
                story_text: Pada level 3 kamu harus menggunakan tanda kutip satu pada perintah `print` dan `ask`. Begitu juga ketika menggambar!
                example_code: |
                    ```
                    print 'Menggambar bentuk'
                    sudut is 90
                    turn sudut
                    forward 25
                    turn sudut
                    forward 25
                    ```
                story_text_2: |
                    You can also change the color of the lines with the command `{color}`. Check out the example.
                    You can also use the command `{color} {white}` to make 'invisible' lines. You could use these white lines to move the turtle anywhere in the screen before you start drawing.
                example_code_2: |
                    ```
                    {color} {white}
                    {forward} -80
                    {color} {green}
                    {forward} 50
                    {color} {yellow}
                    {forward} 50
                    {color} {red}
                    {forward} 50
                    ```
            5:
                story_text: 'Pada level 4 kita akan mengambil sebuah pilihan dengan `if`. Sebagai contoh: mengambil satu dari kumpulan bentuk.'
                example_code: |
                    {print} 'Menggambar Bentuk'
                    bentuk {is} {ask} 'Apakah Anda ingin persegi atau segitiga?'
                    {if} bentuk {is} segitiga sudut {is} 120
                    {else} sudut {is} 90
                    {turn} sudut
                    {forward} 25
                    {turn} sudut
                    {forward} 25
                    {turn} sudut
                    {forward} 25
                    {turn} sudut
                    {forward} 25
                story_text_2: |
                    ### Exercise
                    Fill in the correct numbers in this code to get it to work.
                    After you've done that, you can try to add the option backwards.

                    **Extra** Instead of using 'left' and 'right', remake the program with North, East, South and West.
                    This way you could add even more directions like Northeast and Southwest etc.
                example_code_2: |
                    ```
                    direction {is} {ask} 'Do you want to go left, right, or straight ahead?'
                    if direction is left turn _
                    if direction is right turn _
                    forward 100
                    ```
            6:
                story_text: |-
                    Pada level 6 kamu dapat menggunakan perhitungan untuk menggambar bentuk-bentuk yang berbeda.
                    Kamu mungkin pernah belajar di sekolah bahwa berputar satu lingkaran penuh itu 360 derajat. Jika tidak, sekarang kamu telah mengetahuinya!
                    Karena itulah diperlukan 90 derajat untuk membentuk sebuah kotak. 360 dibagi 4 adalah 90.
                    Sekarang karena kamu bisa menggunakan matematika dengan Hedy, kamu bisa menggambar semua bentuk yang kamu inginkan!
                example_code: |
                    ```
                    jumlahsudut is ask 'Berapa banyak sudut yang kamu mau?'
                    sudut is 360 / jumlahsudut
                    forward 50
                    turn sudut
                    forward 50
                    turn sudut
                    forward 50
                    turn sudut
                    forward 50
                    turn sudut
                    forward 50
                    turn sudut
                    forward 50
                    turn sudut
                    ```
            8:
                story_text: |-
                    Sekarang karena kita sudah bisa mengulang beberapa baris, kita bisa menggambar bentuk dengan lebih mudah.
                    Kita hanya perlu mengisi sudut sekali dan menggunakan variabel tersebut dalam `repeat`.
                example_code: |
                    ```
                    sudut is 90
                    repeat 10 times
                        turn sudut
                        forward 50
                    ```
                story_text_2: Selain itu, kita juga bisa meningkatkan kemampuan program untuk menggambar banyak bentuk. Dapatkah kamu tebak seberapa jauh sang kura-kura perlu berbelok disini? Selesaikan kodenya dan kamu dapat menggambar bentuk poligon apapun yang kamu suka!
                example_code_2: "```\njumlahsudut = {ask} 'Berapa banyak sudut yang kamu mau?'\nsudut = 360 / jumlahsudut \n{repeat} jumlahsudut {times}\n    {turn} _\n    {forward} _\n```\n"
            9:
                story_text: |
                    Now that we can use a `{repeat}` inside a `{repeat}`, we can create more complex figures.

                    ### Exercise 1
                    This code creates three black triangles, change that into five pink squares.

                     **(extra)** Create a figure of your own choosing consisting of at least two different shapes types.
                example_code: |
                    ```
                    {color} {black}
                    {repeat} 3 {times}
                        {repeat} 3 {times}
                            {forward} 10
                            {turn} 120
                        {color} {white}
                        {forward} 50
                        {color} {black}
                    ```
            10:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.
                    ### Exercise 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                     **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!
                    ### Exercise 2
                    The spiral is drawn outwards, make it go inwards?
                example_code: |
                    ```
                    {turn} 90
                    distances = 10, 20, 30, 40, 50, 60
                    {for} distance {in} distances
                        {forward} distance
                    ```
            12:
                story_text: |
                    We can use functions to draw more complex figures with less code.
                    ### Exercise 1
                    Fill the function so that three squares are created. If you want the image to look nicer, you can make the lines between the squares white.

                    ### Exercise 2
                    The code can be made even shorter. Place the final lines into a `{repeat}` so the figure remains the same.

                    ### Exercise 3
                    Create your own drawing with different figures.
                    Change both the number of figures with the `{repeat}` and the shape of the figures in the `{define}`
                example_code: |
                    ```
                    {define} square
                        {repeat} 4 {times}
                            {turn} _
                            {forward} _
                    {call} square
                    {forward} 50
                    {call} square
                    {forward} 50
                    {call} square
                    ```
    turtle_draw_it:
        name: Draw it!
        default_save_name: Draw it
        description: Draw this picture with the turtle
        levels:
            1:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                        Rectangle <img src="https://github.com/hedyorg/hedy/assets/80678586/77aa99d5-cd8f-4969-b49d-e8fed34ac550" width="100">
                        Square <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                        Stairs<img src="https://github.com/hedyorg/hedy/assets/80678586/d4301e62-ec66-4031-827c-7d21f73ba106" width="200">
                    </div>
            2:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/e974b62c-f0cf-445a-8bd4-5ad9f1f71204" width="100">
                    Arrow <img src="https://github.com/hedyorg/hedy/assets/80678586/803d8f42-9708-448c-82ea-d035697f08c9" width="150">
                    Boat <img src="https://github.com/hedyorg/hedy/assets/80678586/94ef7189-442a-4c8f-827d-12a69203c2e9" width="150">
                    </div>
            3:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/71e04d98-9545-4614-9caf-a5f179b756a1" width="150">
                    Star <img src="https://github.com/hedyorg/hedy/assets/80678586/421c4d28-cb99-424b-be26-dcae30d65c80" width="150">
                    Arrow <img src="https://github.com/hedyorg/hedy/assets/80678586/3cbebcae-5258-47c5-a6ac-e7ee36c1d1ce" width="200">
                    </div>
            4:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Colored Star <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Rainbow <img src="https://github.com/hedyorg/hedy/assets/80678586/2728b10f-9f7f-45ea-964e-5b284033e4f0" width="500">
                    Nested squares <img src="https://github.com/hedyorg/hedy/assets/80678586/f013f9fa-bc68-4c60-b778-2c457799d6f7" width="200">
                    </div>
                example_code: |
                    **Extra** Up for a real challenge? Make sure that the colors of these figures are selected randomly, so that each time you run your programs they'll look differently!

                    ```
                    colors {is} red, orange, yellow, green, blue, purple, pink, brown, gray, black
                    color _
                    ```
            5:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** Make only one code that lets the player decide which letter they'd like to see! And can you add even more letters?

                    <div class="w-full flex flex-row gap-2">
                    F <img src="https://github.com/hedyorg/hedy/assets/80678586/8a021b76-c24b-4e7c-b960-48d57f3bcb20" width="100">
                    E <img src="https://github.com/hedyorg/hedy/assets/80678586/12821803-6422-416a-8e36-9902d14e57a4" width="100">
                    L <img src="https://github.com/hedyorg/hedy/assets/80678586/3af6f919-7b67-4ee7-b923-11e56f2b6b24" width="100">
                    </div>
                example_code: |
                    Hint:
                    ```
                    chosen_letter {is} {ask} 'Which letter would you like to see? F, E or L?'
                    {if} _
                    ```
            6:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** Let the player decide which color the square should be.

                    ***Extra*** Can you make the letter of your own first name and the flag of your own country too?

                    <div class="w-full flex flex-row gap-2">
                    Square <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="150">
                    Letters <img src="https://github.com/hedyorg/hedy/assets/80678586/e75f4fa5-f1f5-4b48-806c-916c28e4e8ad" width="100">
                    Flag <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hint for the square:
                    ```
                    chosen_color = {ask} _
                    ```
            7:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Hexagon <img src="https://github.com/hedyorg/hedy/assets/80678586/92e492e1-1593-489b-aaf0-51d2a29755f4" width="200">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/3629a5e6-1f02-4851-aab9-c5430ba4a1f1" width="200">
                    Fan <img src="https://github.com/hedyorg/hedy/assets/80678586/1ba2ff71-1230-4fe3-8255-b2c504cf1b4e" width="200">
                    </div>
            8:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** The number in brackets indicates in how many lines of code this figure can be drawn. Can you do it in the same amount of lines?

                    <div class="w-full flex flex-row gap-2">
                    Square (3) <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                    Randomly colored star (5) <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Randomly colored spiral (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/9bcdb3f1-367d-4ae0-878f-d09005424a35" width="150">
                    </div>
            9:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** The number in brackets indicates in how many lines of code this figure can be drawn. Can you do it in the same amount of lines?

                    **Extra** Give the player a choice which country they would like to see the flag of.

                    <div class="w-full flex flex-row gap-2">
                    Cross (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/76e42c76-aa3f-4863-8eee-ead73c09a186" width="150">
                    Randomly colored nested squares (8) <img src="https://github.com/hedyorg/hedy/assets/80678586/17f878cc-e893-4c10-b32e-a09a50bf08de" width="200">
                    Flags <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hint for the nested squares:
                    ```
                    colors = red, blue, orange, yellow, pink, purple, green, brown, black
                    distance = 120
                    repeat 5 times
                    _
                    ```
                    Hint for the flags:
                    ```
                    country = ask 'which country would you like to see the flag of?'
                    if country is 'the Netherlands'
                        color_1 = red
                        color_2 = white
                        color_3 = blue
                    ```
            10:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Nested Hexagon <img src="https://github.com/hedyorg/hedy/assets/80678586/3629e908-3cd5-44ac-bbcd-1f1cceb15654" width="150">
                    Traffic lights  <img src="https://github.com/hedyorg/hedy/assets/80678586/edbbb608-5ff8-4349-85a6-e47809adde43" width="100">
                    </div>
                example_code: |
                    Hint Nested Hexagon:
                    ```
                    distances = 100, 80, 60, 40, 20
                    {for} distance {in} distances
                    _
                    ```

                    Hint Traffic Lights:
                    ```
                    colors = red, yellow, green
                    {for} chosen_color {in} colors
                        color _
                        {repeat} _
                    ```
                story_text_2: |
                    Christmas lights <img src="https://github.com/hedyorg/hedy/assets/80678586/9637ea6d-6edc-4d88-a6f7-10271bfc5371" width="500">
                example_code_2: |
                    Hint Christmas Lights:

                    Start by moving to the left side of the screen with an invisible white line. Then hang up the Christmas lights!
                    ```
                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 90

                    colors = red, blue, yellow, purple, green, orange, pink
                    {for} chosen_color {in} colors
                    _
                    ```
            11:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Beehive (6) <img src="https://github.com/hedyorg/hedy/assets/80678586/ec02469c-907b-4695-9382-d39a8f3c00ec" width="150">
                    Fan (5)  <img src="https://github.com/hedyorg/hedy/assets/80678586/a032ab35-c70c-4e67-9b4e-036a03ecce87" width="150">
                    Snowflake (13) <img src="https://github.com/hedyorg/hedy/assets/80678586/90f56bbb-86e5-448d-8aec-16f8c2c05cf2" width="150">
                    </div>
                example_code: |
                    Hint Beehive:
                    ```
                    {for} amount_of_combs {in} {range} 1 {to} _
                        {for} walls_of_one_comb {in} {range} 1 {to} _
                            {forward} _
                            {turn} _
                        {forward} _
                        {turn} _
                    ```

                    Hint Fan:
                    Start out like the fan you made in level 7. Or take a peak at the hint for the beehive, because the codes are very similar.

                    Hint Snowflake: Start by making one 'leg' and repeat it 6 times.
            12:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!
                    Hint: Bracelet designing program. Firstly, define a function **for each shape** you want to use on the bacelet. Then, add the shapes to the bacelet like this:
                    </div>
                    Bracelet Designing program <img src="https://github.com/hedyorg/hedy/assets/80678586/549d7f3a-c492-4b4a-b173-746eb3400951" width="500">
                example_code: |
                    ```
                    {define} draw_a_square
                    _

                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 180

                    {for} i {in} {range} 1 {to} 5
                        {color} gray
                        {forward} 100
                        shape = {ask} 'What kind of shape would you like next on the bracelet?'
                        chosen_color = {ask} 'In which color?'
                        {color} chosen_color
                        {if} shape = 'square'
                            {call} draw_a_square
                    ```
            13:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    Street in different sizes <img src="https://github.com/hedyorg/hedy/assets/80678586/cdae9d97-d5ef-46f3-8838-24fa7b5b1bec" width="300">
                    Colored street  <img src="https://github.com/hedyorg/hedy/assets/80678586/9893e0bd-c0f8-49bc-a5a7-217182407724" width="300">
                    Snow Storm <img src="https://github.com/hedyorg/hedy/assets/80678586/111b0a1b-b0e1-47c3-b032-81cea05e6bbc" width="300">
                example_code: |
                    Hint Street in different sizes
                    ```
                    {define} draw_a_house {with} size
                    _

                    {call} draw_a_house {with} 90
                    {call} draw_a_house {with} 60
                    {call} draw_a_house {with} 30
                    ```

                    Hint Colored street
                    ```
                    {define} draw_a_house {with} chosen_color
                    _
                    ```

                    Hint Snow Storm
                    ```
                    {define} draw_snowflake {with} length, color
                        _

                    numbers = 10, 20, 30
                    colors = _

                    {for} i {in} {range} 1 {to} 5
                        random_number = _
                        random_color = _
                        {call} draw_snowflake {with} random_number, random_color
                        {color} white
                        {turn} random_number * 5
                        {forward} 80
                    ```
            14:
                story_text: |
                    ### Exercise
                    Create a program that asks the player how many corners their figure should have and then creates that figure.
                    The figure in the image is the output when the player fills in 10.

                    <div class="w-full flex flex-row gap-2">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/ee32f40e-dea1-4e7c-a813-3ef63671254b" width="300">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/3621bf77-527d-41e8-a44f-c5a21bb4ffd2" width="200">
                    </div>
                example_code: |
                    ```
                    {define} calculate_degrees {with} amount_of_corners
                        _ 360 / amount_of_corners


                    {define} draw_figure {with} degrees
                        _
                            {forward} 400/amount_of_corners
                            {turn} _

                    amount_of_corners = {ask} _
                    degrees = {call} _ {with} _

                    {call} _ {with}
                    {call} _ {with}
                    ```
            15:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    Spiral <img src="https://github.com/hedyorg/hedy/assets/80678586/6943223c-018b-435b-a391-23723cc7a6ad" width="150">
                example_code: |
                    Spiral
                    ```
                    distance = 5
                    {while} distance < 200
                        distance = distance + 5
                         _
                    ```
                story_text_2: |
                    Fan <img src="https://github.com/hedyorg/hedy/assets/80678586/cb671065-b47b-49f0-b298-dcbcd2a5e28f" width="150">
                example_code_2: |
                    Fan
                    ```
                    {define} draw_a_square {with} side
                    _

                    i = 100
                    {while} i > 1
                        _ {with} i
                        _
                        i = i - 3
                    ```
                story_text_3: |
                    Star <img src="https://github.com/hedyorg/hedy/assets/80678586/17564e0a-63e1-4794-8d41-15ac8c1a5a93" width="150">
                example_code_3: |
                    Star
                    A star is usually drawn using 144-degree-turns. If you change this slightly to 143 degrees for example and repeat the pattern multiple times with a {while} loop you can make this figure.
    while_command:
        name: '{while}'
        default_save_name: while_command
        description: while
        levels:
            15:
                story_text: |-
                    We are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.
                    So don't forget to change the value in the loop.

                    In the example code, we continue until a correct answer has been given.
                    If the correct answer is never given, the loop never ends!
                example_code: |
                    ```
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
                    ```
    years:
        name: New Year's
        default_save_name: New Year's Countdown
        description: Countdown to the new year!
        levels:
            11:
                story_text: |
                    In this level you can use the `{for} i {in} {range}` command to countdown to the New Year.

                    ### Exercise
                    Fill in the blanks and make the code work!
                example_code: |
                    ```
                    for _ in _ 10 to 1
                        {print} i
                    {print} 'Happy New Year!'
                    ```
