adventures:
    story:
        name: Geschichte
        default_save_name: Geschichte
        description: Geschichte
        levels:
            1:
                story_text: |
                    In Level 1 kannst du die Hauptfigur deiner Geschichte √§ndern, indem du ihren Namen selbst eingibst.

                    Nutze `{ask}` in der ersten Zeile um zu fragen, wer der Hauptcharakter der Geschichte sein soll.

                    Beginne anschlie√üend eine Zeile mit `{print}`, wenn ein Satz ausgegeben werden soll.
                    Nutze `{echo}`, wenn du m√∂chtest, dass der Name deiner Hauptfigur am Ende des Satzes steht.
                example_code: |
                    ```
                    {ask} Der Name der Hauptfigur lautet
                    {print} Die Hauptfigur l√§uft nun durch einen dunklen Wald
                    {echo} Er ist etwas ver√§ngstigt,
                    {print} Er h√∂rt √ºberall seltsame Ger√§usche
                    {print} Er bef√ºrchtet, dass es in diesem Wald spukt
                    ```
                story_text_2: |
                    ### √úbung
                    Erstelle nun deine eigene Geschichte aus mindestens 6 Zeilen Code.
                    Diese Geschichte soll nicht die gleiche sein wie im Beispiel-Code.
                    Benutze mindestens einen `{ask}` und einen `{echo}` Befehl.
                    Du kannst das Thema frei w√§hlen.
                    Wenn dir kein Thema einf√§llt, nimm eines der folgenden: ins Kino gehen, ein Sportwettkampf oder ein Tag im Zoo.
            2:
                story_text: |
                    In Level 2 kannst du deine Geschichte noch etwas spannender machen. Der Name deiner Hauptfigur kann nun an jeder Stelle im Satz auftauchen.

                    Daf√ºr musst du aber auch ein kleines bisschen mehr programmieren. Du musst dir jetzt seinen oder ihren Namen richtig merken.

                    Daf√ºr kannst du den Namen irgendwo im Satz verwenden.
                example_code: |-
                    ```
                    Name {is} {ask} Wie lautet der Name der Hauptfigur?
                    {print} Name l√§uft nun durch einen dunklen Wald.
                    {print} Name hat etwas Angst.
                    {print} Pl√∂tzlich ert√∂nen seltsame Ger√§usche...
                    {sleep}
                    {print} Name hat Angst, dass es in diesem Wald spukt.
                    ```
                story_text_2: |
                    ### √úbung
                    Nun ist es an der Zeit, Variablen zu deiner eigenen Geschichte aus dem vorigen Level hinzu zu f√ºgen.
                    Gehe zu "Meine Programme", suche dein Level 1 Geschichten-Abenteuer und kopiere den Code. F√ºge den Code in den Eingabebereich in diesem Level ein.

                    Dieser Code wird nicht funktionieren, weil du noch keine Variablen benutzt hast.
                    Bringe den `{ask}` Befehl und den `{echo}` Befehl in deinem Code in die richtige Form, die du in diesem Level gelernt hast.

                    **Extra** F√ºge deinem Code den `{sleep}`-Befehl hinzu, um Spannung in deiner Geschichte aufzubauen.
            3:
                story_text: |
                    In Level 3 wird es etwas witziger. Du kannst nun etwas ganz zuf√§lliges zu Deiner Geschichte hinzuf√ºgen. Ein beliebiges Monster, ein Tier oder ein Hindernis. Das funktioniert so:
                example_code: |
                    ```
                    Tiere {is} ü¶î, üêø, ü¶â, ü¶á
                    {print} Er h√∂rt jetzt ein Tierger√§usch von Tiere {at} {random}
                    ```
                story_text_2: |
                    Der Befehl `{add}` k√∂nnte auch n√ºtzlich werden in deiner Geschichte.
                example_code_2: |
                    ```
                    {print} Er h√∂rt ein Ger√§usch
                    tiere {is} üêø, ü¶î, ü¶á, ü¶â
                    tier {is} {ask} Was denkst du ist es?
                    {add} tier {to_list} tiere
                    {print} Es war das tiere {at} {random}
                    ```
                story_text_3: |
                    Das ist ein Beispiel f√ºr den `{remove}` Befehl in deiner Geschichte

                    ### √úbung
                    Kopiere deine Geschichte aus den vorigen Leveln in dieses Level.
                    In diesem Level hast du 3 neue Befehle gelernt: `{at} {random}` , `{add} {to_list}` und `{remove} {from}`.
                    F√ºge neue Zeilen Code zu deiner Geschichte hinzu, sodass alle neuen Befehle mindestens ein Mal in deiner Geschichte vorkommen.
                example_code_3: |
                    ```
                    {print} Sein Ruck sack wurde viel zu schwer.
                    {print} Drinnen waren eine Flasche Wasser, eine Taschenlampe und ein Ziegelstein.
                    Rucksack {is} Wasser, Taschenlampe, Ziegelstein
                    rauswerfen {is} {ask} Welchen Gegenstand soll er rauswerfen?
                    {remove} rauswerfen {from} Rucksack
                    ```
            4:
                story_text: |
                    ### √úbung
                    Kopiere den Beispielcode und f√ºge die Anf√ºhrungszeichen in die Zeilen ein.

                    ### √úbung 2
                    Gehe zur√ºck zum vorherigen Level und kopiere deinen Storycode. Bringe den Code in diesem Level zum Laufen, indem du Anf√ºhrungszeichen an den richtigen Stellen einf√ºgst.
                    Beachte: Die Variablen in deiner eigenen Geschichte sollten au√üerhalb der Anf√ºhrungszeichen stehen. So wie in der zweiten Zeile des Beispielcodes. In dieser Zeile wird der Variablenname au√üerhalb der Anf√ºhrungszeichen gesetzt.
                example_code: |
                    ```
                    Name {is} {ask} _ Was ist dein Name? _
                    {print}  _ Der Name der Hauptfigur lautet _ Name
                    _
                    _
                    {print} Name  _ l√§uft nun in den Wald hinein _
                    {print} Name _ f√ºrchtet sich ein wenig _
                    Tiere {is} ü¶î, üêø, ü¶â, ü¶á
                    {print} _ Da h√∂rt er pl√∂tzlich ein _ Tiere {at} {random}
                    {print} Name _ erschrickt. Es spukt in diesem Wald _
                    ```
            5:
                story_text: |
                    In diesem Level programmierst Du unterschiedliche Enden, was Deine Geschichte noch spannender werden l√§sst.
                    Im Beispielcode kannst du sehen, wie man zwei verschiedene Enden machen kann.

                    ### √úbung 1
                    Schreibe eine neue Kurzgeschichte von mindestens sechs Codezeilen √ºber ein Thema deiner Wahl.
                    Keine Inspiration? W√§hle eines der folgenden Themen: ein Superheld, ein langweiliger Schultag, gestrandet auf einer einsamen Insel.

                    Gib der Spielerin nun die M√∂glichkeit, ein gutes oder schlechtes Ende zu w√§hlen, genau wie im Beispielcode.
                    Programmiere beide Enden.

                    ### √úbung 2
                    Kopiere die Geschichte, die du in deinem eigenen Abenteuer in den vorherigen Levels erstellt hast.
                    Finde einen Weg, um mindestens zwei `{if}` und `{else}` Befehle in deine Geschichte einzubauen.
                    Dies kann mit einem guten oder schlechten Ende geschehen, aber du kannst auch andere M√∂glichkeiten finden, die Befehle einzubauen.
                example_code: |
                    ```
                    name {is} {ask} 'Wer l√§uft durch den Wald?'
                    {print} name ' l√§uft durch den Wald.'
                    {print} name ' begegnet einem Monster.'
                    ende {is} {ask} 'Soll das Ende gut oder schlecht sein?'
                    {if} ende {is} gut {print} name ' zieht ihr Schwert und das Monster ergreift die Flucht.'
                    {else} {print} 'Das Monster frisst ' name '.'
                    ```
            7:
                story_text: |
                    In einer Geschichte kommt es manchmal vor, dass jemand ein Wort mehrmals hintereinander sagt. So zum Beispiel, wenn jemand um Hilfe ruft, oder etwas singt.
                    Solche Wiederholungen kannst du mit dem Befehl `{repeat}` in diesem Level in deine Geschichte einf√ºgen.

                    ### √úbung
                    F√ºge Wiederholungen zu deiner eigenen Geschichte hinzu. Gehe zur√ºck zu deinen gespeicherten Programmen, w√§hle dein Geschichte-Programm aus einem vorherigen Level aus und
                    finde eine Zeile die `{print}` enth√§lt und wiederhole sie.
                example_code: |
                    ```
                    {print} 'Der Prinz rief immer wieder um Hilfe.'
                    {repeat} 5 {times} {print} 'Hilfe!'
                    {print} 'Warum hilft mir niemand?'
                    ```
            8:
                story_text: |
                    In diesem Level kannst du mehrere Zeilen zu einem `{if}`-Befehl hinzuf√ºgen. So kannst du deine guten und schlechten Enden etwas erweitern.

                    ### √úbung 1
                    Der Beispiel-Code zeigt zwei verschiedene Enden; eines bei dem die Figuren in eine Zeitmaschine springen und eines wo sie es nicht tun.
                    Vervollst√§ndige die L√ºcken mit mindestens einem Satz pro Ende.
                    **Extra** Mach die Geschichte l√§nger. Was passiert in der Geschichte? Du kannst auch ein zweites `{ask}` mit verschiedenen Auswahlm√∂glichkeiten hinzuf√ºgen.

                    ### √úbung 2
                    Gehe zur√ºck zu deinen gespeicherten Programmen und w√§hle deine Geschichte-Programm aus Level 5 aus. Schreibe nun ein gutes und ein schlechtes Ende mit jeweils mindestens drei Zeilen L√§nge!
                example_code: |
                    ```
                    {print} 'OH NEIN! Der T-Rex kommt immer n√§her!'
                    Ende = {ask} 'Soll das Ende gut oder schlecht sein?'
                    {if} Ende {is} gut
                        {print} 'Richard springt gerade noch rechtzeitig zur√ºck in seine Zeitmaschine.'
                        {print} _
                    {else}
                        {print} 'Oh nein! Richard ist zu langsam...'
                        {print} _
                    ```
            9:
                story_text: |
                    In diesem Level kannst du `{if}` und `{repeat}` innerhalb anderer `{if}` und `{repeat}` Befehle verwenden.
                    Das er√∂ffnet dir viele M√∂glichkeiten und hilft dir, deine Geschichte wirklich interaktiv werden zu lassen.

                    ### √úbung 1
                    Vervollst√§ndige den Code, damit das `{if}` korrekt funktioniert.

                    ### √úbung 2
                    F√ºge ein `{if}` und `{else}` in den Teil der Geschichte hinzu, wo Robin auch nach Hause geht.

                    ### √úbung 3
                    Gehe zur√ºck zu deiner Geschichte aus Level 8 und benutze mindestens zwei `{if}`s innerhalb eines anderen `{if}`.
                example_code: |
                    ```
                    {print} 'Robin l√§uft durch die Innenstadt.'
                    Ort = {ask} 'Geht Robin in ein Gesch√§ft oder nach Hause?'
                    {if} Ort {is} Gesch√§ft
                        {print} 'Sie betritt ein Gesch√§ft.'
                        {print} 'Robin sieht ein interessant aussehendes Buch'
                        Buch = {ask} 'Kauft Robin das Buch?'
                        {if} Buch {is} ja
                        _ {print} 'Robin kauft das Buch und geht nach Hause.'
                        _ {else}
                        _ {print} 'Robin verl√§sst das Gesch√§ft und geht nach Hause.'
                    {else}
                        {print} 'Robin geht nach Hause.'
                    ```
            10:
                story_text: |
                    In diesem Level kannst du den {for} Befehl f√ºr deine Geschichte nutzen. Damit kannst du zum Beispiel ganz einfach das Kinderbuch "Brauner B√§r, wen siehst denn Du?" programmieren.

                    ### √úbung

                    Schau dir <a href="https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf">die Geschichte</a> an, falls du sie nicht kennst und stelle sicher, dass es wie im Buch ausgegeben wird.
                example_code: "```\ntiere = _ , _ , _ \n{print} 'Brauner B√§r'\n{print} 'Was siehst du?'\n```\n"
            12:
                story_text: |-
                    In diesem Level werden Anf√ºhrungszeichen ben√∂tigt, um mehrere W√∂rter in einer Variablen zu speichern.

                    ### √úbung

                    Finde eine Geschichte aus einem beliebigen vorherigen Level. Stelle sicher, dass Anf√ºhrungszeichen an den richtigen Stellen hinzugef√ºgt werden.
                example_code: |
                    ```
                    Name = 'Die K√∂nigin von England'
                    {print} Name ' a√ü ein St√ºck Kuchen, als pl√∂tzlich...'
                    ```
            13:
                story_text: |
                    Durch die Verwendung der Befehle `{and}` und `{or}` kannst du deine Geschichten vielseitiger gestalten. Du kannst zwei Fragen stellen und auf die Kombination der Antworten antworten.

                    ### √úbung 1
                    Sieh dir den Beispiel-Code an und vervollst√§ndige ihn. F√ºge dann mindestens 2 weitere `{if}` Befehle mit `{and}` oder `{or}` hinzu.

                    ### √úbung 2
                    Suche eine Geschichte aus einem vorherigen Level und f√ºge ein `{and}` oder ein `{or}` hinzu.
                example_code: |
                    ```
                    {print} 'Unser Held geht durch den Wald'
                    {print} 'Der Pfad teilt sich in zwei Wege'
                    path = {ask} 'Welchen Weg soll sie w√§hlen?'
                    weapon = {ask} 'Welche Waffe zieht sie?'
                    {if} Pfad {is} 'links' {and} Waffe {is} 'Schwert'
                        _
                    ```
            15:
                story_text: |
                    Mit der `{while}`-Schleife kannst du deine Geschichten noch interessanter gestalten. So kannst du zum Beispiel mit  `{while} game == 'on'``{while} sword == 'lost'` dein Spiel so lange laufen lassen, bis es tats√§chlich vorbei ist.
                    Oder du l√§sst die Spieler mit  `{while} game == 'on'` so lange weiter suchen, bis sie etwas finden.

                    ### Exercise
                    The example code shows you how to use the `{while}` loop in a story. Now **think of your own scenario** in which the player has to find something before they can continue.
                example_code: |
                    ```
                    Schl√ºssel = 'verloren'
                    {print} 'Du stehst in Deinem Garten, hast jedoch Deine Schl√ºssel verloren.'
                    {print} 'Wo willst Du nach ihnen suchen?'
                    {print} 'W√§hle zwischen: Baum, Blumenbeet, Stein, Briefkasten'
                    {while} Schl√ºssel == 'verloren'
                        Ort = {ask} 'Wo willst Du suchen?'
                        {if} Ort == 'Blumenbeet'
                            {print} 'Ah, hier sind sie!'
                            Schl√ºssel = 'gefunden'
                        {else}
                            {print} 'Nope, sie sind nicht beim ' Ort '.'
                    {print} 'Jetzt kannst Du ins Haus!'
                    ```
            18:
                story_text: |
                    Wir werden eine andere Geschichte ausgeben, aber nun m√ºssen wir Klammern mit `{print}` benutzen.

                    ### √úbung 1
                    Erstelle eine Geschichte mit mindestens 5 S√§tzen. Du musst 'name' noch nicht benutzen.
                example_code: |
                    ```
                    {print}('Willkommen in dieser Geschichte!')
                    ```
                story_text_2: |
                    ### √úbung 2
                    Wir haben bereits einen `{input}` Befehl f√ºr dich vorbereitet. Benutze zuerst die `name` Variable in deiner Geschichte.
                    F√ºge dann einen zweiten `{ask}` Befehl hinzu und benutze diese Variable ebenfalls.
                    Tipp: Denke an die Kommas im `{print}` Befehl zwischen Text und Variablen!
                example_code_2: |
                    ```
                    name = {input}("Wie ist dein Name?")
                    {print}('Willkommen in dieser Geschichte!')
                    ```
    add_remove_command:
        name: '{add} {to} & {remove} {from}'
        default_save_name: add_remove_command
        description: F√ºhrt hinzuf√ºgen und entfernen ein
        levels:
            3:
                story_text: |
                    ## Hinzuf√ºgen zu
                    Du kannst einer Liste mit dem Befehl `{add} {to_list}` Elemente hinzuf√ºgen. Um ein Element zu einer Liste hinzuzuf√ºgen, kannst du einfach Folgendes eingeben: `{add} penguin {to} animals` oder du kannst den Befehl `{ask}` wie im Beispielcode verwenden.
                example_code: |
                    ```
                    tiere {is} Hund, Katze, K√§nguru
                    mag_ich {is} {ask} Welches ist dein Lieblingstier?
                    {add} mag_ich {to_list} tiere
                    {print} Ich habe tiere {at} {random} gew√§hlt
                    ```
                story_text_2: |
                    ## Entfernen von
                    Wenn man Elemente zu einer Liste hinzuf√ºgen kann, kann man diese nat√ºrlich auch wieder entfernen. Dies geschieht mit dem Befehl `{remove} {from}`.
                example_code_2: |
                    ```
                    tiere {is} Hund, Katze, K√§nguru
                    mag_ich_nicht {is} {ask} Welches Tier magst du nicht?
                    {remove} mag_ich_nicht {from} tiere
                    {print} Ich mag tiere {at} {random}
                    ```
                story_text_3: |
                    ### √úbung
                    Probiere die neuen Befehle in diesem virtuellen Restaurant aus. F√ºge jene Geschmacksrichtung hinzu, auf die der Spieler hofft, und entferne solche, gegen die er allergisch ist.
                example_code_3: |
                    ```
                    {print} Mystery milkshake
                    flavors {is} strawberry, chocolate, vanilla
                    hope {is} {ask} What flavor are you hoping for?
                    _
                    allergies {is} {ask} Are you allergic to any flavors?
                    _
                    {print} You get a flavors {at} {random} milkshake
                    ```
    and_or_command:
        name: '{and} & {or}'
        default_save_name: and or
        description: introducing and or
        levels:
            13:
                story_text: |-
                    We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two `{if}`s but can use `{and}` and `{or}`.

                    If you use `{and}`, both statements, left and right of the `{and}` need to be true. We can also use `{or}`. Then only one statement needs to be correct.
                example_code: |
                    ```
                    name = {ask} 'Wie hei√üt du?'
                    alter = {ask} 'Wie alt bist du?'
                    {if} name {is} 'Hedy' {and} alter {is} 2
                        {print} 'Du bist die echte Hedy!'
                    ```
    ask_command:
        name: '{ask}'
        default_save_name: ask_command
        description: Introduction ask command
        levels:
            1:
                story_text: |
                    ## Der frage Befehl
                    Jetzt, wo du den  `{print}` Befehl verwenden kannst, bist du bereit, den n√§chsten Befehl zu lernen:  `{ask}`. Mit dem `{ask}` Befehl kannst du Fragen stellen. Probiere es aus:
                example_code: |
                    ```
                    {print} Hallo!
                    {ask} Wie hei√üt du?
                    ```
                story_text_2: |
                    ## Der echo Befehl
                    Wenn du m√∂chtest, dass der Computer die Antwort f√ºr dich wiederholt, kannst du den `{echo}` Befehl verwenden. Beachte, dass die Antwort am Ende des Satzes wiederholt wird - also in diesem Beispiel nach hello.
                example_code_2: |
                    ```
                    {print} Hallo!
                    {ask} Wie hei√üt du?
                    {echo} hello
                    ```
                story_text_3: |
                    ### √úbung
                    Probiere die `{ask}` und `{echo}` Befehle aus. Zuerst f√ºlle die L√ºcken, damit das Programm funktioniert.
                    Dann frage 2 weitere Fragen mit dem `{ask}` Befehl. Nach jedem `{ask}` benutze ein `{echo}` um die Antwort auf dem Bildschirm auszugeben.
                example_code_3: |
                    ```
                    _ Wie geht es dir?
                    _
                    ```
            2:
                story_text: |
                    ## Der frage Befehl
                    Jetzt, wo du **Variablen** in deinen Programmen benutzen kannst, brauchen wir den `{echo}` Befehl nicht mehr.
                    Wir k√∂nnen Variablen verwenden, um die Antworten auf unsere Fragen zu speichern. Dadurch k√∂nnen wir die Antwort an mehreren Stellen im Code verwenden.
                    Probiere es aus:

                    Damit wird dein Code viel interaktiver!
                example_code: |
                    ```
                    name {is} {ask}  Wie hei√üt du?
                    {print} Hallo name
                    alter {is} {ask} Wie alt bist du?
                    {print} name ist alter Jahre alt.
                    ```
                story_text_2: |
                    ### √úbung
                    In vorherigen √úbung hast du das Setzen von Variablen mit dem `{is}` Befehl ge√ºbt.
                    Du hast mindestens 3 Variablen definiert und sie im print Befehl verwendet.
                    Jetzt wollen wir die Variablen wie unserem Beispiel interaktiv machen, statt sie zu setzen.

                    Kopiere den Code der vorherigen √úbung hierher und mache sie mit `{ask}` Befehlen interaktiv.
                example_code_2: |
                    ```
                    lieblings_tier {is} {ask} Was ist dein Lieblingstier?
                    {print} Mein Lieblingstier ist lieblings_tier
                    ```
            18:
                story_text: The final change we will need to make to get Python code is changing `{ask}` into `{input}`.
                example_code: |
                    ```
                    {print}('My name is Hedy!')
                    name = {input}('What is your name?')
                    {print}('So your name is ', name)
                    ```
    blackjack:
        name: Blackjack
        default_save_name: Blackjack
        description: Versuche, so nah wie m√∂glich an die 21 heran zu kommen
        levels:
            17:
                story_text: |
                    Blackjack ist ein einfaches Kartenspiel, bei dem du so nahe wie m√∂glich an die 21 herankommen musst. Du bekommst zwei Karten. Jede Karte hat den Wert ihrer abgebildeten zahl und die Karten mit Bildern (Bube, Dame, K√∂nig) sind 10 Punkte Wert.
                    Das Ass is entweder 1 oder 11 Punkte wert (das kannst du dir aussuchen). Der Kartengeber, dein Gegner, erh√§lt auch zwei Karten.
                    Wenn du m√∂chtest, kannst du noch eine Karte ziehen und ihre Punkte werden zu deinen dazugerechnet. Der Kartengeber darf auch noch eine Karte ziehen.
                    Aber pass auf, dass du nicht mehr als 21 Punkte bekommst, denn dann verlierst du!
                    Der Spieler, der am n√§chsten an 21 herankommt ohne sie zu √ºberschreiten, gewinnt!

                    ### Exercise
                    In this adventure we code the first part of our Blackjack game. We'll create a function to calculate how many points a card is worth.

                    ***Set the variables***
                    Start by making a list of all the cards, from 2 to Ace. Next make a list of the face cards, so Jack, Queen and King. Then pick a random card from the list of cards to be card_1.

                    ***Create a function to calculate the points***
                    Create a function that calculates how many points a card is worth.
                    All the face cards are worth 10 points, the Ace is worth 11 and all the other cards are worth their numeral.
                    Return the variable `points` at the end of the function.

                    ***Test the function***
                    Test if your function is working properly. Finish the first print command by filling in which card you've drawn. Then finish the second line by calling the function with card_1.
                    Run the code a couple of times. Are you happy with the results? Great! Then you can remove the testing part and move on the the next tab!
                example_code: |
                    ```
                    {print} 'BLACKJACK'

                    # Set these variables
                    cards = _
                    face_cards = _
                    card_1 =

                    # Create a function to calculate the points
                    {define} calculate_points {with} card:
                        {if} card {in} face_cards:
                            points = _
                        {elif} _
                            _
                        {else}:
                            _
                        _ points

                    # Test your function
                    {print} 'Your card is a ' _
                    {print} 'That is worth ' _ ' points'.
                    ```
    blackjack_2:
        name: Blackjack 2
        default_save_name: Blackjack_2
        description: Blackjack part 2
        levels:
            17:
                story_text: |
                    ### Exercise
                    In this adventure we code the second part of our Blackjack game.

                    ***Paste your code from the previous adventure***
                    In the previous adventure you've started a list of variables and created a function to calculate how many points a card is worth. Copy your code and paste it here. Mind that you don't need the testing part, so if you haven't removed that yet, please do so now.

                    ***Add more variables***
                    You have already set the lists `cards` and `face_cards` and the variable `card_1`. Underneath those variables create 3 more variables: `card_2`, dealer_card_1` and `dealer_card_2`. These variables are all set to a random card from the list of cards.

                    ***Add up points***
                    To calculate how many points you have scored we call the function with card 1 and we do it again for card 2. Then we add both these scores together to get your total.
                    Do the same thing for the dealers points, but be sure to use the dealer's cards and not your own!

                    ***2 Aces***
                    You're doing great! Almost all scores can be calculated now. There is only one exception: 2 Aces. If you get 2 Aces, your total is 12 points and not 22 (because 22 points would be losing!). This of course also goes for the dealer.

                    ***Show the score***
                    Lastly, you want to tell the program to tell you which cards you have drawn and how many points that is. Then show which cards the dealer has and how many points they have.

                    ***Continue in the next tab***
                    Great! You have finished this part of the game! Copy your code and go to the next tab to learn how to ask for an extra card and to declare a winner.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Add these variables to the list of variables
                    card_2 = _
                    dealer_card_1 = _
                    dealer_card_2 = _

                    # Add up your points
                    your_points_1 = {call} _ {with} card_1
                    your_points_2 = _
                    your_total = _

                    # Add up the dealers points
                    dealer_points_1 = _
                    _
                    _

                    # 2 Aces
                    {if} card_1 == 'Ace' {and} _
                        your_total = 12
                    {if} dealer_card_1 _
                        dealer_total = _

                    # Show the score
                    {print} 'You have drawn a ' _ ' and a ' _ '. That is ' _ ' points'
                    {print} 'The dealer has drawn a ' _ ' and a ' _ '. That is ' _ ' points'
                    ```
    blackjack_3:
        name: Blackjack 3
        default_save_name: Blackjack_3
        description: Blackjack part 3
        levels:
            17:
                story_text: |
                    In the previous tabs you have learned how to draw 2 random cards for yourself and for the dealer and to calculate how many points you both got.
                    In this adventure we add the option to ask for an extra card for both you and the dealer.

                    ### Exercise
                    ***Paste your code from the previous adventure*** Firstly, copy your code from the previous tab and paste it here.

                    ***Extra card for you*** If you want, you can get an extra card to get your total as close to 21 as possible. First ask the player if they want an extra card.
                    If they do, pick a random card and print what they have drawn. If the card is not an Ace, you can call the function and add the points to your total.
                    In case the card is an Ace, you can't use the function, because the Ace can be either 1 point or 11 points, depending on how many points you already have earned.
                    If your total is less than 11, you want the ace to be 11 points (because this is closest to 21). So you add 11 points to your total.
                    If the total is more than or equal to 11, you want the ace to be 1 point (because you don't want more than 21 points). So you add 1 point to your total.
                    Lastly, print your new total of points.

                    ***Extra card for the dealer*** The dealer can also get an extra card. The dealer doesn't need to be asked, because they always get an extra card if their total is less than 17.
                    Copy the 'Extra card for you code' and paste it in the dealers section. Then change it to fit the dealer picking an extra card and getting points added to their total.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Extra card for you
                    hit = {ask} _
                    {if} hit == 'yes':
                        card_3 = _
                        {print} _
                        {if} card_3 _ 'Ace':
                            your_points_3 = _
                            your_total = _
                        {else}:
                           {if} your_total _
                                _
                            {else}:
                                _
                        {print} _

                    # Extra card for the dealer
                    {if} dealer_total < 17
                    _
                    ```
    blackjack_4:
        name: Blackjack 4
        default_save_name: Blackjack_4
        description: Blackjack part 4
        levels:
            17:
                story_text: |
                    In the last 3 adventures you have alsmost created a working blackjack game! The only thing left to do is to decide a winner!

                    ### Exercise
                    ***Paste your code from the previous adventure*** Start by pasting the code that you've made so far into your programming field.

                    ***Decide a winner***
                    Firstly, if you and the dealer have an equal amount of points, it's a draw.
                    Secondly, if the dealer has more than 21 points and you don't, you are the winner.
                    Thirdly, if both you and the dealer have less than 22 points, we have to see who came closest to 21. We do that by comparing who has the highest score. Is your total higher than the dealer's total, then you are the winner. If not, the dealer wins.
                    Lastly, in all other scenarios (e.g. you have more than 21 points and the dealer doesn't, or you both have more than 21 points) you are the loser.

                    ***Enjoy the game!***
                    Does your game work properly? Amazing! You have done a great job! Enjoy your game!
                    If it doesn't work right away, no worries, you might have made a mistake. Just keep calm and bebug your code using the ladybug button.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Decide a winner
                    {if} _
                        {print} 'Its a draw! Play again!'
                    {elif} _
                        {print} 'You win!'
                    {elif} _ :
                        {if} _:
                            {print} _
                        {else}:
                            {print} _
                    {else}:
                        _
                    ```
    calculator:
        name: Taschenrechner
        default_save_name: Taschenrechner
        description: Programmiere einen Taschenrechner
        levels:
            6:
                story_text: |
                    Nun da du die Mathematik beherrscht, kannst du selbst einen Taschenrechner erstellen!
                example_code: |
                    ```
                    nummer1 = {ask} 'Gib die erste Zahl ein:'
                    nummer2 = {ask} 'Gib die zweite Zahl ein:'
                    richtige_antwort = nummer1 * nummer2
                    {print} nummer1 ' mal ' nummer2 ' ist ' richtige_antwort
                    ```
                story_text_2: |
                    ### √úbung
                    Der Taschenrechner oben berechnet die Antwort f√ºr dich, aber du kannst auch ein Programm erstellen, um deine mathematischen F√§higkeiten zu testen, so wie dieses:
                    F√ºlle die L√ºcken aus, um es zu vervollst√§ndigen!
                example_code_2: |
                    ```
                    richtige_antwort = 11 * 27
                    antwort = {ask} 'Wie viel ist 11 mal 27?'
                    {if} antwort {is} _ {print} 'Gut gemacht!'
                    {else} {print} 'Falsch! Es war ' _
                    ```
                story_text_3: |
                    **Zus√§tzlich** Du kannst den Computer auch alleine zuf√§llige Summen rechnen lassen, indem du zuf√§llig benutzt.
                example_code_3: |
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number_1 = _
                    number_2 = _
                    correct_answer = number_1 * number_2
                    given_answer = 'What is ' number_1 ' times ' number_2 '?'
                    {if} _
                    {else} _
            9:
                story_text: |
                    In Level 6 hast du einen Taschenrechner erstellt. In diesem Level kannst du den Code erweitern, so dass er mehrere Fragen stellt.

                    ### √úbung 1
                    Kannst du Zeile 10 vervollst√§ndigen, damit das Programm funktioniert?

                    ### √úbung 2
                    Gib dem Spieler eine R√ºckmeldung, wenn er eine richtige oder falsche Antwort eingegeben hat. Um das zu erreichen, erweitere dein Programm mit einem `{else}`.
                example_code: |
                    ```
                    Punkte = 0
                    {repeat} 10 {times}
                        Nummern = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        Nummer1 = Nummern {at} {random}
                        Nummer2 = Nummern {at} {random}
                        richtige_antwort = Nummer1 * Nummer2
                        {print} 'Was ist ' Nummer1 ' mal ' Nummer2 '?'
                        Antwort = {ask} 'Tippe deine Antwort hier ein...'
                        {print} 'Deine Antwort ist' Antwort
                        {if} _ {is} _
                            Punkte = Punkte + 1
                    {print} 'Gro√üartig gemacht! Dein Punktestand ist... ' Punkte ' von 10!'
                    ```
            10:
                story_text: |
                    This calculator game helps you practise your tables of multiplication!
                    ### Exercise
                    Fill in the blanks. We want this program to ask the player these questions:
                    ```
                    How much is 1 times 1?
                    How much is 1 times 2?
                    How much is 1 times 3?
                    How much is 2 times 1?
                    How much is 2 times 2?
                    How much is 2 times 3?
                    How much is 3 times 1?
                    How much is 3 times 2?
                    How much is 3 times 3?
                    _
                    ```
                example_code: |
                    ```
                    numbers = 1, 2, 3
                    {for} _
                        {for} _
                            answer = {ask} _
                            correct = number_1 * number_2
                            {if} answer {is} correct
                                {print} 'Great job!'
                            {else}
                                {print} 'That is wrong. The right answer is ' correct
                    ```
            11:
                story_text: |
                    Mit einem `{for}` kannst du das Multiplikationsprogramm vereinfachen.

                    ### √úbung 1
                    Verbessere den Beispiel-Code, sodass es eine nette Multiplikationstabelle ausgibt: "1 mal 10 is 10", "2 mal 10 ist 20", usw.

                    ### √úbung 2
                    Gehe zur√ºck zu deinem Level 10 Multiplikations-Code und ver√§ndere ihn, sodass er ein `{for}` und `{range}` benutzt.
                example_code: |
                    ```
                    zahl = 10
                    {for} i {in} {range} 1 {to} 10
                        {print} i * zahl
                    ```
            12:
                story_text: |
                    In diesem Level kannst du einen Taschenrechner bauen, der mit Dezimalzahlen arbeitet.

                    ### √úbung 1
                    F√ºlle die L√ºcken aus, um den Taschenrechner zu vervollst√§ndigen. Denke daran, f√ºr Dezimalzahlen einen Punkt und kein Komma zu verwenden.

                    ### √úbung 2
                    Erstelle ein neues Mathematik-√úbungsprogramm, aber verwenden jetzt Dezimalzahlen.
                    Erstelle eine Liste von Zahlen, w√§hle zwei zum Multiplizieren aus und lasse die Spielerin antworten.
                    Und nat√ºrlich musst du die Antwort √ºberpr√ºfen! **(Zus√§tzlich)** Erh√∂he den Schwierigkeitsgrad, indem du Leben hinzuf√ºgst: Ein Spieler verliert ein Leben f√ºr eine falsche Antwort und nach drei falschen Antworten endet das Spiel.
                example_code: |
                    ```
                    Zahl1 = {ask} 'Was ist die erste Zahl?'
                    Zahl2 = {ask} 'Was ist die zweite Zahl?'
                    Antwort = _
                    {print} Zahl1 ' plus ' Zahl2 ' macht ' _
                    ```
            13:
                story_text: |
                    ### √úbung 1
                    Wir wollen das √úbungsprogramm etwas schwieriger gestalten. Der Spieler muss nun zwei Fragen richtig beantworten. F√ºlle die L√ºcken aus, um das Programm zu vervollst√§ndigen.

                    ### √úbung 2 (extra)
                    Manchmal gibt es bei Berechnungen mehrere richtige Antworten. Zum Beispiel kann 10 durch 5 und durch 2 geteilt werden. Die Frage "Welche Zahl teilt 10?" kann also durch 2 und durch 5 beantwortet werden.
                    Frage nach einer Berechnung, die mehrere richtige Antworten hat, bitte die Spielerin, sie zu beantworten, und bestimme mit `{or}`, ob die Antwort richtig ist.
                    Leere das Programmierfeld und erstelle deine eigene L√∂sung.
                example_code: |
                    ```
                    antwort1 = {ask} 'Was ist 10 mal 7?'
                    antwort2 = {ask} 'Was ist 6 mal 7?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
            14:
                story_text: |
                    In this adventure you will build a calculator that calculates your mean grade for you. If you get your calculator to work, you can move on to the next adventure, which allows you to add two extra features.

                    ### Exercise 1
                    Fill in the blanks to get the calculator to work.
                    * Start with the fourth line, add a question to figure out what grade the student got.
                    * In the fifth line you'll want to calculate the total of all grades, so the total = total + grade.
                    * Then we get to set the return value. We want to return the mean, so the total devided by the amount of tests (4).
                    * Lastly we finish the code by calling the function in line 8.

                    Did you get it? Awesome! Would you like to add even more to your calculator? **This adventure continues in the next tab!**
                example_code: |
                    ```
                    {define} calculate_mean_grade
                        total = 0
                        {for} i {in} {range} 1 {to} 4
                            grade = {ask} _
                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
                    ```

                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
            15:
                story_text: |
                    Du kannst die `{while}` Schleife zum Taschenrechnerspiel, was du im vorigen Level gelernt hast, hinzuf√ºgen.
                    Dies stellt sicher, dass der Spieler nicht zur n√§chsten Frage weiterkommt, wenn er falsch antwortet.

                    ### Exercise
                    Add the `{while}` loop in the function, ask the player what number_1 times number_2 is and print their answer.
                    Then `{call}` the function.
                example_code: |
                    ```
                    {define} new_question
                        numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        number_1 = numbers {at} {random}
                        number_2 = numbers {at} {random}
                        correct = number_1 * number_2
                        answer = 0
                        _
                        _
                        _
                        {print} 'Well done!'

                    {print} 'Give 10 correct answers to win!'
                    {for} i {in} {range} 1 {to} 10
                        _
                    {print} 'You win!'
                    ```
    calculator_2:
        name: Calculator 2
        default_save_name: Calculator 2
        description: Calculator 2
        levels:
            14:
                story_text: |
                    ### Exercise 2
                    **This is the second part of this adventure.** The adventure starts in the previous tab.
                    Of course, you don't always want to calculate the mean of 4 tests. You might want to calculate the mean of 10 tests or only 2...
                    We can fix this problem by adding the argument and variable 'amount_of_tests'.
                    * Start a new line on line 3. Set the amount_of_tests argument by asking the student how many tests they have made.
                    * Change the 4 in line 4 to the new argument amount_of_tests.
                    * Lastly, change the 4 in line 6 to amount_of_tests

                    Try out your new program. Does it work?

                    ### Exercise 3
                    Did you want to make your program even better? Great! In the previous program you could only calculate the mean grade of 1 subject, but it would be better if you could calculate the mean grade for all subjects you want!
                    We won't tell you how to do it, but we will give you one tip: Start your code in line 1 with: define calculate_mean_grade with subject.
                example_code: |
                    ```
                    # Use your own code from the previous adventure.
                    ```
    clear_command:
        name: '{clear}'
        default_save_name: clear_command
        description: clear command
        levels:
            4:
                story_text: |
                    Zeit f√ºr einen neuen Befehl! Mit `{clear}` kann der gesamte Text vom Ausgabebildschirm gel√∂scht werden. Auf diese Weise wird verhindert, dass der Bildschirm zu voll mit Text wird.
                    Achtung! Wenn du den `{clear}`-Befehl verwendest, denke daran, zuvor ein `{sleep}` zu verwenden. Andernfalls l√∂scht Hedy den Bildschirm, ohne dass du Zeit zum Lesen hast!
                example_code: |
                    ```
                    {print} '3'
                    {clear}
                    {print} '2'
                    {clear}
                    {print} '1'
                    {clear}
                    {print} 'Warte...'
                    {sleep} 3
                    {clear}
                    {print} '√úBERRASCHUNG!'
                    ```
    debugging:
        name: debugging
        default_save_name: debugging
        description: debugging adventure
        levels:
            1:
                story_text: |-
                    Willkommen zu einem Debugging-Abenteuer. Einen Code zu debuggen bedeutet, Fehler im Code zu beseitigen.
                    Das bedeutet, dass wir dir in diesen Debugging-Abenteuern Code zeigen werden, der noch nicht funktioniert.
                    Du musst herausfinden, was falsch ist und die Fehler korrigieren.

                    ### √úbung
                    Debugge den Code. Viel Gl√ºck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} I love programming
                    Do you love programming too?
                    {echo}
                    {print} What are your hobbies?
                    {echo} Your hobbies are
                    ```
            2:
                story_text: |-
                    Willkommen zu einem Debugging-Abenteuer. Einen Code zu debuggen bedeutet, Fehler im Code zu beseitigen.
                    Das bedeutet, dass wir dir in diesen Debugging-Abenteuern Code zeigen werden, der noch nicht funktioniert.
                    Du musst herausfinden, was falsch ist und die Fehler korrigieren.

                    ### √úbung
                    Debugge den Code. Viel Gl√ºck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    destination {ask} Where are you going on holidays?
                    {print} The flight to dstination leaves at 3 pm.
                    {ask} Did you check in your luggage yet?
                    {echo}
                    {print} Let me print your boarding pass for you.
                    {sleep}
                    Here you go! Have a nice trip!
                    ```
            3:
                story_text: |-
                    Willkommen zu einem Debugging-Abenteuer. Einen Code zu debuggen bedeutet, Fehler im Code zu beseitigen.
                    Das bedeutet, dass wir dir in diesen Debugging-Abenteuern Code zeigen werden, der noch nicht funktioniert.
                    Du musst herausfinden, was falsch ist und die Fehler korrigieren.

                    ### √úbung
                    Debugge den Code. Viel Gl√ºck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    movie_choices {is} dracula, fast and furious, home alone, barbie
                    chosen_movie {is} movies {at} {random}
                    {print} Tonight we will watch chosen _movies
                    like {ask} Do you like that movie?
                    {print} Tomorrow we will watch something else.
                    {add} chosen_movie {to} movie_choices
                    {print} Tomorrow we will watch tomorrows_movie
                    tomorrows_movie {is} movie_choices {at} {random}
                    I'll go get the popcorn! {print}
                    ```
            4:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to the online library!
                    {ask} What genre of books do you like?
                    {print} You like genre
                    author {is} {ask} 'Who's your favorite author?'
                    {print} 'author is your favorite author'
                    {print} Hmmm... i think you should try... books {at} {random}
                    ```
            5:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} Welcome to Swimming Pool Hedy!
                    class {is} {ask} 'Are you here to join a class today?'
                    {if} class yes
                    {print} 'Great! You're joining a class!
                    {print} {else} 'You will not be joining a class'
                    discount {is} 'Do you have a discount code?'
                    {if} discount {is} yes
                    discount_answer {is} {ask} 'What's your discount code?'
                    discount_codes = Senior4231, Student8786, NewMember6709
                    {if} discount_answer {is} {in} discount_cods
                    {print} 'That will be $3,50'
                    'That will be $5,50'
                    {print} 'Have a nice swim!'
                    ```
            6:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Vending machine'
                    chosen_product = {ask} 'Please select a product'
                    1_dollar_products = coke orange juice water
                    2_dollar_products = chocolate, cookie, museli bar
                    3dollar_prodcuts = potato chips, beef jerky, banana bread
                    {if} chosen {is} {in} 1_dollar_products
                    price = 1
                    {if} chosen_product {is} 2_dollar_products
                    price = 2
                    {else} chosen_product {in} 3_dollar_products
                    price = 3
                    amount_of_products = '{ask} How many of ' chosen_product would you like to have?'
                    total = price + amount_of_product
                    {print} 'That will be $' price 'please'
                    ```
            7:
                story_text: |-
                    ### Exercise
                    Surprise! This program looks more like an output than a code. And yet, we don't want you to just add `{print}` commands in front of each line.
                    Fix this program to turn it into the nursery rhyme 'Brother John (Fr√®re Jaques)' by using the {repeat} command of course!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    Are you sleeping?
                    Brother John!
                    Morning bells are ringing!
                    Ding, dang, dong!
                    ```
            8:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to Manicures and Pedicures by Hedy'
                    bodypart = {ask} 'Are you getting your fingernails or toenails done today? Or both?'
                    {if} bodyparts {is} both
                            {print} That will be $25'
                            price = 25
                        {else}
                            {print} That will be $18'
                            price = 18
                    color = {ask} What color would you like?
                    sparkles = {ask} 'Would you like some sparkles with that?'
                    {if} sparkles {is} yes
                        {print} 'We charge $3 extra for that'
                    price = price + 3
                    {else} {print} 'No sparkles' {print} 'So no extra charge'
                    {sleep} 5
                    {print} 'All done! That will be $' price ' please!'
                    {print} 'Thank you! Byebye!'
                    ```
            9:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to our sandwich shop'
                    amount 'How many sandwiches would you like to buy?'
                    {repeat} amount {times}
                    {ask} {is} {ask} 'What kind or bread would you like your sandwich to be?'
                    types_of_bread {is} white, wheat, rye, garlic, gluten free
                    {if} chosen_bread in types_of_bread
                    {print} 'Lovely!'
                    {else}
                    'I'm sorry we don't sell that'
                    topping {is} {ask} 'What kind of topping would you like?'
                    sauce {is} {ask} 'What kind of sauce would you like?'
                    {print} One chosen_bread with topping and sauce.
                    price = amount * 6
                    {print} 'That will be 'price dollar' please'
                    ```

                    price = amount * 6
                    {print} 'That will be 'price dollar' please'
            10:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    names = Muad Hasan Samira Noura
                    activities = fly a kite, go swimming, go hiking, catch tan in the sun
                    {for} name {is} names
                    {print} At the beach name loves to activity at random
                    ```
            11:
                story_text: |-
                    ### Exercise
                    Debug this calender program. The output of this program is supposed to look like a list of dates.
                    For example:

                    ```
                    Hedy calender
                    Here are all the days of November
                    November 1
                    November 2
                    November 3
                    ```
                    And so on.

                    Mind that you have to test your code extra carefully for the month February, because the amount of days in this month changes in leap years.
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    print 'Hedy calender'
                    months_with_31 days = January, March, May, July, September, October, December
                    months_with_30_days = April, June, August, November
                    month = ask 'Which month would you like to see?'
                    if month in months_with_31_days
                        days = 31
                        if month in months_with30_days
                            days = 30
                    if month = February
                        leap_years = 2020, 2024, 2028, 2036, 2040, 2044, 2028
                        year = ask 'What year is it?'
                    if year in leap_years
                        days = 29
                    else
                        days = 28

                    print 'Here are all the days of ' moth
                    for i in range 1 to days
                        print month i
                    ```
            12:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define greet
                    greetings = 'Hello', 'Hi there', 'Goodevening'
                        print greetings at random

                    define take_order
                        food = ask 'What would you like to eat?'
                        print 'One food'
                        drink = 'What would you like to drink?'
                        print 'One ' drink
                        more = ask 'Would you like anything else?'
                            if more is 'no'
                        print 'Alright'
                            else
                            print 'And ' more
                    print 'Thank you'

                    print 'Welcome to our restaurant'
                    people = ask 'How many people are in your party tonight?'
                    for i in range 0 to people
                        call greet_costumer
                    ```
            13:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    defin movie_recommendation with name
                        action_movies == 'Die Hard', 'Fast and Furious', 'Inglorious Bastards'
                        romance_movies = 'Love Actually', 'The Notebook', 'Titanic'
                        comedy_movies = 'Mr Bean' 'Barbie''Deadpool'
                        kids_movies = 'Minions', 'Paddington', 'Encanto'
                        if name is 'Camila' or name is 'Manuel'
                            recommended_movie = kids_movie at random
                        if name is 'Pedro' or 'Gabriella'
                                mood = ask 'What you in the mood for?'
                            if mood is 'action'
                                recommended_movie = comedy_movies at random
                            if mood is 'romance'
                                recommended_movie = romance_movies
                        if mood is 'comedy'
                                recommended_movie = comedy_movies at random

                    print 'I would recommend ' recommended_movie ' for ' name

                    name = ask 'Who is watching?'
                    recommendation = ask 'Would you like a recommendation?'
                    if recommendaion is 'yes'
                    print movie_recommendation with name
                    else
                    print 'No problem!'
                    ```
            14:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define calculate_heartbeat
                        print 'Press your fingertips gently against the side of your neck'
                        print '(just under your jawline)'
                        print 'Count the number of beats you feel for 15 seconds'
                        beats == ask 'How many beats do you feel in 15 seconds?'
                        heartbeat = beats*4
                        print 'Your heartbeat is ' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print 'Your heartbeat seems fine'
                        else
                            if heartbeat > 60
                                print 'Your heartbeat seems to be too low'
                            if heartbeat < 100
                                print 'Your heartbeat seems to be too high'
                            print 'You might want to contact a medical professional'

                    measure_heartbeat = ask 'Would you like to measure your heartbeat?'
                    if measure_heartbeat = 'yes'
                        call measure_heartbeat
                    else
                        'no problem'
                    ```

                        print '(just under your jawline)'
                        print 'Count the number of beats you feel for 15 seconds'
                        beats == ask 'How many beats do you feel in 15 seconds?'
                        heartbeat = beats*4
                        print 'Your heartbeat is ' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print 'Your heartbeat seems fine'
                        else
                            if heartbeat > 60
                                print 'Your heartbeat seems to be too low'
                            if heartbeat < 100
                                print 'Your heartbeat seems to be too high'
                            print 'You might want to contact a medical professional'

                    measure_heartbeat = ask 'Would you like to measure your heartbeat?'
                    if measure_heartbeat = 'yes'
                        call measure_heartbeat
                    else
                        'no problem'
            15:
                story_text: |-
                    ### Exercise
                    Debug this random children's story. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    names = 'Tanya', 'Romy', 'Kayla', 'Aldrin', 'Ali'
                    verbs='walking', 'skipping', 'cycling', 'driving', 'running'
                    locations = 'on a mountaintop', 'in the supermarket', 'to the swimming pool'
                    hiding_spots = 'behind a tree', under a table', in a box'
                    sounds = 'a trumpet', 'a car crash', 'thunder'
                    causes_of_noise = 'a television', 'a kid with firecrackers', 'a magic elephant', 'a dream'

                    chosen_ name = names at random
                    chosen_verb = verbs at random
                    chosen_location = 'locations at random'
                    chosen_sounds = noises at random
                    chosen_spot = hiding_spots random
                    chosen_causes = causes_of_noise at random

                    print chosen_name ' was ' chosen_verb ' ' chosen_location
                    print 'when they suddenly heard a sound like ' sounds at random
                    print chosen_name ' looked around, but they couldn't discover where the noise came from'
                    print chosen_name ' hid ' chosen_spot'
                    print 'They tried to look around, but couldn't see anything from there'
                    hidden = 'yes'
                    while hidden = 'yes'
                        print chosen_name 'still didn't see anything'
                    answer = ask 'does ' chosen_name ' move from their hiding spot?'
                        if answer = 'yes'
                            hidden == 'no'
                    print 'chosen_name moved from' chosen_spot
                    print 'And then they saw it was just' chosen_cause
                    print chosen_name 'laughed and went on with their day'
                    print The End
                    ```
            16:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                    Tip: Make sure that you only see your score once in the end.
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    country = ['The Netherlands', 'Poland', 'Turkey', 'Zimbabwe', 'Thailand', 'Brasil', 'Peru', 'Australia', 'India', 'Romania' ]
                    capitals = 'Amsterdam', 'Warshaw' 'Istanbul', 'Harare', 'Bangkok', 'Brasilia', 'Lima', 'Canberra', 'New Delhi', 'Bucharest'
                    score = 0
                    for i in range 0 to 10
                        answer = ask 'What's the capital of ' countries[i]
                        correct = capital[i]
                        if answer = correct
                            print 'Correct!'
                        score = score + 1
                        else
                            print 'Wrong,' capitals[i] 'in the capital of' countries[i]
                        print 'You scored ' score ' out of 10'

                    ```
            17:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define food_order
                        toppings = ask 'pepperoni, tuna, veggie or cheese?'
                        size = ask 'big, medium or small?'
                        number_of_pizza = ask 'How many these pizzas would you like?'

                        print 'YOU ORDERED'
                        print number_of_pizzas ' size  ' topping ' pizza'

                    define drinks_order
                        drink = ask 'water, coke, icetea, lemonade or coffee?'
                        number_of_drinks = ask 'How many of these drinks would you like?'

                        print 'YOU ORDERED'
                        print number_of_drinks ' ' drink

                    'Welcome to Hedy pizza'
                    more_food = ask 'Would you like to order a pizza?'
                    while more_food = 'yes'
                        return food_order
                        more_food = ask 'Would you like to order a pizza?'
                    more_drinks = ask 'Would you like to order some drinks?'
                    while more_drinks == 'yes'
                        call drink_order
                        more_drinks == ask 'Would you like to order more drinks?'


                    print 'Thanks for ordering!'
                    ```
            18:
                story_text: |-
                    ### Exercise
                    Debug this Old MacDonald program from level 16. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    for i in range 1 to 3
                        animal = animals[i]
                        sound = sounds[i]
                        print 'Old MacDonald had a farm'
                        print 'E I E I O!'
                        print 'and on that farm he had a ' animal
                        print 'E I E I O!'
                        print 'with a ' sound sound ' here'
                        print 'and a ' sound sound ' there'
                        print 'here a ' sound
                        print 'there a ' sound
                        print 'everywhere a ' sound sound
                    ```
    default:
        name: Einf√ºhrung
        default_save_name: Einleitung
        description: Erkl√§rung des Levels
        levels:
            1:
                story_text: |
                    Willkommen bei  Hedy! In Level 1 kannst du anfangen eine Geschichte auszugeben.

                    Probiere den Code selbst mit der gr√ºnen Schaltfl√§che 'Programm ausf√ºhren' unter dem Programmierfeld aus.

                    Bereit? Dann gehe zum n√§chsten Tab um deinen ersten Befehl zu lernen!
                example_code: |
                    ```
                    {print} Hallo Welt!
                    ```
            2:
                story_text: |
                    Gl√ºckwunsch! Du hast Level 2 erreicht. Hoffentlich hast du bereits einige tolle Programme erstellt!
                    Auf Level 1 ist dir vielleicht aufgefallen, dass der Befehl `{echo}` jeweils nur einen Teil an Information speichern kann.
                    Im Restaurant-Abenteuer konntest du beispielsweise in einem Satz wiedergeben, was der Kunde essen oder trinken m√∂chte, aber nicht beides.
                    Das √§ndert sich in Level 2. In Level 2 lernst du, mit Variablen zu arbeiten. Diese erlauben es, mehrere Informationen zu speichern und an jedem beliebigen Ort auszudrucken.
                    Gehen wir also zum n√§chsten Tab!
                example_code: |
                    **Warnung! Dieser Code funktioniert nicht!**
                    In Hedy √§ndern sich die Befehle manchmal. `{echo}` funtioniert beispielsweise nur auf Level 1. Auf diesem Level lernst du eine bessere M√∂glichkeit, Antworten zur√ºckzugeben.
                    ```
                    {print} Willkommen bei Hedy's
                    {ask} Was m√∂chtest du essen?
                    {echo} Du m√∂chtest also
                    {ask} Was m√∂chtest du trinken?
                    {echo} Du m√∂chtest also
                    ```
            3:
                story_text: |
                    Im vorherigen Level hast du gelernt, was eine Variable ist und wie du sie verwenden kannst, um deine Abenteuer interaktiver zu gestalten.
                    Aber... das ist nicht das Einzige, was du mit Variablen machen kannst! Du kannst Variablen auch zum Erstellen von Listen verwenden.
                    Und du kannst Hedy sogar ein zuf√§lliges Wort aus einer Liste ausw√§hlen lassen, wodurch du echte Spiele erstellen kannst!
                    Wirf einen kurzen Blick auf den n√§chsten Tab!
            4:
                story_text: |
                    In den vorherigen Levels hast du mit Variablen ge√ºbt, bist aber m√∂glicherweise auf dieses Problem gesto√üen.
                    M√∂glicherweise hast du versucht, Code wie diesen auszuf√ºhren:

                    Nat√ºrlich wolltest du folgendes ausgeben

                    `Mein name ist Sophie`

                    aber Hedy druckt

                    `Mein Sophie ist Sophie`.

                    In diesem Level wird dieses Problem durch die Verwendung von Anf√ºhrungszeichen behoben.
                example_code: |
                    ```
                    {print} 'Ab jetzt musst du Anf√ºhrungszeichen verwenden!'
                    antwort {is} {ask} 'Was m√ºssen wir ab jetzt verwenden?'
                    {print} 'Wir m√ºssen ' antwort ' verwenden.'
                    ```
            5:
                story_text: |
                    In Level 5 gibt es etwas Neues, n√§mlich das `{if}`! Mit `{if}` kannst du zwischen zwei verschiedenen M√∂glichkeiten w√§hlen.
                    Dieser Code gibt 'Toll!' aus, wenn du Hedy als Namen eingibst, und 'Bl√∂d!', wenn du etwas anderes eingibst.
                    `{ask}` und `{print}` funktionieren immer noch wie in Level 4.
                example_code: |
                    ```
                    name {is} {ask} 'Wie hei√üt du?'
                    {if} name {is} Hedy {print} 'Sch√∂n' {else} {print} 'Buh!'
                    ```
            6:
                story_text: |
                    In diesem Level lernst du etwas Neues: Du kannst jetzt auch rechnen.

                    Das Plus ist leicht, das schreibst du wie in Mathe: `5 + 5` zum Beispiel. Das Minus funktioniert genauso, zum Beispiel `5 - 5`.

                    Das Mal ist etwas anders, da auf deiner Tastatur kein Malzeichen vorhanden ist. Suche mal, das gibt es wirklich nicht!
                    Deshalb multiplizieren wir mit dem Stern (auf der Tastatur √ºber dem Plus): `5 * 5`. Lies das als "5 mal 5", dann kannst du dich am einfachsten daran erinnern.
                example_code: |
                    ```
                    {print} '5 plus 5 macht ' 5 + 5
                    {print} '5 minus 5 macht ' 5 - 5
                    {print} '5 mal 5 macht ' 5 * 5
                    ```
            7:
                story_text: |
                    In Level 7 kommt der Befehl `{repeat}` dazu. Mit `{repeat}` kannst du eine Zeile Code mehrmals ausf√ºhren.
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy macht Spa√ü!'
                    ```
            8:
                story_text: |
                    `{ask}` und `{print}` funktionieren immer noch wie du es gewohnt bist. Aber `{if}`, `{else}` und `{repeat}` haben sich ver√§ndert!
                    Du kannst jetzt mehrere Zeilen gruppieren, aber du musst den Code daf√ºr *einr√ºcken*.
                    Das bedeutet, dass du die Befehlszeilen mit vier Leerzeichen beginnen musst. Das gilt auch, wenn du einen Block mit nur einer Zeile schreiben m√∂chtest.
                example_code: |
                    Der `{repeat}` Befehl funktioniert jetzt so:
                    ```
                    {repeat} 5 {times}
                        {print} 'Hallo zusammen'
                        {print} 'Das hier wird f√ºnf Mal wiederholt'
                    ```
                    Die Befehle `{if}` und `{else}` funktionieren jetzt so:

                    ```
                    name {is} {ask} 'Wie hei√üt du?'
                    {if} name {is} Hedy
                        {print} 'Willkommen Hedy'
                        {print} 'Du kannst an deinem Computer spielen'
                    {else}
                        {print} 'EINDRINGLING!'
                        {print} 'Du darfst diesen Rechner nicht benutzen!'
                    ```
            9:
                story_text: |
                    In diesem Level kannst du nicht nur mehrere Zeilen mit `{if}` und `{repeat}` verwenden, du kannst sie auch kombinieren!
                    Im Beispiel siehst du einen `{if}` Befehl innerhalb eines `{repeat}` Befehls. Es ist auch anders herum erlaubt. Und ebenso ist `{if}` innerhalb eines anderen `{if}` Befehls erlaubt, genau wie `{repeat}` in einem anderen `{repeat}` Befehl.
                    Versuch es mal!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        bestellung = {ask} 'Was w√ºrden Sie gerne essen?'
                        {if} bestellung {is} Pizza
                            {print} 'sch√∂n!'
                        {else}
                            {print} 'Pizza ist leckerer'
                    ```
            10:
                story_text: |-
                    In diesem Level lernen wir den neuen Befehl `{for}`. Mit `{for}` kannst du eine Liste machen und alle ihre Elemente verwenden.
                    `{for}` erstellt einen Block, so wie `{repeat}` und `{if}`, daher m√ºssen alle Zeilen in dem Block mit Leerzeichen beginnen.
                example_code: |
                    ```
                    tiere {is} Hund, Katze, Kugelfisch
                    {for} tier {in} tiere
                      {print} 'Ich mag ' tier
                    ```
            11:
                story_text: |
                    You have reached level 11, you're doing great! In the higher levels, Hedy is focussing more and more on teaching you the programming language Python.
                    In Python there is no `{repeat}` command, but there is a command that works like {repeat}. Are you curious to find out how to say `{repeat}` in Python language? Quickly go on to find out!
            12:
                story_text: |-
                    **Dezimalzahlen**
                    Bis jetzt konntest du mit Hedy keine Dezimalzahlen (das sind Kommazahlen) wie 1,5 verwenden, aber jetzt geht das. Denke jedoch daran, dass Hedy (wie viele andere Programmiersprachen auch) anstatt des Kommas einen Punkt (`.`) verwendet.
                example_code: |
                    ```
                    {print} 'Zweieinhalb plus zweieinhalb macht...'
                    {print} 2.5 + 2.5
                    ```

                    {print} 2.5 + 2.5
            13:
                story_text: |-
                    Wir werden jetzt `{and}` und `{or}` lernen! Wenn du zwei Angaben √ºberpr√ºfen willst, musst du nicht zwei Mal `{if}` verwenden, sondern kannst `{and}` und `{or}` benutzen.

                    Wenn du `{and}` verwendest, m√ºssen beide Angaben, also links und rechts vom `{and}`, wahr sein. Du kannst auch `{or}` verwenden. Dann muss nur eine der beiden Aussage wahr sein.
                example_code: |
                    ```
                    name = {ask} 'Wie hei√üt du?'
                    alter = {ask} 'Wie alt bist du?'
                    {if} name {is} 'Hedy' {and} alter {is} 2
                        {print} 'Du bist die echte Hedy!'
                    ```
            14:
                story_text: |
                    Wir lernen weitere neue Elemente kennen! Du kennst sie vielleicht schon aus der Mathematik, das `<` und das `>` Zeichen.
                    Das `<` pr√ºft, ob die erste Zahl kleiner ist als die zweite, so √ºberpr√ºft Alter `<` 12 zum Beispiel, ob Alter kleiner als 12 ist.
                    Wenn du √ºberpr√ºfen willst, ob die erste Zahl kleiner oder gleich der zweiten ist, kannst du `<=` verwenden, zum Beispiel Alter `<=` 11.
                    Das `>` pr√ºft, ob die erste Zahl gr√∂√üer als die zweite ist, so √ºberpr√ºft Punkte `>` 10 zum Beispiel ob Punkte gr√∂√üer als 10 ist.
                    Wenn du √ºberpr√ºfen willst, ob die erste Zahl gr√∂√üer oder gleich der zweiten ist, kannst du `>=` verwenden, also zum Beispiel Punkte `>=` 11.
                    All diese Vergleiche kannst du mit einem `{if}` verwenden, das geht so:
                example_code: |
                    ```
                    alter = {ask} 'Wie alt bist du?'
                    {if} alter > 12
                        {print} 'Du bist √§lter als ich!'
                    ```

                    {if} alter < 13
                        {print} 'Du bist j√ºnger als ich!'
                    {else}
                        {print} 'Du bist √§lter als ich!'
            15:
                story_text: |-
                    Wir lernen eine neue Schleife kennen, die `{while}`-Schleife! Wir setzen die Schleife so lange fort, wie die Aussage wahr ist!
                    Also vergiss nicht den Wert innerhalb der Schleife zu √§ndern.

                    Im Beispielcode fahren wir also fort, bis eine korrekte Antwort gegeben wurde.
                    Wenn die richtige Antwort nie gegeben wird, endet die Schleife nie!
                example_code: |
                    ```
                    antwort = 0
                    {while} antwort != 25
                        antwort = {ask} 'Was macht 5 mal 5?'
                    {print} 'Es wurde eine richtige Antwort abgegeben'
                    ```
            16:
                story_text: |-
                    Wir setzen jetzt eckige Klammern um Listen, so wie das in Python gemacht wird! Au√üerdem m√ºssen wir jetzt einfache Anf√ºhrungszeichen (') um jedes Element einer Liste setzen, wie wir es in den vorherigen Leveln gelernt haben.
                    Wir nutzen eckige Klammern um auf eine Stelle in einer Liste zu zeigen. Der {at} Befehl kann nicht mehr benutzt werden.
                example_code: |
                    ```
                    freunde = ['Ahmed', 'Ben', 'Clemens']
                    gl√ºckszahlen = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} 'Die Gl√ºckszahl von ' freunde[i]
                        {print} 'ist ' gl√ºckszahlen[i]
                    ```
            17:
                story_text: |
                    Jetzt werden wir die Einr√ºckung ein wenig √§ndern. Jedes Mal, wenn wir eine Einr√ºckung ben√∂tigen, brauchen wir `:` in der Zeile vor der Einr√ºckung.

                    In diesem Level kannst du au√üerdem einen neuen Befehl benutzen: `{elif}`. `{elif}` ist eine Abk√ºrzung f√ºr `{else}` `{if}` und du brauchst ihn, wenn du drei (oder mehr!) Optionen machen willst.
                    Probier es mal aus!
            18:
                story_text: |-
                    Wir sind bei echtem Python-Code angekommen! Das bedeutet, dass wir ab jetzt runde Klammern mit den Befehlen `{print}` und `{range}` benutzen m√ºssen.
                    Es bedeutet auch, dass du Hedy-Code aus diesem Level in jeder Python-Umgebung benutzen kannst, solange du die englischen Befehle nutzt. Falls du es bisher noch nicht gemacht hast, kannst du den Schalter im Befehlsmen√º zum Umschalten benutzen.

                    {print}('Ich hei√üe ', name)
    dice:
        name: W√ºrfel
        default_save_name: W√ºrfel
        description: Erstelle Deinen eigenen W√ºrfel
        levels:
            3:
                story_text: |
                    In diesem Level k√∂nnen wir von einer Liste w√§hlen. Damit k√∂nnen wir den Computer eine Seite des W√ºrfels w√§hlen lassen.
                    Schaut mal in die Brettspiele in Eurem Schrank zu Hause.
                    Haben einige davon (besondere) W√ºrfel? Die kannst Du auch mit diesem Code nachbauen.
                    Zum Beispiel den W√ºrfel aus "Heckmeck am Bratwurmeck" mit den Zahlen 1 bis 5 und einem Regenwurm darauf.

                    ![W√ºrfel aus "Heckmeck am Bratwurmeck" mit den Zahlen 1 bis 5 und einem Regenwurm darauf](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    W√ºrfelseiten {is} 1, 2, 3, 4, 5, Regenwurm
                    {print} Du warfst _ {at} {random}
                    ```
                story_text_2: |
                    ### √úbung
                    Die W√ºrfel im Beispiel oben sind die W√ºrfel f√ºr ein bestimmtes Spiel. Kannst du normale W√ºrfel machen?
                    Oder andere Spezialw√ºrfel von einem anderen Spiel?
                example_code_2: |
                    ```
                    Auswahlm√∂glichkeiten {is} _
                    ```
            4:
                story_text: |
                    In diesem Level kannst du auch W√ºrfel erstellen. Aber dieses Mal kannst du es selbst versuchen, ohne Beispiel-Code!

                    ### √úbung
                    Erstelle deinen eigenen W√ºrfel in diesem Level.
                    Tipp: Falls du keine Idee hast, wie man einen W√ºrfel erstellt, schau dir deinen W√ºrfel vom vorigen Level an, aber vergiss nicht, Anf√ºhrungszeichen hinzuzuf√ºgen.
            5:
                story_text: |
                    Wir werden die `{if}` und `{else}` Befehle zu unseren W√ºrfeln hinzuf√ºgen!

                    ### √úbung
                    Vervollst√§ndige den Beispiel-Code, sodass der Code sagt "Du kannst aufh√∂ren zu werfen", sobald du einen Regenwurm gew√ºrfelt hast. Er sollte "Du musst nochmal werfen" ausgeben, falls du etwas anderes gew√ºrfelt hast.
                    **Extra** Vielleicht m√∂chtest Du auch einen W√ºrfel aus einem ganz anderen Spiel nachbauen. Das ist auch super! Dann √ºberlege dir selbst eine Reaktion. Zum Beispiel 'ja' bei einer 6 und 'schade' f√ºr alles andere.
                example_code: |
                    ```
                    w√ºrfelseiten {is} 1, 2, 3, 4, 5, Regenwurm
                    wurf {is} w√ºrfelseiten {at} {random}
                    {print} 'Du hast gew√ºrfelt: ' w√ºrfelseiten
                    _ wurf {is} Regenwurm {print} 'Du kannst aufh√∂ren zu w√ºrfeln.'
                    _ {print} 'Du musst nochmal w√ºrfeln!'
                    ```
            6:
                story_text: |
                    Hier kannst Du auch wieder der Regenwurmw√ºrfel erstellen, aber hier kannst Du dazu auch noch berechnen, wie viele Punkte gew√ºrfelt wurden.
                    Vielleicht wei√üt Du ja, dass der Wurm 5 Punkte z√§hlt. Jetzt kannst Du nach jedem Wurf direkt berechnen, wie viele Punkte Du bekommst.
                    Hier ist der Code zur Berechnung der Punkte f√ºr einen W√ºrfel:

                    ### √úbung
                    Kannst du den Code ver√§ndern, um die Gesamtpunktzahl f√ºr 8 W√ºrfel zu bekommen? Um das zu machen musst du einige Zeilen Code kopieren und einf√ºgen.
                example_code: |
                    ```
                    W√ºrfelseiten = 1, 2, 3, 4, 5, Regenwurm
                    Punkte = 0
                    Wurf = W√ºrfelseiten {at} {random}
                    {print} 'Du hast ' Wurf ' gew√ºrfelt.'
                    {if} Wurf {is} Regenwurm Punkte = Punkte + 5 {else} Punkte = Punkte + Wurf
                    {print} 'Jetzt hast Du ' Punkte ' Punkte.'
                    ```
                example_code_2: |
                    Ist es dir gelungen, die Gesamtpunktzahl f√ºr 8 W√ºrfel auszurechnen? Daf√ºr musstest du ganz sch√∂n viel hin und her kopieren, oder?In Level 7 machen wir das einfacher!
            7:
                story_text: |
                    Auch in Level 5 kannst du wieder einen W√ºrfel programmieren. Mit dem Befehl `{repeat}` kannst du ganz einfach eine ganze Handvoll W√ºrfel werfen.

                    ### √úbung
                    Versuche, den Beispiel-Code zu vervollst√§ndigen!   **(extra)** Denke an ein Spiel, das du kennst, bei dem es um W√ºrfel geht und programmiere es mit dem Befehl `{repeat}`.
                example_code: |
                    ```
                    W√ºrfelseiten = 1, 2, 3, 4, 5, 6
                    _ _ _ _ _ _ _
                    ```
            10:
                story_text: |
                    Brauchen alle zu lange, um zu w√ºrfeln? In diesem Level kannst du Hedy alle W√ºrfel auf einmal werfen lassen.

                    ### √úbung
                    √Ñndere die Namen zu den Namen deiner Freunde oder Familienmitglieder und vervollst√§ndige den Code, sodass sie alle w√ºrfeln.
                example_code: |
                    ```
                    Spielerliste = Ann, John, Jesse
                    W√ºrfelseiten = 1, 2, 3, 4, 5, 6
                    _ _ _ _
                        {print} Spieler ' w√ºrfelt ' W√ºrfelseiten {at} {random}
                        {sleep}
                    ```
            15:
                story_text: |
                    ### Exercise
                    In this level you can create a little game in which you'll have to throw 6 as fast as possible.
                    We have started the code, it's up to you to get the game to work!

                    Firstly, add a `{while}` loop that checks if 6 has been thrown or not.
                    As long as you haven't thrown 6 already, throw the dice on a random number.
                    Print what the player has thrown.
                    Add a try to the amount of tries
                    Wait a second before you throw again, or - in case you've thrown a 6 - before the game ends.
                example_code: |
                    ```
                    options = 1, 2, 3, 4, 5, 6
                    {print} 'Throw 6 as fast as you can!'
                    thrown = 0
                    tries = 0
                    _
                    _
                    _
                    _
                    _
                    {print} 'Yes! You have thrown 6 in ' tries ' tries.'
                    ```
    dishes:
        name: Abwasch?
        default_save_name: Abwasch
        description: Nutze den Computer, um zu sehen, wer abw√§scht
        levels:
            3:
                story_text: |
                    Gibt es bei euch zu Hause immer Streit, wer mit dem Abwasch dran ist und wer den M√ºll raus bringen muss?
                    Dann kannst du den Computer v√∂llig fair entscheiden lassen. Das kannst du in diesem Level programmieren!
                example_code: |
                    ```
                    Familienmitglieder {is} Mama, Papa, Emma, Sophie
                    {print} Familienmitglieder {at} {random} muss abwaschen
                    ```
                story_text_2: |
                    ### √úbung
                    Erstelle deine eigene Version des Sp√ºlmaschinenprogramms. Erstelle zuerst eine Liste deiner Familienmitglieder.
                    Denke dann an eine Aufgabe, die erledigt werden soll, und lasse den Computer entscheiden, wer die Aufgabe erledigen muss, indem du `{at} {random}` benutzt.

                    **Extra** Keine Lust auf selbst abwaschen? Hacke das Sp√ºlmaschinenprogramm und entferne deinen Namen von der Liste mit dem `{remove}` `{from}` Befehl.
            4:
                story_text: |
                    Mit Anf√ºhrungszeichen kannst du dein Abwaschprogramm noch besser machen.

                    ### √úbung
                    F√ºlle zuerst die richtigen Symbole in die L√ºcken, um dieses Beispielprogramm zum Laufen zu bringen.
                    Hast du es hinbekommen? Gro√üartig! Kopiere nun deinen eigenen Code aus den vorigen Leveln und bring ihn in diesem Level zum Laufen, indem du Anf√ºhrungszeichen an den richtigen Stellen hinzuf√ºgst.
                example_code: |
                    ```
                    Familienmitglieder {is} Mama, Papa, Emma, Sophie
                    {print} _ den Abwasch macht heute _
                    {sleep}
                    {print} Familienmitglieder {at} _
                    ```
            5:
                story_text: |
                    Mit dem Befehl `{if}` kannst Du noch etwas mehr Spa√ü haben, wenn Du die Auswahl auswertest. Du kannst Dein Programm auf die Auswahl, die der Computer trifft, reagieren lassen.
                    ### √úbung
                    Kannst Du den Code so vervollst√§ndigen, dass er "So ein Pech" ausgibt, wenn Du dran bist und ansonsten "Zum Gl√ºck!"?
                    Vergiss die Anf√ºhrungszeichen nicht!
                example_code: |
                    ```
                    leute {is} Mama, Papa, Emma, Sophie
                    tellerw√§scher {is} leute {at} {random}
                    _ tellerw√§scher {is} Sophie {print} _ So ein Pech. Ich muss abwaschen. _
                    _ {print} 'Zum Gl√ºck kein Abwasch, weil ' _ ' dran ist.'
                    ```
            6:
                story_text: |
                    Wer ist wie oft mit dem Abwasch dran? Ist es gerecht verteilt? In diesem Level kannst Du mitz√§hlen.
                example_code: |
                    ```
                    Familienmitglieder = Mama, Papa, Emma, Sophie
                    Emmas_Anzahl = 0
                    Tellerw√§scher = Familienmitglieder {at} {random}
                    {print} 'Den Abwasch macht ' Tellerw√§scher
                    {if} Tellerw√§scher {is} Emma Emmas_Anzahl = Emmas_Anzahl + 1
                    {print} 'Emma ist diese Woche ' Emmas_Anzahl ' Mal mit dem Abwasch dran'
                    ```

                    Jetzt kannst Du die Zeilen ein paar Mal kopieren (z.B. weitere 6 Mal f√ºr die ganze Woche), um einen Plan f√ºr die ganze Woche aufzustellen.
                    Kannst Du den Code f√ºr eine ganze Woche schreiben?
                story_text_2: |
                    Wenn Du ganz gro√ües Pech hast, k√∂nnte Dich das vorigen Programm f√ºr die ganze Woche als Abw√§scher bestimmen. Das ist ungerecht!
                    Um das System gerechter zu gestalten, kannst Du mit dem Befehl `{remove}` die ausgew√§hlt Person von der Liste entfernen. Auf diese Weise musst Du nicht nochmal abwaschen, bis jeder einmal dran war.

                    Montag and Dienstag sind schon vorbereitet! Kannst Du den Rest der Woche vervollst√§ndigen?
                    Und... Kannst Du dir etwas einfallen lassen f√ºr den Fall, dass die Liste leer ist?
                example_code_2: |
                    ```
                    Familienmitglieder = Mama, Papa, Emma, Sophie
                    Tellerw√§scher = Familienmitglieder {at} {random}
                    {print} 'Am Montag macht ' Tellerw√§scher ' den Abwasch.'
                    {remove} Tellerw√§scher {from} Familienmitglieder
                    Tellerw√§scher = Familienmitglieder {at} {random}
                    {print} 'Am Dienstag macht ' Tellerw√§scher ' den Abwasch.'
                    {remove} Tellerw√§scher {from} Familienmitglieder
                    Tellerw√§scher = Familienmitglieder {at} {random}
                    ```
            7:
                story_text: |
                    Mit dem Befehl `{repeat}` kannst du Code-Zeilen wiederholen. Das kannst du nutzen, um f√ºr mehrere Tage zu berechnen, wer abw√§scht.
                    ### √úbung
                    Benutze den `{repeat}` Befehl um zu entscheiden wer die ganze Woche abwaschen muss. Jede L√ºcke muss mit einem Befehl oder einer Zahl gef√ºllt werden!
                    **(extra)** Kannst du an eine andere Aufgabe im Haushalt denken? Passe den Code an, sodass er drei Haushaltsaufgaben entscheidet. Vergiss nicht auszugeben um welche Aufgaben es sich handelt!
                example_code: |
                    ```
                    Familienmitglieder = Mama, Papa, Emma, Sophie
                    {repeat} _ _ {print} 'Abgewaschen wird von' _ _ _
                    ```
            10:
                story_text: |
                    In diesem Level kannst du einen Ablauf f√ºr die ganze Woche auf eine einfache Art und Weise erstellen!

                    ### √úbung
                    F√ºge eine zweite Hauspflicht hinzu, wie z.B. Staubsaugen oder Aufr√§umen, und stelle sicher, dass sie ebenfalls f√ºr die ganze Woche aufgeteilt ist.
                    <br> **(extra)** Das Programm ist nicht fair, du kannst Pech haben und die ganze Woche abwaschen. Wie k√∂nntest du das Programm fairer machen?
                example_code: |
                    ```
                    tage = Montag, Dienstag, Mittwoch, Donnerstag, Freitag, Samstag, Sonntag
                    namen = Mama, Papa, Emma, Sophie
                    {for} tag {in} tage
                        {print} namen {at} {random} ' ist mit dem Abwasch dran am ' tag
                    ```
    elif_command:
        name: '{elif}'
        default_save_name: elif
        description: elif
        levels:
            17:
                story_text: |
                    In this level you can also use a new command: `{elif}`. `{elif}` is a combination of the keywords `{else}` and `{if}` and you need it when you want to make 3 (or more!) options.
                    Check it out!
                example_code: |
                    ```
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
                    ```
    for_command:
        name: '{for}'
        default_save_name: for
        description: for command
        levels:
            10:
                story_text: |-
                    ## For
                    In this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.
                    `{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with 4 spaces.
                example_code: |
                    ```
                    animals = dog, cat, blobfish
                    {for} animal {in} animals
                        {print} 'I love ' animal
                    ```
                story_text_2: |
                    ### Exercise
                    Finish this code by adding `{for} action {in} actions` to line 2.
                example_code_2: |
                    ```
                    actions = clap your hands, stomp your feet, shout Hurray!
                    _
                        {repeat} 2 {times}
                            {print} 'If youre happy and you know it, ' action
                            {sleep} 2
                        {print} 'If youre happy and you know it, and you really want to show it'
                        {print} 'If youre happy and you know it, ' action
                        {sleep} 3
                    ```
            11:
                story_text: |-
                    In diesem Level f√ºgen wir eine neue Form des Befehls `{for}` hinzu. In fr√ºheren Leveln haben wir `{for}` mit Listen benutzt, aber wir k√∂nnen `{for}` auch mit Zahlen verwenden.
                    Dies machen wir, indem wir einen Variablennamen und dann `{in}` `{range}` schreiben. Dahinter schreiben wir die Zahl bei der es losgehen soll, `{to}` und dann die Zahl, wo es aufh√∂rt.

                    Probiere das Beispiel aus, um zu sehen was passiert! In diesem Level musst du wieder Einr√ºckung in den Zeilen unter dem `{for}` anwenden.
                example_code: |
                    ```
                    {for} counter {in} {range} 1 {to} 10
                        {print} counter
                    {print} 'Ready or not. Here I come!'
                    ```
            17:
                story_text: |
                    Now we are going to change indentation a little bit. Every time that we need an indentation, we need `:` at the line before the indentation.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Ready or not, here I come!'
                    ```
            18:
                story_text: |
                    Lastly, we'll turn `{for} i {in} {range} 1 to 5` into real Python code, like this:
                example_code: |
                    ```
                    {for} i {in} {range}(1,5):
                        {print} (i)
                    ```
    fortune:
        name: Wahrsagerin
        default_save_name: Wahrsagerin
        description: Lass Hedy die Zukunft voraussagen
        levels:
            1:
                story_text: |
                    Warst du schon mal auf dem Rummel und hast dir die Zukunft von einer Wahrsagerin vorhersagen lassen? Oder hast du schon mal mit einer magischen schwarzen Kugel gespielt?
                    Dann wei√üt du bestimmt, dass sie nicht wirklich die Zukunft vorhersagen k√∂nnen, aber dass es trotzdem Spa√ü macht.

                    In den n√§chsten Leveln kannst du lernen, wie du deine eigene Wahrsagemaschine erstellst!
                    In Level 1 kannst du einfach anfangen, indem du Hedy sich als Wahrsagerin vorstellen l√§sst und sie die Antwort des Spielers mit `{echo}` ausgibst.
                    So wie hier:
                example_code: |
                    ```
                    _ Hallo, ich bin Hedy, die Wahrsagerin!
                    _ Wer bist du?
                    _ Lass mich in meine Kristallkugel sehen
                    _ Ich sehe... Ich sehe...
                    _ Du hei√üt
                    ```
                story_text_2: |
                    ### √úbung
                    Kopiere den Beispiel-Code in deinen Eingabebereich und f√ºlle die L√ºcken, um den Code zum Laufen zu bringen.
                    **Extra** √Ñndere den Code und lasse die Wahrsagerin nicht nur deinen Namen vorhersagen, sondern auch dein Alter, dein Lieblingssport-Team oder etwas anderes √ºber dich.
            3:
                story_text: |
                    Im vorigen Level hast du deine erste Wahrsagemaschine erstellt, aber Hedy konnte nichts wirklich vorhersagen, sonder nur `{echo}`.
                    In diesem Level kannst du Variablen und den `{at} {random}` Befehl benutzen, um Hedy wirklich eine Antwort f√ºr dich ausw√§hlen zu lassen. Schau dir zum Beispiel diesen Code an:
                example_code: |
                    ```
                    {print} Ich bin Hedy, die Wahrsagerin!
                    Frage {is} {ask} Was w√ºrdest du gerne wissen?
                    {print} Das w√ºrdest du gerne wissen: Frage
                    Antworten {is} ja, nein, vielleicht
                    {print} Meine Kristallkugel sagt...
                    {sleep} 2
                    {print} Antworten {at} {random}
                    ```
                story_text_2: |
                    ### √úbung
                    Bis hierhin konnte Hedy nur mit ja, nein oder vielleicht antworten. Kannst du Hedy mit zus√§tzlichen Antwortm√∂glichkeiten ausstatten, wie zum Beispiel 'auf jeden Fall' oder 'frag nochmal'?
            4:
                story_text: |
                    ### √úbung 1
                    Wir haben alle Anf√ºhrungszeichen aus diesem Beispiel-Code entfernt. Kannst du sie alle an der richtigen Stelle hinzuf√ºgen?

                    ### √úbung 2
                    Gehe zur√ºck zum vorigen Level und kopiere deinen Wahrsagerin-Code. Bring diesen Code in diesem Level zum Laufen, indem du Anf√ºhrungszeichen an den richtigen Stellen hinzuf√ºgst.
                example_code: |
                    ```
                    _ F√ºge die Anf√ºhrunszeichen in diesen Code ein _
                    {print} Ich bin Hedy die Wahrsagerin!
                    Frage {is} {ask} Was m√∂chtest du wissen?
                    {print} Dies ist deine Frage:  Frage
                    Antworten {is} ja, nein, vielleicht
                    {print} Meine Kristallkugel sagt...
                    {sleep} 2
                    {print} Antworten {at} {random}
                    ```
            5:
                story_text: |
                    In this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!
                    By using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.
                    Check out this example to find out how.
                example_code: |
                    ```
                    {print} 'Ich bin Hedy die Wahrsagerin!'
                    {print} 'Ich kann vorhersehen, ob du morgen die Lotterie gewinnst!'
                    Person {is} {ask} 'Wer bist du?'
                    {if} Person {is} Hedy {print} 'Du wirst sicher gewinnen!ü§©' {else} {print} 'Pech gehabt! Jemand anderes wird gewinnen!üò≠'
                    ```
            6:
                story_text: |
                    In diesem Level k√∂nnen wir Mathe in deinen Vorhersagen als Wahrsagerin verwenden. Das erm√∂glicht es dir (alberne) Formeln zur Berechnung der Zukunft zu erfinden.
                    Zum Beispiel k√∂nntest du ausrechnen wie reich du einmal wirst oder wie viele Kinder du haben wirst, wenn du erwachsen bist.



                    ### √úbung
                    Kannst du dir deine eigene (alberne) Vorhersagemaschine ausdenken?
                example_code: |
                    ```
                    {print} 'Ich bin Hedy die Wahrsagerin!'
                    {print} 'Ich kann vorhersehen wie viele Kinder du haben wirst!'
                    Alter = {ask} 'Wie alt bist du?'
                    Geschwister = {ask} 'Wie viele Geschwister hast du?'
                    L√§nge = {ask} 'Wie gro√ü bist du in Zentimetern?'
                    Kinder = L√§nge / Alter
                    Kinder = Kinder - Geschwister
                    {print} 'Du bekommst ...'
                    {sleep}
                    {print} Kinder ' Kinder!'
                    ```

                    Wenn das vorige Beispiel dir nicht albern genug war, schau dir dieses an!
                    ```
                    {print} 'Ich bin Hedy die alberne Wahrsagerin!'
                    {print} 'Ich werde vorhersagen wie schlau du bist!'
                    Fu√üball = {ask} 'Auf einer Skala von 1 bis 10, wie sehr magst du Fu√üball?'
                    Bananen = {ask} 'Wie viele Bananen hast du diese Woche gegessen?'
                    Hygiene = {ask} 'Wie viele Male hast du heute deine H√§nde gewaschen?'
                    Ergebnis = Bananen + Hygiene
                    Ergebnis = Ergebnis * Fu√üball
                    {print} 'Du bist ' Ergebnis ' Prozent schlau.'
                    ```
            7:
                story_text: |
                    In this level you can use the `{repeat}` command to make your machine tell multiple fortunes at once.
                example_code: |
                    ```
                    {print} 'Ich bin Hedy, die Wahrsagerin!'
                    {print} 'Du kannst 3 Fragen stellen!'
                    {repeat} 3 {times} Frage = {ask} 'Was w√ºrdest du gerne wissen?'
                    Antwort = ja, nein, vielleicht
                    {repeat} 3 {times} {print} 'Meine Kristallkugel sagt... ' Antwort {at} {random}
                    ```
            8:
                story_text: |
                    In den vorigen Leveln hast du gelernt `{repeat}` zu nutzen, um die Wahrsagerin 3 Fragen in Folge beantworten zu lassen, aber wir hatten ein Problem die Fragen anzuzeigen.
                    Jetzt ist das Problem gel√∂st, weil wir den neuen Weg den `{repeat}` Befehl zu benutzen nutzen.
                    Im n√§chsten Beispiel kannst du die Wahrsagerin 3 Fragen stellen lassen und sie auch anzeigen!

                    ### √úbung
                    Kannst du den richtigen Befehl in die L√ºcken f√ºllen?
                example_code: |
                    ```
                    {print} 'Ich bin Hedy die Wahrsagerin!'
                    {print} 'Du kannst mir 3 Fragen stellen.'
                    Antworten = ja, nein, vielleicht
                    _ _ _
                       Frage = {ask} 'Was m√∂chtest du wissen?'
                       {print} Frage
                       {sleep}
                       {print} 'Meine Kristallkugel sagt...' Antworten {at} {random}
                    ```
            10:
                story_text: |
                    In diesem Level wirst du lernen, das englische Spiel MASH zu programmieren. In diesem Spiel geht es darum, f√ºr alle Spieler die Zukunft vorauszusagen. Auf Englisch stehen die Buchstaben f√ºr mansion, apartment, shack, und house, was auf Deutsch Schloss, Wohnung, Schuppen und Haus bedeutet.

                    ### √úbung 1
                    F√ºge zwei Namen zur Liste hinzu und sieh wie die Ausgabe des Programms sich ver√§ndert, wenn du es ausf√ºhrst.
                example_code: |
                    ```
                    H√§user = Schloss, Wohnung, Schuppen, Haus
                    Liebe = niemand, eine k√∂nigliche Person, ihr Nachbar, ihre wahre Liebe
                    Haustiere = Hund, Katze, Elefant
                    Namen = Judith, Ralf, Tim
                    {for} Name {in} Namen
                        {print} Name ' lebt in einem ' H√§user {at} {random}
                        {print} Name ' wird ' Liebe {at} {random} ' heiraten.'
                        {print} Name ' wird eine(n) ' Haustiere {at} {random} ' als Haustier haben.'
                        {sleep}
                    ```
            12:
                story_text: |-
                    Ab Level 12 musst du auch in Listen Anf√ºhrungszeichen vor und nach jedem Element verwenden.

                    ### √úbung
                    Erg√§nze die Liste um zwei Vorhersagen
                example_code: |
                    ```
                    Schicksale = 'Du wirst auf einer Bananenschale ausrutschen', _
                    {print} 'Ich werde in meine Kristallkugel schauen, um deine Zukunft zu sehen.'
                    {print} 'Ich sehe... Ich sehe...'
                    {sleep}
                    {print} Schicksale {at} {random}
                    ```
    functions:
        name: functions
        default_save_name: functions
        description: functions
        levels:
            12:
                story_text: |
                    In this level you'll learn how to use **functions**. A function is a block of code you can easily use multiple times. Using functions helps us organize pieces of code that we can use again and again.
                    To create a function, use `{define}` and give the function a name. Then put all the lines you want in the function in a indented block under the `{define}` line.
                    Leave one empty line in your code to make it look nice and neat. Great job! You have created a function!

                    Now, whenever we need that block of code, we just use <code>{call}</code> with the function's name to call it up! We don't have to type that block of code again.

                    Check out this example code of a game of Twister. The function 'turn' contains a block of code that chooses which limb should go where.

                    ### Exercise
                    Finish this code by setting the 2 variables chosen_limb and chosen_color.
                    Then, choose how many times you want to call the function to give the twister spinner a spin.

                    ### Exercise 2
                    Improve your code by adding a variable called 'people'. Use the variable to give all the players their own command in the game.
                    For example: 'Ahmed, right hand on green' or 'Jessica, left foot on yellow'.
                example_code: |
                    ```
                    sides = 'left', 'right'
                    limbs = 'hand', 'foot'
                    colors = 'red', 'blue', 'green', 'yellow'

                    {define} turn
                        chosen_side = sides {at} {random}
                        chosen_limb = limbs _
                        chosen_color = colors _
                        {print} chosen_side ' ' chosen_limb ' on ' chosen_color

                    {print} 'Lets play a game of Twister!'
                    {for} i {in} {range} 1 to _
                        {call} turn
                        {sleep} 2
                    ```
            13:
                story_text: |
                    Now that you've learned how to use functions, you'll learn how to use a function with an argument.
                    An **argument** is a variable that is used within a function. It is not used outside the function.

                    For example in this code we've programmed the first verse of the song 'My Bonnie is over the ocean'.
                    In this example code the argument `place` is used. Place is a variable that is only used in the function, so an argument.
                    To use `place` we have programmed the line `define song with place`.
                    When the function is called, computer will replace the argument `place`, with the piece of text after `call song with`.

                    ### Exercise
                    The next verse of this song goes:

                    Last night as I lay on my pillow
                    Last night as I lay on my bed
                    Last night as I lay on my pillow
                    I dreamed that my Bonnie is dead

                    Can you program this verse in the same way as the example?
                example_code: |
                    ```
                    {define} song {with} place
                        {print} 'My Bonnie is over the ' place

                    {call} song {with} 'ocean'
                    {call} song {with} 'sea'
                    {call} song {with} 'ocean'
                    ```
            14:
                story_text: |
                    In the previous levels you have learned to create functions and use arguments with them. Another great use of a function is to let it calculate something for you.
                    You can give the function a calculation and it will give you the answer of the calculation. This answer is called a **return value**.

                    For example, in this code the function calculate_new_price will calculate the new price of any item. It will give you the new price as a return value.

                    ### Exercise
                    Finish this code. We have already made the variable new_price for you, you only need to set it.
                    You should finish the line of code by calling the function that calculates the new price.
                example_code: |
                    ```
                    {define} calculate_new_price {with} amount, percentage
                        percentage = percentage / 100
                        discount_amount = amount * percentage
                        return amount - discount_amount

                    old_price = {ask} 'How much is on the price tag?'
                    discount = {ask} 'What percentage is the discount?'

                    new_price = _ calculate_new_price {with} old_price, _
                    {print} 'The new price is ' new_price ' dollar'
                    ```
            18:
                story_text: |
                    Let's make functions the Pythons way! To define a function, we no longer use:

                    `{define} name_function {with} argument_1, argument_2:`

                    but we use:

                    `{def} name_function(argument_1, argument_2):`.


                    If you don't want to use arguments, you just leave the space between the parantheses empty.
                    To call a function, we don't need the `{call}` command anymore. You just type the name of the function.
                example_code: |
                    ```
                    {def} calculate_score(answer, correct_answer):
                        {if} answer == correct_answer:
                            score = 1
                        {elif} answer == '?':
                            score = 0
                        {else}:
                            score = -1
                        {return} score

                    answer = {input} ('Where can you find the Eiffel Tower?')
                    correct_answer = 'Paris'
                    score = calculate_score(answer, correct_answer)
                    {print} ('Your score is... ', score)
                    ```
    guess_my_number:
        name: Guess my number
        default_save_name: guess my number
        description: guess my number
        levels:
            14:
                story_text: |
                    In this level you can program the game 'Guess my number'

                    ### Exercise
                    Fill in the correct symbols on the blanks to get the game to work.
                example_code: |
                    ```
                    {print} 'Guess my number'
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number = numbers {at} {random}
                    game = 'on'
                    {for} i {in} {range} 1 {to} 10
                        {if} game == 'on'
                            guess = {ask} 'Which number do you think it is?'
                            {if} guess _ number
                                {print} 'Lower!'
                            {if} guess _ number
                                {print} 'Higher!'
                            {if} guess _ number
                                {print} 'You win!'
                                game = 'over'
                    ```
    hangman:
        name: Hangman
        default_save_name: Hangman
        description: Guess the word
        levels:
            17:
                story_text: |
                    In this adventure we program a game of hangman. First we make some preparations, then we program the game and in the third part we add a drawing with the turtle.

                    ### Exercise
                    ***Set the variables*** In this game of hangman, Player 1 chooses an answer and Player 2 has to guess the letters in this answer.
                    To let the computer know all the letters in the word, we will turn the answer into a list of letters. We also do this with the guesses Player 2 makes.
                    We will start the game with 2 empty lists. We have made an empty list for the variable answer for you. Now make an empty list for guessed_letters as well.
                    Then we fill in how many mistakes were made. At the start of the game, this should be 0.
                    The variable `amount_letters` tells us how many letters are in the answer. Ask Player 1 to tell us how many letters their word has.
                    Lastly we tell the computer if the game is over. We use the variable `game_over` and set it to `False`.

                    ***Choosing the answer*** We want Player 1 to be able to choose the answer. We'll ask them, as many times as necessary, what the next letter is.
                    Then we add that letter to the answer. Lastly, we add an empty _ to the list of guessed letters, so we get as many _s as there are letters in the answer.

                    ***Player 2's turn***
                    Tell Player 2 its their turn. Then tell Player 2 how many letters there are in the answer. Finally, print the list of `guessed_letters`.

                    ***Go to the next tab*** Now that all the starting variables are set, we can start programming the game itself. Check out the next tab to learn how!
                example_code: |
                    ```
                    print 'Hangman!'

                    # Set the variables
                    answer = []
                    guessed_letters = _
                    mistakes_made = _
                    amount_letters = {ask} _
                    _ = 'False'

                    # Choosing the answer
                    {for} _
                        letter = {ask} 'Player 1, what is letter ' i '?'
                        _
                        {add} '_' {to} _

                    # Player 2 turn
                    print _
                    print _
                    print guessed_letters
                    ```
    hangman_2:
        name: Hangman 2
        default_save_name: Hangman_2
        description: Hangman 2
        levels:
            17:
                story_text: |
                    Now it's time to program the hangman game.

                    ### Exercise

                    ***Paste your code*** Copy your code from the previous tab and paste the code in the programming field.

                    ***The game*** This games continues playing until Player 2 is game over. Fill in the while command accordingly. Now, Player 2 is allowed to guess a letter, so ask Player 2 to guess a letter.
                    We need to check if their answer is correct, so check if their `guess` is (somewhere) in the (list) `answer`. Then we let the computer figure out which of the letter(s) is the guess. We have already programmed that part for you.
                    Next we want to compliment the player for finding a correct letter and we want to print the list `guessed_letters`, so the player can see their progress.

                    The next part we're going to program is what happens when the player has guessed all of the letters. So if their list of `guessed_letters` is the same as our list `answer`.
                    If the lists are the same, congratulate Player 2 with their victory and set the variable `game_over` to `True`.

                    Next we'll program what happens when Player 2 guesses wrong (so the `{else}` command). First, tell the player that their guess was wrong. Then increase the `mistakes_made` variable by 1.

                    For the last part we'll program what happens when Player 2 has made 10 mistakes. We'll print that Player 1 has won the game. Then we'll print the correct answer. And finally, we'll set our `game_over` variable to `True`, so the game stops.

                    ***Go to the next tab*** Amazing work! Your game is playable, but wouldn't it be fun if the hangman was actually drawn when Player 2 makes a mistake..?
                example_code: |
                    ```
                    # Paste your code here

                    # The game
                    {while} game_over _
                        guess = _
                        {if} _
                            {for} i {in} {range} 1 {to} amount_letters:
                                if answer[i] == guess:
                                    guessed_letters[i] = guess
                            {print} _
                            {if} guessed_letters == _:
                                {print} _
                                game_over = _
                        {else}:
                            {print} _
                            mistakes_made _
                            {if} _ == 10:
                                {print} _
                                {print} _
                                _
                    ```
    hangman_3:
        name: Hangman 3
        default_save_name: Hangman_3
        description: Hangman 3
        levels:
            17:
                story_text: |
                    In a game of hangman the mistakes are shown by drawing a part of the hangman each time a mistake has been made.
                    We now add those drawings with our turtle!

                    ### Exercise
                    ***Create a function that draws the hangman*** Create a function that draws the hangman in 10 steps. We have already made step 1 for you.

                    ***Test the function*** Test the function by calling the function with 10. If you are happy with the function, remove the line that calls the function for now. We will call the function when the player makes a mistake.

                    ***Paste your hangman game under your function*** Go back to the previous tab and copy your hangman game. Paste the game underneath your function.

                    ***Call the function when the player makes a mistake*** Under the line `mistakes_made = mistakes_made + 1` we will call the function. We want the turtle to take the same amount of steps as the player has made mistakes, so we call the function with `mistakes_made` as argument.

                    ***Enjoy your game!***
                    <div class="w-full flex flex-row gap-2">
                        The hangman could look like this <img src="https://github.com/hedyorg/hedy/assets/80678586/d385b691-5701-4342-b5d9-dfae1589c129" width="100">
                    </div>
                example_code: |
                    ```
                    # Create a function that draws the hangman
                    {define} draw_hangman {with} step:
                        {if} step == 1:
                            {color} white
                            {forward} -100
                            {turn} 90
                            {forward} -50
                            {color} black
                            {forward} 100
                            {forward} -50

                        {if} step == 2:
                            _
                    # Paste your hangman game here

                    ```
    harry_potter:
        name: Harry Potter
        default_save_name: Harry Potter
        description: Harry Potter adventures
        levels:
            10:
                story_text: |
                    ### Exercise
                    We can also make a Harry Potter themed fortune teller. Fill in blanks such that 9 lines are printed.
                    **Extra** Change the theme of the fortune teller into something else, such as your favorite book, film or tv show.
                example_code: |
                    ```
                    houses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    subjects = potions, defence against the dark arts, charms, transfiguration
                    fears = Voldemort, spiders, failing your OWL test
                    names = Harry, Ron, Hermione
                    _
                    _ {print} name ' is placed in ' houses {at} {random}
                    _ {print} name ' is great at ' subjects {at} {random}
                    _ {print} name 's greatest fear is ' fears {at} {random}
                    ```
    haunted:
        name: Spukhaus
        default_save_name: Spukhaus
        description: Entkomme dem Spukhaus
        levels:
            1:
                story_text: |
                    In diesem Abenteuer arbeiten wir an einem Spiel, in dem du aus einem Geisterhaus entkommen musst, indem du die richtigen T√ºren w√§hlst.
                    Wenn du die richtige T√ºr w√§hlst, √ºberlebst du, aber wenn nicht, k√∂nnte ein schreckliches Monster‚Ä¶

                    In Level 1 beginnen wir mit unserem Spukhaus-Spiel, indem wir uns eine gruselige Geschichte ausdenken und die Spieler fragen, welches Monster sie in unserem Spukhaus finden werden.
                example_code: |
                    ```
                    {print} Wie bin ich hierher gekommen?
                    {print} Ich erinnere mich an meinen Freund, der sagte dass ich in das alte Haus gehen soll...
                    {print} und pl√∂tzlich wurde alles dunkel.
                    {print} Aber warum bin ich jetzt auf dem Boden...?
                    {print} Mein Kopf tut weh als h√§tte mir jemand mit der Pfanne eine √ºbergezogen!
                    {print} Was ist das f√ºr ein Ger√§usch?
                    {print} Oh nein! Ich habe das Gef√ºhl dass ich nicht alleine in diesem Haus bin!
                    {print} Ich muss hier raus!
                    {print} Vor mir sind drei T√ºren...
                    {ask} Durch welche T√ºr soll ich gehen?
                    {echo} Ich nehme T√ºr
                    {print} ...?
                    ```
                story_text_2: |
                    ### √úbung
                    Kopiere den Beispiel-Code in deinen Eingabebereich, indem du den gelben Knopf dr√ºckst.
                    Beende nun die Geschichte, indem du mindestens 5 Zeilen zum Code hinzuf√ºgst.
                    Denke daran, dass du jede Zeile mit einem `{print}` Befehl beginnst.
            2:
                story_text: |
                    In diesem Spukhaus kannst du Monster mit Emojis ausw√§hlen. Nat√ºrlich kannst du auch W√∂rter verwenden.
                example_code: |
                    ```
                    Monster_1 {is} üëª
                    Monster_2 {is} ü§°
                    Monster_3 {is} üë∂
                    {print} Du gehst ins Spukhaus.
                    {print} Pl√∂tzlich siehst du ein Monster_1
                    {print} Du l√§ufst in den anderen Raum, aber ein Monster_2 wartet dort auf dich!
                    {print} Oh nein! Schnell flitzt du in die K√ºche.
                    {print} Aber als du reinkommst greift dich Monster_3 an!
                    ```
                story_text_2: |
                    ### √úbung
                    Im obigen Beispiel sind die Monster vorherbestimmt. Also ist die Ausgabe deines Codes jedes Mal das Gleiche.
                    Kannst du `{ask}` Befehle hinzuf√ºgen, um das Spukhaus interaktiv zu machen und die Spieler die Monster ausw√§hlen zu lassen auf die sie treffen?
                example_code_2: |
                    ```
                    Monster1 {is} _
                    Monster2 {is} _
                    Monster3 {is} _
                    {print} Du betrittst das Spukhaus.
                    {print} Pl√∂tzlich siehst du ein Monster1
                    {print} Du rennst in den anderen Raum, aber ein Monster2 wartet dort auf dich!
                    {print} Oh nein! Schnell in die K√ºche.
                    {print} Aber als du hineingehst attackiert dich Monster3 !
                    ```
            3:
                story_text: |
                    In den vorherigen Leveln hast du eine Einleitung ins Spukhaus-Spiel gemacht, aber wie du vielleicht gemerkt hast war das Ender der Geschichte immer schrecklich.
                    In diesem Level kannst du die Geschichte interaktiver machen, indem du den Ausgang des Spiels √§nderst. Manchmal wirst du gefressen, manchmal kannst du entkommen!
                    Lass Hedy zuf√§llig entscheiden!
                example_code: |
                    ```
                    _ Escape from the haunted house!
                    _ There are 3 doors in front of you...
                    _ _ _ Which door do you choose?
                    _ You picked door ... choice
                    monsters _ a zombie, a vampire, NOTHING YOUVE ESCAPED
                    _ You see...
                    {sleep}
                    _ _ _ _
                    ```
            4:
                story_text: |
                    In diesem Level lernst du mit Anf√ºhrungszeichen umzugehen.

                    ### √úbung 1
                    Kannst du dein Spukhaus f√ºr Level 4 fit machen?

                    ### √úbung 2
                    Gehe zur√ºck zum vorigen Level und kopiere deinen Spukhaus-Code. Bring den Code in diesem Level zum Laufen, indem du Anf√ºhrungszeichen an den richtigen Stellen hinzuf√ºgst.
                example_code: |
                    ```
                    _ F√ºge Anf√ºhrungszeichen zu diesem Code hinzu _
                    {print} Entkomme dem Spukhaus!
                    {print} Vor dir sind drei T√ºren...
                    Wahl {is} {ask} Welche T√ºr w√§hlst du?
                    {print} Du nimmst T√ºr ... Wahl
                    Monster {is} ein Zombie, ein Vampir, NICHTS DU BIST ENTKOMMEN
                    {print} Du siehst...
                    {sleep}
                    {print} Monster {at} {random}
                    ```
            5:
                story_text: |
                    Bis zu diesem Level hat das Spukaus den Spieler immer gefragt durch welche T√ºr er gehen will, aber wie du vielleicht gemerkt hast, musste der Spieler nicht wirklich richtig antworten.
                    Wenn der Spieler einfach irgendetwas eingeben hat, ging das Spiel trotzdem weiter und der Spieler konnte sogar gewinnen (obwohl er gar keine T√ºr gew√§hlt hat).
                    In diesem Level kannst du nur gewinnen, wenn du die gleiche T√ºr w√§hlst die Hedy zuf√§llig ausgesucht hat.

                    ### √úbung
                    Kannst du die 4 fehlenden W√∂rter finden, um den Code zu vervollst√§ndigen?
                example_code: |
                    ```
                    {print} 'Entkomme aus dem Spukhaus!'
                    {print} 'Es sind 3 T√ºren vor dir...'
                    T√ºren {is} 1, 2, 3
                    Monster {is} Werwolf, Mumie, Vampir, Zombie
                    gew√§hlte_T√ºr {is} {ask} 'Welche T√ºr w√§hlst du?'
                    {print} 'Du w√§hlst T√ºr Nummer...' gew√§hlte_T√ºr
                    {sleep}
                    richtige_T√ºr {is} T√ºren {at} {random}
                    _ _ _ _ {print} 'Gro√üartig! Du bist entkommen!'
                    {else} {print} 'Oh nein! Du wirst gegessen von...' Monster {at} {random}
                    ```
            9:
                story_text: |
                    In diesem Level kannst du Verschachtelung verwenden, um das Spukhaus noch interaktiver zu machen!

                    ### √úbung
                    Im Moment ist es ziemlich schwer, das Spiel zu gewinnen. Kannst du es leichter machen?
                    √Ñndere deinen Code, sodass er nur eine falsche T√ºr und zwei richtige T√ºren, anstatt eine richtige und zwei falsche hat.
                    Tipp: Dies bedeutet, dass du die Variablen f√ºr richtige und falsche T√ºren und die Befehle `{if}` und `{else}` tauscht.
                    Und nat√ºrlich kannst du auch die Geschichte nach Belieben ver√§ndern. √Ñndere die Monster oder mach es zu einer fr√∂hlichen Spiel-Show, wo man ein Geschenk bekommt!
                example_code: |
                    ```
                    {print} 'Entkomme dem Spukhaus!'
                    Spieler = am_Leben
                    T√ºren = 1, 2, 3
                    Monster = Zombie, Vampir, riesige Spinne
                    {repeat} 3 {times}
                        {if} Spieler {is} am_Leben
                            richtige_T√ºr {is} T√ºren {at} {random}
                            {print} 'Vor dir sind drei T√ºren...'
                            gew√§hlte_T√ºr = {ask} 'Welche T√ºr w√§hlst du?'
                            {if} gew√§hlte_T√ºr {is} richtige_T√ºr
                                {print} 'Hier sind keine Monster!'
                            {else}
                                {print} 'Du wirst gefressen von einem(r) ' Monster {at} {random}
                                Spieler = tot
                        {else}
                            {print} 'GAME OVER'
                    {if} Spieler {is} am_Leben
                        {print} 'Gro√üartig! Du hast √ºberlebt'
                    ```
            11:
                story_text: |
                    In diesem Level haben wir den `{for}` Befehl ver√§ndert, um dem Spieler zu sagen, wo er ist.

                    ### √úbung 1
                    Vervollst√§ndige das Programm, sodass der Spieler wei√ü in welchem Raum er ist.

                    ### √úbung 2
                    Mache ein Abenteuer aus dem Programm, indem du folgenden Schritten folgst:

                    1. Erstelle eine Liste von Auswahlm√∂glichkeiten (wie k√§mpfe oder fl√ºchte)
                    2. Stelle sicher, dass der Spieler eine M√∂glichkeit ausw√§hlen kann. Nutze `{ask}`
                    3. Ist die Antwort richtig? Dann darf er zum n√§chsten Monster fortfahren. Gibt er eine falsche Antwort? Lass es den Spieler mit `{print}` wissen.

                    **(extra)** Wenn man eine falsche Wahl trifft, wird immer noch ein Monster angezeigt! Wie k√∂nntest du das √§ndern?
                example_code: |
                    ```
                    {print} 'Entkomme aus dem Spukhaus!'
                    monsterliste = Zombie, Vampir, Riesenspinne
                    _
                        {print} 'Raum ' i
                        monster = monsterliste {at} {random}
                    ```
            14:
                story_text: |
                    ### Exercise
                    In this level you can use the `<` and `>` symbol to introduce lives to your game.
                    Make sure the player loses a life when they come across the wrong monster and that the game stops if you have no lives left.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house'
                    lives = 3
                    doors = 1, 2, 3
                    monsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'
                    {for} i {in} {range} 1 {to} 10
                        {if} lives _
                            good_door = doors {at} {random}
                            monster = monsters {at} {random}
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} good_door == chosen_door
                                {print} 'You have chosen the correct door'
                            {else}
                                {print} 'You see...' monster
                                {if} monster == 'a sleeping 3 headed dog'
                                    {print} 'Pffieuw.... Its asleep'
                                {else}
                                    {print} 'You lose one life'
                                    lives = _
                        {else}
                            {print} 'GAME OVER'
                    ```
            16:
                story_text: |
                    ### Exercise
                    This haunted house game uses the connection between the lists you can use in this level.
                    For example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.
                    Check out the code and fill in  `weapons[i]`, `monsters[i]` , `bad_fate[i]`, `good_fate[i]`, `hint[i]` on the correct blanks to get the code to work!
                example_code: |
                    ```
                    numbers = [1, 2, 3]
                    i = numbers[{random}]
                    hint = ['growling', 'a cackling laugh', 'fluttering batwings']
                    monsters = ['zombie', 'witch', 'vampire']
                    bad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']
                    good_fate = ['You throw the ham. The zombie is distracted and starts eating it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']
                    weapons = ['ham', 'lighter', 'garlic']
                    {print} 'You are standing in front of an old mansion'
                    {print} 'Something is not right here'
                    {print} 'You hear ' _
                    {print} 'You are going to explore it'
                    {print} 'You enter the kitchen and see a lighter, a raw ham and a garlic.'
                    your_weapon = {ask} 'What do you bring with you?'
                    {print} 'With your ' your_weapon ' you enter the living room'
                    {print} 'There you find a ' _
                    needed_weapon = _
                    {if} your_weapon == needed_weapon
                        {print} 'You use your ' your_weapon
                        {print} _
                        {print} 'YOU WIN!'
                    {else}
                        {print} 'You have chosen the wrong weapon...'
                        {print} _
                        {print} 'GAME OVER'
                    ```
    hotel:
        name: hotel
        default_save_name: hotel
        description: hotel
        levels:
            13:
                story_text: |
                    In the previous adventure you have learned how to use an argument in a function, and you've learned how to combine it with an {ask}.
                    You might have wondered why you would use functions, because the functions in the example were only one line of code.
                    Now we will show you what a bigger function looks like and we will use multiple agruments now as well. You'll see how much better it is to use a function once the function gets bigger.
                    Here is an example of a function with arguments combined with {ask} commands.
                example_code: |
                    ```
                    {define} welcome_message {with} title, last_name, country, room_number
                        {print} 'Welcome to Hotel Hedy, ' title ' ' last_name
                        nice_trip {is} {ask} 'Did you have a nice trip from, ' country '?'
                        {if} nice_trip {is} 'yes'
                            {print} 'Lovely!'
                        {else}
                            {print} 'Sorry to hear that.'
                            {print} 'Hopefully you can take a nice rest in you room.'
                        {print} 'Your room number is ' room_number

                    {print} 'Hello. Please fill in your information to check in.'
                    title = {ask} 'What is your title (mr, mrs, ms, dr, etc.)?'
                    name = {ask} 'What is you last name?'
                    homecountry = {ask} 'What country do you come from?'

                    {call} welcome_message {with} title, name, homecountry, 105
                    ```

                    title = {ask} 'What is your title (mr, mrs, ms, dr, etc.)?'
                    name = {ask} 'What is you last name?'
                    homecountry = {ask} 'What country do you come from?'

                    {call} welcome_message {with} title, name, homecountry, 105
    if_command:
        name: '{if} & {else}'
        default_save_name: if_command
        description: Introducing the if command
        levels:
            5:
                story_text: |
                    ## If... else....
                    In level 5 there is something new, the `{if}`! With the `{if}` you can choose between two different options.
                    This code prints nice if you enter Hedy as a name, and boo! if you enter something else.
                    `{ask}` and `{print}` still work like they did in level 4.
                example_code: |
                    ```
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'
                    ```
                story_text_2: |
                    Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:
                example_code_2: |
                    ```
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice'
                    {else} {print} 'boo!'
                    ```
                story_text_3: |
                    ### Exercise
                    Try to create your own code with `{if}` and `{else}`. You can use the example code if you want.
                example_code_3: |
                    ```
                    answer {is} {ask} '2 + 2 = ?'
                    _ _ _ 4 _ 'Great job!'
                    _ _ 'No 2 + 2 = 4'
                    ```
            8:
                story_text: |
                    ## If... Else...
                    You have learned to repeat a block of lines of code after a `{repeat}` command.
                    Now you can also use indentation to make blocks after a {if} or {else} command.
                    Check out the example code.

                    ### Exercise
                    Add an {else} command to the example code. Make a block of line using indentation. You do this by starting each line with 4 spaces.
                example_code: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name {is} Hedy
                        {print} 'Welcome Hedy'
                        {print} 'You can play on your computer!'
                    ```
            9:
                story_text: |
                    In this level you can also put an {if} command inside another {if} command.
                example_code: |
                    ```
                    continue = {ask} 'Do you want to continue?'
                    {if} continue = yes
                        sure = {ask} 'Are you sure?'
                        {if} sure {is} yes
                            {print} 'We will continue'
                        {else}
                            {print} 'You are not sure'
                    {else}
                        {print} 'You do not want to continue'
                    ```
    in_command:
        name: '{in}'
        default_save_name: in_command
        description: Introducing the in command
        levels:
            5:
                story_text: |
                    ## Lists
                    When we want to check if something is in a list, we can now use the `{in}` command.
                    This code prints pretty! if you choose green or yellow, and meh otherwise.
                example_code: |
                    ```
                    pretty_colors {is} green, yellow
                    favorite_color {is} {ask} 'What is your favorite color?'
                    {if} favorite_color {in} pretty_colors {print} 'pretty!'
                    {else} {print} 'meh'
                    ```
                story_text_2: |
                    ### Exercise
                    Finish the example code by filling in the blanks with commands that you've learned.
                    When you've finished the code, try to create a code of your own and use a question that you've thought of yourself.
                example_code_2: |
                    ```
                    animals is dog, cow, sheep
                    answer is ask 'What is your favorite animal?'
                    _ answer _ animals _ 'Mine too!'
                    _ _ 'My favorite animals are dogs, cows and sheep'
                    ```
    is_command:
        name: '{is}'
        default_save_name: is_command
        description: introducing is command
        levels:
            2:
                story_text: |
                    ## Variablen
                    Du kannst einem Wort mit `{is}` einen Wert geben. Dieses Wort nennt man eine **Variable**. In diesem Beispiel haben wir eine Variable namens name und eine Variable names age benutzt. Du kannst das Wort name irgendwo in deinem Code verwenden. Es wird von Hedy automatisch ersetzt, wie hier:
                example_code: |
                    ```
                    name {is} Hedy
                    age {is} 15
                    {print} name is age years old
                    ```
                story_text_2: |
                    ### √úbung
                    Es ist Zeit, deine eigenen Variablen zu definieren.
                    Im Beispiel-Code zeigen wir ein Beispiel mit der Variable `favorite_animal`. In Zeile 1 wird die Variable gesetzt, und in Zeile 2 verwenden wir die Variable in einem `{print}` Befehl.
                    Zuerst, vervollst√§ndige unser Beispiel, in dem du dein Lieblingstier in die Leerstelle eintr√§gst. Dann denke dir mindestens 3 eigene Code-Beispiele aus. W√§hle eine Variable und gib der Variable mit dem `{is}` Befehl einen Wert. Dann verwenden den `{print}` Befehl, so wie wir es gezeigt haben.
                example_code_2: |
                    ```
                    favorite_animal {is} _
                    {print} I like favorite_animal
                    ```
            6:
                story_text: |
                    We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:
                example_code: |
                    ```
                    name = Hedy
                    answer = 20 + 4
                    ```
            14:
                story_text: |
                    We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.
                    The `<` checks if the first number is smaller than the second, for example age `<` 12 checks if age is smaller than 12.
                    If you want to check if the first number is smaller or equal to the second, you can use `<=`, for example age `<=` 11.
                    The `>` checks if the first number is bigger than the second, for example points `>` 10 checks if points is larger than 10.
                    If you want to check if the first number is bigger or equal to the second, you can use `>=`, for example points `>=` 11.
                    You use these comparisons in an `{if}`, like this:
                example_code: |
                    ```
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
                    ```
                story_text_2: |
                    From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:
                example_code_2: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name == 'Hedy'
                        {print} 'You are cool!'
                    ```
                story_text_3: |
                    You can also compare if something is *not* equal to something else using `!=` like this:
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name != 'Hedy'
                        {print} 'You are not Hedy'
                    ```

                    {if} age < 13
                        {print} 'You are younger than me!'
                    {else}
                        {print} 'You are older than me!'
    language:
        name: Sprache
        default_save_name: Sprache
        description: √úbe W√∂rter in einer Fremdsprache
        levels:
            5:
                story_text: |
                    Schreibe dein eigenes Programm, um Vokabeln in einer neuen Sprache zu √ºben.

                    ### √úbung
                    Mache das Programm l√§nger, indem du mindestens 3 weitere W√∂rter zum Lernen f√ºr den Spieler hinzuf√ºgst.
                    **Extra** Nat√ºrlich kannst du auch eine andere Sprache als Franz√∂sisch w√§hlen. Du kannst den Code zu jeder beliebigen Sprache √§ndern, die du lernen m√∂chtest.
                example_code: |
                    ```
                    {print} 'Lerne Franz√∂sisch!'
                    Katze {is} {ask} 'üê±'
                    {if} Katze {is} chat {print} 'Gro√üartig!'
                    {else} {print} 'Nein, Katze hei√üt chat'
                    Frosch {is} {ask} 'üê∏'
                    {if} Frosch {is} grenouille {print} 'Super!'
                    {else} {print} 'Nein, Frosch hei√üt grenouille'
                    ```
            16:
                story_text: |
                    ### Exercise
                    Take a look at the example code. This is a program to practise French vocabulary. Now make your own program to practice your vocabulary in a new language.
                    If you don't know any other languages, you can use Google translate or you can use emojis and your native language.
                example_code: |
                    ```
                    french_words = ['bonjour', 'ordinateur', 'pomme de terre']
                    translation = ['hello', 'computer', 'potato']
                    score = 0
                    {for} i {in} {range} 1 {to} 3
                        answer = {ask} 'What does ' french_words[i] ' mean?'
                        correct = translation[i]
                        {if} answer == correct
                            {print} 'Correct!'
                            score = score + 1
                        {else}
                            {print} 'Wrong, ' french_words[i] ' means ' translation[i]
                    {print} 'You gave ' score ' correct answers.'
                    ```
    maths:
        name: maths
        default_save_name: maths
        description: Introducing maths
        levels:
            6:
                story_text: |
                    In this level you learn something new: you can now also calculate.

                    The plus is easy, you write it like with math: `5 + 5` for example. The minus also works fine, it is `5 - 5`.

                    The times is a bit different, because there is no times symbol on your keyboard. Just search, there really isn't!
                    That is why we multiply with the asterisk above 8: `5 * 5`. Read that as "5 times 5" that helps you remember it best.
                example_code: |
                    ```
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 minus 5 is ' 5 - 5
                    {print} '5 times 5 is ' 5 * 5
                    ```
            12:
                story_text: |-
                    **Decimal numbers**
                    So far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.
                example_code: |
                    ```
                    {print} 'Two and a half plus two and a half is...'
                    {print} 2.5 + 2.5
                    ```
                story_text_2: |-
                    **Maths with words**
                    In this level you can also do addition with words like this:
                example_code_2: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```

                    {print} 2.5 + 2.5
    music:
        name: music
        default_save_name: music
        description: Play a tune!
        levels:
            1:
                story_text: |-
                    In this level you'll learn how to use the `{play}` command to play a tune!

                    Type `{play}` followed by the note you want to play. The scale goes C-D-E-F-G-A-B.
                    As you can see there are 7 different letters, but we can play more than just 7 notes.
                    Type a number between 1 and 10 behind the letter to choose the scale, for example after B4 comes C5.
                    C1 is the lowest note you can play, C10 is the highest.

                    ### Exercise
                    Try out the example code and then play around with it! Can you create your own melody?
                    In the next level you'll learn how to play some existing songs.
                example_code: |-
                    ```
                    {play} C4
                    {play} D4
                    {play} E4
                    {play} F4
                    {play} G4
                    {play} A4
                    {play} B4
                    {play} C5
                    ```
            2:
                story_text: |
                    ### Exercise
                    Finish the songs! We have started the codes for some melodies.
                example_code: |
                    ```
                    {print} Old Mac Donald had a farm
                    {play} C5
                    {play} C5
                    {play} C5
                    {play} G4
                    {play} A4
                    {play} A4
                    {play} G4
                    ```
                story_text_2: As you can see, you can also use the `{sleep}` command to add a little pause in the song.
                example_code_2: |
                    ```
                    {print} Twinkle Twinkle Little Star
                    {play} C
                    {play} C
                    {play} G
                    {play} G
                    {play} A
                    {play} A
                    {play} G
                    {sleep} 1
                    {play} F
                    {play} F
                    ```
            3:
                story_text: |
                    Create a random melody!

                    ### Exercise
                    The example code creates a random melody, but it's very short and not many notes are used.
                    Add more notes to the list and create a longer melody by copying the last line a couple more times.
                example_code: |
                    ```
                    notes {is} A4, B4, C4
                    {play} notes {at} {random}
                    {play} notes {at} {random}
                    {play} notes {at} {random}
                    ```
            4:
                story_text: |
                    Use the `{clear}` command to create a karaoke machine!

                    ### Exercise
                    Finish the karaoke version of 'Mary had a little lamb'.
                    Then, create a karaoke version of any song you'd like!
                example_code: |
                    ```
                    {print} 'Mary had a little lamb'
                    {play} E
                    {play} D
                    {play} C
                    {play} D
                    {play} E
                    {play} E
                    {play} E
                    {clear}
                    {print} 'Little lamb, little lamb'
                    {play} D
                    {play} D
                    {play} D
                    {play} E
                    {play} E
                    {play} E
                    {clear}
                    {print} 'Mary had a little lamb'
                    {play} E
                    ```
            5:
                story_text: |
                    You don't always have to use the `{play}` command to play a whole song, sometimes you just want to play one note.
                    For example, if you want to make a quiz, you can play a happy high note if the answer is right and a sad low note if the answer is wrong.

                    ### Exercise
                    Finish the first question by adding a line of code that plays a C3 note if the wrong answer is given.
                    Then think of 3 more questions to add to this quiz.
                example_code: |
                    ```
                    answer {is} {ask} 'What is the capital of Zimbabwe?'
                    {if} answer {is} Harare {play} C6
                    _
                    ```
            6:
                story_text: "Instead of playing notes, you can also play numbers now. Simply type `{play} 1` for the lowest note, `{play} 70` for the highest note, or anything in between.\n\n### Exercise\n This calls for musical maths! Try out the example code a couple of times with different starting numbers. \nThen, see if you can compose a song using the numbers.\n"
                example_code: |
                    ```
                    number = {ask} 'Say a starting number between 1 and 67'
                    {print} number
                    {play} number
                    number = number + 1
                    {print} number
                    {play} number
                    number = number + 1
                    {print} number
                    {play} number
                    ```
            7:
                story_text: |
                    Using the `{repeat}` command can make your codes for melodies a lot shorter!

                    ### Exercise
                    Finish the code for Twinkle Twinkle Little Star by using the `{repeat}`command.
                    Then go back to the songs you've made in the previous levels. Can you shorten those codes too?
                example_code: |
                    ```
                    {print} 'Twinkle Twinkle Little Star'
                    {repeat} 2 {times} {play} C4
                    {repeat} 2 {times} {play} G4
                    _
                    ```
            8:
                story_text: |
                    Now that we can use the `{repeat}` command for multiple lines, we can make songs even more easily!

                    ### Exercise
                    Finish the song of Brother John (Fr√®re Jacques). Don't forget to use `{repeat}`!
                example_code: |
                    ```
                    {print} 'Brother John'
                    {repeat} 2 {times}
                        {play} C
                        {play} D
                        {play} E
                        {play} C
                    {repeat} 2 {times}
                        {play} E
                        {play} F
                        {play} G
                        {sleep} 1
                    ```
            9:
                story_text: |
                    From this level on you can - among other things - use a {repeat} command inside a {repeat} command.
                    That makes songs like 'Happy birthday' even shorter!

                    ### Exercise
                    Finish the song!
                example_code: |
                    ```
                    first_time = yes
                    {repeat} 2 {times}
                        {repeat} 2 {times}
                            {play} C
                        {play} D
                        {play} C
                        {if} first_time {is} yes
                            {play} F
                            {play} E
                            first_time {is} no
                        {else}
                            _
                    ```
            12:
                story_text: |
                    Use functions in your songs! As you can see in the example code, you can make a function for each line of Twinkle Twinkle Little Star. Once you've programmed the first three lines, all you have to do is call the functions in the order you want them played in.

                    ### Exercise
                    Finish the song of Twinkle Twinkle Little Star.
                    Then look back at all the songs you've programmed in the levels before, can you make those codes better and shorter using functions too?
                example_code: |
                    ```
                    {define} first_line
                        {play} C
                        {play} C
                        {play} G
                        {play} G
                        {play} A
                        {play} A
                        {play} G
                        {sleep}

                    {define} second_line
                        {play} F
                        {play} F
                        {play} E
                        {play} E
                        {play} D
                        {play} D
                        {play} C
                        {sleep}

                    {define} third_line
                        {play} G
                        {play} G
                        {play} F
                        {play} F
                        {play} E
                        {play} E
                        {play} D
                        {sleep}

                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    ```
            13:
                story_text: |
                    You can use a function with an argument for songs that have line that are almost the same, but slightly different each time.
                    One example is the song 'Yankee Doodle'. The first 4 notes of the first lines are the same, but each time they are followed by a different couple of notes.

                    ### Exercise
                    Can you finish the song of Yankee Doodle?
                    Can you think of another song to program this way?
                example_code: |
                    ```
                    {print} 'Yankee Doodle'
                    {define} _ {with} note_1, note_2, note_3
                        {play} C4
                        {play} C4
                        {play} D4
                        {play} E4
                        {play} _
                        {play} _
                        {play} _

                    {call} line_1 {with} 29, 31, 30
                    {call} line_1 {with} 29, 28, 0
                    {call} line_1 {with} 32, 31, 30

                    {play} C4
                    {play} B3
                    {play} G3
                    {play} A3
                    {play} B3
                    {play} C4
                    {play} C4
                    ```
            14:
                story_text: |
                    You can program music for fun, but you can also use the musical notes to make something useful like a fire alarm!

                    ### Exercise
                    Make sure the fire alarm rings when there is a fire!
                example_code: |
                    ```
                    {define} fire_alarm
                        {print} 'FIRE!'
                        note = 40
                        {for} i {in} {range} 1 {to} 100
                            {if} note _ 50
                                note = note + 5
                                {play} _
                            {else}
                                note = 40

                    fire = {ask} 'Is there a fire?'
                    {if} fire _ 'yes'
                        {call} fire_alarm
                    ```
            15:
                story_text: |
                    **Warning** This adventure can become extremely annoying!
                    We can also use the {while} command to repeat a song forever.

                    ### Exercise
                    Finish the never-ending song.
                example_code: |
                    ```
                    {define} song
                        {play} _

                    yes_or_no = {ask} 'Do you want to hear my never-ending song?'
                    {while} yes_or_no = 'yes'
                        {call} song
                        {print} 'ü•≥'
                    ```
            16:
                story_text: |
                    Upgrade your Old MacDonald code!

                    ### Exercise
                    Take your code from the 'Sing a Song' adventure and add musical notes to it!
                    You can make a function for each line in the song and call that function after the line is printed.
                    We defined the first line for you and called it in the code. Can you finish the whole song?
                example_code: |
                    ```
                    {define} line_1
                        {for} i {in} {range} 1 {to} 3
                            {play} G
                        {play} D
                        {for} i {in} {range} 1 {to} 2
                            {play} E
                        {play} D

                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    for i in range 1 to 3
                        animal = animals[i]
                        sound = sounds[i]
                        print 'Old MacDonald had a farm'
                        call line_1
                        print 'E I E I O!'
                        _
                    ```
            17:
                story_text: |
                    You can use the {elif} to create different options.

                    ### Exercise
                    Firstly, add colons to get the code to work.
                    Then finish this code by adding at least 2 other songs for other moods. For example a happy song and an angry song.
                example_code: |
                    ```
                    {define} scary_song
                        {for} i {in} {range} 1 {to} 3
                            {play} G
                        {play} E
                        {sleep} 2
                        {for} i {in} {range} 1 {to} 3
                            {play} F
                        {play} D

                    mood = {ask} 'Which emotion are you feeling?'
                    {if} mood {is} 'fear'
                        {call} scary_song
                    {elif} _
                    ```
            18:
                story_text: |
                    ### Exercise
                    Even in this last level of Hedy we can make some music! Be careful of all the syntax that is needed now.
                    Take a good look at how the functions are defined and called upon in the example code.
                    Finish the song!
                example_code: |
                    ```
                    {def} line_1():
                        {for} i {in} {range}(1, 5):
                            {play} A
                        {play} D
                        {play} F
                        {play} A

                    {def} line_2():
                        {for} i {in} {range}(1, 5):
                            {play} G
                        {play} C
                        {play} E
                        {play} G

                    {def} line_3():
                    _

                    {print} ('The drunken sailor')
                    {print} ('What shall we do with the drunken sailor?')
                    line_1()
                    line_2()
                    line_3()
                    {print} ('Early in the morning')
                    ```
    parrot:
        name: Papagei
        default_save_name: Papagei
        description: Erschaffe Dir deinen eigenen zahmen Papageien, der Dir alles nachplappert!
        levels:
            1:
                story_text: |
                    Erschaffe Dir deinen eigenen zahmen Papageien, der Dir alles nachplappert!
                example_code: |
                    ```
                    {print} Ich bin Hedy der Papagei!
                    {ask} Wie lautet Dein Name?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### √úbung
                    Kopiere den Beispiel-Code in deinen Eingabebereich, indem du den gelben Knopf dr√ºckst.
                    Bringe den Papagei dazu, eine andere Frage zu stellen? F√ºlle die L√ºcken im Beispiel aus!
                    **Extra** Du kannst den Papagei auch mehrere Fragen stellen lassen. Tippe noch ein paar Zeilen Code unter deinen eigenen Code.
                example_code_2: |
                    ```
                    {print} Ich bin Hedy der Papagei
                    {ask} _
                    {echo}
                    {echo}
            2:
                story_text: |
                    Lass Deinen zahmen Papageien noch etwas echter klingen!
                example_code: |
                    ```
                    {print} Ich bin Hedy der Papagei.
                    Name {is} {ask} Wie lautet Dein Name?
                    {print} Name
                    {sleep}
                    {print} Aaaaaak
                    {sleep}
                    {print} Name
                    ```
                story_text_2: |
                    ### √úbung
                    Du kannst Variablen verwenden, damit der Papagei mehr als nur deinen Namen sagt. Kannst du diesen Code vervollst√§ndigen?
            3:
                story_text: |
                    Bringe Deinem Papageien mit dem Befehl `{add}` neue W√∂rter bei.
                    ### √úbung
                    Wie kannst Du deinen Papagei dazu bringen, mehrere W√∂rter zu sagen?
                example_code: |
                    ```
                    W√∂rter {is} Aaaaaaak, Hedy
                    {print} Bring deinem Papagei etwas bei!
                    neues_Wort {is} {ask} Welches Wort willst du ihm beibringen?
                    {add} neues_Wort {to_list} W√∂rter
                    {print} üßí Sag neues_Wort, Hedy!
                    {print} ü¶ú W√∂rter {at} {random}
                    ```
            4:
                story_text: |
                    In diesem Level m√ºssen wir Anf√ºhrungszeichen bei den Befehlen `{ask}` und `{print}` benutzen.
                    ### √úbung
                    Vervollst√§ndige den Code, indem du Anf√ºhrungszeichen in die L√ºcken f√ºllst?
                example_code: |
                    ```
                    w√∂rter {is} kr√§chz, Hedy
                    {print} _ Trainiere deinen Papagei! _
                    neues_wort {is} {ask} _ Welches Wort m√∂chtest du ihm beibringen? _
                    {add} neues_wort {to_list} w√∂rter
                    {print} _ üßí Sage _ neues_wort _, Hedy!_
                    {print} _ ü¶ú _ w√∂rter {at} {random}
                    ```
            5:
                story_text: |
                    Belohne deinen Papagei, wenn er das richtige Wort sagt!

                    ### √úbung
                    Vervollst√§ndige den Code, indem du die 4 fehlenden Befehle erg√§nzt.
                example_code: |
                    ```
                    W√∂rter {is} Aaaaaaak, Hedy
                    {print} 'Bring deinem Papagei etwas bei!'
                    neues_Wort {is} {ask} 'Welches Wort willst du ihm beibringen?'
                    {add} neues_Wort {to_list} W√∂rter
                    gesagtes_Wort {is} W√∂rter {at} {random}
                    {print} 'üßí Sag ' neues_Wort ', Hedy!'
                    {print} 'ü¶ú ' gesagtes_Wort
                    _ gesagtes_Wort {is} neues_Wort _ 'üßí Gut gemacht, Hedy! üç™'
                    _ _ 'üßí Nein, Hedy! Sag ' neues_Wort
                    ```
    piggybank:
        name: Sparschwein
        default_save_name: Sparschwein
        description: Z√§hle dein Taschengeld!
        levels:
            12:
                story_text: |
                    In diesem Abenteuer lernst du, wie man ein digitales Sparschwein herstellt.

                    ### √úbung
                    Beende den Code, um zu berechnen, wie viel Geld du hast und wie lange du sparen musst, um dir zu kaufen, was du willst!
                    **(extra)** Vielleicht hast du schon etwas Geld gespart? Ziehe das von dem Betrag ab, den du noch sparen musst.
                example_code: |
                    ```
                    {print} 'Das digitale Sparschwein'
                    Wunsch = {ask} 'Was w√ºrdest du dir gerne kaufen?'
                    Preis = {ask} 'Wieviel kostet das?'
                    Gespartes = {ask} 'Wieviel Geld hast du schon gespart?'
                    Taschengeld = {ask} 'Wieviel Taschengeld bekommst du pro Woche?'
                    zu_sparen = Preis - Gespartes
                    Wochen = zu_sparen / Taschengeld
                    {print} 'Du kannst dir ein ' _ ' in ' _ ' Wochen kaufen.'
                    ```
            14:
                story_text: |
                    ### Exercise
                    In this level you can let Hedy tell you if you have saved up enough money!
                    Finish this code by filling in the blanks!
                example_code: |
                    ```
                    _ calculate_budget with wish, money, allowance
                        to_save = wish - money
                        weeks = to_save / allowance
                        {if} wish _ money
                            {print} 'You need to save up some more!'
                            {print} 'Youll need ' weeks ' more weeks.'
                        {else}
                            {print} 'Great! You have enough'
                            {print} 'Lets go shopping!'

                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'

                    {call} calculate_budget with _, _, _
                    ```
    pressit:
        name: Tastengedr√ºcke
        default_save_name: Gedr√ºckt
        description: Versuche eine Taste an einen Befehl zu binden!
        levels:
            5:
                story_text: |
                    In diesem Level gibt es ein neues Schl√ºsselwort: `{pressed}`!
                    Mit `{pressed}` kannst du mit den Tasten auf deiner Tastatur steuern, welche Zeilen verwendet werden.

                    ### √úbung
                    Schau dir das Beispiel an und f√ºge eine weitere Zeile hinzu, die auf Tasten reagiert.
                example_code: |
                    ```
                    {print} 'M√∂chtest du ein gutes (g) oder ein b√∂ses (b) Ende?'
                    {if} g {is} {pressed} {print} 'Sie lebten gl√ºcklich bis ans Ende ihrer Tage ‚ù§'
                    {else} {print} 'Der Prinz wurde von einem Nilpferd gefressen üò≠'
                    ```
                story_text_2: |
                    Sie k√∂nnen jeden Code mit einem Schl√ºssel verkn√ºpfen, einschlie√ülich der Zeichenschildkr√∂te.

                    ### √úbung
                    Kopieren Sie die Codezeilen, damit Sie eine gr√∂√üere Zeichnung erstellen k√∂nnen.
                example_code_2: |
                    ```
                    {if} x {is} {pressed} {forward} 50
                    {else} {turn} 90
                    ```
            7:
                story_text: |
                    Nun da du `{repeat}` kennengelernt hast, k√∂nnen wir Tasten mehrfach dr√ºcken!
                    Du kannst dazu nutzen, die Schildkr√∂te vorw√§rts gehen und sich drehen zu lassen.

                    ### √úbung
                    Der Code, den du in Level 5 gesehen hast, pr√ºft die Taste nur einmal. Kopiere den Beispielcode und f√ºge ein `{repeat}` hinzu, so dass du die Tasten mehrmals dr√ºcken kannst. Benutze diesen Code, um etwas Sch√∂nes zu zeichnen.
                example_code: |
                    ```
                    {if} x {is} {pressed} {forward} 15 {else} {turn} 90
                    ```
            9:
                story_text: "Da du jetzt wei√üt wie man Befehle kombiniert, kannst du mit Hilfe von `{pressed}` ein Touch-Type-Tool erstellen. \n\n### √úbung\nVervollst√§ndige den Code. Jedes Mal soll ein zuf√§lliger Buchstabe ausgew√§hlt werden. Diesen muss man dr√ºcken. Du bekommst einen Punkt f√ºr die richtige Taste und zwei Punkte Abzug f√ºr die falsche Taste.\n**(extra)** L√∂sche den Bildschirm nach jedem Buchstaben und zeige dem Benutzer, wie viele Punkte er erreicht hat.\n"
                example_code: "```\nPunkte = 0\nBuchstaben = a, b, c, d, e\n{repeat} 10 {times}\n    Buchstabe = _ _ _ \n    {print} 'Dr√ºck den Buchstaben ' Buchstabe\n    {if} Buchstabe {is} {pressed}\n    _\n    _\n    _\n```\n"
    print_command:
        name: '{print}'
        default_save_name: print
        description: Introduction print command
        levels:
            1:
                story_text: |
                    ## Der Drucken Befehl
                    Mit Hilfe des  `{print}`  Befehls kannst du den Text auf dem Bildschirm anzeigen.
                example_code: |
                    ```
                    {print} Hi there, programmer!
                    {print} Welcome to Hedy!
                    ```
                story_text_2: |
                    ### √úbung
                    In Hedy findest du √úbungen in jedem Abenteuer. Eine √úbung erlaubt dir, neue Befehle und Konzepte zu √ºben und Beispielprogrammen deinen eigenen Schwung zu geben.
                    In dieser √úbung wirst du eine pinke leere Fl√§che sehen. Du musst die leere Fl√§che mit etwas bef√ºllen, bevor du das Programm ausf√ºhren kannst.

                    F√ºge den `{print}`  Befehl in die leere Fl√§che ein und dann noch f√ºnf weitere Codezeilen. Jede Zeile muss mit dem `{print}` Befehl beginnen.
                    Viel Spa√ü!
                example_code_2: |
                    ```
                    _ Hello!
                    ```
            18:
                story_text: |-
                    We arrived at real Python code! That means we need to use parentheses with `{print}` and `{range}` from now on.
                    It also means you can use Hedy code from this level in any Python environment as long as you use the English commands. If you haven't until now, you can switch the toggle in the commands menu to do so.
                example_code: |
                    ```
                    {print}('Hello!')
                    {for} i {in} {range}(1, 10):
                        {print}('This is line ', i)
                    ```
                story_text_2: If you want to print more than one item, you need to separate them by commas.
                example_code_2: |
                    ```
                    temperature = 25
                    {print}('It is ', temperature, ' degrees outside')
                    ```

                    {print}('My name is ', name)
    quizmaster:
        name: Quizmeister
        default_save_name: Quizmeister
        description: Mache dein eigenes Quiz!
        levels:
            14:
                story_text: |
                    In diesem Abenteuer kannst du dein eigenes Quiz machen! F√ºll alle L√ºcken aus, f√ºge mehr Fragen hinzu und hab Spa√ü bei deinem eigenen Quiz!
                    Du kannst das Quiz machen √ºber was du m√∂chtest: dein Hobby, dein Lieblingstier, dein Lieblingsbuch, eigentlich √ºber alles!
                example_code: |
                    ```
                    {print} 'Erstelle dein eigenes Quiz'
                    punkte_a = 0
                    punkte_b = 0
                    {print} 'Frage'
                    {print} 'Antwortm√∂glichkeit A'
                    {print} 'Antwortm√∂glichkeit B'
                    antwort = {ask} 'Welche Antwort?'
                    {if} antwort == 'A'
                        punkte_a = punkte_a + 1
                    {if} antwort == 'B'
                        punkte_b = punkte_b + 1
                    {print} 'Ende des Quiz!'
                    {print} 'Lasst und die Ergebnisse ansehen!'
                    {if} punkte_a > punkte_b
                        {print} 'Du geh√∂rst zum A-Club'
                    {if} punkte_b > punkte_a
                        {print} 'Du geh√∂rst zum B-Club'
                    ```
    quotation_marks:
        name: '''quotation marks'''
        default_save_name: quotation_marks
        description: Introduction quotation marks
        levels:
            4:
                story_text: |
                    ## 'Quotation marks'
                    In level 4 `{ask}` and `{print}` have changed.
                    You must put text that you want to print between quotation marks.
                    This is useful, because now you can print all the words you want. Also the words you used to store something with `{is}`.
                    Most programming languages also use quotation marks when printing, so we are also getting a step closer to real programming!
                example_code: |
                    ```
                    {print} 'You need to use quotation marks from now on!'
                    answer {is} {ask} 'What do we need to use from now on?'
                    {print} 'We need to use ' answer
                    ```
                story_text_2: |
                    ## Contractions
                    Important! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.
                    Make sure to remove those apostrophes and change the spelling to I am or What is.
                    Check out the example code to see the wrong way of using apostrophes.
                example_code_2: |
                    ```
                    _ This is the wrong way of using apostrophes _
                    {print} 'I'm babysitting my sister's kids'
                    {print} 'What's more fun than that?'
                    ```
            12:
                story_text: |
                    **All texts need to be in quotation marks**
                    For this level on you will also have to use quotation marks when storing a text with `=`:
                example_code: |
                    ```
                    name = 'Hedy the Robot'
                    {print} 'Hello ' name
                    ```
                story_text_2: |
                    **All items in lists need quotation marks too**
                    Lists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.
                    This allows you to save two words as 1 item on the list, for example 'Black Widow'.
                example_code_2: |
                    ```
                    superheroes = 'Spiderman', 'Batman', 'Black Widow'
                    {print} superheroes {at} {random}
                    ```
                story_text_3: |
                    **All text after `{if}` comparisons need quotation marks too**
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy the Robot'
                        {print} 'Hi there!'
                    ```
                story_text_4: |
                    **Numbers don't need quotation marks**
                    For numbers, you do not use quotation marks in the `=`:
                example_code_4: |
                    ```
                    score = 25
                    {print} 'You got ' score
                    ```
    random_command:
        name: '{random}'
        default_save_name: random_command
        description: introducing at random command
        levels:
            3:
                story_text: |
                    ## An zuf√§llig
                    In diesem Level kannst du eine Liste mit dem `{is}` Befehl erstellen. Du kannst den Computer einen zuf√§lligen Eintrag aus dieser Liste ausw√§hlen lassen. Das machst du mit `{at} {random}`.
                example_code: |
                    ```
                    animals {is} dogs, cats, kangaroos
                    {print} animals {at} {random}
                    ```
                story_text_2: |
                    You can use the `{at} {random}` command in a sentence as well.
                example_code_2: |
                    ```
                    food {is} sandwich, slice of pizza, salad, burrito
                    {print} I am going to have a food {at} {random} for lunch.
                    ```
                story_text_3: |
                    ### √úbung
                    Probiere den `{at} {random}` Befehl aus und erschaffe deine eigene Spielesendung (wie die im Fernsehen), wo du eine T√ºr order einen Koffer ausw√§hlst und sich dort ein gro√üer Preis versteckt!
                    Kannst du es tun? Wir haben schon mal die ersten Zeilen in den Beispielcode eingef√ºgt.
                example_code_3: |
                    ```
                    {print} The big gameshow!
                    {print} There are 3 suitcases in front of you...
                    chosen {is} {ask} Which suitcase do you choose?
                    prices {is} _
                    _
                    ```
            16:
                story_text: |-
                    We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
                    We use square brackets to point out a place in a list. For example: `friends[1]` is the first name on the list of friends, as you can see in the first part of the example code. The second part of the example code shows you that we can also match 2 lists using the variable i.
                example_code: |
                    ```
                    friends = ['Ahmed', 'Ben', 'Cayden']
                    {print} friends[1] ' is the first friend on the list.'
                    {print} friends[2] ' is the second friend on the list.'
                    {print} friends[3] ' is the third friend on the list.'
                    #now we will match 2 lists using the variable i
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} friends[i] 's lucky number is ' lucky_numbers[i]
                    ```
                story_text_2: |-
                    Now that you've learned to use the brackets in lists, you can also start using the {at} {random} command in the Python way!
                    You simply type the name of your list with `[random]` behind it!
                example_code_2: |-
                    ```
                    fruit = ['apple', 'banana', 'cherry']
                    {print} fruit[random]
                    ```
    repeat_command:
        name: '{repeat}'
        default_save_name: repeat_command
        description: repeat command
        levels:
            7:
                story_text: |
                    ## Repeat! Repeat! Repeat!
                    Level 7 adds the `{repeat}` command.  `{repeat}` can be used to execute one line of code multiple times. Like this:

                    ### Exercise
                    Play around with the repeat command. Can you make the happy birthday song in only 3 lines of code instead of 4 now?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy is fun!'
                    ```
            8:
                story_text: |
                    ### Repeat commands and indentation
                    In this level you can repeat multiple lines of code with only 1 repeat command.
                    You do this by making a block of lines that you want to repeat.
                    The lines in this block will need **indentation** .
                    That means putting four spaces at the beginning of each line. You will also have to indent when you just want to create a block of one line.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} 'Hello everyone'
                        {print} 'This is all repeated 5 times'
                    ```
            9:
                story_text: |
                    Great job! You've reached another new level! In the previous level you've learned to use multiple lines of code in an {if} or {repeat} command. But you can't yet combine the two...
                    Good news! In this level you will be allowed to put an {if} inside an {if}, or inside a {repeat} command. Putting a block of code inside another block of code is called nesting.                     ``` Putting a block of code inside another block of code is called nesting.
                example_code: |
                    ```
                    answer = {ask} 'Are you ready to learn something new?'
                    {if} answer {is} yes
                        {print} 'Great! You can learn to use the repeat command in the if command!'
                        {print} 'Hooray!'
                        {print} 'Hooray!'
                        {print} 'Hooray!'
                    {else}
                        {print} 'Maybe you should practice some more in the previous level'
    repeat_command_2:
        name: '{repeat} 2'
        default_save_name: repeat_command_2
        description: repeat command 2
        levels:
            7:
                story_text: |
                    ## Repeat with other commands and with variables
                    You have practiced the `{repeat}` command in combination with the `{print}` command now, but did you know you could also use other commands with `{repeat}` ?
                    In this example code you can see that `{repeat}` can also be used with an `{ask}`, `{if}` or `{else}` command.
                example_code: |
                    ```
                    {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                    {if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'
                    {else} {repeat} 3 {times} {print} 'You have learned something new!'
                    ```
                story_text_2: |
                    Another interesting thing you can so with the `{repeat}` command is using variables to set the amount of times something should be repeated. In the example code you can see that we first ask the person how old they are.
                    Then, in line 3, the question is repeated 'age' times. So we have used the variable 'age' with the `{repeat}` command.
                example_code_2: |
                    ```
                    {print} 'Yay! It is your birthday!'
                    age = {ask} 'How old are you now?'
                    {repeat} age {times} {print} 'Hip Hip Hurray!'
                    ```
            8:
                story_text: |
                    ### In the block or not?
                    In this level you have to think carefully which lines of code should be in the block and which shouldn't.
                    For example: If you want to sing the song *the muffin man*. You only want the line with 'the muffin man' to be repeated twice.
                    This means the last line shouldn't start with indentation as it doesn't belong to the block.
                    If you do start the last line with indentation the song will turn out wrong.

                    ### Exercise
                    Each line in the example code starts with a blank. Remove the blanks and try to figure out which line need indentation and which don't to make the muffin man song.
                example_code: |
                    ```
                    _ {print} 'Do you know the muffin man?'
                    _ {repeat} 2 {times}
                    _ {print} 'The muffin man'
                    _ {print} 'Do you know the muffin man, who lives on Drury Lane?'
                    ```
    restaurant:
        name: Restaurant
        default_save_name: Restaurant
        description: Erstelle dein eigenes virtuelles Restaurant
        levels:
            1:
                story_text: |
                    Im ersten Level kannst du dein eigenes virtuelles Restaurant erstellen, und die Bestellungen deiner G√§ste aufnehmen.
                story_text_2: |
                    ### √úbung
                    Kopiere den Beispiel-Code in den Eingabebereich, indem du den gelben Knopf dr√ºckst.
                    F√ºlle zuerst die L√ºcken mit den richtigen Befehlen, um den Code zum Laufen zu bringen.
                    F√ºge dann mindestens 4 zus√§tzliche Zeilen zum Restaurant-Programm hinzu.
                    Frage die G√§ste, was sie trinken m√∂chten und frage, ob sie in bar oder mit Karte zahlen m√∂chten.
                    Denke die zum Schluss eine nette Verabschiedung f√ºr deine G√§ste aus.
                example_code_2: |
                    ```
                    {print} Willkommen in Hedys Restaurant üçü
                    _ Was w√ºrden Sie gerne bestellen?
                    {echo} Sie h√§tten also gerne
                    {print} Danke f√ºr Ihre Bestellung!
                    {print} Kommt sofort!
                    ```
            2:
                story_text: |
                    In Level 2 konntest du dein Restaurant mit Variablen erweitern. In Level 1 konnte Hedy nur die Bestellung einmal wiedergeben (mit `{echo}`) und sich nur das merken, was zuletzt bestellt wurde.
                    Jetzt kannst du Variablen verwenden und Hedy kann sich sowohl das Essen als auch den Belag merken!
                example_code: |
                    ```
                    {print} Willkommen in Hedys Restaurant!
                    {print} Heute gibt es Pizza oder Lasagne.
                    Essen {is} {ask} Was w√ºrden Sie gerne essen?
                    {print} Gute Wahl! Das ist mein Lieblingsessen!
                    Belag {is} {ask} H√§tten Sie die gerne mit Fleisch oder mit Gem√ºse?
                    {print} Das Essen mit Belag ist auf dem Weg!
                    ```
                story_text_2: |
                    ### √úbung
                    Kopiere deinen eigenen Restaurant-Code aus dem vorigen Level in den unteren Eingabebereich.
                    Repariere den Code, indem du die {ask} und {echo} Befehle ersetzt und Variablen benutzt, wie du in diesem Level gelernt hast.

                    Nun da dein Code wieder l√§uft, ist es Zeit etwas Weiteres hinzu zu f√ºgen.
                    Schau dir die letzte Zeile des Beispiel-Codes an: `{print} essen mit belag ist auf dem Weg!`
                    In dieser einzelnen Zeile wurden 2 Variablen benutzt, um die Bestellung zusammen zu fassen.
                    F√ºge nun deine eigene Zusammenfassung der Essen- und Getr√§nkebestellung deiner G√§ste hinzu.

                    **Extra** Nun da du gelernt hast Variablen zu benutzen, kannst du so viele Variablen in einer Zeile nutzen wie du magst. Kannst du mehr Variablen zu deinem Code hinzuf√ºgen, wie hier essen oder zum Mitnehmen, bar oder Karte, mit oder ohne Strohhalm usw.?
            3:
                story_text: |
                    F√§llt es dir schwer zu entscheiden, was du gerne zum Abendessen h√§ttest? Du kannst das Hedy machen lassen!
                    F√ºge einfach Listen deiner Lieblingsgerichte (oder der von dir nicht so gemochten Gerichte) hinzu und Hedy kann zuf√§llig f√ºr dich ein Abendessen ausw√§hlen.
                    Du kannst dir auch einen Spa√ü draus machen, indem du Hedy den Preis f√ºr dein Abendessen ausw√§hlen l√§sst! Was wird wohl rauskommen?
                example_code: |
                    ```
                    gerichte {is} Spaghetti, Rosenkohl, Hamburger
                    {print} Du bekommst gerichte {at} {random} heute abend!
                    preise {is} 1 Euro, 10 Euro, 100 Euro
                    {print} Das macht preise {at} {random} bitte.
                    ```
                story_text_2: |
                    ### √úbung
                    Erstelle nun deine eigene Version des Zufallsrestaurants.
                    Erstelle selbst eine Liste aller Vorspeisen, Hauptgerichte, Nachtische, Getr√§nke und Preise.
                    Nutze dann `{print}` und `{at} {random}` Befehle, um dem Kunden zu sagen, was heute auf seinem Men√º steht.
                example_code_2: |
                    ```
                    {print} Willkommen in deinem eigenen Zufallsrestaurant!
                    vorspeisen {is} _
                    hauptgerichte {is} _
                    nachspeisen {is} _
                    getr√§nke {is} _
                    preise {is} _
                    _
                    ```
            4:
                story_text: |
                    ### √úbung 1
                    F√ºge die Anf√ºhrungszeichen zum Code hinzu, um ihn zum Laufen zu bringen! Sei vorsichtig: Variablen sollten nicht in Anf√ºhrungszeichen sein.

                    ### √úbung 2
                    Gehe zur√ºck zum vorigen Level und kopiere deinen Restaurant-Code. Bringe diesen Code in diesem Level zum Laufen, indem du Anf√ºhrungszeichen an den richtigen Stellen hinzuf√ºgst.
                example_code: |
                    ```
                    _ F√ºge Anf√ºhrungszeichen in diesen Code ein _
                    {print} Willkommen im Restaurant Chez Hedy!
                    {print} Heute gibt es Pizza oder Lasagne.
                    Essen {is} {ask} Was w√ºrden Sie gerne essen?
                    {print} Gute Wahl! Die  Essen  ist mein Favorit!
                    Belag {is} {ask} H√§tten Sie gerne Fleisch oder Gem√ºse als Belag?
                    {print} Essen  mit  Belag  ist auf dem Weg!
                    Getr√§nke {is} {ask} Was w√ºrden Sie gerne dazu trinken?
                    {print} Danke f√ºr Ihre Bestellung.
                    {print} Ihre  Essen  und  Getr√§nke  kommen sofort!
                    ```
            5:
                story_text: |
                    In diesem Level erlaubt dir der `{if}`-Befehl deinen Kundinnen oder Kunden Fragen zu stellen (`{ask}`) und verschiedene Antworten zu geben.
                    In dem unteren Beispiel siehst du, dass du die Kundin oder den Kunden fragen (`{ask}`) kannst, ob (`{if}`) sie oder er die Tagesgerichte erfahren m√∂chte, und Hedy kann dementsprechend antworten.
                example_code: |
                    ```
                    {print} 'Willkommen im Restaurant Chez Hedy'
                    Tagesgericht {is} {ask} 'W√ºrden Sie gerne das heutige Tagesgericht erfahren?'
                    {if} Tagesgericht {is} ja {print} 'Das Tagesgericht ist Nudeln mit Tomatenso√üe.' {else} {print} 'Ok, kein Problem.'
                    Essen {is} {ask} 'Was w√ºrden Sie gerne essen?'
                    {print} 'Einmal ' Essen ', kommt sofort!'
                    Getr√§nk {is} {ask} 'Was w√ºrden Sie gerne dazu trinken?'
                    {if} Getr√§nk {is} Cola {print} 'Tut mir leid, die Cola ist aus!' {else} {print} 'Gro√üartige Wahl!'
                    etwas {is} {ask} 'H√§tten Sie gerne noch etwas?'
                    {print} 'Lassen Sie mich Ihre Bestellung noch einmal wiederholen...'
                    {print} 'Einmal ' Essen
                    {if} Getr√§nk {is} Cola {print} 'und...' {else} {print} 'Einmal ' Getr√§nk
                    {if} etwas {is} nein {print} 'Das ist alles!' {else} {print} 'Einmal ' etwas
                    {print} 'Danke f√ºr Ihre Bestellung und guten Appetit!'
                    ```
            6:
                story_text: |
                    In diesem Level kannst du Mathe verwenden um den Gesamtpreis einer Bestellung auszurechnen. Da macht dein virtuelles Restaurant realistischer.
                example_code: |
                    Du kannst einen einfachen Restaurant Code erstellen. Das geht so:
                    ```
                    {print} 'Willkommen im Restaurant Chez Hedy'
                    {print} 'Hier ist unsere Karte:'
                    {print} 'Unsere Hauptgerichte sind Pizza, Lasagne oder Spaghetti'
                    haupt = {ask} 'Welches Hauptgericht m√∂chten Sie?'
                    preis = 0
                    {if} haupt {is} Pizza preis = 10
                    {if} haupt {is} Lasagne preis = 12
                    {if} haupt {is} Spaghetti preis = 8
                    {print} 'Sie bestellten ' haupt
                    {print} 'Das kostet ' preis ' Euro, bitte'
                    {print} 'Danke, genie√üen Sie Ihre Mahlzeit!'
                    ```
            7:
                story_text: |
                    In diesem Level hast du gelernt, wie du den Befehl `{repeat}` verwenden kannst, um eine Codezeile um eine bestimmte Anzahl zu wiederholen.
                    Du kannst das in deinem Restaurant verwenden um mehrere Leute nach ihren Essensw√ºnschen zu fragen (`{ask}`).

                    ### √úbung
                    Kannst du die L√ºcken f√ºllen? Hedy muss diese Frage so oft wiederholen wie Leute da sind. Wenn also 5 Leute da sind, muss die Frage 5 mal gestellt werden.
                    **(extra)** Erweitere deinen Code mit mehr Fragen, zum Beispiel zu Getr√§nken oder So√üen.
                example_code: |
                    ```
                    {print} 'Willkommen im Restaurant Chez Hedy'
                    G√§ste = {ask} 'Wie viele Leute kommen heute zu uns?'
                    ```
            8:
                story_text: |
                    In diesem Level kannst du dein virtuelles Restaurant ausbauen, indem du mehrere Zeilen Code wiederholst. Das geht so:

                    ### √úbung
                    Dieser Code kann mit mehr Gerichten auf der Karte erweitert werden, zum Beispiel einem Getr√§nkeangebot, und/oder mehreren G√§ngen oder Nachtisch. F√ºge mindestens ein Gericht hinzu.
                    **(extra)** F√ºge so viele Gerichte hinzu wie du magst!
                example_code: |
                    ```
                    {print} 'Willkommen im Restaurant Chez Hedy!'
                    G√§ste = {ask} 'Zu wie vielen kommen Sie heute zu uns?'
                    {print} 'Gro√üartig!'
                    {repeat} G√§ste {times}
                        Essen = {ask} 'Was w√ºrden Sie gerne bestellen?'
                        {print} Essen
                    {print} 'Danke f√ºr Ihre Bestellung!'
                    {print} 'Guten Appetit!'
                    ```
            9:
                story_text: "In diesem Level kannst du Verschachtelung benutzen, um dein Restaurant realistischer und spa√üiger zu machen!\n\n### √úbung\nDie Einr√ºckung im Beispiel-Code wurde entfernt.\nKannst du herausfinden wie viel Einr√ºckung jede Zeile ben√∂tigt, damit der Code ordentlich funktioniert?\nFalls der Kunde Pizza bestellt, sollte Hedy nicht fragen, welche So√üe der Kunde m√∂chte.\n\n**(extra)** Ein Restaurant lagert nicht alle m√∂glichen So√üen. Erstelle eine Liste mit verf√ºgbaren So√üen und gib eine Antwort bei jeder Bestellung, ob du sie auf Lager hast. <br>\n**(extra)** Pizzen haben Bel√§ge. Frag die Kunden, was sie m√∂chten.<br>\n **(extra)** M√∂chten die Kunden etwas trinken? Frag sie! <br>                    \n"
                example_code: |
                    ```
                    {print} 'Willkommen im Restaurant Chez Hedy!'
                    Leute = {ask} 'Wie viele Leute kommen heute?'
                    {print} 'Gro√üartig!'
                    Preis = 0
                    {repeat} Leute {times}
                    _ Essen = {ask} 'Was m√∂chten Sie bestellen?'
                    _ {print} Essen
                    _ {if} Essen {is} Fritten
                    _ Preis = Preis + 3
                    _ Sauce = {ask} 'Welche Sauce m√∂chten Sie f√ºr die Fritten?'
                    _ {if} Sauce {is} keine
                    _ {print} 'keine Sauce'
                    _ {else}
                    _ Preis = Preis + 1
                    _ {print} 'mit ' Sauce
                    _ {if} Essen {is} Pizza
                    _ Preis = Preis + 4
                    {print} 'Das macht ' Preis ' Euro'
                    {print} 'Genie√üen Sie Ihre Mahlzeit!'
                    ```
            10:
                story_text: |
                    In diesem Level wirst du lernen, wie du leicht nach Bestellungen f√ºr verschiedene G√§nge fragst.

                    ### √úbung 1
                    Vervollst√§ndige den Code mit einem `{ask}` in den L√ºcken, sodass der Kunde f√ºr jeden Gang gefragt wird, was er essen m√∂chte.
                example_code: "```\ng√§nge = Vorspeise, Hauptgericht, Nachtisch\n{for} gang {in} g√§nge\n    {print} 'Was ist Ihre Bestellung als ' gang '?'\n    _ \n    _\n```\n"
                story_text_2: |
                    ### √úbung
                    Nat√ºrlich kannst auch f√ºr mehrere Personen bestellen!
                    Kannst du die richtige Anzahl an Leerzeichen zur Einr√ºckung vor jeder Zeile hinzuf√ºgen, damit der Code richtig l√§uft?
                    Tipp: manche Zeilen brauchen gar keine Einr√ºckung.
                example_code_2: |
                    ```
                    _ Kurse = Vorspeise, Hauptgericht, Nachtisch
                    _ Namen = Timon, Onno
                    _ {for} Name {in} Namen
                    _ {for} Kurs {in} Kurse
                    _ Essen = {ask} Name ', Was m√∂chten Sie als ' Kurs '?'
                    _ {print} Name ' bestellt ' Essen ' als ' Kurs
                    ```
            11:
                story_text: |
                    Wir k√∂nnen `{for}` mit `{range}` nutzen, um die Bestellungen mehrerer G√§ste ordentlich auszugeben.

                    ### √úbung
                    Beende den Restaurant-Code, sodass du nach den Bestellungen mehrerer G√§ste fragen kannst. Gib jedes Mal die Bestellnummer aus: 'Bestellung 1', 'Bestellung 2', usw.
                    Bist du dir nicht sicher, wie du das anstellen sollst? Schau dir deinen Level 8 Code an.

                    **(extra)** In Level 9 benutzte das Restaurant auch Preise. Das kannst du hier ebenfalls hinzuf√ºgen!
                example_code: |
                    ```
                    {print} 'Willkommen im Restaurant Hedy!'
                    Leute = {ask} 'F√ºr wie viele Leute m√∂chten Sie bestellen?'
                    {print} 'Also m√∂chten Sie f√ºr' Leute ' Leute bestellen.'
                    {print} "Los geht's!"
                    ```
            12:
                story_text: |
                    Ab diesem Level kannst du Dezimalzahlen verwenden, um deine Speisekarte realistischer zu machen.

                    Kannst du dir Code ausdenken mit dem du deinen Freunden und deiner Familie 15% Rabatt geben kannst?
                example_code: |
                    ```
                    preis = 0.0
                    essen = {ask} 'Was m√∂chten Sie bestellen?'
                    trinken = {ask} 'Was m√∂chten Sie trinken?'
                    {if} essen {is} 'Hamburger'
                        preis = preis + 6.50
                    {if} essen {is} 'Pizza'
                        preis = preis + 5.75
                    {if} trinken {is} 'Wasser'
                        preis = preis + 1.20
                    {if} trinken {is} 'Sprudel'
                        preis = preis + 2.35
                    {print} 'Das macht ' preis ' Euro, bitte'
                    ```
            13:
                story_text: |
                    In diesem Level lernst du neue Befehle, mit denen du deinen Code noch weiter ausbauen kannst.

                    ### √úbung 1
                    Setze ein `{and}` und ein `{or}` an die logische Stelle im Programm.

                    ### √úbung 2
                    Erweitere dein Restaurant mit mindestens einem weiteren `{and}` und einem `{or}`.
                    Erstelle zum Beispiel einen speziellen Rabattcoupon, der nur f√ºr Pizza gilt, oder gib deinen Kunden ein kostenloses Getr√§nk
                    mit Pommes und Pfannkuchen. Oder nat√ºrlich etwas ganz anderes!
                example_code: |
                    ```
                        {print} 'Das ist unser Rabattmen√º'
                        preis = preis - 3
                    {if} getr√§nk {is} 'Wasser' _ getr√§nk {is} 'Saft'
                        {print} 'Das ist eine gesunde Wahl'
                    {print} 'Das kostet dann ' preis '  Euro'
                    ```
            15:
                story_text: |
                    With the `{while}` you can make sure your costumers can keep adding orders until they are done.

                    ### Exercise
                    Correctly add the `{while}` command to this code.
                example_code: |
                    ```
                    {print} 'Willkommen bei McHedy'
                    mehr = 'ja'
                    _
                        Bestellung = {ask} 'Was w√ºrden Sie gerne bestellen?'
                        {print} Bestellung
                        mehr = {ask} 'W√ºrden Sie gerne noch etwas bestellen?'
                    {print} 'Dankesch√∂n!'
                    ```
    rock:
        name: Schere, Stein, Papier
        default_save_name: Stein
        description: Mache dein eigenes Schere, Stein, Papier-Spiel
        levels:
            1:
                story_text: |
                    In Level 1 kannst du mit einem Schere, Stein, Papier-Spiel beginnen.

                    Mit `{ask}` kannst du eine Wahl treffen und mit `{echo}` kannst du diese Wahl wiederholen.
                example_code: |
                    ```
                    {print} Was w√§hlst du?
                    {ask} W√§hle aus Stein, Schere oder Papier
                    {echo} Also war deine Wahl:
                    ```
                story_text_2: |
                    ### √úbung
                    Anstelle von W√∂rtern kannst du auch Emoji benutzen ‚úä‚úã‚úå
                    Kannst du Code erstellen, der Emoji benutzt?
                example_code_2: |
                    ```
                    {print} Was w√§hlst du?
                    {ask} W√§hle aus _
                    {echo} Also war deine Wahl:
                    ```
            2:
                story_text: |
                    In diesem Level kannst du √ºben, Variablen zu benutzen, damit du im n√§chsten Level das Spiel Schere, Stein, Papier machen kannst!
                example_code: |
                    ```
                    _ {is} {ask} Stein, Schere oder Papier?
                    {print} Ich w√§hle
                    ```
            3:
                story_text: |
                    Du kannst den `{at} {random}` Befehl verwenden, um den Computer Stein, Papier oder Schere w√§hlen zu lassen!

                    ### √úbung
                    Vervollst√§ndige den Code, in dem du den `{at} {random}` Befehl verwendest.
                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} choices {at} {random}
                    ```
                story_text_2: |
                    ### √úbung
                    Kopiere den Beispiel-Code und f√ºlle die L√ºcken, um einen extra Spieler zu diesem Spiel hinzu zu f√ºgen.

                    **Extra** Gerade hei√üen die Spieler nur Spieler 1 und Spieler 2. Kannst du frage-Befehle hinzuf√ºgen (mit Variablen nat√ºrlich), um die Spielernamen zu erfragen?
                    Auf diese Weise kannst du z.B. folgende Ausgabe erzeugen: `James w√§hlt... Papier`
                example_code_2: |
                    ```
                    Auswahl {is} Stein, Schere, Papier
                    {print} Spieler 1 w√§hlt... Auswahl {at} {random}
                    {print} Spieler 2 _
                    ```
            4:
                story_text: |
                    In diesem Level k√∂nnen wir Stein Schere Papier weiter programmieren. Aber wenn du Text hinzuf√ºgen m√∂chtest, musst du auch hier Anf√ºhrungszeichen verwenden.
                    ### √úbung
                    Fill in quotation marks on the blanks. Mind that the variable `choices` should be outside the quotes.
                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} _The computer chooses..._ choices {at} {random}
                    ```
            5:
                story_text: |
                    In diesem Level k√∂nnen wir bestimmen, ob es unentschieden war oder nicht. Daf√ºr brauchst du den neuen `{if}` Code.

                    ### √úbung
                    Vervollst√§ndige den Code, indem du die L√ºcken f√ºllst.
                    * Lass den Computer eine zuf√§llige Wahl treffen
                    * Frage den Spieler, was er w√§hlt
                    * F√ºlle die korrekten Variablen in Zeile 4 und 5
                    * Programmiere Zeile 6 so, dass Hedy pr√ºfen kann, ob es unentschieden war oder nicht
                example_code: |
                    ```
                    auswahl {is} Schere, Stein, Papier
                    computer_wahl {is} _
                    deine_wahl {is} _
                    {print} 'Du w√§hlst ' _
                    {print} 'Der Computer w√§hlte ' _
                    {if} _ {is} _ {print} 'Unentschieden!' {else} {print} 'kein Unentschieden'
                    ```

                    Ersetze die Unterstriche (_) mit dem richtigen Code, um zu sehen, ob das Spiel unentschieden ausgeht.
            9:
                story_text: |
                    In diesem Level kannst du das ganze Stein-Schere-Papier-Programm programmieren, indem du `{if}` Befehle verschachtelst.

                    ### √úbung
                    Kannst du den Code vervollst√§ndigen? Das Programm muss f√ºr jede Kombination sagen, wer gewonnen hat.

                    **(extra)** M√∂chtest du mehr als eine Runde spielen? Erweitere den Code, sodass du mehrere Runden spielen kannst. Du kannst sogar ein `{ask}` verwenden, um die Nutzer zu fragen, wie viele Runden sie spielen m√∂chten.
                example_code: |
                    ```
                    Auswahl = Schere, Stein, Papier
                    deine_Wahl = {ask} 'Was w√§hlst du?'
                    {print} 'Du w√§hlst ' deine_Wahl
                    Computer_Wahl = Auswahl {at} {random}
                    {print} 'Der Computer w√§hlt ' Computer_Wahl
                    {if} Computer_Wahl {is} deine_Wahl
                        {print} 'Unentschieden'
                    {if} Computer_Wahl {is} 'Stein'
                        {if} deine_Wahl {is} 'Papier'
                            {print} 'Du gewinnst!'
                        {if} deine_Wahl {is} 'Schere'
                            {print} 'Du verlierst!'
                    # mach den Beispiel-Code fertig
                    ```
            10:
                story_text: |
                    Bist du zu faul, um das Spiel selbst zu spielen? Lass Hedy es f√ºr dich spielen!
                    Du musst nur die Namen der Spieler ausf√ºllen und sie bekommen eine zuf√§llige Auswahl.

                    ### √úbung 1
                    Vervollst√§ndige das Programm, indem du eine Liste von Namen ausf√ºllst.

                    ### √úbung 2
                    F√ºge einen Computerspieler hinzu, der mit jedem Spieler ausw√§hlt.

                    **(extra)** Gehe zur√ºck zu deinem Code und entscheide, wer in jeder Runde gewinnt: der Computer oder die benannte Person.
                example_code: |
                    ```
                    Auswahl = rock, paper, scissors
                    Personen = _
                    {for} Spieler {in} Personen
                         {print} Spieler ' w√§hlt ' Auswahl {at} {random}
                    ```
            13:
                story_text: |
                    Mit dem Befehl `{and}` kannst du deinen Schere, Stein, Papier Code k√ºrzen! Sieh dir den Beispielcode an.

                    ### √úbung
                    Beende den Code so, dass immer ein Gewinner ermittelt wird. F√ºhre dein Code ein paar Mal aus, um zu √ºberpr√ºfen, ob immer ein Gewinner ausgegeben wird.
                example_code: |
                    ```
                    Optionen = 'Stein', 'Papier', 'Schere'
                    deine_auswahl = {ask} 'Was w√§hlst du?'
                    computer_auswahl = Optionen {at} {random}
                    {print} 'Du w√§hlst ' deine_auswahl
                    {print} 'Der Computer w√§hlt ' computer_auswahl
                    {if} computer_auswahl {is} deine_auswahl
                        {print} 'Unentschieden'
                    {if} computer_auswahl {is} 'Stein' {and} deine_auswahl {is} 'Papier'
                        {print} 'Du gewinnst!'
                    {if} computer_auswahl {is} 'Stein' {and} deine_auswahl {is} 'Schere'
                        {print} 'Der Computer gewinnt!'
                    _
                    ```
            15:
                story_text: |
                    ### √úbung
                    Spiele, bis du den Computer besiegst! Aber mach zuerst den Beispiel-Code fertig...
                example_code: |
                    ```
                    gewonnen = 'nein'
                    Auswahl = 'Schere', 'Stein', 'Papier'
                    {while} gewonnen == 'nein'
                        deine_Wahl = {ask} 'Was w√§hlst du?'
                        Computer_Wahl = Auswahl {at} {random}
                        {print} 'Du w√§hltest ' deine_Wahl
                        {print} 'Der Computer w√§hlte ' Computer_Wahl
                        {if} Computer_Wahl == deine_Wahl
                            {print} 'Unentschieden!'
                        {if} Computer_Wahl == 'Stein' {and} deine_Wahl == 'Schere'
                            {print} 'Du hast verloren!'
                        {if} Computer_Wahl == 'Stein' {and} deine_Wahl == 'Papier'
                            {print} 'Du hast gewonnen!'
                            gewonnen = 'ja'
                    _
                    ```
    rock_2:
        name: Rock, paper, scissors 2
        default_save_name: rock_2
        description: Part 2 of rock, paper, scissors
        levels:
            2:
                story_text: |
                    Jetzt, da du gelernt hast, wie man den `{ask}` Befehl einsetzt, kannst du den Stein, Schere, Papier Code auch interaktiv machen!

                    ### √úbung
                    Mache den Stein, Schere, Papier Code interaktiv, in dem du den `{ask}` Befehl und eine Frage zu deinem Stein, Schere, Papier Code hinzuf√ºgst.
                example_code: |
                    ```
                    choice is _
                    {print} I choose choice
                    ```
    secret:
        name: Superspion
        default_save_name: Sprache
        description: Schreibe deinen eigenen Spion-Code
        levels:
            12:
                story_text: |
                    In diesem Abenteuer kannst du deinen eigenen Superspion-Code erstellen. Verschl√ºssele eine Nachricht, die nur der richtige Agent entschl√ºsseln kann.
                    Wenn der Feind versucht, den Code zu knacken, wird er falsche Informationen erhalten, um seine Zeit zu verschwenden.

                    ### √úbung 1
                    Erstelle deinen eigenen Geheimcode f√ºr deinen Superspion und gib beide Teile nur an den echten Spion zur√ºck.

                    ### √úbung 2
                    F√ºge dem Code eine dritte Komponente hinzu, zum Beispiel ein Kleidungsst√ºck oder einen Gegenstand.
                example_code: |
                    ```
                    Name = {ask} 'Wie hei√üt du?'
                    if Name {is} '_'
                        a = 'Geh zum Flughafen '
                    {else}
                        a = 'Geh zum Bahnhof '
                    Passwort =  {ask} 'Wie lautet das Passwort?'
                    {if} Passwort {is} _
                        b = 'Morgen um 2 Uhr'
                    {else}
                        b = 'Morgen um 10 Uhr'
                    {print} _ _ _
                    ```
            13:
                story_text: |
                    Wir k√∂nnen den Superspy-Code mit `{and}` vereinfachen, so dass wir nur einen `{if}` ben√∂tigen.

                    ### √úbung 1
                    Vervollst√§ndige den Code, indem du den richtigen Befehl in das leere Feld eintr√§gst. Tipp: Der Superspion muss BEIDE Fragen richtig beantworten, bevor er die vertraulichen Informationen erh√§lt!

                    ### √úbung 2
                    Wir wollen den Gegner noch mehr verwirren! Erstelle eine Liste mit falschen Antworten und w√§hle eine zuf√§llig aus, wenn eine falsche Antwort gegeben wird.
                example_code: |
                    ```
                    Name = {ask} 'Wie hei√üt du?'
                    Passwort = {ask} 'Wie lautet dein Passwort?'
                    {if} Name {is} 'Agent007' _ Passwort {is} 'STRENGGEHEIM'
                        {print} 'Gehe um 2 Uhr zum Flughafen'
                    {else}
                        {print}  'Gehe um 10 Uhr zum Bahnhof'
                     ```
    simon:
        name: Simon Says
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    Let's make a game of Simon Says! Simon Says is a memory game in which the player will be given a color. They have to repeat that color back.
                    If they get it right a color is added to the sequence, so they now have to remember 2 colors, then 3, then 4 etc. the game stops as soon as the player makes a mistake.

                    ### Exercise
                    In this first part of the Simon Says adventure, we'll let the computer pick a random color and add it to a list.

                    ***Make 2 lists*** First, make a list called `colors` and fill it with the colors red, yellow, green and blue.
                    Then make a list called `simon_sequence`. This list will be used as the answer.
                    At the start of the game this lists need to be empty. unfortunately, we can't create an empty list (yet), so we'll fill it with the words 'empty' and 'list' and we'll remove them from the list immediately.

                    ***Create a function that adds a color to the sequence*** Now that we have an empty list called simon_sequence, we can start filling it with random colors.
                    We do that with a function, so we can call it everytime there's a new level in our game. Create a function called `add_random_color`.
                    Then create the variable random_color and set it to a random color. Next, add this random color to the simon_sequence.

                    ***Create a function that shows the simon_sequence*** Start by naming the new function `show_simon_sequence` with `level` as an argument. Now we want to show as many colors as the level we are in (in level 1 you see 1 color, in level 2 you see 2 colors etc).
                    So we repeat `level` times, to print the `simon_sequence[i]`. Each time a color is shown, wait for 1 second and then clear the screen.

                    ***Test your program*** Before you go to the next level, test if the functions are working by calling both of the functions. If they're working you should see a random color in your output screen.
                    Remove this testing part of your code, copy the code and continue to the next tab to learn more about the simon says game!
                example_code: |
                    ```
                    # Make 2 lists
                    colors = _
                    _ = ['empty', 'list']
                    {remove} _ {from} simon_sequence
                    {remove} _

                    # Create a function that adds a color
                    _ add_random_color
                        _
                        {add} _

                    # Create a function that shows the simon_sequence
                    {define} _
                        {for} i {in} {range} 1 {to} _
                            {print} _
                            _
                            _

                    # Test your program
                    {call} _
                    {call} show_simon_sequence {with} 1
                    ```
    simon_2:
        name: Simon Says 2
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    We'll continue with our Simon Says game!

                    ### Exercise
                    ***Paste your code here*** Paste your code from the previous level here. Don't forget to remove the part that was just used for testing the functions.

                    ***Create a function that creates the player_sequence*** The list `player_sequence` is used to capture the answers of the player. First we define the function with the argument level.
                    Next, we ask level times what the color is that they choose. We call that variable `answer`. Then we add the variable `answer` to the list player_sequence.

                    ***Setting up the game*** Before we program the game in the next tab, we'll need some starting variables. First, we'll set the variable `level` to 1 and the variable `game_over` to False.
                    Then we make an introduction for the game. We'll print 'Welcome to Simon Says!' and clear the screen after 1 second.

                    ***Continue to the next tab to finish the game!**** Don't forget to copy your code and take it with you to the next tab.
                example_code: |
                    ```
                    # Paste your code here


                    # Create a function that creates the player_sequence
                    {define} _
                        {for} _
                            _ 'What is color number ' i '?'
                            {add} answer {to} _

                    # Set up
                    level = _
                    game_over = _
                    {print} _
                    _ 1
                    _
                    ```
    simon_3:
        name: Simon Says 3
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    In this tab we'll program the game of Simon Says!

                    ### Exercise
                    ***Paste your code*** Copy your code from the previous tab and paste it here.

                    ***Program the game*** We start by making sure the game goes on while the game isn't over. Then we print what level the player is on, we use the variable level for that. We only show that for 1 second and then we clear the screen again.
                    Now, we have to create the empty list player_sequence. We've already programmed how to fill the list, with our function `player_sequence`, but we never made the list itself. To create the list we use the same trick as we did in the previous tab.
                    We'll make a list with the words 'empty' and 'list' on it, and then we remove both these words. Next, we'll call all of the 3 functions that we've created.
                    Lastly, we'll have to check if the player gave the correct answers (so if the player_sequence and the simon_sequence are the same).
                    If that's the case, we'll compliment the player. Wait for 1 second and increase the level with 1.
                    Did the player give the wrong answer, we'll tell them and end the game by setting game_over to 'True'

                    ***Enjoy your game!*** Great job! Does your game not work? Use the ladybug button to debug your code!
                example_code: |
                    ```
                    # Paste your code here

                    # The game
                    {while} game_over _
                        {print} _
                        _
                        _
                        _ = ['empty', 'list']
                        {remove} _
                        {remove} _
                        {call} _
                        {call} _ {with} _
                        {call} _ {with} _
                        {if} player_sequence == _
                            _
                            _
                            _
                        {else}
                            _
                            game_over = _
                    ```
    sleep_command:
        name: '{sleep}'
        default_save_name: sleep_command
        description: introducing sleep command
        levels:
            2:
                story_text: |
                    Ein weiterer neuer Befehl in diesem Level ist der `{sleep}` Befehl. Er pausiert dein Programm f√ºr eine Sekunde. Wenn du eine Zahl hinter den {sleep} Befehl schreibst, pausiert dein Programm f√ºr diese Anzahl an Sekunden.

                    ### √úbung
                    √úbe den neuen Befehl, in dem du dir eigenen Code ausdenkst, der mindestens 3 mal den Befehl {sleep} verwendet. Mit jeden {sleep} Befehl soll die Pausierzeit anders sein.
                example_code: |
                    ```
                    {print} My favorite colour is...
                    {sleep} 2
                    {print} green!
                    ```
    songs:
        name: Singe ein Lied!
        default_save_name: Song
        description: Gib einen Songtext aus
        levels:
            6:
                story_text: |
                    In Liedern wiederholt sich oft einiges. Manchmal basiert die Wiederholung auch darauf, dass etwas gez√§hlt wird.
                    So zum Beispiel im Lied √ºber die Bierflaschen. Dies ist eigentlich ein englisches Lied und hat den Titel "99 bottles of beer". Dieses Lied kannst du mit ein klein wenig Mathematik programmieren.

                    Tipp: Nutze die Laut-Vorlesen-Funktion um Hedy das Lied f√ºr dich singen zu lassen.

                    ### √úbung
                    Du kannst nun die Zeilen 2 bis 7 so oft wie du m√∂chtest wiederholen, indem du sie kopierst.
                example_code: |
                    ```
                    Strophe = 99
                    {print} Strophe ' Flaschen Bier an der Wand'
                    {print} Strophe ' Flaschen Bier'
                    {print} 'Nimm eine runter, reich sie herum'
                    Strophe = Strophe - 1
                    {print} Strophe ' Flaschen Bier an der Wand'
                    {sleep}
                    ```
                story_text_2: |
                    Dieses Kinderlied z√§hlt runter, von 5 kleinen Affen bis zu 1 Affe.
                    Wenn du die Zeilen 2 bis 7 kopierst und unter dem Code einf√ºgst, kannst du das ganze Lied singen!
                example_code_2: |
                    ```
                    nummer = 6
                    nummer = nummer - 1
                    {print} nummer ' kleine Affen springen auf dem Bett'
                    {print} 'Einer fiel runter und stie√ü sich den Kopf'
                    {print} 'Mama rief den Arzt und der Arzt sagte'
                    {print} 'KEINE KLEINEN AFFEN SPRINGEN MEHR AUF DEM BETT!'
                    {sleep}
                    ```
            7:
                story_text: "In Liedern wiederholt sich oft einiges. So auch im Lied \"Baby Hai\"! Wenn du es singst, singst du eigentlich immer das gleiche:\n\nBaby Hai tututudutudu <br>\nBaby Hai tututudutudu <br>\nBaby Hai tututudutudu <br>\nBaby Hai \n\n### √úbung\nKannst du das Lied mit Hilfe des `{repeat}` Befehls ausgeben? Vervollst√§ndige den Code, indem du die L√ºcken f√ºllst!\n **Extra** Nach dem Baby-Hai kannst du nat√ºrlich auch andere Lieder programmieren. Es gibt viele Lieder mit Wiederholung!\nKannst du an ein weiteres Lied denken und es ausgeben?\n"
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Baby Hai tututudutudu'
                    {print} 'Baby Hai'
                    ```
            8:
                story_text: |
                    In einem vorigen Level hast du das Lied √ºber die Bierflaschen programmiert. Aber ohne den `{repeat}` Befehl musstest du die Strophen viele Male kopieren.
                    In diesem Level kannst du das Lied 99 mal wiederholen, indem du nur eine einfache Zeile hinzuf√ºgst!

                    ### √úbung
                    F√ºge den richtigen Befehl in die L√ºcken ein und r√ºcke den Code korrekt ein.
                example_code: |
                    ```
                    Strophe = 99
                    _ 99 {times}
                    {print} Strophe ' Flaschen Bier an der Wand'
                    {print} Strophe ' Flaschen Bier'
                    {print} 'Nimm eine runter, reich sie herum'
                    Strophe = Strophe - 1
                    {print} Strophe ' Flaschen Bier an der Wand'
                    ```
            10:
                story_text: |
                    Mit `{for}` kannst du den ganzen Babyhai-Song (inklusive aller anderen Haie in der Familie) in nur 6 Zeilen Code ausgeben.

                    ### √úbung 1
                    Kannst du den Babyhai-Code noch k√ºrzer machen, indem du `{for}` verwendest? Vervollst√§ndige den Beispiel-Code.
                example_code: "```\nfamilie = Baby, Mami, Papi, Omi, Opi\n_ _ _ _ \n  {print} _\n```\n"
                story_text_2: |
                    ### √úbung 2
                    Gib das Lied F√ºnf kleine Affen springen auf dem Bett aus. Schlag den Text nach, falls du dich nicht daran erinnerst.

                    **(extra)** Gib das Lied Old MacDonald hat 'ne Farm aus und stelle sicher, dass alle Tiere ein unterschiedliches Ger√§usch machen, indem du `{if}` benutzt.
                example_code_2: |
                    ```
                    affen = 5, 4, 3, 2, 1
                    ```
            11:
                story_text: |
                    In diesem Level nutzt du den Befehl `{for}` mit `{range}` f√ºr Lieder, in denen gez√§hlt wird, wie z.B. bei 'F√ºnf kleine Affen'.

                    ### √úbung 1
                    F√ºlle die L√ºcken und mach, dass der Code funktioniert. Falls du den Liedtext nicht kennst, schlage ihn selbst nach.

                    ### √úbung 2
                    Die letzte Zeile des Liedes unterscheidet sich von den anderen. Gib diese Zeile innerhalb eine `{for}` Befehls aus und nutze `{if}` um es korrekt zum Laufen zu bringen.
                example_code: |
                    ```
                    _ affen _ _ 5 _ 1
                        {print} affen ' kleine Affen springen auf dem Bett'
                        _
                    ```
            12:
                story_text: |
                    Jetzt machen wir es uns richtig einfach und programmieren 'Wenn du gl√ºcklich bist, dann klatsche in die Hand'. Alles, was wir tun m√∂chten, wenn wir gl√ºcklich sind, speichern wir in einer Variablen. Sieh es dir an:

                    ### √úbung
                    Kannst du die richtige Anzahl Leerzeichen zum Einr√ºcken hinzuf√ºgen, damit das Lied richtig spielt?
                    Tipp: Nicht jede Zeile braucht Einr√ºckung.
                example_code: |
                    ```
                    Aktionen = 'klatsche in die Hand', 'stampfe mit dem Fu√ü', 'ruf Hurra'
                    _ {for} Aktion {in} Aktionen
                    _ {for} i {in} {range} 1 {to} 2
                    _ {print} 'Wenn Du gl√ºcklich bist'
                    _ {print} Aktion
                    _ {print} 'Zeig mir, wenn du bei mir bist, wie dir so zumute ist.'
                    _ {print} 'Wenn Du gl√ºcklich bist'
                    _ {print} Aktion
                    ```
            13:
                story_text: |
                    In the previous adventure you have learned how to use an argument in a function, but did you know that you could combine them with {ask} commands as well?
                    In this example we have changed the 'My Bonnie' program and made it interactive. You are now asked where Bonnie is.
                example_code: |
                    ```
                    {define} song {with} place
                        {print} 'My Bonnie is ' place

                    chosen_place = {ask} 'Where do you want Bonnie to be?'
                    synonym = {ask} 'What is another word for that?'

                    {call} song {with} chosen_place
                    {call} song {with} synonym
                    {call} song {with} chosen_place
                    ```
            16:
                story_text: |
                    In diesem Level kannst Du 'Old MacDonald hat ne Farm' sogar noch schneller programmieren. Du kannst jedem Tier das richtige Ger√§usch zuordnen, indem Du sie an die selbe Stelle einer Liste speicherst.
                    Vielleicht kennst Du ja auch schon das englischsprachige Lied 'The Drunken Sailor'. Hierf√ºr ben√∂tigst Du nur 8 Zeilen Code. Sieh es Dir an!
                example_code: |
                    ```
                    Tiere = ['Schweine', 'Hunde', 'K√ºhe']
                    Ger√§usche = ['grunz', 'wuff', 'muh']
                    {for} i {in} {range} 1 {to} 3
                        Tier = _
                        Ger√§usch = _
                        {print} 'Old MacDonald hat ne Farm'
                        {print} 'I A I A O!'
                        {print} 'und auf der Farm da gibt es ' Tier
                        {print} 'I A I A O!'
                        {print} 'mit nem ' Ger√§usch Ger√§usch ' hier'
                        {print} 'und nem ' Ger√§usch Ger√§usch ' da'
                        {print} 'hier ein ' Ger√§usch
                        {print} 'dort ein ' Ger√§usch
                        {print} '√ºberall ein ' Ger√§usch Ger√§usch
                    ```

                    ```
                    Zeilen = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} Zeile {in} Zeilen
                        {for} i {in} {range} 1 {to} 3
                            {print} Zeile
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
            18:
                story_text: |
                    In Level 16 haben wir Lieder mit Listen gemacht. Diese Programme funktionieren jedoch nicht mehr ganz in diesem Level. Die Doppelpunkte aus Level 17 und die Klammern aus Level 18 m√ºssen noch hinzugef√ºgt werden.

                    ### √úbung 1
                    Das Drunken sailor Lied ist im Beispiel-Code, aber es funktioniert noch nicht.
                    Kannst du sicherstellen, dass alles wieder funktioniert? Um dir zu helfen haben wir _ an die Stellen _einiger_ Fehler gesetzt.

                    ### √úbung 2
                    Schau auch deinen Old MacDonald Song aus Level 16 nach und korrigiere ihn.
                example_code: |
                    ```
                    zeilen = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} zeile {in} zeilen _
                        {for} i {in} {range} 1 {to} 3 _
                            {print} _ zeile _
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
    songs_2:
        name: Sing a song! 2
        default_save_name: Song 2
        description: Sing a song 2
        levels:
            12:
                story_text: |
                    Songs contain a lot of repetition. We can capture it with a function!
                    ### Exercise
                    Look at the example code with the function. Fill out the two lines so the full song is printed.
                example_code: |
                    ```
                    {define} twinkle
                        {print} 'Twinkle'
                        {print} '...'

                    {call} twinkle
                    {print} 'Up above the world so high'
                    {print} 'Like a diamond in the sky'
                    {call} _
                    ```
            16:
                story_text: |
                    ### Exercise
                    Finish the nursery rhyme!
                example_code: |
                    ```
                    number = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
                    object = ['on his drum', 'on his shoe', 'on his knee', 'on his door', 'on his hive', 'on his sticks', 'up in heaven', 'on his gate', 'on his vine', 'once again']

                    _
                        {print} 'This old man'
                        {print} 'He played ' _
                        {print} 'He played knick-knack ' _
                        {print} 'With a knick-knack paddywhack'
                        {print} 'Give the dog a bone'
                        {print} 'This old man came rolling home'
                        {sleep} 8
                        {clear}
                    ```
                story_text_2: |
                    ### Exersice 2
                    Now create your own code for the nursery rhyme 'The wheels on the bus' on the same way!
                example_code_2: |
                    ```
                    object = ['wheels', 'doors', _]
                    movement = [ 'round and round', 'open and shut', _]
                    ```
    tic:
        name: Tic-Tac-Toe
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    Let's program a game of tic-tac-toe!

                    ### Exercise
                    In this adventure we'll start with creating an empty field.

                    ***Create a list called field*** This list will be our playing field. This list is filled with 9 dots, since there are no x's and o's yet at the start of our game.

                    ***Create a function that prints the field*** Firstly, clear the screen so the old playing fields will be removed. Then we print the first line of our Tic Tac Toe field. This line constists of the first 3 spots in our list field.
                    We have already programmed this line for you. Now finish the field by printing spot 4, 5, and 6 on the second row and spot 7, 8 and 9 in the third row.

                    ***Call the function that prints the field*** Now call the function.
                    <div class="w-full flex flex-row gap-2">
                        Run the code. Your output should look like this: <img src="https://github.com/hedyorg/hedy/assets/80678586/bcbd156e-4b48-4e82-84ae-f86d21b0cbcc" width="100">
                    </div>

                    ***Continue in the next tab*** In the next tab you'll learn how to program the game itself.
                example_code: |
                    ```
                    # Create a list called field
                    _ = ['.', '.', '.', '.', '.', '.', '.', '.', '.']

                    # Create a function that prints the field
                    {define} print_field
                        _
                        {print} 'TIC TAC TOE'
                        {print} field[1] field[2] field[3]
                        _
                        _

                    # Call the function
                    ```
            17:
                story_text: |
                    In the previous level you've learned how to make a tic-tac-toe game. The game works, but is quite annoying as it keeps asking you if you've won yet.
                    Now that we have the {elif} command, we can let the game decide if someone has won and it can stop asking us!

                    ### Exercise
                    ***Paste your code*** Paste your code from the previous level here and make it level 17 proof. In this level you've learned to use a colon everytime you create a block of code. Please add the colons in the correct spots.

                    ***Create a function that detects if someone's won*** We have started the function for you, paste it under the function `print_field` and finish the function. You can see that this first piece of code checks to see if spot 1, 2 and 3 are the same, because if they are you have 3 in a row.
                    It also checks if they are not a dot, because if they are, the line might have the same symbols on them, but that's just because it's still empty.
                    If all these conditions are met, the game is over and the winner is printed.
                    Finish this function with all possible ways to win. This means you have to make this for the other 2 rows, 3 columns and 2 diagonals.
                    If you've finished all the other options, the function should return the variable `game_over` so we can use it in our game.

                    ***Call the function in the game*** Go to the line `game_over = {ask} 'Did you win?'` and change it to `game_over = {call} detect_winner {with} field, sign`. Now the function will check if there's a winner and the game doesn't need to keep asking anymore!

                    ***Enjoy your game!*** Great job! You have finished the game! Enjoy playing it!

                example_code: |
                    ```
                    # Paste your code here and make it level 17 proof

                    # Create a function that detects if someone has won
                    {define} detect_winner {with} field, sign:
                        {if} field[1] == field[2] {and} field[2] == field[3] {and} field[1] != '.':
                            game_over = 'yes'
                            {print} 'Player ' sign 'wins!'
                        {elif}:
                            _
                        {else}:
                            game_over = 'no'
                    {return} _
                    ```
    tic_2:
        name: Tic-Tac-Toe 2
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    In the previous adventure you've learned how to create a playing field. Now you'll learn how to create the game!

                    ### Exercise
                    ***Paste your code*** Start by pasting your code from the previous adventure here.

                    ***Add variables*** Underneath your list called `field` we'll add 2 more variables that we'll need to program the game.
                    The variable `game_over` tells us if the game is over, and should be 'no' at the start of the game.
                    The variable `sign` tells us if it's the turn of player x or player o. Set the variable to 'x'.

                    ***The game*** First use a {while} command, to make sure the game keeps on playing the variable while game_over is set to no.
                    During the game, we first ask the player which spot they choose. Then we change the field with the number they chose into their sign.
                    Then we print the field again and we ask the player if they've won yet. Lastly we want to switch whose turn it is, so if the sign is 'x' it should be 'o' and the other way around.

                    ***Test your game*** Does your game work? Great, have fun playing the game! If not, use the ladybug button to debug your code.
                    You might have noticed one mistake in the code though, you can steal the other player's spot! If the other person chose spot 1, you could simply enter 1 after them and steal their spot.
                    That's not fair! Go to the next tab to learn how to fix this problem.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Add variables
                    game_over = _
                    sign = _

                    # The game
                    {while} _
                        choice = _ 'Player ' sign '_?'
                        field[choice] = _
                        _ print_field
                        game_over = {ask} _
                        {if} sign = 'o'
                            sign = _
                        _
                            sign = _
                    ```
    tic_3:
        name: Tic-Tac-Toe 3
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    You might have noticed one mistake in the code you've made in the previous adventure. You can steal the other player's spot! If the other person chose spot 1, you could simply enter 1 after them and steal their spot.
                    That's not fair! In this tab we'll fix that mistake.

                    ### Exercise
                    ***Paste your code here*** Paste your code from the previous adventure here.

                    ***Fix the mistake*** To fix the mistake we replace the line that says `field[choice] = sign`. This turns any spot that the player has chosen into their sign.
                    Go to the header that says 'Use this to fix the mistake' and finish the code. We first want to check if the chosen spot is still empty, so `if field[choice] = '.'`. If that is the case, you are allowed to take it.
                    Then we make an else command and print 'Sorry, this spot is already taken' if the spot is not empty. Lastly, we add a {sleep} command, so the players can actually read the text before it gets cleared again.
                    Now copy this piece of code and replace the line `field[choice] = sign` with this new piece of code.

                    ***Play your game!*** Now the game should work properly! Good job!
                    The only flaw is that you can get a bit annoyed that the game keeps asking you if you've won yet. Do you want to fix that? Go to level 17 and we'll fix it!
                example_code: |
                    ```
                    # Paste your code here

                    # Use this to fix the mistake
                    {if} _ = '.'
                        field[choice] = sign
                    {else}
                        {print} _
                        _
                    ```
    turtle:
        name: Schildkr√∂te
        default_save_name: Schildkr√∂te
        description: Mal dein eigenes Bild
        levels:
            1:
                story_text: |
                    Du kannst mit Hedy auch zeichnen. Indem Du Drehungen und Linien kombinierst, kannst Du ein Quadrat oder eine Treppe zeichnen.

                    Mit `{forward}` ziehst Du eine Linie vorw√§rts. Die Zahl dahinter legt fest, wie weit die Schildkr√∂te wandert. Mit `{turn} {right}` ("drehe Dich nach rechts") macht sie eine Viertelumdrehung im Uhrzeigersinn, mit `{turn} {left}` ("drehe Dich nach links") entgegen dem Uhrzeigersinn.

                    Wenn du zur√ºck laufen m√∂chtest, benutzt du den `{forward}`-Befehl mit einer negativen Zahl., wie zum Beispiel `{forward} -100`.
                example_code: |
                    ```
                    {forward} 100
                    {turn} {left}
                    ```
                story_text_2: |
                    ### √úbung
                    Das ist der Anfang einer kleinen Treppe. Kannst Du sie so zeichnen, dass sie 5 Stufen hat?
                example_code_2: |
                    ```
                    {forward} 20
                    {turn} {right}
                    {forward} 20
                    {turn} {left}
                    {forward} 20
                    ```
            2:
                story_text: |
                    In diesen level kann du Variablen nutzen, um die Schildkr√∂te interaktiv zu machen. Du kannst zum Beispiel die Spieler fragen, wie viele Schritte die Schildkr√∂te machen soll.
                example_code: |
                    ```
                    antwort {is} {ask} Wie viele Schritte soll die Schildkr√∂te machen?
                    {forward} antwort
                    ```
                story_text_2: |
                    In Level 1 konnte sich die Schildkr√∂te au√üerdem nur nach links oder rechts drehen. Das ist ein bisschen langweilig!
                    In level 2 kann sie ihre Nase in alle Richtungen strecken.

                    Benutze 90 f√ºr eine Vierteldrehung. Dies wird Grad genannt. Eine komplette Drehung sind 360 Grad.

                    ### √úbung
                    Kannst du mit diesem Code eine Form gestalten? Vielleicht ein Dreieck oder einen Kreis?
                example_code_2: |
                    ```
                    {print} Figuren werden gezeichnet
                    winkel {is} 90
                    {turn} winkel
                    {forward} 25
                    {turn} winkel
                    {forward} 25
                    ```
            3:
                story_text: |
                    In diesem Level kannst Du `{at} {random}` nutzen, w√§hrend die Schildkr√∂te etwas zeichnet. Durch eine zuf√§llige Wahl nimmt die Schildkr√∂te jedes Mal einen anderen Weg.
                    Nutze `{at} {random}` um einen zuf√§lligen Wert aus einer Liste zu w√§hlen.
                    ### √úbung
                    Kannst du die Zeilen 2 und 3 kopieren und wieder einf√ºgen, um einen l√§ngeren, zuf√§lligen Pfad zu erzeugen?
                example_code: |
                    ```
                    Winkel {is} 10, 50, 90, 150, 250
                    {turn} Winkel {at} {random}
                    {forward} 25
                    ```
            4:
                story_text: |
                    In Level 4 musst Du bei `{print}` und `{ask}` Anf√ºhrungszeichen nutzen. Das gilt auch f√ºr's Zeichnen!
                example_code: |
                    ```
                    {print} _ Formen zeichnen _
                    Winkel {is} 90
                    {turn} Winkel
                    {forward} 25
                    {turn} Winkel
                    {forward} 25
                    ```
                story_text_2: |
                    Du kannst auch die Farben der Linien mit dem Befehl `{color}` √§ndern. Sieh dir das Beispiel an.
                    Du kannst auch den Befehl `{color} {white}` benutzen, um unsichtbare Linien zu ziehen. Du kannst diese wei√üen Linien nutzen, um die Schildkr√∂te irgendwo auf dem Bildschirm hin zu bewegen bevor du zu malen anf√§ngst.
                example_code_2: |
                    ```
                    {color} {white}
                    {forward} -80
                    {color} {green}
                    {forward} 50
                    {color} {yellow}
                    {forward} 50
                    {color} {red}
                    {forward} 50
                    ```
            5:
                story_text: |
                    In Level 5 kannst Du mit dem Befehl `{if}` Entscheidungen treffen. Du kannst Dich zum Beispiel zwischen verschiedenen Formen entscheiden.
                example_code: |
                    ```
                    {print} 'Formen zeichnen'
                    Form {is} {ask} 'M√∂chtest Du ein Quadrat oder ein Dreieck?'
                    {if} Form {is} Dreieck Winkel {is} 120
                    {else} Winkel {is} 90
                    {turn} Winkel
                    {forward} 25
                    {turn} Winkel
                    {forward} 25
                    {turn} Winkel
                    {forward} 25
                    {turn} Winkel
                    {forward} 25
                    ```
                story_text_2: |
                    ### √úbung
                    F√ºlle die richtigen Zahlen in die L√ºcken in diesem Code, um ihn zum Laufen zu bringen.
                    Nachdem du das getan hast, kannst du versuchen die Option r√ºckw√§rts hinzuzuf√ºgen.

                    **Extra** Anstelle von "links" und "rechts", √§ndere das Programm so, dass es Nord, Ost, S√ºd und West benutzt.
                    Auf diese Weise kannst du sogar noch mehr Richtungen, wie z.B. Nordost und S√ºdwest, hinzuf√ºgen.
                example_code_2: |
                    ```
                    richtung {is} {ask} 'M√∂chtest du links, rechts oder geradeaus gehen?'
                    {if} richtung {is} left {turn} _
                    {if} richtung {is} right {turn} _
                    {forward} 100
                    ```
            6:
                story_text: |
                    In diesem Level nutzen wir Berechnungen, um verschiedene Formen zu zeichnen.
                    Du hast vielleicht schon gelernt, dass eine komplette Umdrehung 360¬∞ sind. Falls nicht, dann wei√üt Du es jetzt!
                    Deswegen benutzen wir immer 90¬∞ f√ºr ein Rechteck. 360 geteilt durch 4 ist 90.
                    Jetzt, da wir wissen wie Mathe mit Hedy geht, k√∂nnen wir alle Formen zeichnen, die wir wollen!
                example_code: |
                    ```
                    Ecken = {ask} 'Wie viele Ecken soll die Form haben?'
                    Winkel = 360 / Ecken
                    {forward} 50
                    {turn} Winkel
                    {forward} 50
                    {turn} Winkel
                    {forward} 50
                    {turn} Winkel
                    {forward} 50
                    {turn} Winkel
                    {forward} 50
                    {turn} Winkel
                    {forward} 50
                    {turn} Winkel
                    ```
            8:
                story_text: |
                    Jetzt, da wir einzelne Linien wiederholen k√∂nnen, f√§llt uns das Zeichnen einzelner Formen leichter.
                    Wir setzen den Winkel einmalig und nutzen dann die Variable im `{repeat}`.

                    ### √úbung 1
                    Der Beispiel-Code erstellt ein Quadrat. √Ñndere den Code, sodass er eine andere Figur erstellt, wie ein Dreieck oder ein Sechseck.
                    Dies bedarf einer √Ñnderung in zwei Zeilen Code.
                    Tipp: Ein voller Kreis hat 360 Grad.

                    ### √úbung 2
                    Erstelle nun eine Zeichnung aus mindestens zwei Polygonen.
                example_code: |
                    ```
                    Winkel = 90
                    {repeat} 4 {times}
                        {turn} Winkel
                        {forward} 50
                    ```
                story_text_2: |
                    **(extra)**Wir k√∂nnen auch das Programm verbessern, das verschiedene Formen zeichnet. Vervollst√§ndige den Code und du kannst jedes Vieleck zeichnen, das du m√∂chtest!
                example_code_2: |
                    ```
                    Ecken = {ask} 'Wie viele Ecken soll die Form haben?'
                    Winkel = 360 / Ecken
                    {repeat} Ecken {times}
                        {turn} _
                        {forward} _
                    ```
            9:
                story_text: |
                    Nun da wir ein `{repeat}` innerhalb eines `{repeat}` verwenden k√∂nnen, ist es m√∂glich, komplexere Figuren zu erstellen.

                    ### √úbung 1
                    Dieser Code erzeugt drei schwarze Dreiecke, √§ndere dies zu f√ºnf pinken Quadraten.

                    **(extra)** Erstelle eine Figur deiner Wahl, die aus mindestens zwei verschiedenen Formtypen besteht.
                example_code: |
                    ```
                    {color} {black}
                    {repeat} 3 {times}
                        {repeat} 3 {times}
                            {forward} 10
                            {turn} 120
                        {color} {white}
                        {forward} 50
                        {color} {black}
                    ```
            10:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.
                    ### Exercise 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                     **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!
                    ### Exercise 2
                    The spiral is drawn outwards, make it go inwards?
                example_code: |
                    ```
                    {turn} 90
                    distances = 10, 20, 30, 40, 50, 60
                    {for} distance {in} distances
                        {forward} distance
                    ```
            12:
                story_text: |
                    We can use functions to draw more complex figures with less code.
                    ### Exercise 1
                    Fill the function so that three squares are created. If you want the image to look nicer, you can make the lines between the squares white.

                    ### Exercise 2
                    The code can be made even shorter. Place the final lines into a `{repeat}` so the figure remains the same.

                    ### Exercise 3
                    Create your own drawing with different figures.
                    Change both the number of figures with the `{repeat}` and the shape of the figures in the `{define}`
                example_code: |
                    ```
                    {define} square
                        {repeat} 4 {times}
                            {turn} _
                            {forward} _
                    {call} square
                    {forward} 50
                    {call} square
                    {forward} 50
                    {call} square
                    ```
    turtle_draw_it:
        name: Draw it!
        default_save_name: Draw it
        description: Draw this picture with the turtle
        levels:
            1:
                story_text: |
                    ### √úbung
                    Mache die Zeichnungen mit der Schildkr√∂te nach!

                    <div class="w-full flex flex-row gap-2">
                        Rechteck <img src="https://github.com/hedyorg/hedy/assets/80678586/77aa99d5-cd8f-4969-b49d-e8fed34ac550" width="100">
                        Quadrat <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                        Stufen<img src="https://github.com/hedyorg/hedy/assets/80678586/d4301e62-ec66-4031-827c-7d21f73ba106" width="200">
                    </div>
            2:
                story_text: |
                    ### √úbung
                    Mache die Zeichnungen mit der Schildkr√∂te nach!

                    <div class="w-full flex flex-row gap-2">
                    Dreieck <img src="https://github.com/hedyorg/hedy/assets/80678586/e974b62c-f0cf-445a-8bd4-5ad9f1f71204" width="100">
                    Pfeil <img src="https://github.com/hedyorg/hedy/assets/80678586/803d8f42-9708-448c-82ea-d035697f08c9" width="150">
                    Boot <img src="https://github.com/hedyorg/hedy/assets/80678586/94ef7189-442a-4c8f-827d-12a69203c2e9" width="150">
                    </div>
            3:
                story_text: |
                    ### √úbung
                    Mache die Zeichnungen mit der Schildkr√∂te nach!

                    <div class="w-full flex flex-row gap-2">
                    Dreieck <img src="https://github.com/hedyorg/hedy/assets/80678586/71e04d98-9545-4614-9caf-a5f179b756a1" width="150">
                    Stern <img src="https://github.com/hedyorg/hedy/assets/80678586/421c4d28-cb99-424b-be26-dcae30d65c80" width="150">
                    Pfeil <img src="https://github.com/hedyorg/hedy/assets/80678586/3cbebcae-5258-47c5-a6ac-e7ee36c1d1ce" width="200">
                    </div>
            4:
                story_text: |
                    ### √úbung
                    Mache die Zeichnungen mit der Schildkr√∂te nach!

                    <div class="w-full flex flex-row gap-2">
                    Farbiger Stern <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Regenbogen <img src="https://github.com/hedyorg/hedy/assets/80678586/2728b10f-9f7f-45ea-964e-5b284033e4f0" width="500">
                    Verschachtelte Quadrate <img src="https://github.com/hedyorg/hedy/assets/80678586/f013f9fa-bc68-4c60-b778-2c457799d6f7" width="200">
                    </div>
                example_code: |
                    **Extra** Up for a real challenge? Make sure that the colors of these figures are selected randomly, so that each time you run your programs they'll look differently!

                    ```
                    colors {is} red, orange, yellow, green, blue, purple, pink, brown, gray, black
                    color _
                    ```
            5:
                story_text: |
                    ### √úbung
                    Mache die Zeichnungen mit der Schildkr√∂te nach!

                    **Extra** Erstelle nur einen Code, der die Spielerin oder den Spieler entscheiden l√§sst, welchen Buchstaben sie oder er sehen m√∂chte! Und kannst du noch mehr Buchstaben hinzuf√ºgen?

                    <div class="w-full flex flex-row gap-2">
                    F <img src="https://github.com/hedyorg/hedy/assets/80678586/8a021b76-c24b-4e7c-b960-48d57f3bcb20" width="100">
                    E <img src="https://github.com/hedyorg/hedy/assets/80678586/12821803-6422-416a-8e36-9902d14e57a4" width="100">
                    L <img src="https://github.com/hedyorg/hedy/assets/80678586/3af6f919-7b67-4ee7-b923-11e56f2b6b24" width="100">
                    </div>
                example_code: |
                    Hint:
                    ```
                    chosen_letter {is} {ask} 'Which letter would you like to see? F, E or L?'
                    {if} _
                    ```
            6:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** Let the player decide which color the square should be.

                    ***Extra*** Can you make the letter of your own first name and the flag of your own country too?

                    <div class="w-full flex flex-row gap-2">
                    Square <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="150">
                    Letters <img src="https://github.com/hedyorg/hedy/assets/80678586/e75f4fa5-f1f5-4b48-806c-916c28e4e8ad" width="100">
                    Flag <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hint for the square:
                    ```
                    chosen_color = {ask} _
                    ```
            7:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Hexagon <img src="https://github.com/hedyorg/hedy/assets/80678586/92e492e1-1593-489b-aaf0-51d2a29755f4" width="200">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/3629a5e6-1f02-4851-aab9-c5430ba4a1f1" width="200">
                    Fan <img src="https://github.com/hedyorg/hedy/assets/80678586/1ba2ff71-1230-4fe3-8255-b2c504cf1b4e" width="200">
                    </div>
            8:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** The number in brackets indicates in how many lines of code this figure can be drawn. Can you do it in the same amount of lines?

                    <div class="w-full flex flex-row gap-2">
                    Square (3) <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                    Randomly colored star (5) <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Randomly colored spiral (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/9bcdb3f1-367d-4ae0-878f-d09005424a35" width="150">
                    </div>
            9:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** The number in brackets indicates in how many lines of code this figure can be drawn. Can you do it in the same amount of lines?

                    **Extra** Give the player a choice which country they would like to see the flag of.

                    <div class="w-full flex flex-row gap-2">
                    Cross (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/76e42c76-aa3f-4863-8eee-ead73c09a186" width="150">
                    Randomly colored nested squares (8) <img src="https://github.com/hedyorg/hedy/assets/80678586/17f878cc-e893-4c10-b32e-a09a50bf08de" width="200">
                    Flags <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hint for the nested squares:
                    ```
                    colors = red, blue, orange, yellow, pink, purple, green, brown, black
                    distance = 120
                    repeat 5 times
                    _
                    ```
                    Hint for the flags:
                    ```
                    country = ask 'which country would you like to see the flag of?'
                    if country is 'the Netherlands'
                        color_1 = red
                        color_2 = white
                        color_3 = blue
                    ```
            10:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Nested Hexagon <img src="https://github.com/hedyorg/hedy/assets/80678586/3629e908-3cd5-44ac-bbcd-1f1cceb15654" width="150">
                    Traffic lights  <img src="https://github.com/hedyorg/hedy/assets/80678586/edbbb608-5ff8-4349-85a6-e47809adde43" width="100">
                    </div>
                example_code: |
                    Hint Nested Hexagon:
                    ```
                    distances = 100, 80, 60, 40, 20
                    {for} distance {in} distances
                    _
                    ```

                    Hint Traffic Lights:
                    ```
                    colors = red, yellow, green
                    {for} chosen_color {in} colors
                        color _
                        {repeat} _
                    ```
                story_text_2: |
                    Christmas lights <img src="https://github.com/hedyorg/hedy/assets/80678586/9637ea6d-6edc-4d88-a6f7-10271bfc5371" width="500">
                example_code_2: |
                    Hint Christmas Lights:

                    Start by moving to the left side of the screen with an invisible white line. Then hang up the Christmas lights!
                    ```
                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 90

                    colors = red, blue, yellow, purple, green, orange, pink
                    {for} chosen_color {in} colors
                    _
                    ```
            11:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Beehive (6) <img src="https://github.com/hedyorg/hedy/assets/80678586/ec02469c-907b-4695-9382-d39a8f3c00ec" width="150">
                    Fan (5)  <img src="https://github.com/hedyorg/hedy/assets/80678586/a032ab35-c70c-4e67-9b4e-036a03ecce87" width="150">
                    Snowflake (13) <img src="https://github.com/hedyorg/hedy/assets/80678586/90f56bbb-86e5-448d-8aec-16f8c2c05cf2" width="150">
                    </div>
                example_code: |
                    Hint Beehive:
                    ```
                    {for} amount_of_combs {in} {range} 1 {to} _
                        {for} walls_of_one_comb {in} {range} 1 {to} _
                            {forward} _
                            {turn} _
                        {forward} _
                        {turn} _
                    ```

                    Hint Fan:
                    Start out like the fan you made in level 7. Or take a peak at the hint for the beehive, because the codes are very similar.

                    Hint Snowflake: Start by making one 'leg' and repeat it 6 times.
            12:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!
                    Hint: Bracelet designing program. Firstly, define a function **for each shape** you want to use on the bacelet. Then, add the shapes to the bacelet like this:
                    </div>
                    Bracelet Designing program <img src="https://github.com/hedyorg/hedy/assets/80678586/549d7f3a-c492-4b4a-b173-746eb3400951" width="500">
                example_code: |
                    ```
                    {define} draw_a_square
                    _

                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 180

                    {for} i {in} {range} 1 {to} 5
                        {color} gray
                        {forward} 100
                        shape = {ask} 'What kind of shape would you like next on the bracelet?'
                        chosen_color = {ask} 'In which color?'
                        {color} chosen_color
                        {if} shape = 'square'
                            {call} draw_a_square
                    ```
            13:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    Street in different sizes <img src="https://github.com/hedyorg/hedy/assets/80678586/cdae9d97-d5ef-46f3-8838-24fa7b5b1bec" width="300">
                    Colored street  <img src="https://github.com/hedyorg/hedy/assets/80678586/9893e0bd-c0f8-49bc-a5a7-217182407724" width="300">
                    Snow Storm <img src="https://github.com/hedyorg/hedy/assets/80678586/111b0a1b-b0e1-47c3-b032-81cea05e6bbc" width="300">
                example_code: |
                    Hint Street in different sizes
                    ```
                    {define} draw_a_house {with} size
                    _

                    {call} draw_a_house {with} 90
                    {call} draw_a_house {with} 60
                    {call} draw_a_house {with} 30
                    ```

                    Hint Colored street
                    ```
                    {define} draw_a_house {with} chosen_color
                    _
                    ```

                    Hint Snow Storm
                    ```
                    {define} draw_snowflake {with} length, color
                        _

                    numbers = 10, 20, 30
                    colors = _

                    {for} i {in} {range} 1 {to} 5
                        random_number = _
                        random_color = _
                        {call} draw_snowflake {with} random_number, random_color
                        {color} white
                        {turn} random_number * 5
                        {forward} 80
                    ```
            14:
                story_text: |
                    ### Exercise
                    Create a program that asks the player how many corners their figure should have and then creates that figure.
                    The figure in the image is the output when the player fills in 10.

                    <div class="w-full flex flex-row gap-2">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/ee32f40e-dea1-4e7c-a813-3ef63671254b" width="300">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/3621bf77-527d-41e8-a44f-c5a21bb4ffd2" width="200">
                    </div>
                example_code: |
                    ```
                    {define} calculate_degrees {with} amount_of_corners
                        _ 360 / amount_of_corners


                    {define} draw_figure {with} degrees
                        _
                            {forward} 400/amount_of_corners
                            {turn} _

                    amount_of_corners = {ask} _
                    degrees = {call} _ {with} _

                    {call} _ {with}
                    {call} _ {with}
                    ```
            15:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    Spiral <img src="https://github.com/hedyorg/hedy/assets/80678586/6943223c-018b-435b-a391-23723cc7a6ad" width="150">
                example_code: |
                    Spiral
                    ```
                    distance = 5
                    {while} distance < 200
                        distance = distance + 5
                         _
                    ```
                story_text_2: |
                    Fan <img src="https://github.com/hedyorg/hedy/assets/80678586/cb671065-b47b-49f0-b298-dcbcd2a5e28f" width="150">
                example_code_2: |
                    Fan
                    ```
                    {define} draw_a_square {with} side
                    _

                    i = 100
                    {while} i > 1
                        _ {with} i
                        _
                        i = i - 3
                    ```
                story_text_3: |
                    Star <img src="https://github.com/hedyorg/hedy/assets/80678586/17564e0a-63e1-4794-8d41-15ac8c1a5a93" width="150">
                example_code_3: |
                    Star
                    A star is usually drawn using 144-degree-turns. If you change this slightly to 143 degrees for example and repeat the pattern multiple times with a {while} loop you can make this figure.
    while_command:
        name: '{while}'
        default_save_name: while_command
        description: while
        levels:
            15:
                story_text: |-
                    We are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.
                    So don't forget to change the value in the loop.

                    In the example code, we continue until a correct answer has been given.
                    If the correct answer is never given, the loop never ends!
                example_code: |
                    ```
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
                    ```
    years:
        name: Neujahr
        default_save_name: Neujahrs-Countdown
        description: Runterz√§hlen zum neuen Jahr!
        levels:
            11:
                story_text: |
                    In diesem Level kannst du den Befehl `{for}` Zahl `{in}` `{range}` benutzen, um zum neuen Jahr runterzuz√§hlen.

                    ### √úbung
                    F√ºlle die L√ºcken und bring den Code zum Laufen!
                example_code: |
                    ```
                    {for} Zahl {in} {range} _ {to} _
                        {print} Zahl
                    {print} 'Frohes neues Jahr!'
                    ```
