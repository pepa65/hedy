adventures:
    story:
        name: Berättelse
        default_save_name: Berättelse
        description: Berättelse
        levels:
            1:
                story_text: |
                    På nivå 1 kan du göra en berättelse där du får ange namnet på huvudkaraktären själv.

                    På första raden, använd `{ask}` för att fråga vem huvudkaraktären i din saga ska vara.

                    Efter den första raden, börja med `{print}` om en mening ska skrivas ut på skärmen.
                    Du använder `{echo}` om du vill att namnet på huvudkaraktären ska vara på slutet av meningen.
                example_code: |
                    ```
                    {ask} Huvudkaraktären av denna berättelse är
                    {print} Nu kommer huvudkaraktären ta en promenad i skogen
                    {echo} Han är lite rädd,
                    {print} Han hör galna ljud överallt
                    {print} Han är rädd för att detta är en hemsökt skog
                    ```
                story_text_2: |
                    ### Övning
                    Gör nu en egen berättelse med minst sex kodrader.
                    Berättelsen får inte vara samma som exempelkoden.
                    Använd minst ett `{ask}` - och ett `{echo}` -kommando.
                    Du kan göra den om vilket ämne som helst.
                    Om du inte kan komma på något ämne kan du använda ett av våra val: ett biobesök, en sportmatch eller en dag i djurparken.
            2:
                story_text: |
                    På nivå 2 kan du göra din berättelse roligare. Huvudpersonens namn kan nu stå var som helst i meningen.

                    Men du får programmera lite extra för det. Du måste nu namnge din huvudperson först.

                    Du kan sedan sätta det namnet var som helst i meningen.
                example_code: |-
                    ```
                    namn {is} {ask} Vad heter huvudkaraktären?
                    {print} namn ska nu gå en promenad i skogen
                    {print} namn är lite rädd
                    {print} Plötsligt hör han ett galet ljud...
                    {sleep}
                    {print} namn är rädd att detta är en hemsökt skog
                    ```
                story_text_2: |
                    ### Övning
                    Dags att lägga till variabler till din egen berättelse som du skapade på föregående nivå.
                    Gå till 'Mina program', leta efter ditt nivå 1-äventyr och kopiera koden. Klistra in koden på din inmatningsskärm på den här nivån.

                    Den här koden fungerar inte på den här nivån eftersom du inte har använt variabler än.
                    Ändra kommandona `{ask}` och `{echo}` i din kod till rätt form som du har lärt dig på den här nivån.

                    **Extra** Lägg till ett {sleep}-kommando i din kod för att bygga upp spänningen i berättelsen.
            3:
                story_text: |
                    I nivå 3 kan du göra din berättelse lite roligare. Du kan använda slumpen för monster, djur, eller annat hinder, så här:
                example_code: |
                    ```
                    djur {is} 🦔, 🐿, 🦉, 🦇
                    {print} Han hör nu ljudet av en djur {at} {random}
                    ```
                story_text_2: |
                    Kommandot `{add}` kan också vara användbar för din berättelse.
                example_code_2: |
                    ```
                    {print} Han hör ett ljud
                    djur {is} 🐿, 🦔, 🦇, 🦉
                    djuret {is} {ask} Vad tror du det är?
                    {add} djuret {to_list} djur
                    {print} det var ett djur {at} {random}
                    ```
                story_text_3: |
                    Detta är ett exempel på kommandot `{remove}` i din berättelse

                    ### Övning
                    Kopiera din berättelse från de tidigare nivåerna till den här nivån.
                    På den här nivån har du lärt dig tre nya kommandon: `{at} {random}`, `{add} {to_list}` och `{remove} {from}`.
                    Lägg till nya kodrader i din berättelse så att alla de nya kommandona finns med minst en gång i din berättelse.
                example_code_3: |
                    ```
                    {print} Hans ryggsäck blev alldeles för tung.
                    {print} Inuti var en vattenflaska, en ficklampa, och en tegelsten.
                    säck {is} vatten, ficklampa, tegelsten
                    kasta {is} {ask} Vad ska han kasta bort?
                    {remove} kasta {from} säck
                    ```
            4:
                story_text: |
                    ### Övning
                    Kopiera exempelkoden och avsluta den genom att lägga till citattecken på de tomma fälten på rad 1 och 2.
                    De tomma fälten på rad 3 och 4 ska inte ersättas med citattecken, utan ett `{sleep}`- och ett `{clear}`-kommando. Kan du få det att fungera?

                    ### Övning 2
                    Gå tillbaka till föregående nivå och kopiera din berättelsekod. Få koden att fungera på den här nivån genom att lägga till citattecken på rätt ställen.
                    Tänk på: Variablerna i din egen berättelse ska vara utanför citattecknen. Precis som den andra raden i exempelkoden. På den raden placeras variabelnamnet utanför citattecken.
                example_code: |
                    ```
                    name {is} {ask} _ Vad heter du? _
                    {print} Huvudpersonen heter _ namn
                    _
                    _
                    {print} namn _ ska nu vandra i skogen _
                    {print} namn _ är lite rädd _
                    djur {is} 🦔, 🐿, 🦉, 🦇
                    {print} _ Han hör ljudet av _ djur {at} {random}
                    {print} namn _ är rädd för att detta är en trollskog _
                    ```
            5:
                story_text: |
                    På den här nivån kan du programmera olika slut, vilket gör din berättelse ännu roligare.
                    I exempelkoden kan du se hur du skapar två olika slut.

                    ### Övning 1
                    Skriv en ny berättelse på minst sex kodrader om ett ämne som du själv väljer.
                    Ingen inspiration? Välj ett av dessa ämnen: en superhjälte, en tråkig skoldag, strandad på en öde ö.

                    Ge nu spelaren möjlighet att välja ett lyckligt eller dåligt slut, precis som i exempelkoden.
                    Programmera båda sluten.

                    ### Övning 2
                    Kopiera den berättelse som du har skapat i ditt eget berättelseäventyr i de tidigare nivåerna.
                    Hitta ett sätt att lägga till minst två kommandon `{if}` och `{else}` i din berättelse.
                    Detta kan vara med ett lyckligt eller dåligt slut, men du kan också försöka hitta andra sätt att få med kommandona.
                example_code: |
                    ```
                    namn {is} {ask} 'Vem går genom skogen?'
                    {print} namn ' går genom skogen'
                    {print} namn ' stöter på ett monster'
                    slutet {is} {ask} 'Vill du ha ett lyckligt eller olyckligt slut?'
                    {if} slutet {is} lyckligt {print} namn ' tar sitt svärd och monstret springer bort'
                    {else} {print} 'Monstret äter upp ' namn
                    ```
            7:
                story_text: |
                    I en berättelse säger någon samma ord flera gånger. Till exempel när någon ropar på hjälp eller sjunger en sång.
                    Du kan lägga in sådana upprepningar i din berättelse, på den här nivån med `{repeat}`.

                    ### Övning
                    Lägg till upprepningar i din egen berättelse. Gå tillbaka till dina sparade program, välj ditt berättelseprogram från nivå 6 och
                    hitta en rad som innehåller `{print}` och upprepa den!
                example_code: |
                    ```
                    {print} 'Prinsen fortsatte ropa på hjälp'
                    {repeat} 5 {times} {print} 'Hjälp!'
                    {print} 'Varför hjälper ingen mig?'
                    ```
            8:
                story_text: |
                    På den här nivån kan du använda flera rader i dina `{if}` -kommandon; på så sätt kan du uppgradera ditt glada eller sorgliga slut!

                    ### Övning 1
                    Exempelkoden visar två olika slut; ett där karaktärerna hoppar i en tidsmaskin och ett där de inte gör det.
                    Fyll i tomrummen med minst en mening per slut.
                    **Extra** Gör berättelsen längre. Vad händer i berättelsen? Du kan också lägga till ett andra `{ask}`-kommando med olika alternativ.

                    ### Övning 2
                    Gå tillbaka till dina sparade program och välj ditt berättelseprogram från nivå 5. Skriv nu ett bra och ett dåligt slut på minst tre rader vardera!
                example_code: |
                    ```
                    {print} 'ÅH NEJ! T-rex närmar sig!"
                    end = {ask} 'Vill du ha ett lyckligt eller sorgligt slut?'
                    {if} slut {is} lyckligt
                        {print} 'I sista ögonblicket hoppar Richard tillbaka in i tidsmaskinen!'
                        {print} _
                    {else}
                        {print} 'Åh nej! Richard är för långsam ..."
                        {print} _
                    ```
            9:
                story_text: |
                    På den här nivån kan du använda kommandona `{if}` och `{repeat}` inuti andra `{if}`- och `{repeat}`-kommandon.
                    Detta ger dig många möjligheter och hjälper dig verkligen att göra din berättelse interaktiv.

                    ### Övning 1
                    Gör klart koden så att `{if}` fungerar korrekt.

                    ### Övning 2
                    Lägg till en `{if}` och `{else}` för den del av berättelsen där Robin också åker hem.

                    ### Övning 3
                    Gå tillbaka till din berättelse på nivå 8 och använd minst två `{if}` inom ett annat `{if}`.
                example_code: |
                    ```
                    {print} 'Robyn promenerar i stan'
                    plats = {ask} 'Går Robyn till en affär eller går hon hem?'
                    {if} plats {is} affär
                        {print} 'Hon går in i affären'
                        {print} 'Robyn ser en bok som ser spännande ut'
                        bok = {ask} 'Köper Robyn boken?'
                        {if} bok {is} ja
                            {print} 'Robyn köper boken och går hem'
                        {else}
                            {print} 'Robyn lämnar affären och går hem'
                    {else}
                        {print} 'Robyn går hem'
                    ```
            10:
                story_text: |
                    På den här nivån kan du använda kommandot {for} i din berättelse. På detta sätt kan du enkelt programmera barnboken  'Brown bear, Brown bear, what do you see'.

                    ### Övning

                    Titta på <a href="https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf"> berättelsen</a> om du inte känner till den, och se till att den skrivs ut som i boken.
                example_code: "```\ndjur = _ , _ , _ , _ \n{print} 'Brunbjörn, brunbjörn'\n {print} 'Vad ser du?'\n```\n"
            12:
                story_text: |-
                    På den här nivån behövs citattecken för att_spara flera ord i en variabel.

                    ### Övning

                    Hitta en berättelse från en tidigare nivå, vilken nivå som helst är okej. Lägg till citattecken på rätt ställen.
                example_code: |
                    ```
                    namn = 'Drottningen av England'
                    {print} namn ' åt en tårtbit, när plötsligt...'
                    ```
            13:
                story_text: |
                    Med kommandona `{and}` och `{or}` kan du göra dina berättelser mer flexibla. Du kan ställa två frågor och svara baserat på båda svaren.

                    ### Övning 1
                    Titta på exempelkoden och gör den klar. Lägg sedan till minst två ytterligare `{if}` -satser med `{and}` eller `{or}`.

                    ### Övning 2
                    Hitta en berättelse från en tidigare nivå och lägg till ett `{and}` eller `{or}`.
                example_code: |
                    ```
                    {print} 'Vår hjälte går genom skogen'
                    {print} 'Vägen delar sig på två håll'
                    väg = {ask} 'Vilken väg ska hon välja?'
                    vapen = {ask} 'Vilket vapen drar hon?'
                    {if} väg {is} 'vänster' {and} vapen {is} 'svärd'
                        _
                    ```
            15:
                story_text: |
                    Med `{while}`-loopen kan du göra dina berättelser mer intressanta. Du kan t.ex. använda `{while} game == 'on'` så att du kan spela tills spelet är slut.
                    Eller så kan du använda `{while} sword == 'lost'` så att spelaren inte kan fortsätta spelet förrän den har hittat något.

                    ### Exercise
                    The example code shows you how to use the `{while}` loop in a story. Now **think of your own scenario** in which the player has to find something before they can continue.
                example_code: |
                    ```
                    nycklar = 'förlorade'
                    {print} 'Du står i din trädgård och du har tappat dina nycklar.'
                    {print} 'Var vill du leta efter dem?'
                    {print} 'Du kan välja: träd, rabatt, sten, postlåda'
                    {while} nycklar == 'förlorade'
                        plats = {ask} 'Var vill du titta?'
                        {if} plats == 'rabatt'
                            {print} 'Här är de!'
                            nycklar = 'hittade'
                        {else}
                            {print} 'Nej, de är inte här: ' plats
                    {print} 'Nu kan du gå in i huset!'
                    ```
            18:
                story_text: |
                    Vi ska skriva ut en annan historia, men nu måste vi använda parenteser med `{print}`.

                    ### Övning 1
                    Skapa en berättelse med minst fem meningar. Du behöver inte använda 'namn' än.
                example_code: |
                    ```
                    {print}('Välkommen till den här berättelsen!')
                    ```
                story_text_2: |
                    ### Övning 2
                    Vi har redan förberett en `{input}` åt dig. Använd först variabeln `name` i din berättelse.
                    Lägg sedan till en andra `{ask}` och använd den variabeln också.
                    Tips: Kom ihåg kommatecken i en `{print}` mellan text och variabler!
                example_code_2: |
                    ```
                    namn = {input}("Vad heter du?")
                    {print}('Välkommen till den här berättelsen!')
                    ```
    add_remove_command:
        name: '{add} {to} & {remove} {from}'
        default_save_name: kommandot_lägg_till_ta_bort
        description: introduktion till lägg till och ta bort
        levels:
            3:
                story_text: |
                    ## Lägg till
                    Du kan lägga till element i listan med kommandot `{add} {to_list}`. För att lägga till ett element i en lista kan du helt enkelt skriva `{add} penguin {to} animals` eller så kan du använda kommandot `{ask}` som i exempelkoden.
                example_code: |
                    ```
                    djur {is} hund, katt, känguru
                    gillar {is} {ask} Vilket är ditt favoritdjur?
                    {add} gillar {to_list} djur
                    {print} Jag väljer djur {at} {random}
                    ```
                story_text_2: |
                    ## Ta bort
                    Om du kan lägga till element i en lista kan du naturligtvis också ta bort dem. Detta görs med kommandot `{remove} {from}`.
                example_code_2: |
                    ```
                    djur {is} hund, katt, känguru
                    ogillar {is} {ask} Vilket djur gillar du inte?
                    {remove} ogillar {from} djur
                    {print} Jag väljer djur {at} {random}
                    ```
                story_text_3: |
                    ### Övning
                    Prova de nya kommandona i denna virtuella restaurang. Lägg till den smak som spelaren hoppas på i listan och ta bort de smaker som den är allergisk mot.
                example_code_3: |
                    ```
                    {print} Hemlig milkshake
                    smaker {is} jordgubb, choklad, vanilj
                    hoppas {is} {ask} Vilken smak hoppas du på?
                    _
                    allergier {is} {ask} Är du allergisk mot några smaker?
                    _
                    {print} Du får en milkshake med smaker {at} {random}
                    ```
    and_or_command:
        name: '{and} & {or}'
        default_save_name: och eller
        description: introduktion och eller
        levels:
            13:
                story_text: |-
                    Vi ska nu lära oss `{and}` och `{or}`! Om du vill kontrollera två påståenden behöver du inte använda två `{if}` utan kan använda `{and}` och `{or}`.

                    Om du använder `{and}` måste båda påståendena, vänster och höger om `{and}` vara sanna. Vi kan också använda `{or}`. Då behöver bara ett påstående vara korrekt.
                example_code: |
                    ```
                    namn = {ask} 'vad heter du?'
                    ålder = {ask} 'hur gammal är du?'
                    {if} namn {is} 'Hedy' {and} ålder {is} 2
                        {print} 'Du är den riktiga Hedy!'
                    ```
    ask_command:
        name: '{ask}'
        default_save_name: kommandot_fråga
        description: Introduktion till kommandot fråga
        levels:
            1:
                story_text: |
                    ## Kommandot fråga
                    Nu när du kan använda kommandot `{print}` är du redo att lära dig nästa kommando: `{ask}`. Med kommandot `{ask}` kan du ställa en fråga. Kolla in det här:
                example_code: |
                    ```
                    {print} Hej!
                    {ask} Vad heter du?
                    ```
                story_text_2: |
                    ## Kommandot eko
                    Om du vill att datorn ska upprepa svaret kan du använda kommandot `{echo}`. Tänk på att svaret återges i slutet av meningen, så i det här exemplet efter hej.
                example_code_2: |
                    ```
                    {print} Hej!
                    {ask} Vad heter du?
                    {echo} hej
                    ```
                story_text_3: |
                    ### Övning
                    Prova kommandona `{ask}` och `{echo}`. Fyll först i de tomma fälten för att få programmet att fungera.
                    Ställ sedan ytterligare två frågor med kommandot `{ask}`. Efter varje `{ask}` använder du ett `{echo}` för att skriva ut svaret på skärmen.
                example_code_3: |
                    ```
                    _ Hur mår du?
                    _
                    ```
            2:
                story_text: |
                    ## Kommandot fråga
                    Nu när vi kan använda **variabler** i vår kod behöver vi inte längre kommandot `{echo}`.
                    Vi kan använda variabler för att lagra svaren på våra frågor och på så sätt kan vi använda svaret på flera frågor i vår kod.
                    Kolla in det:

                    På så sätt blir din kod interaktiv!
                example_code: |
                    ```
                    namn {is} {ask} Vad heter du?
                    {print} Hej namn
                    ålder {is} {ask} Hur gammal är du?
                    {print} namn är ålder år gammal.
                    ```
                story_text_2: |
                    ### Övning
                    I förra fliken övade du på att tilldela variabler med kommandot `{is}`.
                    Du har skapat minst tre variabler och använt dem med ett print-kommando.
                    Nu vill vi att du istället för att sätta variablerna gör dem interaktiva, som vi gjorde i vårt exempel.

                    Kopiera din kod från föregående flik och gör variablerna interaktiva med `{ask}`-kommandon.
                example_code_2: |
                    ```
                    favoritdjur is ask Vilket är ditt favoritdjur?
                    print Jag gillar favoritdjur
                    ```
            18:
                story_text: |
                    Den sista ändringen vi behöver göra för att få Python-kod är att ändra `{ask}` till `{input}`.
                example_code: |
                    ```
                    {print}('Jag heter Hedy!')
                    namn = {input}('Vad heter du?')
                    {print}('Du heter alltså ', namn)
                    ```
    blackjack:
        name: Blackjack
        default_save_name: Blackjack
        description: Försök att hamna så nära 21 som möjligt
        levels:
            17:
                story_text: |
                    Blackjack är ett enkelt kortspel där det gäller att komma så nära 21 poäng som möjligt. Du får två kort. Varje kort är värt sitt siffervärde och bildkorten (knekt, dam och kung) är värda tio poäng.
                    Esset är värt antingen 1 eller 11 poäng (du kan välja). Given, din motspelare, får också två kort.
                    Om du vill kan du ta ytterligare ett kort, och dess poäng läggs till din totala poängsumma. Given kan också välja att ta ett annat kort.
                    Men se upp så att du inte får mer än 21 poäng, för om du får det förlorar du!
                    Den spelare som kommer närmast 21, utan att gå över det, vinner!

                    ### Exercise
                    In this adventure we code the first part of our Blackjack game. We'll create a function to calculate how many points a card is worth.

                    ***Set the variables***
                    Start by making a list of all the cards, from 2 to Ace. Next make a list of the face cards, so Jack, Queen and King. Then pick a random card from the list of cards to be card_1.

                    ***Create a function to calculate the points***
                    Create a function that calculates how many points a card is worth.
                    All the face cards are worth 10 points, the Ace is worth 11 and all the other cards are worth their numeral.
                    Return the variable `points` at the end of the function.

                    ***Test the function***
                    Test if your function is working properly. Finish the first print command by filling in which card you've drawn. Then finish the second line by calling the function with card_1.
                    Run the code a couple of times. Are you happy with the results? Great! Then you can remove the testing part and move on the the next tab!
                example_code: |
                    ```
                    {print} 'BLACKJACK'

                    # Set these variables
                    cards = _
                    face_cards = _
                    card_1 =

                    # Create a function to calculate the points
                    {define} calculate_points {with} card:
                        {if} card {in} face_cards:
                            points = _
                        {elif} _
                            _
                        {else}:
                            _
                        _ points

                    # Test your function
                    {print} 'Your card is a ' _
                    {print} 'That is worth ' _ ' points'.
                    ```
    blackjack_2:
        name: Blackjack 2
        default_save_name: Blackjack_2
        description: Blackjack part 2
        levels:
            17:
                story_text: |
                    ### Exercise
                    In this adventure we code the second part of our Blackjack game.

                    ***Paste your code from the previous adventure***
                    In the previous adventure you've started a list of variables and created a function to calculate how many points a card is worth. Copy your code and paste it here. Mind that you don't need the testing part, so if you haven't removed that yet, please do so now.

                    ***Add more variables***
                    You have already set the lists `cards` and `face_cards` and the variable `card_1`. Underneath those variables create 3 more variables: `card_2`, dealer_card_1` and `dealer_card_2`. These variables are all set to a random card from the list of cards.

                    ***Add up points***
                    To calculate how many points you have scored we call the function with card 1 and we do it again for card 2. Then we add both these scores together to get your total.
                    Do the same thing for the dealers points, but be sure to use the dealer's cards and not your own!

                    ***2 Aces***
                    You're doing great! Almost all scores can be calculated now. There is only one exception: 2 Aces. If you get 2 Aces, your total is 12 points and not 22 (because 22 points would be losing!). This of course also goes for the dealer.

                    ***Show the score***
                    Lastly, you want to tell the program to tell you which cards you have drawn and how many points that is. Then show which cards the dealer has and how many points they have.

                    ***Continue in the next tab***
                    Great! You have finished this part of the game! Copy your code and go to the next tab to learn how to ask for an extra card and to declare a winner.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Add these variables to the list of variables
                    card_2 = _
                    dealer_card_1 = _
                    dealer_card_2 = _

                    # Add up your points
                    your_points_1 = {call} _ {with} card_1
                    your_points_2 = _
                    your_total = _

                    # Add up the dealers points
                    dealer_points_1 = _
                    _
                    _

                    # 2 Aces
                    {if} card_1 == 'Ace' {and} _
                        your_total = 12
                    {if} dealer_card_1 _
                        dealer_total = _

                    # Show the score
                    {print} 'You have drawn a ' _ ' and a ' _ '. That is ' _ ' points'
                    {print} 'The dealer has drawn a ' _ ' and a ' _ '. That is ' _ ' points'
                    ```
    blackjack_3:
        name: Blackjack 3
        default_save_name: Blackjack_3
        description: Blackjack part 3
        levels:
            17:
                story_text: |
                    In the previous tabs you have learned how to draw 2 random cards for yourself and for the dealer and to calculate how many points you both got.
                    In this adventure we add the option to ask for an extra card for both you and the dealer.

                    ### Exercise
                    ***Paste your code from the previous adventure*** Firstly, copy your code from the previous tab and paste it here.

                    ***Extra card for you*** If you want, you can get an extra card to get your total as close to 21 as possible. First ask the player if they want an extra card.
                    If they do, pick a random card and print what they have drawn. If the card is not an Ace, you can call the function and add the points to your total.
                    In case the card is an Ace, you can't use the function, because the Ace can be either 1 point or 11 points, depending on how many points you already have earned.
                    If your total is less than 11, you want the ace to be 11 points (because this is closest to 21). So you add 11 points to your total.
                    If the total is more than or equal to 11, you want the ace to be 1 point (because you don't want more than 21 points). So you add 1 point to your total.
                    Lastly, print your new total of points.

                    ***Extra card for the dealer*** The dealer can also get an extra card. The dealer doesn't need to be asked, because they always get an extra card if their total is less than 17.
                    Copy the 'Extra card for you code' and paste it in the dealers section. Then change it to fit the dealer picking an extra card and getting points added to their total.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Extra card for you
                    hit = {ask} _
                    {if} hit == 'yes':
                        card_3 = _
                        {print} _
                        {if} card_3 _ 'Ace':
                            your_points_3 = _
                            your_total = _
                        {else}:
                           {if} your_total _
                                _
                            {else}:
                                _
                        {print} _

                    # Extra card for the dealer
                    {if} dealer_total < 17
                    _
                    ```
    blackjack_4:
        name: Blackjack 4
        default_save_name: Blackjack_4
        description: Blackjack part 4
        levels:
            17:
                story_text: |
                    In the last 3 adventures you have alsmost created a working blackjack game! The only thing left to do is to decide a winner!

                    ### Exercise
                    ***Paste your code from the previous adventure*** Start by pasting the code that you've made so far into your programming field.

                    ***Decide a winner***
                    Firstly, if you and the dealer have an equal amount of points, it's a draw.
                    Secondly, if the dealer has more than 21 points and you don't, you are the winner.
                    Thirdly, if both you and the dealer have less than 22 points, we have to see who came closest to 21. We do that by comparing who has the highest score. Is your total higher than the dealer's total, then you are the winner. If not, the dealer wins.
                    Lastly, in all other scenarios (e.g. you have more than 21 points and the dealer doesn't, or you both have more than 21 points) you are the loser.

                    ***Enjoy the game!***
                    Does your game work properly? Amazing! You have done a great job! Enjoy your game!
                    If it doesn't work right away, no worries, you might have made a mistake. Just keep calm and bebug your code using the ladybug button.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Decide a winner
                    {if} _
                        {print} 'Its a draw! Play again!'
                    {elif} _
                        {print} 'You win!'
                    {elif} _ :
                        {if} _:
                            {print} _
                        {else}:
                            {print} _
                    {else}:
                        _
                    ```
    calculator:
        name: Kalkylator
        default_save_name: Kalkylator
        description: Gör en kalkylator
        levels:
            6:
                story_text: |
                    Nu när du kan räkna kan du göra en miniräknare själv!
                example_code: |
                    ```
                    tal_1 {is} {ask} 'Mata in första talet:'
                    tal_2 {is} {ask} 'Mata in andra talet:'
                    rätt_svar = tal_1 * tal_2
                    {print} tal_1 ' gånger ' tal_2 ' är ' rätt_svar
                    ```
                story_text_2: |
                    ### Övning
                    Kalkylatorn här ovanför räknar ut svaret åt dig, men du kan också göra ett program för att testa dina egna matteskills, så här:
                    Fyll i luckorna för att göra det klart!
                example_code_2: |
                    ```
                    rätt_svar = 11 * 27
                    answer = {ask} 'Hur mycket är 11 gånger 27?'
                    {if} svar {is} _ {print} 'Bra jobbat!'
                    {else} {print} 'Fel! Det var ' _
                    ```
                story_text_3: |
                    **Extrauppgift** Du kan också låta datorn göra slumpmässiga summor på egen hand med random.
                example_code_3: |
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number_1 = _
                    number_2 = _
                    correct_answer = number_1 * number_2
                    given_answer = 'What is ' number_1 ' times ' number_2 '?'
                    {if} _
                    {else} _
            9:
                story_text: |
                    På nivå 6 gjorde du en miniräknare och på den här nivån kan du utöka den koden så att den ställer flera frågor.

                    ### Övning 1
                    Kan du avsluta rad 10 så programmet fungerar?

                    ### Övning 2
                    Ge spelaren feedback när den matar in rätt eller fel svar. För att göra det behöver du lägga till ett `{else}`.
                example_code: |
                    ```
                    poäng = 0
                    {repeat} 10 {times}
                        tal = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        tal1 = tal {at} {random}
                        tal2 = tal {at} {random}
                        korrekt_svar = tal1 * tal 2
                        {print} 'Vad är ' tal1 ' gånger ' tal2 '?'
                        svar = {ask} 'Skriv ditt svar här ...'
                        {print} 'Du svarade' svar
                        {if} _ {is} _
                            poäng = poäng + 1
                    {print} 'Bra jobbat! Du har ... ' poäng ' av 10 poäng!'
                    ```
            10:
                story_text: |
                    This calculator game helps you practise your tables of multiplication!
                    ### Exercise
                    Fill in the blanks. We want this program to ask the player these questions:
                    ```
                    How much is 1 times 1?
                    How much is 1 times 2?
                    How much is 1 times 3?
                    How much is 2 times 1?
                    How much is 2 times 2?
                    How much is 2 times 3?
                    How much is 3 times 1?
                    How much is 3 times 2?
                    How much is 3 times 3?
                    _
                    ```
                example_code: |
                    ```
                    numbers = 1, 2, 3
                    {for} _
                        {for} _
                            answer = {ask} _
                            correct = number_1 * number_2
                            {if} answer {is} correct
                                {print} 'Great job!'
                            {else}
                                {print} 'That is wrong. The right answer is ' correct
                    ```
            11:
                story_text: |
                    Med en `{for}` kan du förenkla övningsprogrammet för multiplikationstabeller.

                    ### Övning 1
                    Förbättra exempelkoden så att den skriver ut en snygg multiplikationstabell: <br> "1 gånger 10 är 10", "2 gånger 10 är 20", etc.

                    ### Övning 2
                    Gå tillbaka till din multiplikationskod på nivå 10 och ändra den så att den använder `{for}` och `{range}`.
                example_code: |
                    ```
                    tal = 10
                    {for} i {in} {range} 1 till 10
                        {print} i * tal
                    ```
            12:
                story_text: |
                    På den här nivån kan du göra en miniräknare som fungerar för decimaltal.

                    ### Övning 1
                    Fyll i tomrummen för att göra klart miniräknaren. Kom ihåg att använda punkt och inte komma för decimaltal.

                    ### Övning 2
                    Skapa ett nytt matematikövningsprogram, men använd nu decimaltal.
                    Skapa en lista med tal, välj två som ska multipliceras och låt spelaren svara.
                    Och naturligtvis måste du kolla svaret! **Extrauppgift** Öka svårighetsgraden genom att lägga till liv: En spelare förlorar ett liv för ett felaktigt svar och efter tre felaktiga svar slutar spelet.
                example_code: |
                    ```
                    tal1 = {ask} 'Vilket är det första talet?'
                    tal1 = {ask} 'Vilket är det andra talet?'
                    svar = _
                    {print} tal1 ' plus ' tal2 ' är ' _
                    ```
            13:
                story_text: |
                    ### Övning 1
                    Vi gör övningsprogrammet lite svårare. Spelaren måste nu svara rätt på två frågor. Fyll i de tomma fälten för att göra klart programmet.

                    ### Övning 2 Extrauppgift
                    Ibland har beräkningar flera rätta svar. Till exempel kan 10 delas med 5 och med 2. Så frågan 'Vilket tal delar 10?' kan besvaras med 2 och med 5.
                    Be om en beräkning som har flera korrekta svar, be spelaren att svara på den och avgör om den är korrekt med hjälp av `{or}`.
                    Töm programmeringsfältet och skapa din egen lösning.
                example_code: |
                    ```
                    svar1 = {ask} 'Vad är 10 gånger 7?'
                    svar2 = {ask} 'Vad är 6 gånger 7?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
            14:
                story_text: |
                    In this adventure you will build a calculator that calculates your mean grade for you. If you get your calculator to work, you can move on to the next adventure, which allows you to add two extra features.

                    ### Exercise 1
                    Fill in the blanks to get the calculator to work.
                    * Start with the fourth line, add a question to figure out what grade the student got.
                    * In the fifth line you'll want to calculate the total of all grades, so the total = total + grade.
                    * Then we get to set the return value. We want to return the mean, so the total devided by the amount of tests (4).
                    * Lastly we finish the code by calling the function in line 8.

                    Did you get it? Awesome! Would you like to add even more to your calculator? **This adventure continues in the next tab!**
                example_code: |
                    ```
                    {define} calculate_mean_grade
                        total = 0
                        {for} i {in} {range} 1 {to} 4
                            grade = {ask} _
                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
                    ```

                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
            15:
                story_text: |
                    Du kan lägga till `{while}` -slingan i räknespelet som du lärder dig göra på en tidigare nivå.
                    Det gör att spelaren inte kan fortsätta till nästa fråga om den svarar fel.

                    ### Exercise
                    Add the `{while}` loop in the function, ask the player what number_1 times number_2 is and print their answer.
                    Then `{call}` the function.
                example_code: |
                    ```
                    {define} new_question
                        numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        number_1 = numbers {at} {random}
                        number_2 = numbers {at} {random}
                        correct = number_1 * number_2
                        answer = 0
                        _
                        _
                        _
                        {print} 'Well done!'

                    {print} 'Give 10 correct answers to win!'
                    {for} i {in} {range} 1 {to} 10
                        _
                    {print} 'You win!'
                    ```
    calculator_2:
        name: Calculator 2
        default_save_name: Calculator 2
        description: Calculator 2
        levels:
            14:
                story_text: |
                    ### Exercise 2
                    **This is the second part of this adventure.** The adventure starts in the previous tab.
                    Of course, you don't always want to calculate the mean of 4 tests. You might want to calculate the mean of 10 tests or only 2...
                    We can fix this problem by adding the argument and variable 'amount_of_tests'.
                    * Start a new line on line 3. Set the amount_of_tests argument by asking the student how many tests they have made.
                    * Change the 4 in line 4 to the new argument amount_of_tests.
                    * Lastly, change the 4 in line 6 to amount_of_tests

                    Try out your new program. Does it work?

                    ### Exercise 3
                    Did you want to make your program even better? Great! In the previous program you could only calculate the mean grade of 1 subject, but it would be better if you could calculate the mean grade for all subjects you want!
                    We won't tell you how to do it, but we will give you one tip: Start your code in line 1 with: define calculate_mean_grade with subject.
                example_code: |
                    ```
                    # Use your own code from the previous adventure.
                    ```
    clear_command:
        name: '{clear}'
        default_save_name: kommandot_sudda
        description: kommandot sudda
        levels:
            4:
                story_text: |
                    Dags för ett nytt kommando! Med `{clear}` kan du sudda all text från utdataskärmen. På så sätt kan du hindra att skärmen blir för full med text.
                    Se upp! Om du använder ett `{clear}`-kommando, så kom ihåg att använda ett `{sleep}` ovanför det. Annars kommer Hedy att sudda skärmen utan att ge dig tid att läsa!
                example_code: |
                    ```
                    {print} '3'
                    {clear}
                    {print} '2'
                    {clear}
                    {print} '1'
                    {clear}
                    {print} 'wait for it...'
                    {sleep} 3
                    {clear}
                    {print} 'SURPRISE!'
                    ```
    debugging:
        name: debugging
        default_save_name: debugging
        description: debugging adventure
        levels:
            1:
                story_text: |-
                    Welcome to a debugging adventure. Debugging a code means getting rid of mistakes in the code.
                    That means that in these debugging adventures, we will show you code that does not work yet.
                    You will have to figure out what's wrong and correct the mistakes.

                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} I love programming
                    Do you love programming too?
                    {echo}
                    {print} What are your hobbies?
                    {echo} Your hobbies are
                    ```
            2:
                story_text: |-
                    Welcome to a debugging adventure. Debugging a code means getting rid of mistakes in the code.
                    That means that in these debugging adventures, we will give you a code that does not work yet.
                    You will have to figure out what's wrong and correct the mistakes.

                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    destination {ask} Where are you going on holidays?
                    {print} The flight to dstination leaves at 3 pm.
                    {ask} Did you check in your luggage yet?
                    {echo}
                    {print} Let me print your boarding pass for you.
                    {sleep}
                    Here you go! Have a nice trip!
                    ```
            3:
                story_text: |-
                    Welcome to a debugging adventure. Debugging a code means getting rid of mistakes in the code.
                    That means that in these debugging adventures, we will give you a code that does not work yet.
                    You will have to figure out what's wrong and correct the mistakes.

                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    movie_choices {is} dracula, fast and furious, home alone, barbie
                    chosen_movie {is} movies {at} {random}
                    {print} Tonight we will watch chosen _movies
                    like {ask} Do you like that movie?
                    {print} Tomorrow we will watch something else.
                    {add} chosen_movie {to} movie_choices
                    {print} Tomorrow we will watch tomorrows_movie
                    tomorrows_movie {is} movie_choices {at} {random}
                    I'll go get the popcorn! {print}
                    ```
            4:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to the online library!
                    {ask} What genre of books do you like?
                    {print} You like genre
                    author {is} {ask} 'Who's your favorite author?'
                    {print} 'author is your favorite author'
                    {print} Hmmm... i think you should try... books {at} {random}
                    ```
            5:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} Welcome to Swimming Pool Hedy!
                    class {is} {ask} 'Are you here to join a class today?'
                    {if} class yes
                    {print} 'Great! You're joining a class!
                    {print} {else} 'You will not be joining a class'
                    discount {is} 'Do you have a discount code?'
                    {if} discount {is} yes
                    discount_answer {is} {ask} 'What's your discount code?'
                    discount_codes = Senior4231, Student8786, NewMember6709
                    {if} discount_answer {is} {in} discount_cods
                    {print} 'That will be $3,50'
                    'That will be $5,50'
                    {print} 'Have a nice swim!'
                    ```
            6:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Vending machine'
                    chosen_product = {ask} 'Please select a product'
                    1_dollar_products = coke orange juice water
                    2_dollar_products = chocolate, cookie, museli bar
                    3dollar_prodcuts = potato chips, beef jerky, banana bread
                    {if} chosen {is} {in} 1_dollar_products
                    price = 1
                    {if} chosen_product {is} 2_dollar_products
                    price = 2
                    {else} chosen_product {in} 3_dollar_products
                    price = 3
                    amount_of_products = '{ask} How many of ' chosen_product would you like to have?'
                    total = price + amount_of_product
                    {print} 'That will be $' price 'please'
                    ```
            7:
                story_text: |-
                    ### Exercise
                    Surprise! This program looks more like an output than a code. And yet, we don't want you to just add `{print}` commands in front of each line.
                    Fix this program to turn it into the nursery rhyme 'Brother John (Frère Jaques)' by using the {repeat} command of course!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    Are you sleeping?
                    Brother John!
                    Morning bells are ringing!
                    Ding, dang, dong!
                    ```
            8:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to Manicures and Pedicures by Hedy'
                    bodypart = {ask} 'Are you getting your fingernails or toenails done today? Or both?'
                    {if} bodyparts {is} both
                            {print} That will be $25'
                            price = 25
                        {else}
                            {print} That will be $18'
                            price = 18
                    color = {ask} What color would you like?
                    sparkles = {ask} 'Would you like some sparkles with that?'
                    {if} sparkles {is} yes
                        {print} 'We charge $3 extra for that'
                    price = price + 3
                    {else} {print} 'No sparkles' {print} 'So no extra charge'
                    {sleep} 5
                    {print} 'All done! That will be $' price ' please!'
                    {print} 'Thank you! Byebye!'
                    ```
            9:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to our sandwich shop'
                    amount 'How many sandwiches would you like to buy?'
                    {repeat} amount {times}
                    {ask} {is} {ask} 'What kind or bread would you like your sandwich to be?'
                    types_of_bread {is} white, wheat, rye, garlic, gluten free
                    {if} chosen_bread in types_of_bread
                    {print} 'Lovely!'
                    {else}
                    'I'm sorry we don't sell that'
                    topping {is} {ask} 'What kind of topping would you like?'
                    sauce {is} {ask} 'What kind of sauce would you like?'
                    {print} One chosen_bread with topping and sauce.
                    price = amount * 6
                    {print} 'That will be 'price dollar' please'
                    ```

                    price = amount * 6
                    {print} 'That will be 'price dollar' please'
            10:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    names = Muad Hasan Samira Noura
                    activities = fly a kite, go swimming, go hiking, catch tan in the sun
                    {for} name {is} names
                    {print} At the beach name loves to activity at random
                    ```
            11:
                story_text: |-
                    ### Exercise
                    Debug this calender program. The output of this program is supposed to look like a list of dates.
                    For example:

                    ```
                    Hedy calender
                    Here are all the days of November
                    November 1
                    November 2
                    November 3
                    ```
                    And so on.

                    Mind that you have to test your code extra carefully for the month February, because the amount of days in this month changes in leap years.
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    print 'Hedy calender'
                    months_with_31 days = January, March, May, July, September, October, December
                    months_with_30_days = April, June, August, November
                    month = ask 'Which month would you like to see?'
                    if month in months_with_31_days
                        days = 31
                        if month in months_with30_days
                            days = 30
                    if month = February
                        leap_years = 2020, 2024, 2028, 2036, 2040, 2044, 2028
                        year = ask 'What year is it?'
                    if year in leap_years
                        days = 29
                    else
                        days = 28

                    print 'Here are all the days of ' moth
                    for i in range 1 to days
                        print month i
                    ```
            12:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define greet
                    greetings = 'Hello', 'Hi there', 'Goodevening'
                        print greetings at random

                    define take_order
                        food = ask 'What would you like to eat?'
                        print 'One food'
                        drink = 'What would you like to drink?'
                        print 'One ' drink
                        more = ask 'Would you like anything else?'
                            if more is 'no'
                        print 'Alright'
                            else
                            print 'And ' more
                    print 'Thank you'

                    print 'Welcome to our restaurant'
                    people = ask 'How many people are in your party tonight?'
                    for i in range 0 to people
                        call greet_costumer
                    ```
            13:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    defin movie_recommendation with name
                        action_movies == 'Die Hard', 'Fast and Furious', 'Inglorious Bastards'
                        romance_movies = 'Love Actually', 'The Notebook', 'Titanic'
                        comedy_movies = 'Mr Bean' 'Barbie''Deadpool'
                        kids_movies = 'Minions', 'Paddington', 'Encanto'
                        if name is 'Camila' or name is 'Manuel'
                            recommended_movie = kids_movie at random
                        if name is 'Pedro' or 'Gabriella'
                                mood = ask 'What you in the mood for?'
                            if mood is 'action'
                                recommended_movie = comedy_movies at random
                            if mood is 'romance'
                                recommended_movie = romance_movies
                        if mood is 'comedy'
                                recommended_movie = comedy_movies at random

                    print 'I would recommend ' recommended_movie ' for ' name

                    name = ask 'Who is watching?'
                    recommendation = ask 'Would you like a recommendation?'
                    if recommendaion is 'yes'
                    print movie_recommendation with name
                    else
                    print 'No problem!'
                    ```
            14:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define calculate_heartbeat
                        print 'Press your fingertips gently against the side of your neck'
                        print '(just under your jawline)'
                        print 'Count the number of beats you feel for 15 seconds'
                        beats == ask 'How many beats do you feel in 15 seconds?'
                        heartbeat = beats*4
                        print 'Your heartbeat is ' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print 'Your heartbeat seems fine'
                        else
                            if heartbeat > 60
                                print 'Your heartbeat seems to be too low'
                            if heartbeat < 100
                                print 'Your heartbeat seems to be too high'
                            print 'You might want to contact a medical professional'

                    measure_heartbeat = ask 'Would you like to measure your heartbeat?'
                    if measure_heartbeat = 'yes'
                        call measure_heartbeat
                    else
                        'no problem'
                    ```

                        print '(just under your jawline)'
                        print 'Count the number of beats you feel for 15 seconds'
                        beats == ask 'How many beats do you feel in 15 seconds?'
                        heartbeat = beats*4
                        print 'Your heartbeat is ' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print 'Your heartbeat seems fine'
                        else
                            if heartbeat > 60
                                print 'Your heartbeat seems to be too low'
                            if heartbeat < 100
                                print 'Your heartbeat seems to be too high'
                            print 'You might want to contact a medical professional'

                    measure_heartbeat = ask 'Would you like to measure your heartbeat?'
                    if measure_heartbeat = 'yes'
                        call measure_heartbeat
                    else
                        'no problem'
            15:
                story_text: |-
                    ### Exercise
                    Debug this random children's story. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    names = 'Tanya', 'Romy', 'Kayla', 'Aldrin', 'Ali'
                    verbs='walking', 'skipping', 'cycling', 'driving', 'running'
                    locations = 'on a mountaintop', 'in the supermarket', 'to the swimming pool'
                    hiding_spots = 'behind a tree', under a table', in a box'
                    sounds = 'a trumpet', 'a car crash', 'thunder'
                    causes_of_noise = 'a television', 'a kid with firecrackers', 'a magic elephant', 'a dream'

                    chosen_ name = names at random
                    chosen_verb = verbs at random
                    chosen_location = 'locations at random'
                    chosen_sounds = noises at random
                    chosen_spot = hiding_spots random
                    chosen_causes = causes_of_noise at random

                    print chosen_name ' was ' chosen_verb ' ' chosen_location
                    print 'when they suddenly heard a sound like ' sounds at random
                    print chosen_name ' looked around, but they couldn't discover where the noise came from'
                    print chosen_name ' hid ' chosen_spot'
                    print 'They tried to look around, but couldn't see anything from there'
                    hidden = 'yes'
                    while hidden = 'yes'
                        print chosen_name 'still didn't see anything'
                    answer = ask 'does ' chosen_name ' move from their hiding spot?'
                        if answer = 'yes'
                            hidden == 'no'
                    print 'chosen_name moved from' chosen_spot
                    print 'And then they saw it was just' chosen_cause
                    print chosen_name 'laughed and went on with their day'
                    print The End
                    ```
            16:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                    Tip: Make sure that you only see your score once in the end.
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    country = ['The Netherlands', 'Poland', 'Turkey', 'Zimbabwe', 'Thailand', 'Brasil', 'Peru', 'Australia', 'India', 'Romania' ]
                    capitals = 'Amsterdam', 'Warshaw' 'Istanbul', 'Harare', 'Bangkok', 'Brasilia', 'Lima', 'Canberra', 'New Delhi', 'Bucharest'
                    score = 0
                    for i in range 0 to 10
                        answer = ask 'What's the capital of ' countries[i]
                        correct = capital[i]
                        if answer = correct
                            print 'Correct!'
                        score = score + 1
                        else
                            print 'Wrong,' capitals[i] 'in the capital of' countries[i]
                        print 'You scored ' score ' out of 10'

                    ```
            17:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define food_order
                        toppings = ask 'pepperoni, tuna, veggie or cheese?'
                        size = ask 'big, medium or small?'
                        number_of_pizza = ask 'How many these pizzas would you like?'

                        print 'YOU ORDERED'
                        print number_of_pizzas ' size  ' topping ' pizza'

                    define drinks_order
                        drink = ask 'water, coke, icetea, lemonade or coffee?'
                        number_of_drinks = ask 'How many of these drinks would you like?'

                        print 'YOU ORDERED'
                        print number_of_drinks ' ' drink

                    'Welcome to Hedy pizza'
                    more_food = ask 'Would you like to order a pizza?'
                    while more_food = 'yes'
                        return food_order
                        more_food = ask 'Would you like to order a pizza?'
                    more_drinks = ask 'Would you like to order some drinks?'
                    while more_drinks == 'yes'
                        call drink_order
                        more_drinks == ask 'Would you like to order more drinks?'


                    print 'Thanks for ordering!'
                    ```
            18:
                story_text: |-
                    ### Exercise
                    Debug this Old MacDonald program from level 16. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    for i in range 1 to 3
                        animal = animals[i]
                        sound = sounds[i]
                        print 'Old MacDonald had a farm'
                        print 'E I E I O!'
                        print 'and on that farm he had a ' animal
                        print 'E I E I O!'
                        print 'with a ' sound sound ' here'
                        print 'and a ' sound sound ' there'
                        print 'here a ' sound
                        print 'there a ' sound
                        print 'everywhere a ' sound sound
                    ```
    default:
        name: Introduction
        default_save_name: introduktion
        description: Nivåbeskrivning
        levels:
            1:
                story_text: |
                    Välkommen till Hedy! På nivå 1 kan du börja med att skriva ut en berättelse.

                    Prova koden själv med den gröna 'Kör kod'-knappen under programmeringsfältet.

                    Är du klar? Gå då till nästa flik och lär dig ditt första kommando!
                example_code: |
                    ```
                    {print} Hello world!
                    ```
                    example_code: |
                        ```
                        {print} Hello world!
                        ```
            2:
                story_text: |
                    Grattis! Du har nått nivå 2. Förhoppningsvis har du redan gjort lite fantastisk kod!
                    På den första nivån kanske du märkte att kommandot `{echo}` bara kan spara en information åt gången.
                    Till exempel: i restaurangäventyret kunde man upprepa vad kunden ville äta, eller vad de ville dricka, men inte båda i en mening.
                    Det ändras på nivå 2. På nivå 2 lär du dig att arbeta med variabler, som låter dig spara flera olika informationer och skriva ut dem var du vill.
                    Så fortsätt nu till nästa flik!
                example_code: |
                    ```
                    {print} Välkommen till Hedys
                    {ask} Vad önskas att äta?
                    {echo} Så du vill ha
                    {ask} Vad vill du dricka till?
                    {echo} Så du vill ha
                    ```
            3:
                story_text: |
                    På den föregående nivån har du lärt dig vad en variabel är och hur du kan använda den för att göra dina äventyr mer interaktiva.
                    Men ... det är inte det enda du kan göra med variabler! Du kan också använda variabler för att skapa listor.
                    Och du kan till och med låta Hedy välja ett slumpmässigt ord från en lista, vilket låter dig göra riktiga spel!
                    Ta en snabb titt på nästa flik!
            4:
                story_text: |
                    På de tidigare nivåerna har du övat på att använda variabler, men du kanske har stött på ett problem.
                    Du kanske har försökt att köra en kod som denna:

                    Naturligtvis ville du skriva ut

                    `My name is Sophie`

                    men Hedy skriver

                    `My Sophie is Sophie`.

                    På den här nivån löser vi problemet genom att använda citattecken.
                example_code: |
                    ```
                    namn {is} Sophie
                    {print} Jag heter namn
                    ```
            5:
                story_text: |
                    På de tidigare nivåerna har du redan lärt dig att använda `{at} {random}` som gjorde dina spel annorlunda varje gång du körde koden.
                    Men det är inte riktigt interaktivt för spelaren har inget inflytande på vad som händer i spelet.

                    På den här nivån kommer du att lära dig kommandot `{if}`, som låter dig ge olika svar i ditt program. På så sätt kan du till exempel programmera ett hemligt lösenord för din dator.
                    Fortsätt till nästa flik för det nya kommandot!
                example_code: |
                    ```
                    lösenord {is} {ask} 'Vad är rätt lösenord?'
                    ```
            6:
                story_text: |
                    På föregående nivå har du övat med `{ask}` och `{if}`. Du kan till exempel fråga gästerna vad de skulle vilja äta.
                    Vad du dock inte kan göra ännu är att räkna ut priset för allas middag.

                    Nästa nivå gör det möjligt att använda addition, subtraktion och multiplikation i dina program. På så sätt kan du räkna ut priserna i din restaurang, men du kan också lägga till en hemlig kod för att ge dina vänner och familj rabatt.
                    Ett annat alternativ i nästa nivå är att programmera ditt eget mattespel, så att ditt småsyskon kan öva multiplikationstabellen.
                    Gå och se själv!
                example_code: |
                    ```
                    matpris {is} 0
                    drickapris {is} 0
                    totalpris {is} 0
                    {print} 'Välkommen till McHedy'
                    beställning {is} {ask} 'Vad önskas att äta?'
                    {if} beställning {is} hamburgare matpris {is} 5
                    {if} beställning {is} pommes frites matpris {is} 2
                    dricka {is} {ask} 'Vad vill du dricka?'
                    {if} dricka {is} vatten drickapris {is} 0
                    else drickapris {is} 3
                    totalpris {is} food_price + drink_price
                    {print} 'Det blir ' totalpris ' dollar, tack'
                    ```
            7:
                story_text: |
                    Bra jobbat! Du har nått nästa nivå, vilket betyder att du har tränat på `{if}` och `{else}`. Du har säkert märkt att din kod blir längre och längre.
                    Till exempel om du vill programmera 'Happy Birthday'.

                    Det är mycket kod för i huvudsak samma ord om och om igen. I nästa flik lär du dig tack och lov en lösning med kommandot `{repeat}`, som låter dig upprepa en kodrad flera gånger.
                example_code: |
                    ```
                    {print} 'happy birthday to you'
                    {print} 'happy birthday to you'
                    {print} 'happy birthday dear Hedy'
                    {print} 'happy birthday to you'
                    ```
            8:
                story_text: |
                    Nu har du lärt dig hur du upprepar en enstaka kodrad. Detta är praktiskt, men det räcker inte alltid. Ibland vill du upprepa flera rader samtidigt.
                    Den här nivån låter dig gruppera flera rader kod och upprepa den gruppen av rader på en gång!
                example_code: |
                    ```
                    {repeat} 5 {times} {print} 'På nästa flik kan du upprepa flera rader kod samtidigt!'
                    ```
            9:
                story_text: |
                    Bra jobbat! Du har nått en ny nivå! På den föregående nivån lärde du dig använda flera rader kod i ett {if}- eller {repeat}-kommando. Men du kan ännu inte kombinera dem ...
                    Goda nyheter! På den här nivån kommer du att få lägga en {if} inuti en {if}, eller inuti ett {repeat}-kommando.
                example_code: |
                    ```
                    svar = {ask} 'Är du redo att lära dig något nytt?'
                    {if} svar {is} ja
                        {print} 'Bra! Du kan lära dig att använda kommandot repeat i if-kommandot!'
                        {print} 'Hurra!'
                        {print} 'Hurra!'
                        {print} 'Hurra!'
                    {else}
                        {print} 'Kanske du ska öva lite mer på förra nivån'
            10:
                story_text: |
                    Det här gå ju bra! På de tidigare nivåerna stod vi fortfarande inför ett litet problem. Du har lärt dig att repetera kodrader, men tänk om du skulle vilja ändra raden lite.
                    Till exempel om du vill sjunga låten 'if you're happy and you know it' så skulle det se ut så här:

                    Om du vill fortsätta med nästa vers, 'stomp your feet' och nästa och nästa, måste du ändra koden helt.
                    På den här nivån kommer du att lära dig kommandot `{for}`, som låter dig göra en lista med moment och upprepa koden med en nytt moment varje gång!
                    Ta en titt!
                example_code: |
                    ```
                    {repeat} 2 {times}
                        {print} 'if youre happy and you know it clap your hands'
                    {print} 'if youre happy and you know it and you really want to show it'
                    {print} 'if youre happy and you know it clap your hands'
                    ```
            11:
                story_text: |
                    Du har nått nivå 11: bra jobbat! På de högre nivåerna fokuserar Hedy mer och mer på att lära dig programspråket Python.
                    I Python finns inget `{repeat}` -kommando, men det finns ett kommando som fungerar som {repeat}. Är du nyfiken på hur man säger `{repeat}` på Python-språk? Fortsätt snabbt för att ta reda på det!
            12:
                story_text: |
                    Kanske du testade att använda decimaltal i ditt restaurangäventyr. Om du gjorde det märkte du förmodligen att Hedy inte förstod dem än och alltid avrundade.
                    Från den här nivån kan du använda decimaltal.
                example_code: |
                    ```
                    hamburgare = 5
                    dryck = 2
                    totalt = hamburgare + dryck
                    print 'Du har beställt en hamburgare och en dryck'
                    print 'Det kostar' totalt 'dollar tack'
                    ```
            13:
                story_text: |
                    På de tidigare nivåerna lärde du dig hur man lägger två `{if}`-kommandon inuti varandra. Det här fungerar bra, men det ger dig väldigt lång och klumpig kod som den här:

                    I det här systemet måste du ange både rätt användarnamn och rätt lösenord.
                    På den här nivån kommer du att lära dig kommandot `{and}` som att gör den här koden mycket kortare och lättbegriplig!
                    Kolla in det!
                example_code: |
                    ```
                    användar = {ask} 'Vad är ditt användarnamn?'
                    lösenord = {ask} 'Vad är ditt lösenord?'
                    {if} användarnamn {is} 'Hedy'
                        {if} lösenord {is} 'hemligt'
                            {print} 'Välkommen Hedy!'
                        {else}
                            {print} 'Tillträde förbjudet'
                    {else}
                        {print} 'Tillträde förbjudet!'
                    ```
            14:
                story_text: |
                    Med programmet här under kan du räkna ut om du har godkänt ett ämne i skolan (alltså ett betyg på sex eller högre).
                    Du kan se att den här koden är extremt ineffektiv, på grund av den mycket långa koden på rad fem.
                    Alla olika betyg från 1 till 5 måste programmeras separat. Tur för dig, för på den här nivån kommer du att lära dig hur du gör detta utan denna extremt långa kod!
                example_code: |
                    ```
                    första_poäng = {ask} 'Vilken poäng fick du på ditt första prov?'
                    andra_poäng = {ask} 'Vilket poäng fick du på ditt andra prov?'
                    sammanlagt = första_poäng + andra_poäng
                    medelvärde = sammanlagt / 2
                    {if} medelvärde = 1 {or} medelvärde = 2 {or} medelvärde = 3 {or} medelvärde = 4 {or} medelvärde = 5
                        {print} 'Åh nej! Du har misslyckats med ämnet ...'
                    {else}
                        {print} 'Bra! Du har klarat ämnet!'
                    ```
            15:
                story_text: |
                    I det spelet här nedanför finns kod för att se till att spelaren kan spela så länge den vill ...
                    Men koden är ineffektiv och alldeles för lång. Och vad händer om spelaren vill spela 101 spel istället för 100?
                    Kan du inte spela hur många gånger som helst?
                    På den här nivån kommer du att lära dig ett kommando som gör allt detta mycket enklare!
                example_code: |
                    ```
                    spel {is} 'pågår'
                    {for} i {in} {range} 1 {to} 100
                        {if} spel {is} 'pågår'
                            svar = {ask} 'Vill du fortsätta?'
                            {if} svar {is} 'nej'
                                spel {is} 'över'
                            {if} svar {is} 'ja'
                                {print} 'Ok, vi fortsätter'
                    ```
            16:
                story_text: |
                    På den här nivån kommer vi att växa lite mer mot riktig Python-kod. Du kommer också att lära dig hur du matchar två listor.
                    På så sätt kan du skriva kod där ett djur matchas till rätt ljud.
                    För de två koderna här under är rent nonsens!
                example_code: |
                    ```
                    djur = 'höna', 'häst', 'ko'
                    läten = 'kluck', 'gnägg', 'mu'
                    {for} vad {in} djur
                        {print} 'En 'vad' säger ' läten {at} {random}
                    ```
                    Du kan också försöka få det att fungera på det här sättet, men ...
                    ```
                    djur = 'höna', 'häst', 'ko'
                    läten = 'kluck', 'gnägg', 'mu'
                    {for} vad {in} djur
                        {for} läte {in} läten
                            {print} 'En 'vad' säger 'läte
                    ```
            17:
                story_text: |
                    Du har nästan nått sista nivån i Hedy – bra jobbat! På den här nivån kommer du att lära dig ett riktigt Python-sätt att använda `{print}`.
            18:
                story_text: |
                    Grattis! Du har nått den sista nivån i Hedy! Koden du skrivit här kan kopieras till riktiga Python-miljöer som replit eller PyCharm och du kan fortsätta lära dig där!
                    Notera att Python bara kan läsa engelska kommandon, så om du har använt andra språk måste du byta till engelska nu.
    dice:
        name: Tärning
        default_save_name: Tärning
        description: Gör din egen tärning
        levels:
            3:
                story_text: |
                    På den här nivån kan vi välja från en lista. I och med det kan vi låta datorn kasta tärning åt oss.
                    Ta en titt på de spel du har i garderoben hemma.
                    Finns det spel med en (speciell) tärning? Du kan också kopiera den med den här koden.
                    Till exempel tärningen i spelet Earthworms som har siffrorna 1 till 5 och en daggmask.

                    ![Tärning av daggmaskar med 1 till 5 och en daggmask på den](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    val {is} 1, 2, 3, 4, 5, earthworm
                    {print} Du kastade _ {at} {random}
                    ```
                story_text_2: |
                    ### Övning
                    Tärningarna i exemplet ovan är för ett visst spel. Kan du göra vanliga tärningar?
                    Eller andra specialtärningar från ett annat spel?
                example_code_2: |
                    ```
                    val {is} _
                    ```
            4:
                story_text: |
                    På den här nivån kan du också skapa tärningar. Men den här gången kan du prova det själv, utan exempelkod!

                    ### Övning
                    Gör dina egna tärningar i den här nivån.
                    Tips: Om du inte har någon aning om hur man gör tärningar. Ta en titt på dina tärningar från föregående nivå, men glöm inte att lägga till citattecken.
            5:
                story_text: |
                    Vi ska lägga till kommandona `{if}` och `{else}` till vår tärning!

                    ### Övning
                    Komplettera exempelkoden så att koden säger "Du kan sluta kasta" när du har kastat en daggmask. Den ska säga "Du måste kasta igen" om du har kastat något annat.
                    **Extra** Kanske vill du återskapa en tärning från ett helt annat spel. Det går också bra! Hitta då på en egen reaktion, t.ex. 'ja' för 6 och 'synd' för något annat.
                example_code: |
                    ```
                    valmöjligheter {is} 1, 2, 3, 4, 5, daggmask
                    kast {is} val {at} {random}
                    {print} 'du har kastat' kast
                    _ throw {is} daggmask {print} 'Du kan sluta kasta.'
                    _ {print} 'Du måste kasta igen!'
                    ```
            6:
                story_text: |
                    Du kan också låta en daggmask dö igen, men nu kan du också beräkna hur många poäng som har kastats.
                    Du kanske vet att masken räknar fem poäng för daggmaskar. Nu kan du efter ett kast direkt räkna ut hur många poäng du har kastat.
                    Detta är koden för att beräkna poäng för en tärning:

                    ### Övning
                    Kan du göra koden så att du får fram den totala poängen för åtta tärningar? För att göra det måste du klippa och klistra in några rader i koden.
                example_code: |
                    ```
                    val = 1, 2, 3, 4, 5, daggmask
                    poäng = 0
                    kast = val {at} {random}
                    {print} 'du kastade ' kast
                    {if} kast {is} daggmask poäng = poäng + 5 {else} poäng = poäng + kast
                    {print} 'det är ' poäng ' poäng'
                    ```
                example_code_2: |
                    Lyckades du räkna ut poängen för åtta tärningar? Det behövdes en hel del klippande och klistrande, eller hur? Vi kommer att göra det enklare på nivå 7!
            7:
                story_text: |
                    Du kan också göra en tärning igen på den här nivån. Med `{repeat}` -koden kan du enkelt kasta en handfull tärningar.

                    ### Övning
                    Försök att avsluta exempelkoden!  **Extrauppgift** Tänk på ett spel du känner till som använder en tärning och programmera det med hjälp av `{repeat}`.
                example_code: |
                    ```
                    val = 1, 2, 3, 4, 5, 6
                    _ _ _ _ _ _ _
                    ```
            10:
                story_text: |
                    ### Övning
                    Är alla för långsamma på att kasta tärning? På den här nivån kan du låta Hedy kasta allas tärningar på en gång!
                    Byt ut namnen mot namnen på dina vänner eller familj och avsluta koden så att alla kastar.
                example_code: |
                    ```
                    spelare = Ann, John, Jesse
                    val = 1, 2, 3, 4, 5, 6
                    _ _ _ _
                        {print} 'spelare ' kastar ' val {at} {random}
                       {sleep}
                    ```
            15:
                story_text: |
                    ### Exercise
                    In this level you can create a little game in which you'll have to throw 6 as fast as possible.
                    We have started the code, it's up to you to get the game to work!

                    Firstly, add a `{while}` loop that checks if 6 has been thrown or not.
                    As long as you haven't thrown 6 already, throw the dice on a random number.
                    Print what the player has thrown.
                    Add a try to the amount of tries
                    Wait a second before you throw again, or - in case you've thrown a 6 - before the game ends.
                example_code: |
                    ```
                    options = 1, 2, 3, 4, 5, 6
                    {print} 'Throw 6 as fast as you can!'
                    thrown = 0
                    tries = 0
                    _
                    _
                    _
                    _
                    _
                    {print} 'Yes! You have thrown 6 in ' tries ' tries.'
                    ```
    dishes:
        name: Disk?
        default_save_name: Disk
        description: Använd datorn för att se vem som diskar
        levels:
            3:
                story_text: |
                    Är ni alltid oense hemma om vem som ska diska eller göra vid kattlådan idag?
                    Då kan du låta datorn välja mycket rättvist. Det kan du programmera på den här nivån!
                example_code: |
                    ```
                    personer {is} mamma, pappa, Emma, Sophie
                    {print} personer {at} {random} får diska
                    ```
                story_text_2: |
                    ### Övning
                    Gör en egen version av programmet för diskmaskinen. Gör först en lista över dina familjemedlemmar.
                    Tänk sedan ut en uppgift som måste göras och låt datorn bestämma vem som ska göra uppgiften med kommandot `{at} {random}`.

                    **Extra** Känner du inte för att diska själv? Hacka programmet genom att ta bort ditt namn från listan med kommandot `{remove}` `{from}`.
            4:
                story_text: |
                    Med citattecken kan du göra ditt diskprogram ännu bättre.

                    ### Övning
                    Fyll först i rätt symboler eller kommandon i tomrummen för att få detta exempelprogram att fungera.
                    Fick du rätt på det? Bra! Kopiera nu din egen kod från föregående nivå och få den att fungera på den här nivån genom att lägga till citattecken på rätt ställen.
                example_code: |
                    ```
                    personer {is} mamma, pappa, Emma, Sophie
                    {print} _ ansvarig för att diska är _
                    {sleep}
                    {print} personer {at} _
                    ```
            5:
                story_text: |
                    Med `{if}` kan du nu ha roligare valmöjligheter i programmet. Du kan låta programmet reagera på datorns val.
                    ### Övning
                    Kan du avsluta koden så att den skriver ut 'tyvärr' när det är din tur och annars 'ja!'?
                    Glöm inte citattecken!
                example_code: |
                    ```
                    personer {is} mamma, pappa, Emma, Sophie
                    diskare {is} personer {at} {random}
                    _ diskare {is} Sophie {print} _ synd att jag måste diska _
                    _ {print} 'lyckligtvis ingen disk eftersom ' _ ' redan diskar'
                    ```
            6:
                story_text: |
                    Hur ofta ska var och en diska? Är det rättvist? Du kan räkna ut det på den här nivån.
                example_code: |
                    ```
                    personer = mamma, pappa, Emma, Sophie
                    emma_diskar = 0
                    diskare = personer {at} {random}
                    {print} 'Disken sköts av ' diskare
                    {if} diskare {is} Emma emma_diskar = emma_diskar + 1
                    {print} 'Den här veckan kommer Emma att diska' emma_diskar 'gånger'
                    ```

                    Nu kan du kopiera raderna 3 till 5 några gånger (t.ex. sju gånger för en hel vecka) för att beräkna för en hel vecka igen.
                    Har du gjort koden för hela veckan?
                story_text_2: |
                    Om du har extrem otur kan det tidigare programmet bestämma att du ska diska hela veckan! Det är inte rättvist!
                    För att skapa ett mer rättvist system kan du använda kommandot `{remove}` för att ta bort den valda personen från listan. På så sätt behöver du inte diska igen förrän alla andra har gjort det.

                    Måndag och tisdag är redan klara för dig! Kan du lägga till resten av veckan?
                    Och … kan du komma på en lösning för när din lista är tom?
                example_code_2: |
                    ```
                    personer = mamma, pappa, Emma, Sophie
                    diskare = personer {at} {random}
                    {print} 'Måndagsdisken sköts av: ' diskare
                    {remove} diskare {from} personer
                    diskare = personer {at} {random}
                    {print} 'Tisdagsdisken sköts av: ' diskare
                    {remove} diskare {from} personer
                    ```
            7:
                story_text: |
                    Med `{repeat}` kan du upprepa delar av koden. Du kan använda detta för att beräkna vem som kommer att diska under flera dagar!
                    ### Övning
                    Använd kommandot `{repeat}` för att bestämma vem som ska diska under en hel vecka. Varje tomrum måste fyllas med ett kommando eller ett tal!
                    **Extrauppgift** Kan du komma på andra uppgifter i huset? Anpassa koden så att den beslutar om tre hushållssysslor. Glöm inte att skriva ut vilka uppgifter det handlar om!
                example_code: |
                    ```
                    personer = mamma, pappa, Emma, Sophie
                    {repeat} _ _ {print} 'Disken kommer att skötas av ' _ _ _
                    ```
            10:
                story_text: |
                    På den här nivån kan du göra ett schema för hela veckan på ett enkelt sätt!

                    ### Övning
                    Lägg till en andra syssla, t.ex. dammsugning eller städning, och se till att den också är uppdelad för hela veckan.
                    <br> **Extrauppgift** Programmet är inte rättvist – du kan ha otur och behöva diska hela veckan. Hur skulle du kunna göra programmet mer rättvist?
                example_code: |
                    ```
                    dagar = måndag, tisdag, onsdag, torsdag, fredag, lördag, söndag
                    namn = mamma, pappa, Emma, Sophie
                    {for} dag {in} dagar
                        {print} namn {at} {random} ' diskar på ' dag
                    ```
    elif_command:
        name: '{elif}'
        default_save_name: annarsom
        description: annarsom
        levels:
            17:
                story_text: |
                    På den här nivån kan du också använda ett nytt kommando: `{elif}`. `{elif}` är en förkortning för `{else}` `{if}` och du behöver det när du vill göra tre (eller fler!) alternativ.
                    Kolla in det!
                example_code: |
                    ```
                    priser = ['1 miljon dollar', 'en äppelpaj', 'ingenting']
                    ditt_pris = priser[{random}]
                    {print} 'Du vinner ' ditt_pris
                    {if} ditt_pris == '1 miljon dollar' :
                        {print} 'Hurra! Du är rik!'
                    {elif} ditt_pris == 'en äppelpaj' :
                        {print} 'Härligt, en äppelpaj!'
                    {else}:
                        {print} 'Bättre tur nästa gång …'
                    ```
    for_command:
        name: '{for}'
        default_save_name: för
        description: kommandot för
        levels:
            10:
                story_text: |-
                    ## För
                    På den här nivån lär vi oss ett nytt kommando som heter `{for}`. Med `{for}` kan du skapa en lista och gå igenom alla element.
                    `{for}` skapar ett block, som `{repeat}` och `{if}` så alla rader i blocket måste börja med fyra mellanslag.
                example_code: |
                    ```
                    djur = hund, katt, marulk
                    {for} djuret {in} djur
                        {print} 'Jag älskar ' djuret
                    ```
                story_text_2: |
                    ### Exercise
                    Finish this code by adding `{for} action {in} actions` to line 2.
                example_code_2: |
                    ```
                    actions = clap your hands, stomp your feet, shout Hurray!
                    _
                        {repeat} 2 {times}
                            {print} 'If youre happy and you know it, ' action
                            {sleep} 2
                        {print} 'If youre happy and you know it, and you really want to show it'
                        {print} 'If youre happy and you know it, ' action
                        {sleep} 3
                    ```
            11:
                story_text: |-
                    På den här nivån lägger vi till en ny form av `{for}`. På tidigare nivåer använde vi `{for}` med en lista, men vi kan också använda `{for}` med tal.
                    Det gör vi genom att lägga till ett variabelnamn, följt av `{in}` `{range}`. Vi skriver sedan talet vi vill börja på, `{to}` och talet vi vill sluta på.

                    Prova exemplet för att se vad som händer! På den här nivån måste alltid använda indrag på raderna under `{for}`-satserna.
                example_code: |
                    ```
                    {for} räknare {in} {range} 1 {to} 10
                        {print} räknare
                    {print} 'Redo eller icke, nu kommer jag!'
                    ```
            17:
                story_text: |
                    Nu ska vi ändra reglerna för indragning lite. Varje gång vi behöver en indragning måste vi ha `:` på raden före indragningen.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Klar eller inte, här kommer jag!'
                    ```
            18:
                story_text: |
                    Lastly, we'll turn `{for} i {in} {range} 1 to 5` into real Python code, like this:
                example_code: |
                    ```
                    {for} i {in} {range}(1,5):
                        {print} (i)
                    ```
    fortune:
        name: Spådam
        default_save_name: Spådam
        description: Låt Hedy förutspå framtiden
        levels:
            1:
                story_text: |
                    Har du någonsin varit på marknad och fått din framtid förutspådd av en spådam? Eller har du någonsin spelat med en magisk åttaboll?
                    Då vet du säkert att de inte riktigt kan förutse din framtid, men det är ändå kul att spela!

                    På de kommande nivåerna kan du lära dig hur du skapar din egen spåmaskin!
                    På nivå 1 kan du börja enkelt genom att låta Hedy presentera sig som en spådam och låta henne `{echo}` spelarnas svar.
                    Så här:
                example_code: |
                    ```
                    _ Hej, jag är spådamen Hedy!
                    _ Vem är du?
                    _ Låt mig ta en titt i min kristallkula.
                    _ Jag ser ... Jag ser ...
                    _ Ditt namn är
                    ```
                story_text_2: |
                    ### Övning
                    Kopiera exempelkoden till din inmatningsskärm och fyll i de tomma rutorna så att koden fungerar.
                    **Extra** Ändra koden och låt spådamen inte bara förutsäga ditt namn utan även din ålder, ditt favoritsportlag eller något annat om dig själv.
            3:
                story_text: |
                    På de tidigare nivåerna har du skapat din första spåmaskin, men Hedy kunde inte förutsäga någonting, bara `{echo}`.
                    På den här nivån kan du använda en variabel och kommandot `{at} {random}` för att verkligen låta Hedy välja ett svar åt dig. Titta till exempel på den här koden:
                example_code: |
                    ```
                    {print} Jag är spådamen Hedy!
                    fråga {is} {ask} Vad vill du veta?
                    {print} Det här är vad du vill veta: fråga
                    svar {is} ja, nej, kanske
                    {print} Min kristallkula säger …
                    {sleep} 2
                    {print} svar {at} {random}
                    ```
                story_text_2: |
                    ### Övning
                    Just nu kan Hedy bara svara ja, nej eller kanske. Kan du ge Hedy fler svarsalternativ, till exempel 'definitivt' eller 'fråga igen'.
            4:
                story_text: |
                    ### Övning
                    Vi har tagit bort alla citattecken från den här exempelkoden – kan du lägga till dem på alla ställen där det behövs?

                    ### Övning 2
                    Gå tillbaka till den föregående nivån och kopiera din spådomskod. Få koden att fungera på den här nivån genom att lägga till citattecken på rätt ställen.
                example_code: |
                    ```
                    _ Lägg till citattecken i denna kod _
                    {print} Jag är spådamen Hedy!
                    fråga {is} {ask} Vad vill du veta?
                    {print} Detta är din fråga: fråga
                    svar {is} ja, nej, kanske
                    {print} Min kristallkula säger ...
                    {sleep} 2
                    {print} svar {at} {random}
                    ```
            5:
                story_text: |
                    ### Övning
                    I exempelkoden ser du hur man gör ett spåprogram som låter dig vända oddsen till din fördel. Detta fuskprogram säger alltid att du kommer att vinna på lotteriet, men dina vänner kommer aldrig att vinna.

                    Använd detta för att göra ditt eget program – var kreativ! Du kan till exempel skriva kod som förutspår att:
                    * ditt favoritsportlag kommer att slå alla konkurrenter!
                    * din favoritfilm kommer att väljas till filmkvällen!
                    * du vinner biljetter till din favoritshow!
                    * du är den vackraste av dem alla, som Snövits magiska spegel.
                    Släpp loss din fantasi!

                    Ditt program måste bestå av minst 10 rader kod och måste ha minst ett `{if}`- och `{else}`-kommando.
                example_code: |
                    ```
                    vänner {is} Jordan, Lucy, Dave
                    {print} 'Jag kan förutse om du kommer att vinna på lotteriet imorgon!'
                    person {is} {ask} 'Vem är du?'
                    bra_svar {is} Hurra! Du vinner!, Du kommer definitivt att vinna!, Vi har en vinnare!
                    dåligt_svar {is} Otur! Försök igen!, En annan person kommer att vinna, Du förlorar!
                    {if} person {in} vänner {print} bra_svar {at} {random}
                    {else} {print} dåligt_svar {at} {random}
                    ```
            6:
                story_text: |
                    På den här nivån kan du använda matematik i dina förutsägelser som spåkvinna. Detta gör att du kan hitta på (fåniga) formler för att beräkna framtiden.
                    Du kan till exempel beräkna hur rik du kommer att bli eller hur många barn du kommer att få när du blir vuxen.



                    ### Övning
                    Kan du hitta på en egen (fånig) spåmaskin?
                example_code: |
                    ```
                    {print} 'Jag är spådamen Hedy!'
                    {print} 'Jag kan förutsäga hur många barn du kommer att få när du blir stor!'
                    ålder = {ask} 'Hur gammal är du?'
                    syskon = {ask} 'Hur många syskon har du?'
                    längd = {ask} 'Hur lång är du i centimeter?'
                    barn = längd / ålder
                    barn = barn - syskon
                    {print} 'Du kommer att få …'
                    {sleep}
                    {print} barn ' barn!'
                    ```
            7:
                story_text: |
                    ### Övning
                    Avsluta det här programmet som talar om för dig om din crush älskar dig tillbaka eller inte.
                example_code: |
                    ```
                    {print} 'Jag har en blomma med magiska kronblad'
                    {print} 'Om du plockar kronbladen kommer blomman att berätta för dig om din crush älskar dig tillbaka'
                    antal = {ask} 'Hur många kronblad vill du välja?'
                    alternativ = de älskar dig, de älskar dig inte
                    _ _ _ _ alternativ {at} {random}
                    ```
            8:
                story_text: |
                    I nästa exempel kan du låta din spådam ställa flera frågor och även skriva ut dem!

                    ### Övning
                    Kan du fylla i rätt kommando på de tomma platserna?
                example_code: |
                    ```
                    {print} 'Jag är spådamen Hedy!'
                    {print} 'Du kan ställa tre frågor till mig.'
                    svar = ja, nej, kanske
                    _ _ _
                       fråga = {ask} 'Vad vill du veta?'
                       {print} fråga
                       {sleep}
                       {print} 'Min kristallkula säger ...' svar {at} {random}
                    ```
            10:
                story_text: |
                    På den här nivån lär du dig att programmera spelet MASH (M=herrgård, A=lägenhet, S=stuga, H=hus). I det här spelet kan du förutsäga för alla spelare samtidigt hur deras framtid kommer att se ut.

                    ### Övning
                    Fyll i tomrummen genom att använda de nya kommandon du lärt dig på den här nivån.
                example_code: |
                    ```
                    bostäder = en herrgård, en lägenhet, ett skjul, ett hus
                    kärlekar = ingen, en kunglighet, sin granne, sin sanna kärlek
                    husdjur = hund, katt, elefant
                    namn = Jenna, Ryan, Jim
                    _
                        {print} namn ' bor i ' bostäder {at} {random}
                        {print} namn ' kommer att gifta sig med ' älskar {at} {random}
                        {print} namn ' kommer att få en ' husdjur {at} {random} ' som husdjur.
                       {sleep}
                    ```
            12:
                story_text: |-
                    Från och med nivå 12 måste du också använda citattecken i listor, före och efter varje punkt.

                    ### Övning
                    Lägg till två förutsägelser i listan
                example_code: |
                    ```
                    spådomar = 'du kommer att halka på ett bananskal', _
                    {print} 'Jag ska ta en titt i min kristallkula om din framtid.'
                    {print} 'Jag ser … jag ser …'
                    {sleep}
                    {print} spådomar {at} {random}
                    ```
    functions:
        name: functions
        default_save_name: functions
        description: functions
        levels:
            12:
                story_text: |
                    In this level you'll learn how to use **functions**. A function is a block of code you can easily use multiple times. Using functions helps us organize pieces of code that we can use again and again.
                    To create a function, use `{define}` and give the function a name. Then put all the lines you want in the function in a indented block under the `{define}` line.
                    Leave one empty line in your code to make it look nice and neat. Great job! You have created a function!

                    Now, whenever we need that block of code, we just use <code>{call}</code> with the function's name to call it up! We don't have to type that block of code again.

                    Check out this example code of a game of Twister. The function 'turn' contains a block of code that chooses which limb should go where.

                    ### Exercise
                    Finish this code by setting the 2 variables chosen_limb and chosen_color.
                    Then, choose how many times you want to call the function to give the twister spinner a spin.

                    ### Exercise 2
                    Improve your code by adding a variable called 'people'. Use the variable to give all the players their own command in the game.
                    For example: 'Ahmed, right hand on green' or 'Jessica, left foot on yellow'.
                example_code: |
                    ```
                    sides = 'left', 'right'
                    limbs = 'hand', 'foot'
                    colors = 'red', 'blue', 'green', 'yellow'

                    {define} turn
                        chosen_side = sides {at} {random}
                        chosen_limb = limbs _
                        chosen_color = colors _
                        {print} chosen_side ' ' chosen_limb ' on ' chosen_color

                    {print} 'Lets play a game of Twister!'
                    {for} i {in} {range} 1 to _
                        {call} turn
                        {sleep} 2
                    ```
            13:
                story_text: |
                    Now that you've learned how to use functions, you'll learn how to use a function with an argument.
                    An **argument** is a variable that is used within a function. It is not used outside the function.

                    For example in this code we've programmed the first verse of the song 'My Bonnie is over the ocean'.
                    In this example code the argument `place` is used. Place is a variable that is only used in the function, so an argument.
                    To use `place` we have programmed the line `define song with place`.
                    When the function is called, computer will replace the argument `place`, with the piece of text after `call song with`.

                    ### Exercise
                    The next verse of this song goes:

                    Last night as I lay on my pillow
                    Last night as I lay on my bed
                    Last night as I lay on my pillow
                    I dreamed that my Bonnie is dead

                    Can you program this verse in the same way as the example?
                example_code: |
                    ```
                    {define} song {with} place
                        {print} 'My Bonnie is over the ' place

                    {call} song {with} 'ocean'
                    {call} song {with} 'sea'
                    {call} song {with} 'ocean'
                    ```
            14:
                story_text: |
                    In the previous levels you have learned to create functions and use arguments with them. Another great use of a function is to let it calculate something for you.
                    You can give the function a calculation and it will give you the answer of the calculation. This answer is called a **return value**.

                    For example, in this code the function calculate_new_price will calculate the new price of any item. It will give you the new price as a return value.

                    ### Exercise
                    Finish this code. We have already made the variable new_price for you, you only need to set it.
                    You should finish the line of code by calling the function that calculates the new price.
                example_code: |
                    ```
                    {define} calculate_new_price {with} amount, percentage
                        percentage = percentage / 100
                        discount_amount = amount * percentage
                        return amount - discount_amount

                    old_price = {ask} 'How much is on the price tag?'
                    discount = {ask} 'What percentage is the discount?'

                    new_price = _ calculate_new_price {with} old_price, _
                    {print} 'The new price is ' new_price ' dollar'
                    ```
            18:
                story_text: |
                    Let's make functions the Pythons way! To define a function, we no longer use:

                    `{define} name_function {with} argument_1, argument_2:`

                    but we use:

                    `{def} name_function(argument_1, argument_2):`.


                    If you don't want to use arguments, you just leave the space between the parantheses empty.
                    To call a function, we don't need the `{call}` command anymore. You just type the name of the function.
                example_code: |
                    ```
                    {def} calculate_score(answer, correct_answer):
                        {if} answer == correct_answer:
                            score = 1
                        {elif} answer == '?':
                            score = 0
                        {else}:
                            score = -1
                        {return} score

                    answer = {input} ('Where can you find the Eiffel Tower?')
                    correct_answer = 'Paris'
                    score = calculate_score(answer, correct_answer)
                    {print} ('Your score is... ', score)
                    ```
    guess_my_number:
        name: Guess my number
        default_save_name: guess my number
        description: guess my number
        levels:
            14:
                story_text: |
                    In this level you can program the game 'Guess my number'

                    ### Exercise
                    Fill in the correct symbols on the blanks to get the game to work.
                example_code: |
                    ```
                    {print} 'Guess my number'
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number = numbers {at} {random}
                    game = 'on'
                    {for} i {in} {range} 1 {to} 10
                        {if} game == 'on'
                            guess = {ask} 'Which number do you think it is?'
                            {if} guess _ number
                                {print} 'Lower!'
                            {if} guess _ number
                                {print} 'Higher!'
                            {if} guess _ number
                                {print} 'You win!'
                                game = 'over'
                    ```
    hangman:
        name: Hangman
        default_save_name: Hangman
        description: Guess the word
        levels:
            17:
                story_text: |
                    In this adventure we program a game of hangman. First we make some preparations, then we program the game and in the third part we add a drawing with the turtle.

                    ### Exercise
                    ***Set the variables*** In this game of hangman, Player 1 chooses an answer and Player 2 has to guess the letters in this answer.
                    To let the computer know all the letters in the word, we will turn the answer into a list of letters. We also do this with the guesses Player 2 makes.
                    We will start the game with 2 empty lists. We have made an empty list for the variable answer for you. Now make an empty list for guessed_letters as well.
                    Then we fill in how many mistakes were made. At the start of the game, this should be 0.
                    The variable `amount_letters` tells us how many letters are in the answer. Ask Player 1 to tell us how many letters their word has.
                    Lastly we tell the computer if the game is over. We use the variable `game_over` and set it to `False`.

                    ***Choosing the answer*** We want Player 1 to be able to choose the answer. We'll ask them, as many times as necessary, what the next letter is.
                    Then we add that letter to the answer. Lastly, we add an empty _ to the list of guessed letters, so we get as many _s as there are letters in the answer.

                    ***Player 2's turn***
                    Tell Player 2 its their turn. Then tell Player 2 how many letters there are in the answer. Finally, print the list of `guessed_letters`.

                    ***Go to the next tab*** Now that all the starting variables are set, we can start programming the game itself. Check out the next tab to learn how!
                example_code: |
                    ```
                    print 'Hangman!'

                    # Set the variables
                    answer = []
                    guessed_letters = _
                    mistakes_made = _
                    amount_letters = {ask} _
                    _ = 'False'

                    # Choosing the answer
                    {for} _
                        letter = {ask} 'Player 1, what is letter ' i '?'
                        _
                        {add} '_' {to} _

                    # Player 2 turn
                    print _
                    print _
                    print guessed_letters
                    ```
    hangman_2:
        name: Hangman 2
        default_save_name: Hangman_2
        description: Hangman 2
        levels:
            17:
                story_text: |
                    Now it's time to program the hangman game.

                    ### Exercise

                    ***Paste your code*** Copy your code from the previous tab and paste the code in the programming field.

                    ***The game*** This games continues playing until Player 2 is game over. Fill in the while command accordingly. Now, Player 2 is allowed to guess a letter, so ask Player 2 to guess a letter.
                    We need to check if their answer is correct, so check if their `guess` is (somewhere) in the (list) `answer`. Then we let the computer figure out which of the letter(s) is the guess. We have already programmed that part for you.
                    Next we want to compliment the player for finding a correct letter and we want to print the list `guessed_letters`, so the player can see their progress.

                    The next part we're going to program is what happens when the player has guessed all of the letters. So if their list of `guessed_letters` is the same as our list `answer`.
                    If the lists are the same, congratulate Player 2 with their victory and set the variable `game_over` to `True`.

                    Next we'll program what happens when Player 2 guesses wrong (so the `{else}` command). First, tell the player that their guess was wrong. Then increase the `mistakes_made` variable by 1.

                    For the last part we'll program what happens when Player 2 has made 10 mistakes. We'll print that Player 1 has won the game. Then we'll print the correct answer. And finally, we'll set our `game_over` variable to `True`, so the game stops.

                    ***Go to the next tab*** Amazing work! Your game is playable, but wouldn't it be fun if the hangman was actually drawn when Player 2 makes a mistake..?
                example_code: |
                    ```
                    # Paste your code here

                    # The game
                    {while} game_over _
                        guess = _
                        {if} _
                            {for} i {in} {range} 1 {to} amount_letters:
                                if answer[i] == guess:
                                    guessed_letters[i] = guess
                            {print} _
                            {if} guessed_letters == _:
                                {print} _
                                game_over = _
                        {else}:
                            {print} _
                            mistakes_made _
                            {if} _ == 10:
                                {print} _
                                {print} _
                                _
                    ```
    hangman_3:
        name: Hangman 3
        default_save_name: Hangman_3
        description: Hangman 3
        levels:
            17:
                story_text: |
                    In a game of hangman the mistakes are shown by drawing a part of the hangman each time a mistake has been made.
                    We now add those drawings with our turtle!

                    ### Exercise
                    ***Create a function that draws the hangman*** Create a function that draws the hangman in 10 steps. We have already made step 1 for you.

                    ***Test the function*** Test the function by calling the function with 10. If you are happy with the function, remove the line that calls the function for now. We will call the function when the player makes a mistake.

                    ***Paste your hangman game under your function*** Go back to the previous tab and copy your hangman game. Paste the game underneath your function.

                    ***Call the function when the player makes a mistake*** Under the line `mistakes_made = mistakes_made + 1` we will call the function. We want the turtle to take the same amount of steps as the player has made mistakes, so we call the function with `mistakes_made` as argument.

                    ***Enjoy your game!***
                    <div class="w-full flex flex-row gap-2">
                        The hangman could look like this <img src="https://github.com/hedyorg/hedy/assets/80678586/d385b691-5701-4342-b5d9-dfae1589c129" width="100">
                    </div>
                example_code: |
                    ```
                    # Create a function that draws the hangman
                    {define} draw_hangman {with} step:
                        {if} step == 1:
                            {color} white
                            {forward} -100
                            {turn} 90
                            {forward} -50
                            {color} black
                            {forward} 100
                            {forward} -50

                        {if} step == 2:
                            _
                    # Paste your hangman game here

                    ```
    harry_potter:
        name: Harry Potter
        default_save_name: Harry Potter
        description: Harry Potter-äventyr
        levels:
            10:
                story_text: |
                    ### Övning
                    Vi kan också skapa en spådam med Harry Potter-tema. Fyll i tomrummen så att nio rader skrivs ut.
                    **Extrauppgift** Ändra temat för spådamen till något annat, till exempel din favoritbok, film eller tv-program.
                example_code: |
                    ```
                    hus = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    ämnen = drycker, försvar mot svartkonst, förtrollningar, förvandling
                    rädslor = Voldemort, spindlar, att misslyckas med sitt OWL-test
                    namn = Harry, Ron, Hermione
                    _
                    _ {print} namn ' är placerad i ' hus {at} {random}
                    _ {print} namn ' är bra på ' ämnen {at} {random}
                    _ {print} namn 's största rädsla är ' rädslor {at} {random}
                    ```
    haunted:
        name: Spökhuset
        default_save_name: Spökhuset
        description: Flykten från spökhuset
        levels:
            1:
                story_text: "I det här äventyret jobbar du med att skapa ett spel där du måste fly från ett hemsökt hus genom att välja rätt dörr.\nOm du väljer rätt dörr kommer du att överleva, men om du inte gör det kan ett hemskt monster...\n \nPå nivå 1 börjar vi vårt spökhusspel med att hitta på en skrämmande historia och frågar spelaren vilket monster de kommer att se i spökhuset.\n"
                example_code: |
                    ```
                    {print} Hur kom jag hit?
                    {print} Jag minns att min vän sa åt mig att gå in i den gamla herrgården …
                    {print} och plötsligt blev allt svart.
                    {print} Men hur hamnade jag på golvet …?
                    {print} Mitt huvud gör ont som om jag blivit slagen av ett baseballträ!
                    {print} Vad är det för ljud?
                    {print} Åh nej! Det känns som om jag inte är ensam i det här huset!
                    {print} Jag måste ta mig ut härifrån!
                    {print} Det finns tre dörrar framför mig …
                    {ask} Vilken dörr ska jag välja?
                    {echo} Jag väljer dörr
                    {print} …?
                    ```
                story_text_2: |
                    ### Övning
                    Kopiera exempelkoden till din inmatningsskärm genom att klicka på den gula knappen.
                    Avsluta nu berättelsen genom att lägga till minst fem rader kod.
                    Kom ihåg att börja varje kodrad med ett `{print}`-kommando.
            2:
                story_text: |
                    I detta spökhus kan du välja dina monster med emoji. Naturligtvis kan du också använda ord.
                example_code: |
                    ```
                    monster_1 {is} 👻
                    monster_2 {is} 🤡
                    monster_3 {is} 👶
                    {print} Du går in i spökhuset.
                    {print} Plötsligt ser du ett monster_1
                    {print} Du springer in i det andra rummet …
                    {print} Men där väntar ett monster_2 på dig!
                    {print} Åh, nej! Gå snabbt till köket.
                    {print} Men när du går in anfaller monster_3 dig!
                    ```
                story_text_2: |
                    ### Övning
                    I exemplet ovan är monstren förutbestämda. Så varje gång du kör din kod blir resultatet detsamma.
                    Kan du lägga till `{ask}` -kommandon för att göra spökhuset interaktivt och låta spelarna välja vilka monster de stöter på?
                example_code_2: |
                    ```
                    monster_1 {is} _
                    monster_2 {is} _
                    monster_3 {is} _
                    {print} Du går in i spökhuset.
                    {print} Plötsligt ser du ett monster_1
                    {print} Du springer in i det andra rummet …
                    {print} Men där väntar ett monster_2 på dig!
                    {print} Åh, nej! Gå snabbt till köket.
                    {print} Men när du går in anfaller monster_3 dig!
                    ```
            3:
                story_text: |
                    På de tidigare nivåerna har du gjort en början till ditt spökhusspel, men som du kanske har märkt har berättelsen alltid haft ett hemskt slut.
                    På den här nivån kan du göra din berättelse mer interaktiv genom att ändra utgången av spelet; ibland blir du uppäten, ibland flyr du!
                    Låt Hedy bestämma slumpmässigt!

                    ### Övning
                    Kopiera exempelkoden och fyll i luckorna för att få det att fungera!

                    **Extrauppgift** Den här berättelsen är ganska enkel, så du kanske kan lägga till en mer spännande berättelse.
                    Du har också mycket begränsade resultat just nu – det finns bara tre alternativ för vad som finns bakom dörrarna. Kanske kan du komma på fler monster att lägga till i listan!
                example_code: |
                    ```
                    _ Fly från spökhuset!
                    _ Det finns 3 dörrar framför dig …
                    _ _ _ Vilken dörr väljer du?
                    _ Du valde dörr … val
                    monster _ en zombie, en vampyr, INGENTING DU KOM UNDAN
                    _ Du ser …
                    {sleep}
                    _ _ _ _
                    ```
            4:
                story_text: |
                    På den här nivån lär du dig att använda citattecken i dina spel.

                    ### Övning
                    Kan du göra ditt spökhus så att det fungerar på nivå 4?

                    ### Övning 2
                    Gå tillbaka till föregående nivå och kopiera koden för ditt spökhus. Få koden att fungera i den här nivån genom att lägga till citattecken på rätt ställen.
                example_code: |
                    ```
                    _ Lägg till citattecken till denna kod _
                    {print} Fly från spökhuset!
                    {print} Det finns tre dörrar framför dig ...
                    val {is} {ask} Vilken dörr väljer du?
                    {print} Du valde dörr ... val
                    monster {is} en zombie, en vampyr, INGENTING DU KLARADE DIG
                    {print} Du ser ...
                    {sleep}
                    {print} monster {at} {random}
                     ```
            5:
                story_text: |
                    Fram till den här nivån har Spökhusspelet alltid bett spelaren att välja en dörr, men som du kanske har märkt behöver spelaren inte svara rätt.
                    Om spelaren fyllde i ett helt slumpmässigt svar fungerade spelet fortfarande och spelaren kunde till och med vinna (trots att hen inte valde en dörr).
                    I den här nivån kan du bara vinna spelet genom att välja samma dörr som Hedy valde slumpmässigt.

                    ### Övning
                    Kan du hitta de fyra ord som saknas för att göra koden färdig?
                example_code: |
                    ```
                    {print} 'Fly från spökhuset!'
                    {print} 'Det finns tre dörrar framför dig ...'
                    dörrar {is} 1, 2, 3
                    monster {is} varulv, mumie, vampyr, zombie
                    vald_dörr {is} {ask} 'Vilken dörr väljer du?'
                    {print} 'Du valde dörr ...' vald_dörr
                    {sleep}
                    korrekt_dörr {is} dörrar {at} {random}
                    _ _ _ _ {print} 'Bra! Du har rymt!'
                    {else} {print} 'Åh nej! Du blir uppäten av en ...' monster {at} {random}
                    ```
            9:
                story_text: "På den här nivån kan du använda dig av nästlade satser, vilket gör spökhuset ännu mer interaktivt!\n\n### Övning\nNu är det väldigt svårt att vinna det här spelet; kan du göra det lättare att vinna?\nÄndra din kod så att den bara har en felaktig dörr och två korrekta dörrar istället för en korrekt dörr och två felaktiga? \nTips: Detta innebär att du ändrar variabeln korrekt_dörr till fel_dörr och byter ut koden `{if}` och `{else}`.\n Och naturligtvis kan du också ändra berättelsen och göra den mer personlig. Ändra monstren eller gör det till en glad spelshow där du får en gåva!\n"
                example_code: |
                    ```
                    {print} 'Fly från spökhuset!'
                    spelare = lever
                    dörrar = 1, 2, 3
                    monster = zombie, vampyr, jättespindel
                    {repeat} 3 {times}
                        {if} spelare {is} lever
                            rätt_dörr {is} dörrar {at} {random}
                            {print} 'Det finns tre dörrar framför dig …'
                            vald_dörr = {ask} 'Vilken dörr väljer du?'
                            {if} vald_dörr {is} rätt_dörr
                                {print} 'Inga monster här!'
                            {else}
                                {print} 'Du blir uppäten av en ' monster {at} {random}
                                spelare = död
                        {else}
                            {print} 'GAME OVER'
                    {if} spelare {is} lever
                        {print} 'Bra! Du överlevde!'
                    ```
            11:
                story_text: "På den här nivån har vi ändrat kommandot `{for}` så att vi kan berätta för spelaren var den befinner sig. \n\n### Övning 1\nAvsluta programmet så att spelaren vet vilket rum den befinner sig i.\n\n### Övning 2\nGör programmet till ett äventyr genom att följa dessa steg:\n\n1. Gör en lista med valmöjligheter (till exempel: slåss eller fly).\n2. Se till att spelaren kan välja ett alternativ med `{ask}`\n3. Är svaret rätt? Då får den gå vidare till nästa monster. Ger den fel svar? Låt spelaren veta det med en `{print}`. \n\n**Extrauppgift** Om du väljer fel visas ändå ett monster! Hur kan man ändra på det?\n"
                example_code: |
                    ```
                    {print} "Escape from the Haunted House!"
                    monster = zombie, vampyr, jättespindel
                    _
                        {print} 'Rum' i
                        vilket_monster = monster {at} {random}
                    ```
            14:
                story_text: |
                    ### Exercise
                    In this level you can use the `<` and `>` symbol to introduce lives to your game.
                    Make sure the player loses a life when they come across the wrong monster and that the game stops if you have no lives left.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house'
                    lives = 3
                    doors = 1, 2, 3
                    monsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'
                    {for} i {in} {range} 1 {to} 10
                        {if} lives _
                            good_door = doors {at} {random}
                            monster = monsters {at} {random}
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} good_door == chosen_door
                                {print} 'You have chosen the correct door'
                            {else}
                                {print} 'You see...' monster
                                {if} monster == 'a sleeping 3 headed dog'
                                    {print} 'Pffieuw.... Its asleep'
                                {else}
                                    {print} 'You lose one life'
                                    lives = _
                        {else}
                            {print} 'GAME OVER'
                    ```
            16:
                story_text: |
                    ### Exercise
                    This haunted house game uses the connection between the lists you can use in this level.
                    For example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.
                    Check out the code and fill in  `weapons[i]`, `monsters[i]` , `bad_fate[i]`, `good_fate[i]`, `hint[i]` on the correct blanks to get the code to work!
                example_code: |
                    ```
                    numbers = [1, 2, 3]
                    i = numbers[{random}]
                    hint = ['growling', 'a cackling laugh', 'fluttering batwings']
                    monsters = ['zombie', 'witch', 'vampire']
                    bad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']
                    good_fate = ['You throw the ham. The zombie is distracted and starts eating it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']
                    weapons = ['ham', 'lighter', 'garlic']
                    {print} 'You are standing in front of an old mansion'
                    {print} 'Something is not right here'
                    {print} 'You hear ' _
                    {print} 'You are going to explore it'
                    {print} 'You enter the kitchen and see a lighter, a raw ham and a garlic.'
                    your_weapon = {ask} 'What do you bring with you?'
                    {print} 'With your ' your_weapon ' you enter the living room'
                    {print} 'There you find a ' _
                    needed_weapon = _
                    {if} your_weapon == needed_weapon
                        {print} 'You use your ' your_weapon
                        {print} _
                        {print} 'YOU WIN!'
                    {else}
                        {print} 'You have chosen the wrong weapon...'
                        {print} _
                        {print} 'GAME OVER'
                    ```
    hotel:
        name: hotel
        default_save_name: hotel
        description: hotel
        levels:
            13:
                story_text: |
                    In the previous adventure you have learned how to use an argument in a function, and you've learned how to combine it with an {ask}.
                    You might have wondered why you would use functions, because the functions in the example were only one line of code.
                    Now we will show you what a bigger function looks like and we will use multiple agruments now as well. You'll see how much better it is to use a function once the function gets bigger.
                    Here is an example of a function with arguments combined with {ask} commands.
                example_code: |
                    ```
                    {define} welcome_message {with} title, last_name, country, room_number
                        {print} 'Welcome to Hotel Hedy, ' title ' ' last_name
                        nice_trip {is} {ask} 'Did you have a nice trip from, ' country '?'
                        {if} nice_trip {is} 'yes'
                            {print} 'Lovely!'
                        {else}
                            {print} 'Sorry to hear that.'
                            {print} 'Hopefully you can take a nice rest in you room.'
                        {print} 'Your room number is ' room_number

                    {print} 'Hello. Please fill in your information to check in.'
                    title = {ask} 'What is your title (mr, mrs, ms, dr, etc.)?'
                    name = {ask} 'What is you last name?'
                    homecountry = {ask} 'What country do you come from?'

                    {call} welcome_message {with} title, name, homecountry, 105
                    ```

                    title = {ask} 'What is your title (mr, mrs, ms, dr, etc.)?'
                    name = {ask} 'What is you last name?'
                    homecountry = {ask} 'What country do you come from?'

                    {call} welcome_message {with} title, name, homecountry, 105
    if_command:
        name: '{if} & {else}'
        default_save_name: kommandot_if
        description: Introduktion till kommandot if
        levels:
            5:
                story_text: |
                    ## Om … annars …
                    På nivå 5 finns det något nytt, `{if}`! Med `{if}` kan du välja mellan två olika alternativ.
                    Den här koden skrivs ut fint om du anger Hedy som namn, och bu! om du anger något annat.
                    `{ask}` och `{print}` fungerar fortfarande som på nivå 4.
                example_code: |
                    ```
                    namn {is} {ask} 'vad heter du?'
                    {if} namn {is} Hedy {print} 'nice' {else} {print} 'bu!'
                    ```
                story_text_2: |
                    Ibland blir koden med `{if}` riktigt lång och får inte plats på raden. <br> Du kan också dela koden över två rader så att den andra raden börjar med `{else}` så här:
                example_code_2: |
                    ```
                    namn {is} {ask} 'vad heter du?'
                    {if} namn {is} Hedy {print} 'nice'
                    {else} {print} 'bu!'
                    ```
                story_text_3: |
                    ### Övning
                    Försök att skriva din egen kod med `{if}` och `{else}`. Du kan använda exempelkoden om du vill.
                example_code_3: |
                    ```
                    svara {is} {ask} '2 + 2 = ?'
                    _ _ _ 4 _ 'Bra jobbat!'
                    _ _ 'Nej, 2 + 2 = 4'
                    ```
            8:
                story_text: |
                    ## Om … Annars …
                    Du har lärt dig att upprepa ett block med kodrader efter ett `{repeat}`-kommando.
                    Nu kan du också använda indrag för att skapa block efter ett {if}- eller {else}-kommando.
                    Kolla in exempelkoden.

                    ### Övning
                    Lägg till ett {else}-kommando till exempelkoden. Gör ett kodblock med indrag. Det gör du genom att börja varje rad med fyra mellanslag.
                example_code: |
                    ```
                    namn = {ask} 'Vad heter du?'
                    {if} namn {is} Hedy
                        {print} 'Välkommen Hedy'
                        {print} 'Du kan spela på din dator!'
                    ```
            9:
                story_text: |
                    In this level you can also put an {if} command inside another {if} command.
                example_code: |
                    ```
                    continue = {ask} 'Do you want to continue?'
                    {if} continue = yes
                        sure = {ask} 'Are you sure?'
                        {if} sure {is} yes
                            {print} 'We will continue'
                        {else}
                            {print} 'You are not sure'
                    {else}
                        {print} 'You do not want to continue'
                    ```
    in_command:
        name: '{in}'
        default_save_name: kommandot_i
        description: Introduktion till kommandot i
        levels:
            5:
                story_text: |
                    ## Listor
                    När vi vill kontrollera om något finns i en lista kan vi nu använda kommandot `{in}`.
                    Den här koden skriver ut snyggt! om du väljer grönt eller gult, annars meh.
                example_code: |
                    ```
                    snygga_färger {is} grönt, gult
                    favoritfärg {is} {ask} 'Vilken är din favoritfärg?'
                    {if} favoritfärg {in} snygga_färger {print} 'snyggt!'
                    {else} {print} 'meh'
                    ```
                story_text_2: |
                    ### Övning
                    Gör klar exempelkoden genom att fylla i luckorna med kommandon som du har lärt dig.
                    När du är klar med koden, försök att lägga till egen kod och använd en fråga som du själv har kommit på.
                example_code_2: |
                    ```
                    djur är hund, ko, får
                    svaret är fråga 'Vilket är ditt favoritdjur?'
                    _ svar _ djur _ 'Mitt också!'
                    _ _ 'Mina favoritdjur är hundar, kor och får'
                    ```
    is_command:
        name: '{is}'
        default_save_name: kommandot_är
        description: introduktion till kommandot är
        levels:
            2:
                story_text: |
                    ## Variabler
                    Du kan döpa ett ord med `{is}`. Det kallas för en **variabel**. I det här exemplet har vi skapat en variabel som heter namn och en variabel som heter ålder. Du kan använda ordet namn var som helst i din kod och det kommer att ersättas med Hedy, till exempel så här:
                example_code: |
                    ```
                    namn {is} Hedy
                    ålder {is} 15
                    {print} namn är ålder år gammal
                    ```
                story_text_2: |
                    ### Övning
                    Dags att göra dina egna variabler!
                    I exempelkoden gjorde vi ett exempel på variabeln `favoritdjur`. På rad 1 sätts (tilldelas) variabeln och på rad 2 har vi använt variabeln i ett skriv-kommando.
                    Avsluta först vårt exempel genom att fylla i ditt favoritdjur i de tomma fälten. Gör sedan minst tre av dessa koder själv. Välj en variabel och sätt variabeln med kommandot {is}. Använd den sedan med ett {print}-kommando, precis som vi gjorde.
                example_code_2: |
                    ```
                    favoritdjur är _
                    {print} Jag gillar favoritdjur
                    ```
            6:
                story_text: |
                    We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:
                example_code: |
                    ```
                    name = Hedy
                    answer = 20 + 4
                    ```
            14:
                story_text: |
                    Vi kommer att lära oss fler nya saker. Du kanske redan känner till dem från matematiken, `<` och `>`.
                     `<` kollar om det första talet är mindre än det andra, t.ex. ålder `<` 12 kontrollerar om ålder är mindre än 12.
                    Om du vill kolla om det första talet är mindre eller lika med det andra kan du använda `<=`, t.ex. ålder `<=` 11.
                     `>` kollar om det första talet är större än det andra, t.ex. poäng `>` 10 kollar om poäng är större än 10.
                    Om du vill kolla om det första talet är större eller lika med det andra kan du använda `>=`, t.ex. poäng `>=` 11.
                    Du använder dessa jämförelser i en `{if}`, så här:
                example_code: |
                    ```
                    ålder = {ask} 'Hur gammal är du?'
                    {if} ålder > 12
                        {print} 'Du är äldre än jag!'
                    ```
                story_text_2: |
                    Från och med den här nivån kan du använda två likhetstecken om du vill jämföra exakt. Detta är vad de flesta programspråk gör:
                example_code_2: |
                    ```
                    namn = {ask} 'Vad heter du?'
                    {if} namn == 'Hedy'
                        {print} 'Du är cool!'
                    ```
                story_text_3: |
                    Du kan också jämföra om något *inte* är lika med något annat med hjälp av `!=` så här:
                example_code_3: |
                    ```
                    namn = {ask} 'Vad heter du?'
                    {if} namn != 'Hedy'
                        {print} 'Du är inte Hedy'
                    ```

                    {if} ålder < 13
                        {print} 'Du är yngre än jag!'
                    {else}
                        {print} 'Du är äldre än jag!'
    language:
        name: Språk
        default_save_name: Språk
        description: Öva glosor på ett främmande språk
        levels:
            5:
                story_text: |
                    Gör ditt eget program för att öva glosor på ett nytt språk.

                    ### Övning
                    Gör koden längre genom att lägga till minst tre ytterligare glosor som spelaren ska lära sig.
                    **Extra** Du kan naturligtvis välja att använda ett annat språk än franska. Du kan ändra koden till vilket språk som helst som du vill lära dig.
                example_code: |
                    ```
                    {print} 'Lär dig franska!'
                    katt {is} {ask} '🐱'
                    {if} katt {is} chat {print} 'Fantastiskt!'
                    {else} {print} 'Nej, katt heter chat'
                    groda {is} {ask} '🐸'
                    {if} groda {is} grenouille {print} 'Superbt!'
                    {else} {print} 'Nej, groda heter grenouille'
                    ```
            16:
                story_text: |
                    ### Exercise
                    Take a look at the example code. This is a program to practise French vocabulary. Now make your own program to practice your vocabulary in a new language.
                    If you don't know any other languages, you can use Google translate or you can use emojis and your native language.
                example_code: |
                    ```
                    franska_ord = ['bonjour', 'ordinateur', 'pomme de terre']
                    översättning = ['hej', 'dator', 'potatis']
                    poäng = 0
                    {for} i {in} {range} 1 {to} 3
                        svar = {ask} 'Vad betyder ' franska_ord[i] '?'
                        rätt = översättning[i]
                        {if} svar == rätt
                            {print} 'Rätt!'
                            poäng = poäng + 1
                        {else}
                            {print} 'Fel, ' franska_ord[i] ' betyder ' översättning[i]
                    {print} 'Du gav ' poäng ' rätta svar.'
                    ```
    maths:
        name: matte
        default_save_name: matte
        description: Introduktion till matte
        levels:
            6:
                story_text: |
                    In this level you learn something new: you can now also calculate.

                    The plus is easy, you write it like with math: `5 + 5` for example. The minus also works fine, it is `5 - 5`.

                    The times is a bit different, because there is no times symbol on your keyboard. Just search, there really isn't!
                    That is why we multiply with the asterisk above 8: `5 * 5`. Read that as "5 times 5" that helps you remember it best.
                example_code: |
                    ```
                    {print} '5 plus 5 är ' 5 + 5
                    {print} '5 minus 5 är ' 5 - 5
                    {print} '5 gånger 5 är ' 5 * 5
                    ```
            12:
                story_text: |-
                    **Decimaltal**
                    Hittills har Hedy inte tillåtit decimaltal som 1.5, men nu tillåter vi det. Tänk på att datorer använder `.` för decimaltal.
                example_code: |
                    ```
                    {print} 'Två och en halv plus två och en halv är …'
                    {print} 2.5 + 2.5
                    ```
                story_text_2: |-
                    **Maths with words**
                    In this level you can also do addition with words like this:
                example_code_2: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```

                    {print} 2.5 + 2.5
    music:
        name: music
        default_save_name: music
        description: Play a tune!
        levels:
            1:
                story_text: |-
                    In this level you'll learn how to use the `{play}` command to play a tune!

                    Type `{play}` followed by the note you want to play. The scale goes C-D-E-F-G-A-B.
                    As you can see there are 7 different letters, but we can play more than just 7 notes.
                    Type a number between 1 and 10 behind the letter to choose the scale, for example after B4 comes C5.
                    C1 is the lowest note you can play, C10 is the highest.

                    ### Exercise
                    Try out the example code and then play around with it! Can you create your own melody?
                    In the next level you'll learn how to play some existing songs.
                example_code: |-
                    ```
                    {play} C4
                    {play} D4
                    {play} E4
                    {play} F4
                    {play} G4
                    {play} A4
                    {play} B4
                    {play} C5
                    ```
            2:
                story_text: |
                    ### Exercise
                    Finish the songs! We have started the codes for some melodies.
                example_code: |
                    ```
                    {print} Old Mac Donald had a farm
                    {play} C5
                    {play} C5
                    {play} C5
                    {play} G4
                    {play} A4
                    {play} A4
                    {play} G4
                    ```
                story_text_2: As you can see, you can also use the `{sleep}` command to add a little pause in the song.
                example_code_2: |
                    ```
                    {print} Twinkle Twinkle Little Star
                    {play} C
                    {play} C
                    {play} G
                    {play} G
                    {play} A
                    {play} A
                    {play} G
                    {sleep} 1
                    {play} F
                    {play} F
                    ```
            3:
                story_text: |
                    Create a random melody!

                    ### Exercise
                    The example code creates a random melody, but it's very short and not many notes are used.
                    Add more notes to the list and create a longer melody by copying the last line a couple more times.
                example_code: |
                    ```
                    notes {is} A4, B4, C4
                    {play} notes {at} {random}
                    {play} notes {at} {random}
                    {play} notes {at} {random}
                    ```
            4:
                story_text: |
                    Use the `{clear}` command to create a karaoke machine!

                    ### Exercise
                    Finish the karaoke version of 'Mary had a little lamb'.
                    Then, create a karaoke version of any song you'd like!
                example_code: |
                    ```
                    {print} 'Mary had a little lamb'
                    {play} E
                    {play} D
                    {play} C
                    {play} D
                    {play} E
                    {play} E
                    {play} E
                    {clear}
                    {print} 'Little lamb, little lamb'
                    {play} D
                    {play} D
                    {play} D
                    {play} E
                    {play} E
                    {play} E
                    {clear}
                    {print} 'Mary had a little lamb'
                    {play} E
                    ```
            5:
                story_text: |
                    You don't always have to use the `{play}` command to play a whole song, sometimes you just want to play one note.
                    For example, if you want to make a quiz, you can play a happy high note if the answer is right and a sad low note if the answer is wrong.

                    ### Exercise
                    Finish the first question by adding a line of code that plays a C3 note if the wrong answer is given.
                    Then think of 3 more questions to add to this quiz.
                example_code: |
                    ```
                    answer {is} {ask} 'What is the capital of Zimbabwe?'
                    {if} answer {is} Harare {play} C6
                    _
                    ```
            6:
                story_text: "Instead of playing notes, you can also play numbers now. Simply type `{play} 1` for the lowest note, `{play} 70` for the highest note, or anything in between.\n\n### Exercise\n This calls for musical maths! Try out the example code a couple of times with different starting numbers. \nThen, see if you can compose a song using the numbers.\n"
                example_code: |
                    ```
                    number = {ask} 'Say a starting number between 1 and 67'
                    {print} number
                    {play} number
                    number = number + 1
                    {print} number
                    {play} number
                    number = number + 1
                    {print} number
                    {play} number
                    ```
            7:
                story_text: |
                    Using the `{repeat}` command can make your codes for melodies a lot shorter!

                    ### Exercise
                    Finish the code for Twinkle Twinkle Little Star by using the `{repeat}`command.
                    Then go back to the songs you've made in the previous levels. Can you shorten those codes too?
                example_code: |
                    ```
                    {print} 'Twinkle Twinkle Little Star'
                    {repeat} 2 {times} {play} C4
                    {repeat} 2 {times} {play} G4
                    _
                    ```
            8:
                story_text: |
                    Now that we can use the `{repeat}` command for multiple lines, we can make songs even more easily!

                    ### Exercise
                    Finish the song of Brother John (Frère Jacques). Don't forget to use `{repeat}`!
                example_code: |
                    ```
                    {print} 'Brother John'
                    {repeat} 2 {times}
                        {play} C
                        {play} D
                        {play} E
                        {play} C
                    {repeat} 2 {times}
                        {play} E
                        {play} F
                        {play} G
                        {sleep} 1
                    ```
            9:
                story_text: |
                    From this level on you can - among other things - use a {repeat} command inside a {repeat} command.
                    That makes songs like 'Happy birthday' even shorter!

                    ### Exercise
                    Finish the song!
                example_code: |
                    ```
                    first_time = yes
                    {repeat} 2 {times}
                        {repeat} 2 {times}
                            {play} C
                        {play} D
                        {play} C
                        {if} first_time {is} yes
                            {play} F
                            {play} E
                            first_time {is} no
                        {else}
                            _
                    ```
            12:
                story_text: |
                    Use functions in your songs! As you can see in the example code, you can make a function for each line of Twinkle Twinkle Little Star. Once you've programmed the first three lines, all you have to do is call the functions in the order you want them played in.

                    ### Exercise
                    Finish the song of Twinkle Twinkle Little Star.
                    Then look back at all the songs you've programmed in the levels before, can you make those codes better and shorter using functions too?
                example_code: |
                    ```
                    {define} first_line
                        {play} C
                        {play} C
                        {play} G
                        {play} G
                        {play} A
                        {play} A
                        {play} G
                        {sleep}

                    {define} second_line
                        {play} F
                        {play} F
                        {play} E
                        {play} E
                        {play} D
                        {play} D
                        {play} C
                        {sleep}

                    {define} third_line
                        {play} G
                        {play} G
                        {play} F
                        {play} F
                        {play} E
                        {play} E
                        {play} D
                        {sleep}

                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    ```
            13:
                story_text: |
                    You can use a function with an argument for songs that have line that are almost the same, but slightly different each time.
                    One example is the song 'Yankee Doodle'. The first 4 notes of the first lines are the same, but each time they are followed by a different couple of notes.

                    ### Exercise
                    Can you finish the song of Yankee Doodle?
                    Can you think of another song to program this way?
                example_code: |
                    ```
                    {print} 'Yankee Doodle'
                    {define} _ {with} note_1, note_2, note_3
                        {play} C4
                        {play} C4
                        {play} D4
                        {play} E4
                        {play} _
                        {play} _
                        {play} _

                    {call} line_1 {with} 29, 31, 30
                    {call} line_1 {with} 29, 28, 0
                    {call} line_1 {with} 32, 31, 30

                    {play} C4
                    {play} B3
                    {play} G3
                    {play} A3
                    {play} B3
                    {play} C4
                    {play} C4
                    ```
            14:
                story_text: |
                    You can program music for fun, but you can also use the musical notes to make something useful like a fire alarm!

                    ### Exercise
                    Make sure the fire alarm rings when there is a fire!
                example_code: |
                    ```
                    {define} fire_alarm
                        {print} 'FIRE!'
                        note = 40
                        {for} i {in} {range} 1 {to} 100
                            {if} note _ 50
                                note = note + 5
                                {play} _
                            {else}
                                note = 40

                    fire = {ask} 'Is there a fire?'
                    {if} fire _ 'yes'
                        {call} fire_alarm
                    ```
            15:
                story_text: |
                    **Warning** This adventure can become extremely annoying!
                    We can also use the {while} command to repeat a song forever.

                    ### Exercise
                    Finish the never-ending song.
                example_code: |
                    ```
                    {define} song
                        {play} _

                    yes_or_no = {ask} 'Do you want to hear my never-ending song?'
                    {while} yes_or_no = 'yes'
                        {call} song
                        {print} '🥳'
                    ```
            16:
                story_text: |
                    Upgrade your Old MacDonald code!

                    ### Exercise
                    Take your code from the 'Sing a Song' adventure and add musical notes to it!
                    You can make a function for each line in the song and call that function after the line is printed.
                    We defined the first line for you and called it in the code. Can you finish the whole song?
                example_code: |
                    ```
                    {define} line_1
                        {for} i {in} {range} 1 {to} 3
                            {play} G
                        {play} D
                        {for} i {in} {range} 1 {to} 2
                            {play} E
                        {play} D

                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    for i in range 1 to 3
                        animal = animals[i]
                        sound = sounds[i]
                        print 'Old MacDonald had a farm'
                        call line_1
                        print 'E I E I O!'
                        _
                    ```
            17:
                story_text: |
                    You can use the {elif} to create different options.

                    ### Exercise
                    Firstly, add colons to get the code to work.
                    Then finish this code by adding at least 2 other songs for other moods. For example a happy song and an angry song.
                example_code: |
                    ```
                    {define} scary_song
                        {for} i {in} {range} 1 {to} 3
                            {play} G
                        {play} E
                        {sleep} 2
                        {for} i {in} {range} 1 {to} 3
                            {play} F
                        {play} D

                    mood = {ask} 'Which emotion are you feeling?'
                    {if} mood {is} 'fear'
                        {call} scary_song
                    {elif} _
                    ```
            18:
                story_text: |
                    ### Exercise
                    Even in this last level of Hedy we can make some music! Be careful of all the syntax that is needed now.
                    Take a good look at how the functions are defined and called upon in the example code.
                    Finish the song!
                example_code: |
                    ```
                    {def} line_1():
                        {for} i {in} {range}(1, 5):
                            {play} A
                        {play} D
                        {play} F
                        {play} A

                    {def} line_2():
                        {for} i {in} {range}(1, 5):
                            {play} G
                        {play} C
                        {play} E
                        {play} G

                    {def} line_3():
                    _

                    {print} ('The drunken sailor')
                    {print} ('What shall we do with the drunken sailor?')
                    line_1()
                    line_2()
                    line_3()
                    {print} ('Early in the morning')
                    ```
    parrot:
        name: Papegoja
        default_save_name: Papegoja
        description: Skapa din egen papegoja som härmar dig!
        levels:
            1:
                story_text: |
                    Skapa din egen papegoja som härmar dig!
                example_code: |
                    ```
                    {print} Jag heter papegojan Hedy
                    {ask} vad heter du?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### Övning
                    Kopiera exempelkoden till din inmatningsskärm genom att klicka på den gula knappen.
                    Låt papegojan ställa en annan fråga. Fyll i de tomma rutorna i exemplet!
                    **Extra** Du kan också låta papegojan ställa flera frågor. Lägg till några fler rader kod under din egen kod.
                example_code_2: |
                    ```
                    {print} Jag heter papegojan Hedy
                    {ask} _
                    {echo}
                    {echo}
            2:
                story_text: |
                    På förra nivån skapade du en papegoja som härmar dig. På den här nivån kommer vi att göra papegojan interaktiv med en variabel och `{ask}`-kommandot.
                    Vi kommer också att göra papegojan mer verklighetstrogen genom att lägga till `{sleep}`-kommandon efter att något har sagts.
                example_code: |
                    ```
                    {print} Jag är papegojan Hedy
                    namn _ _ vad heter du?
                    {print} namn
                    _
                    {print} skri
                    _
                    {print} namn
                    ```
                story_text_2: |
                    ### Övning
                    Avsluta först rad 2 med ett `{is}`- och ett `{ask}`-kommando.
                    Fyll sedan i ett `{sleep}`-kommando på rad 4 och 6 för att låta papegojan vara tyst en liten stund.

                    **Extrauppgift** Kan du få papegojan att fråga efter mer än bara ditt namn genom att lägga till fler rader kod?
            3:
                story_text: |
                    Lär din papegoja ett nytt ord med `{add}`.
                    ### Övning
                    Kan du lägga till kommandot `{add} {to_list}` för att få koden att fungera?
                example_code: |
                    ```
                    ord {is} skri, Hedy
                    {print} Träna din papegoja!
                    nytt_ord {is} {ask} Vilket ord vill du lära den?
                    _ nytt_ord _ ord
                    {print} 🧒 Säg nytt_ord, Hedy!
                    {print} 🦜 ord {at} {random}
                    ```
            4:
                story_text: |
                    På den här nivån måste vi använda citattecken i kommandona `{ask}` och `{print}`.
                    ### Övning
                    Komplettera koden genom att fylla i citattecken på de tomma platserna.
                example_code: |
                    ```
                    ord {is} skri, Hedy
                    {print} _ Träna din papegoja! _
                    nytt_ord {is} {ask} _ Vilket ord vill du lära den? _
                    {add} nytt_ord {to_list} ord
                    {print} _ 🧒 Säg _nytt_ord _, hedy!_
                    {print} _ 🦜 _ ord {at} {random}
                    ```
            5:
                story_text: |
                    Belöna din papegoja om den säger rätt ord!

                    ### Övning
                    Avsluta koden genom att fylla i de fyra saknade kommandona.
                example_code: |
                    ```
                    ord {is} skri, Hedy
                    {print} 'Träna din papegoja!'
                    nytt_ord {is} {ask} 'Vilket ord vill du lära den?'
                    {add} nytt_ord {to_list} ord
                    sagt_ord {is} ord {at} {random}
                    {print} '🧒 Säg ' nytt_ord', Hedy!'
                    {print} '🦜' sagt_ord
                    _ sagt_ord {is} nytt_ord _ '🧒 Bra jobbat, Hedy! 🍪'
                    _ _ '🧒 Nej, Hedy! Säg ' nytt_ord
                    ```
    piggybank:
        name: Spargris
        default_save_name: Spargris
        description: Räkna dina fickpengar!
        levels:
            12:
                story_text: |
                    I det här äventyret får du lära dig att göra en digital spargris.

                    ### Övning
                    Gör klart koden för att beräkna hur mycket pengar du har och hur lång tid du behöver spara för att köpa det du vill ha!
                    **Extrauppgift** Kanske har du redan sparat lite pengar? Dra av det från det belopp som du kommer att behöva spara ihop.
                example_code: |
                    ```
                    {print} 'Den digitala spargrisen'
                    önskan = {ask} 'Vad skulle du vilja köpa?'
                    pris = {ask} 'Vad kostar det?'
                    sparat = {ask} 'Hur mycket pengar har du redan sparat?'
                    fickpeng = {ask} 'Hur mycket fickpengar får du per vecka?'
                    att_spara = pris - sparat
                    veckor = att_spara / fickpeng
                    {print} 'Du kan köpa en ' _ ' om ' _ ' veckor.'
                    ```
            14:
                story_text: |
                    ### Exercise
                    In this level you can let Hedy tell you if you have saved up enough money!
                    Finish this code by filling in the blanks!
                example_code: |
                    ```
                    _ calculate_budget with wish, money, allowance
                        to_save = wish - money
                        weeks = to_save / allowance
                        {if} wish _ money
                            {print} 'You need to save up some more!'
                            {print} 'Youll need ' weeks ' more weeks.'
                        {else}
                            {print} 'Great! You have enough'
                            {print} 'Lets go shopping!'

                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'

                    {call} calculate_budget with _, _, _
                    ```
    pressit:
        name: Knapptryckningar
        default_save_name: Tryckt
        description: Prova att koppla en tangent till ett kommando!
        levels:
            5:
                story_text: |
                    På den här nivån finns ytterligare ett nytt nyckelord: `{pressed}`!
                    Med `{pressed}` kan du använda tangenterna på ditt tangentbord för att styra vilka rader som används.

                    ### Övning
                    Titta på exemplet och lägg till ytterligare en kodrad som reagerar på en tangenttryckning.
                example_code: |
                    ```
                    {print} 'Vill du ha ett lyckligt (l) eller olyckligt (o) slut?'
                    {if} l {is} {pressed} {print} 'De levde lyckliga i alla sina dagar ❤'
                    {else} {print} 'Prinsen blev uppäten av en flodhäst 😭'
                    ```
                story_text_2: |
                    Du kan också koppla sköldpaddskommandon till knappar.

                    ### Övning
                    Kopiera raderna några gånger så att du kan skapa en större ritning.
                example_code_2: |
                    ```
                    {if} y {is} {pressed} {forward} 15
                    {else} {turn} 90
                    ```
            7:
                story_text: |
                    Nu när du har lärt dig om `{repeat}`, kan vi trycka på tangenterna flera gånger.
                    Du kan använda det för att få sköldpaddan att gå framåt och vända sig.

                    ### Övning
                    Koden som du har sett på nivå 5 kontrollerar bara tangenten en gång. Kopiera exempelkoden och lägg till en `{repeat}` till den, så att du kan trycka på tangenterna många gånger.
                    Använd denna kod för att rita något snyggt.
                example_code: |
                    ```
                    {if} x {is} {pressed} {forward} 15 {else} {turn} 90
                    ```
            9:
                story_text: |
                    Nu när du vet hur man kombinerar påståenden kan du skapa ett verktyg för att skriva på tangentbord med `{pressed}`-kommandot.

                    ### Övning
                    Gör klart koden. Varje gång ska en slumpmässig bokstav väljas, som du måste trycka på. Du får en poäng för en korrekt tryckning och två poängs avdrag för en felaktig tryckning.
                    **Extrauppgift** Rensa skärmen efter varje bokstav, och visa användaren hur många poäng de har fått.
                example_code: |
                    ```
                    poäng = 0
                    bokstäver = a, b, c, d, e
                    {repeat} 10 {times}
                        bokstav = _ _ _
                        {print} 'Tryck på bokstaven ' bokstav
                        {if} bokstav {is} {pressed}
                        _
                        _
                        _
                    ```
    print_command:
        name: '{print}'
        default_save_name: skriv
        description: Introduktion till kommandot print
        levels:
            1:
                story_text: |
                    ## Kommandot skriv
                    Du kan skriva ut text på skärmen med kommandot `{print}`.
                example_code: |
                    ```
                    {print} Hej, programmerare!
                    {print} Välkommen till Hedy!
                    ```
                story_text_2: |
                    ### Övning
                    I Hedy hittar du övningar i varje äventyr. En övning ger dig möjlighet att öva på de nya kommandona och begreppen och låter dig gör exempelkoden mer personlig.
                    I den här övningen ser du ett rosa tomt utrymme. Du måste fylla i det tomma utrymmet innan koden kan köras.

                    Fyll i kommandot `{print}` i det tomma utrymmet och lägg sedan till ytterligare fem rader kod. Varje rad måste börja med ett `{print}`-kommando.
                    Ha så kul!
                example_code_2: |
                    ```
                    _ Hej!
                    ```
            18:
                story_text: |-
                    Vi har kommit fram till riktig Python-kod! Det betyder att vi måste använda parenteser med `{print}` och `{range}` från och med nu.
                    Det betyder också att du kan använda Hedy-kod från den här nivån i vilken Python-miljö som helst så länge du använder de engelska nyckelorden. Om du inte har gjort det hittils kan du ställa om det i kommandomenyn.
                example_code: |
                    ```
                    {print}('Hej!')
                    {for} i {in} {range}(1, 10):
                       {print}('Detta är rad ', i)
                    ```
                story_text_2: Om du vill skriva ut mer än en sak måste du ha kommatecken mellan.
                example_code_2: |
                    ```
                    temperatur = 25
                    {print}('Det är ', temperatur, ' grader ute')
                    ```

                    {print}('Jag heter ', namn)
    quizmaster:
        name: Quizmästare
        default_save_name: Quizmästare
        description: Gör ditt eget quiz!
        levels:
            14:
                story_text: |
                    I det här äventyret kan du göra din egen frågesport! Fyll i luckorna, lägg till fler frågor och njut av din egen frågesport!
                    Du kan göra en frågesport om vad du vill: din hobby, ditt favoritdjur, din favoritbok eller vad som helst!
                example_code: |
                    ```
                    {print} 'Gör ditt eget quiz'
                    poäng_a = 0
                    poäng_b = 0
                    {print} 'Fråga'
                    {print} 'Svarsalternativ A'
                    {print} 'Svarsalternativ B'
                    svar = {ask} 'Vilket svar?'
                    {if} svar == 'A'
                        poäng_a = poäng_a + 1
                    {if} svar == 'B'
                        poäng_b = poäng_b + 1
                    {print} 'Slut på quizet!'
                    {print} 'Vi kollar resultatet!'
                    {if} poäng_a > poäng_b
                        {print} 'Du tillhör A-klubben'
                    {if} poäng_b > poäng_a
                        {print} 'Du tillhör B-klubben'
                    ```
    quotation_marks:
        name: '''citattecken'''
        default_save_name: citattecken
        description: Introduktion till citattecken
        levels:
            4:
                story_text: |
                    ## 'Citattecken'
                    På nivå 4 har `{ask}` och `{print}` ändrats.
                    Du måste sätta texten du vill skriva ut mellan citattecken.
                    Detta är bra, för nu kan du skriva ut alla ord du vill ha. Även orden du använde för att spara något med `{is}`.
                    De flesta programspråk använder citattecken vid utskrift, så vi kommer också ett steg närmare riktig programmering!
                example_code: |
                    ```
                    {print} 'Du måste använda citattecken från och med nu!'
                    svar {is} {ask} 'Vad behöver vi använda från och med nu?'
                    {print} 'Vi måste använda ' svar
                    ```
                story_text_2: |
                    ##  Sammandragningar i engelsk text
                    Obs! Tänk på att nu när vi använder citattecken kommer Hedy att bli förvirrad när du använder apostrof för sammandragningar som I'm eller What's.
                    Se till att ta bort dessa apostrofer och ändra stavningen till Im eller Whats om du skriver på engelska.
                    Kolla in exempelkoden för att se fel sätt att använda apostrof.
                example_code_2: |
                    ```
                    _ Detta är fel sätt att använda apostrof t.ex. i engelsk text_
                    {print} 'I'm babysitting my sister's kids'
                    {print} 'What's more fun than that?'
                    ```
            12:
                story_text: |
                    **All text måste stå inom citattecken**
                    Från och med den här nivån måste du också använda citattecken när du sparar en text med `=`:
                example_code: |
                    ```
                    namn = 'Roboten Hedy'
                    {print} 'Hej ' namn
                    ```
                story_text_2: |
                    **Alla element i listor behöver också citattecken**.
                    Listor är texter, så de behöver också citattecken. Tänk på att varje element i listan ska ha citattecken.
                    Detta gör att du kan spara två ord som ett element i listan, till exempel 'Black Widow'.
                example_code_2: |
                    ```
                    superhjältar = 'Spiderman', 'Batman', 'Black Widow'
                    {print} superhjältar {at} {random}
                    ```
                story_text_3: |
                    **All text efter `{if}`-jämförelser behöver också citattecken**
                example_code_3: |
                    ```
                    namn = {ask} 'Vad heter du?'
                    {if} namn = 'Roboten Hedy'
                        {print} 'Hej på dig!'
                    ```
                story_text_4: |
                    **Tal behöver inte citattecken**
                    För tal använder du inte citattecken i `=`:
                example_code_4: |
                    ```
                    poäng = 25
                    {print} 'Du har ' poäng ' poäng'
                    ```
    random_command:
        name: random
        default_save_name: kommandot_random
        description: introduktion av kommandot random
        levels:
            3:
                story_text: |
                    ## På slump
                    På den här nivån kan du göra en lista med kommandot `{is}`. Du kan låta datorn välja ett slumpmässigt element från den listan. Det gör du med `{at} {random}`.
                example_code: |
                    ```
                    djur {is} hundar, katter, kängurur
                    {print} djur {at} {random}
                    ```
                story_text_2: |
                    Du kan använda kommandot `{at} {random}` i en mening också.
                example_code_2: |
                    ```
                    mat {is} smörgås, pizzaslice, sallad, burrito
                    {print} Jag ska ha mat {at} {random} till lunch.
                    ```
                story_text_3: |
                    ### Övning
                    Prova kommandot `{at} {random}` genom att göra din egen spelshow (som de på tv) där du väljer en dörr eller resväska och den innehåller ett stort pris!
                    Kan du göra det? Vi har redan lagt in de första raderna i exempelkoden.
                example_code_3: |
                    ```
                    {print} Den stora spelshowen!
                    {print} Det står tre resväskor framför dig …
                    valt {is} {ask} Vilken resväska väljer du?
                    priser {is} _
                    _
                    ```
            16:
                story_text: |-
                    We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
                    We use square brackets to point out a place in a list. For example: `friends[1]` is the first name on the list of friends, as you can see in the first part of the example code.
                    The second part of the example code shows you that we can also match 2 lists using the variable i.
                example_code: |
                    ```
                    friends = ['Ahmed', 'Ben', 'Cayden']
                    {print} friends[1] ' is the first friend on the list.'
                    {print} friends[2] ' is the second friend on the list.'
                    {print} friends[3] ' is the third friend on the list.'
                    #now we will match 2 lists using the variable i
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} friends[i] 's lucky number is ' lucky_numbers[i]
                    ```
                story_text_2: |-
                    Now that you've learned to use the brackets in lists, you can also start using the {at} {random} command in the Python way!
                    You simply type the name of your list with `[random]` behind it!
                example_code_2: |-
                    ```
                    fruit = ['apple', 'banana', 'cherry']
                    {print} fruit[random]
                    ```
    repeat_command:
        name: Upprepa
        default_save_name: kommandot_upprepa
        description: kommandot upprepa
        levels:
            7:
                story_text: |
                    ## Upprepa! Upprepa! Upprepa!
                    Nivå 7 lägger till kommandot `{repeat}`. `{repeat}` kan användas för att köra en kodrad flera gånger. Så här:

                    ### Övning
                    Lek litet med kommandot upprepa. Kan du göra happy birthday på bara tre rader kod istället för fyra nu?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy är kul!'
                    ```
            8:
                story_text: |
                    ### Upprepa-kommandon och indrag
                    På den här nivån kan du upprepa flera rader kod med bara ett upprepa-kommando.
                    Det gör du genom att ha ett block med rader som du vill upprepa.
                    Raderna i det blocket kommer att behöva **indrag** .
                    Det betyder att man sätter fyra mellanslag i början av varje rad. Du måste också göra indrag även om ditt kodblock bara har en kodrad.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} 'Hej allihop'
                        {print} 'Allt detta upprepas fem gånger'
                    ```
            9:
                story_text: |
                    På den här nivån kan du inte bara använda flera rader med `{if}` och `{repeat}`, utan du kan också sätta ihop dem!
                    I exemplet ser du ett `{if}`-kommando inuti ett `{repeat}`-kommando. Det är också tillåtet tvärtom, och en `{if}` är också tillåten i en `{if}` och en `{repeat}` i en `{repeat}`.
                    Testa det!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        mat = {ask} 'Vad vill du äta?'
                        {if} mat {is} pizza
                            {print} 'najs!'
                        {else}
                            {print} 'pizza är bättre'
                    ```
    repeat_command_2:
        name: '{repeat} 2'
        default_save_name: kommandot_upprepa_2
        description: kommandot upprepa 2
        levels:
            7:
                story_text: |
                    ## Upprepa med andra kommandon och med variabler
                    Du har övat på kommandot `{repeat}` i kombination med kommandot `{print}` nu, men visste du att du också kan använda andra kommandon med `{repeat}`?
                    I exempelkoden kan du se att `{repeat}` även kan användas med ett `{ask}`-, `{if}`- eller `{else}`-kommando.
                example_code: |
                    ```
                    {repeat} 2 {times} svar = {ask} 'Visste du att du kan ställa en fråga flera gånger?'
                    {if} svar {is} ja {repeat} 2 {times} {print} 'Det visste du redan!'
                    {else} {repeat} 3 {times} {print} 'Du har lärt dig något nytt!'
                    ```
                story_text_2: |
                    En annan intressant sak du kan göra med kommandot `{repeat}` är att använda variabler för att ställa in hur många gånger något ska upprepas. I exempelkoden kan du se att vi först frågar personen hur gammal den är.
                    Sedan, på rad 3, upprepas frågan 'ålder' gånger. Så vi använder variabeln 'ålder' med kommandot `{repeat}`.
                example_code_2: |
                    ```
                    {print} 'Hurra! Det är din födelsedag!'
                    ålder = {ask} 'Hur gammal är du nu?'
                    {repeat} ålder {times} {print} 'Hipp hipp hurra!'
                    ```
            8:
                story_text: |
                    ### Inuti blocket eller inte?
                    På den här nivån måste du tänka noga vilka rader kod som ska vara i blocket och vilka som inte ska vara det.
                    Till exempel: Du vill sjunga låten *the muffin man*. Då vill du att bara raden med 'the muffin man' ska upprepas två gånger.
                    Det betyder att den sista raden inte ska börja med indrag eftersom den inte hör till blocket.
                    Om du börjar den sista raden med indrag kommer låten att bli fel.

                    ## Övning
                    Varje rad i exempelkoden börjar med ett mellanrum. Ta bort mellanrummen och försök ta reda på vilken rad som behöver dras in och vilken som inte ska dras in för att sjunga sången.
                example_code: |
                    ```
                    _ {print} 'Do you know the muffin man?'
                    _ {repeat} 2 {times}
                    _ {print} 'The muffin man'
                    _ {print} 'Do you know the muffin man, who lives on Drury Lane?'
                    ```

                        {print} 'Den här raden kommer att upprepas …'
                        {print} 'Den här också …'
                    {print} 'men inte denna!'
    restaurant:
        name: Restaurang
        default_save_name: Restaurang
        description: Skapa din egen virtuella restaurang
        levels:
            1:
                story_text: |
                    På nivå 1 kan du göra din egen virtuella restaurang och ta emot dina gästers beställningar.
                story_text_2: |
                    ### Övning
                    Kopiera exempelkoden till din inmatningsskärm genom att klicka på den gula knappen.
                    Fyll först i rätt kommando på de tomma platserna för att koden ska fungera korrekt.
                    Lägg sedan till minst fyra rader kod till restaurangprogrammet.
                    Fråga kunden vad han eller hon vill dricka och fråga om han eller hon vill betala med kontanter eller kort.
                    Fundera till sist ut ett trevligt sätt att säga hejdå till din kund.
                example_code_2: |
                    ```
                    {print} Välkommen till Hedys restaurang 🍟
                    _ Vad vill du beställa?
                    {echo} Så du vill beställa
                    {print} Tack för din beställning!
                    {print} Den är på väg!
                    ```
            2:
                story_text: |
                    På nivå 2 kan du utöka din restaurang genom att använda variabler. På nivå 1 kunde Hedy bara `{echo}` beställningen en gång och bara komma ihåg det sista som beställdes.
                    Nu kan du använda variabler och Hedy kan komma ihåg både maten och påläggen!
                example_code: |
                    ```
                    {print} Välkommen till Hedys restaurang!
                    {print} Idag serverar vi pizza eller lasagne.
                    mat {is} {ask} Vad vill du äta?
                    {print} Bra val! Det är min älsklingsrätt!
                    topping {is} {ask} Vill du ha kött eller grönsaker till?
                    {print} mat med topping är på väg!
                    ```
                story_text_2: |
                    #### Övning
                    Kopiera din egen restaurangkod från föregående nivå till inmatningsskärmen nedan.
                    Rätta koden genom att byta ut kommandona `{ask}` och `{echo}` och använda variabler, som du har lärt dig på den här nivån.

                    Nu när din kod fungerar igen är det dags att lägga till något mer.
                    Titta på den sista raden i exempelkoden: `{print} mat med topping är på väg!`
                    På den raden används två variabler för att skapa en sammanfattning av beställningen.
                    Lägg nu till din egen sammanfattning av den mat och dryck som kunden beställt.

                    **Extra** Nu när du har lärt dig hur man använder variabler kan du använda så många variabler i en rad som du vill. Kan du lägga till fler variabler i din kod, till exempel äta på plats eller take away, kontant eller kort, med eller utan sugrör osv.
            3:
                story_text: |
                    Har du svårt att bestämma vad du vill äta till middag? Du kan låta Hedy välja åt dig!
                    Lägg helt enkelt till listor över dina favoriträtter (eller minst favoriträtter) så kan Hedy slumpmässigt välja din middag.
                    Du kan också ha lite kul genom att låta Hedy välja priset för din middag också! Vad kommer du att få?
                example_code: |
                    ```
                    rätter {is} spagetti, brysselkål, hamburgare
                    {print} Du kommer att få rätter {at} {random} ikväll!
                    priser {is} 1 euro, 10 euro, 100 euro
                    {print} Det kostar priser {at} {random} tack.
                    ```
                story_text_2: |
                    ### Övning
                    Gör nu din egen version av den slumpmässiga restaurangen.
                    Gör själv en lista över förrätter, huvudrätter, efterrätter, drycker och priser.
                    Använd sedan kommandona `{print}` och `{at} {random}` för att tala om för kunden vad som kommer att finnas menyn ikväll.
                example_code_2: |
                    ```
                    {print} Välkommen till din egen slumpmässiga restaurang!
                    förrätter {is} _
                    huvudrätter {is} _
                    efterrätter {is} _
                    drycker {is} _
                    priser {is} _
                    _
                    ```
            4:
                story_text: |
                    ### Övning
                    Lägg till citattecken till den här koden för att få det att fungera! Var försiktig: variabler ska inte vara inom citattecken.
                    Använd sedan kommandot `{clear}` för att bara visa en rad i taget på utdataskärmen.

                    ### Övning 2
                    Gå tillbaka till föregående nivå och kopiera din restaurangkod. Få koden att fungera på den här nivån genom att lägga till citattecken på rätt ställen och lägga till några `{clear}`-kommandon.
                example_code: |
                    ```
                    _ Lägg till citattecken i den här koden _
                    {print} Välkommen till Restaurang Chez Hedy!
                    {print} Idag serverar vi pizza eller lasagne.
                    mat {is} {ask} Vad vill du äta?
                    {print} Bra val! Det är min älsklingsrätt!
                    topping {is} {ask} Vill du ha kött eller grönsaker till det?
                    {print} mat med topping är på väg!
                    dryck {is} {ask} Vad vill du dricka till?
                    {print} Tack för din beställning.
                    {print} Din mat och dryck kommer strax!
                    ```
            5:
                story_text: |
                    ### Övning
                    Exempelkoden visar hur du kan programmera att du har slut på ett menyalternativ i din restaurang.
                    Kopiera din egen restaurangkod från de tidigare nivåerna. Skapa ett problem i din restaurang och koda det, som i exempelkoden.
                    Du kan till exempel också få slut på ett menyalternativ, eller så tar du inte kreditkort eller så är glassmaskinen trasig.

                    **Extrauppgift** Har du programmerat problemet och lämpliga svar? Försök sedan att lägga till fler `{if}`- och `{else}`-kommandon i din kod.
                    Försök att lägga till en `{if}` efter varje `{ask}`-kommando i din kod för att göra den så interaktiv som möjligt!
                example_code: |
                    ```
                    drycker_i_lager {is} vatten, läsk, cola, apelsinjuice
                    dryck {is} {ask} 'Vad vill du dricka?'
                    {if} dryck {in} drycker_i_lager {print} 'En' dryck 'på väg!'
                    {else} {print} 'Tyvärr, vi har inte det'
                    ```
            6:
                story_text: |
                    På den här nivån kan du använda matematik för att beräkna det totala priset på din kunds beställning, vilket kan göra din virtuella restaurang mer realistisk.
                    Men du kan också lägga till många fler saker till din virtuella restaurang, till exempel fler rätter.

                    ### Övning
                    Du kan lägga till många fler saker till din virtuella restaurang. Kan du till exempel …
                    - fråga hur många som kommer och multiplicera priset med det beloppet?
                    - lägga till en ny rätt?
                    - ge folk rabatt när de anger en (hemlig) kupongkod?
                    - lägga till en barnmeny?
                    - komma på andra roliga saker att lägga till?
                example_code: |
                    Du kan skapa en enkel restaurangkod, så här:
                    ```
                    {print} 'Välkommen till restaurang Chez Hedy'
                    {print} 'Här är vår meny:'
                    {print} 'Våra huvudrätter är pizza, lasagne eller spagetti'
                    huvudrätt = {ask} 'Vilken huvudrätt vill du ha?'
                    pris = 0
                    {if} huvudrätt {is} pizza pris = 10
                    {if} huvudrätt {is} lasagne pris = 12
                    {if} huvudrätt {is} spagetti pris = 8
                    {print} 'Du har beställt ' huvudrätt
                    {print} 'Det blir ' pris ' dollar, tack'
                    {print} 'Tack, smaklig måltid!'
                    ```
            7:
                story_text: |
                    På den här nivån har du lärt dig hur du använder kommandot `{repeat}` för att upprepa en kodrad ett visst antal gånger.
                    Du kan använda det i din restaurang för att `{ask}` flera personer vad de vill äta.

                    ### Övning
                    Kan du komplettera koden? Hedy måste upprepa den här frågan lika många gånger som det finns människor. Så om det finns fem personer måste frågan ställas fem gånger.
                    **Extrauppgift** Utöka din kod med fler frågor, till exempel om drycker eller sås.
                example_code: |
                    ```
                    {print} 'Välkommen till restaurang Chez Hedy'
                    people = {ask} 'Hur många personer är det i sällskapet?'
                    ```
            8:
                story_text: |
                    På den här nivån kan du göra din virtuella restaurang mer avancerad genom att upprepa flera kodrader. Till exempel så här:

                    ### Övning
                    Den här koden kan utökas med fler alternativ på menyn, t.ex. drycker eller flera rätter eller efterrätter. Lägg till minst ett ytterligare alternativ.
                    **Extrauppgift** Lägg till ännu fler artiklar, så många alternativ du vill!
                example_code: |
                    ```
                    {print} 'Välkommen till restaurang Chez Hedy!'
                    personer = {ask} 'Hur många personer är det i sällskapet idag?'
                    {print} 'Bra!'
                    {repeat} personer {times}
                        mat = {ask} 'Vad skulle du vilja beställa?'
                        {print} mat
                    {print} 'Tack för beställningen!'
                    {print} 'Smaklig måltid!'
                    ```
            9:
                story_text: "På den här nivån kan du använda dig av nästlad kod för att göra din restaurang mer realistisk och roligare!\n\n### Övning\nIndragen (mellanslagen) togs bort i exempelkoden. \nKan du räkna ut hur mycket indrag varje rad behöver för att koden ska fungera korrekt?\nOm kunden beställer pizza ska Hedy inte fråga vilken sås kunden vill ha.\n\n**Extrauppgift** En restaurang har inte alla såser i lager. Gör en lista över tillgängliga såser och ge ett svar vid varje beställning om ni säljer den. <br>\n**Extrauppgift** Pizzor har en fyllning. Fråga kunderna vad de vill ha.<br>\n**Extrauppgift** Vill kunderna ha något att dricka? Fråga dem också! <br>\n"
                example_code: |
                    ```
                    {print} 'Välkommen till restaurang Chez Hedy!'
                    people = {ask} 'Hur många personer är det i sällskapet?'
                    {print} 'Bra!'
                    pris = 0
                    {repeat} personer {times}
                    _ mat = {ask} 'Vad önskas?'
                    _ {print} mat
                    _ {if} mat {is} pommes frites
                    _ pris = pris + 3
                    _ sås = {ask} 'Vilken typ av sås vill du ha till dina pommes frites?'
                    _ {if} sås {is} nej
                    _ {print} 'ingen sås'
                    _ {else}
                    _ pris = pris + 1
                    _ {print} 'med ' sås
                    _ {if} mat {is} pizza
                    _ pris = pris + 4
                    {print} 'Det blir ' pris ' dollar'
                    {print} 'Smaklig måltid!'
                    ```
            10:
                story_text: |
                    På den här nivån lär du dig hur du enkelt tar upp beställningar för olika maträtter.

                    ### Övning 1
                    Gör klart koden med en `{ask}` där det är tomt så att kunden får en fråga vad de vill äta för varje rätt.
                example_code: |
                    ```
                    rätter = förrätt, varmrätt, efterrätt
                    {for} rätt {in} rätter
                        {print} 'Vad önskas till ' rätt '?'
                        _
                        _
                    ```
                story_text_2: |
                    ### Övning
                    Naturligtvis kan du också beställa för flera personer!
                    Kan du lägga till rätt mängd indrag före varje rad så att koden fungerar korrekt?
                    Tips: Vissa rader behöver inte ha någon indragning alls.
                example_code_2: |
                    ```
                    _ rätter = förrätt, varmrätt, efterrätt
                    _ namn = Timon, Onno
                    _ {for} namnet {in} namn
                    _ {for} rätt {in} rätter
                    _ mat = {ask} namnet ', vad vill du ha till ' rätt '?'
                    _ {print} namnet ' beställer ' mat ' till ' rätt
                    ```
            11:
                story_text: |
                    Vi kan använda `{for}` med `{range}` för att skriva ut beställningar från flera kunder på ett ordnat sätt.

                    ### Övning
                    Avsluta restaurangkoden så att du kan ta upp en beställning av flera personer. Skriv ut ordernumret varje gång: 'Order 1', 'Order 2' osv.
                    Är du osäker på hur du ska gå till väga? Ta en titt på din nivå 8-kod.

                    **Extrauppgift** På nivå 9 använde restaurangen även priser. Det kan du lägga till här också!
                example_code: |
                    ```
                    {print} 'Välkommen till restaurang Hedy!'
                    människor = {ask} 'För hur många personer vill du beställa?'
                    {print} 'Du vill alltså beställa för ' människor ' människor.'
                    {print} 'Då börjar vi!'
                    ```
            12:
                story_text: |
                    Från och med den här nivån kan du använda decimaltal för att göra menyn mer realistisk.

                    ### Övning
                    Kan du komma på en kod för att ge dina vänner och din familj 15% rabatt?
                example_code: |
                    ```
                    pris = 0.0
                    mat = {ask} 'Vad önskas?'
                    dricka = {ask} 'Vad vill du dricka?'
                    {if} mat {is} 'hamburgare'
                        pris = pris + 6.50
                    {if} mat {is} 'pizza'
                        pris = pris + 5.75
                    {if} dricka {is} 'vatten'
                        pris = pris + 1.20
                    {if} dricka {is} 'läsk'
                        pris = pris + 2.35
                    {print} 'Det blir ' pris ' dollar, tack'
                    ```
            13:
                story_text: |
                    På den här nivån kommer du att lära dig nya kommandon för att utöka din kod ytterligare.

                    ### Övning 1
                    Placera ett `{and}` och ett `{or}` på den logiska platsen i programmet.

                    ### Övning 2
                    Utöka din restaurang med minst ett till `{and}` och ett `{or}`.
                    Skapa till exempel en speciell rabattkupong som endast gäller pizza, eller ge din kund en gratis dryck
                    med pommes frites och pannkakor. Eller något helt annat förstås!
                example_code: |
                    ```
                        {print} 'Detta är vår rabattmeny'
                        pris = pris - 3
                    {if} dryck {is} 'vatten' _ dryck {is} 'juice'
                        {print} 'Det är ett hälsosamt val'
                    {print} 'Det kostar ' pris ' dollar'
                    ```
            15:
                story_text: |
                    Med `{while}` kan du göra så att dina kunder kan fortsätta att lägga till beställningar tills de är klara.
                    ### Exercise
                    Correctly add the `{while}` command to this code.
                example_code: |
                    ```
                    {print} 'Välkommen till McHedy'
                    mer = 'ja'
                    _
                        order = {ask} 'Vad vill du beställa?'
                        {print} order
                        mer = {ask} 'Vill du beställa något mer?'
                    {print} 'Tack!'
                    ```
    rock:
        name: Sten, sax, påse
        default_save_name: Sten_2
        description: Gör ditt eget sten, sax, påse-spel
        levels:
            1:
                story_text: |
                    I nivå 1 kan du börja med ett sten, sax, påse-spel.

                    Med `{ask}` kan du göra ett val, och med `{echo}` kan du upprepa det valet.
                example_code: |
                    ```
                    {print} Vad väljer du?
                    {ask} Välj mellan sten, sax eller påse.
                    {echo} Så ditt val var:
                    ```
                story_text_2: |
                    ### Övning
                    Istället för att använda ord skulle man kunna använda emojier: ✊✋✌
                    Kan du skriva en kod med emojier?
                example_code_2: |
                    ```
                    {print} vad väljer du?
                    {ask} välj bland _
                    {echo} så ditt val var:
                    ```
            2:
                story_text: |
                    På den här nivån kan du öva på att variablerna, så att du kan göra spelet sten, sax, påse på nästa nivå!
                    ### Övning
                    Avsluta koden genom att fylla i **variabeln** i tomrummen.
                    Det här spelet är inte särskilt interaktivt, men inga bekymmer! På nästa flik kommer du att lära dig hur du använder variabler med kommandot `{ask}` för att göra ditt spel interaktivt!
                example_code: |
                    ```
                    val är sten
                    {print} Jag väljer _
                    ```
            3:
                story_text: |
                    Du kan använda kommandot `{at} {random}` för att låta datorn välja sten, sax eller påse!

                    ### Övning
                    Avsluta koden genom att använda kommandot `{at} {random}`.
                example_code: |
                    ```
                    val {is} sten, sax, påse
                    {print} val _
                    ```
                story_text_2: |
                    **Extra** Gör ett spel för två spelare. Be först de två spelarna att mata in sina namn. Låt sedan datorn slumpmässigt välja åt dem.
                example_code_2: |
                    ```
                    val {is} sten, sax, påse
                    spelare_1 {is} {ask} Namn på spelare 1:
                    _
                    ```
            4:
                story_text: |
                    På den här nivån kan vi också programmera sten, sax, påse. Men om du vill lägga till text måste du använda citattecken även här.
                    ### Övning
                    Fill in quotation marks on the blanks. Mind that the variable `choices` should be outside the quotes.
                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} _The computer chooses..._ choices {at} {random}
                    ```
            5:
                story_text: |
                    På den här nivån kan vi avgöra om det är oavgjort eller inte. För det behöver du det nya nyckelordet `{if}`.

                    ### Övning
                    Avsluta koden genom att fylla i luckorna:
                    * Låt datorn välja ett slumpmässigt alternativ
                    * Fråga spelaren vad han eller hon vill välja
                    * Fyll i de korrekta variablerna på rad 4 och 5.
                    * Gör klart rad 6 så att Hedy kan kolla om det är oavgjort eller inte.
                example_code: |
                    ```
                    alternativ {is} sten, sax, påse
                    datorns_val {is} _
                    val {is} _
                    {print} 'du valde ' _
                    {print} 'datorn valde ' _
                    {if} _ {is} _ {print} 'oavgjort!' {else} {print} 'inte oavgjort'
                    ```

                    Fyll i rätt kod i tomrummen för att se om det är oavgjort.
            9:
                story_text: "På den här nivån kan du programmera hela spelet sten, sax, påse genom att nästla `{if}` -kommandon. \n\n### Övning\nKan du göra klart koden? Programmet behöver berätta vem som har vunnit för varje kombination.\n\n **Extrauppgift** Vill du spela mer än en omgång? Bygg ut koden så att du kan spela flera omgångar. Du kan till och med använda en `{ask}` för att fråga användaren hur många rundor hen vill spela.\n"
                example_code: |
                    ```
                    val = sten, sax, påse
                    ditt_val = {ask} 'Vad väljer du?'
                    {print} 'Du väljer ' ditt_val
                    datorval = val {at} {random}
                    {print} 'Datorn väljer ' datorval
                    {if} datorval {is} ditt_val
                        {print} 'Oavgjort'
                    {if} datorval {is} sten
                        {if} ditt_val {is} påse
                            {print} 'Du vann!'
                        {if} ditt_val {is} sax
                            {print} 'Du förlorade!'
                    # gör klart koden
                    ```
            10:
                story_text: |
                    ### Övning
                    På de tidigare nivåerna har du ofta gjort ditt eget sten-sax-påse-spel. Kan du skriva klart koden och använda kommandot {for} rätt så spelet fungerar?
                example_code: |
                    ```
                    val = _
                    spelare = _
                    {for} _
                    ```
            13:
                story_text: |
                    Med kommandot `{and}` kan du förkorta din sten-, sax-, påsekod! Kolla in exempelkoden.

                    ### Övning
                    Gör färdigt koden så att en vinnare alltid koras. Kör din kod några gånger för att kolla att vinnaren alltid skrivs ut.
                example_code: |
                    ```
                    alternativ = 'sten', 'sax', 'påse'
                    ditt val = {ask} 'Vad väljer du?'
                    datorval = alternativ {at} {random}
                    {print} 'Du väljer' ditt_val
                    {print} 'Datorn väljer ' datorval
                    {if} datorval {is} ditt_val
                        {print} 'Oavgjort'
                    {if} datorval {is} 'sten' {and} ditt_val {is} 'påse'
                        {print} 'Du vann!'
                    {if} datorval {is} 'sten' {and} ditt_val {is} 'sax'
                        {print} 'Datorn vann!'
                    _
                    ```
            15:
                story_text: |
                    ### Övning
                    Spela tills du slår datorn! Men först måste du göra klart exempelkoden …
                example_code: |
                    ```
                    vunnit = 'nej'
                    alternativ = 'sten', 'sax', 'påse'
                    {while} vunnit == 'nej'
                        ditt_val = {ask} 'Vad väljer du?'
                        datorval = alternativ {at} {random}
                        {print} 'du valde ' ditt_val
                        {print} 'datorn valde ' datorval
                        {if} datorval == ditt_val
                            {print} 'Oavgjort!'
                        {if} computer_choice == 'sten' {and} your_choice == 'sax'
                            {print} 'Du förlorade!'
                        {if} computer_choice == 'sten' {and} your_choice == 'påse'
                            {print} 'Du vann!'
                            vunnit = 'ja'
                    _
                    ```
    rock_2:
        name: Sten, sax, påse 2
        default_save_name: sten_2
        description: Del 2 av sten, sax, påse
        levels:
            2:
                story_text: |
                    Nu när du har lärt dig använda kommandot `{ask} kan du göra din sten, sax, påse-kod interaktiv också!

                    ### Övning
                    Gör sten, sax, påse-koden interaktiv genom att lägga till kommandot `{ask}` och en fråga.
                example_code: |
                    ```
                    val är _
                    {print} Jag väljer val
                    ```
    secret:
        name: SuperSpion
        default_save_name: SuperSpion
        description: Skapa din egen spionkod
        levels:
            12:
                story_text: |
                    I det här äventyret kan du skapa din egen superspionkod. Koda ett meddelande som bara rätt agent kan avkoda.
                    Om fienden försöker knäcka koden kommer de att få falsk information för att slösa på deras tid.

                    ### Övning 1
                    Gör din egen hemliga kod för din superspion och lämna tillbaka båda delarna bara till den rätta spionen.

                    ### Övning 2
                    Lägg till en tredje komponent till koden, till exempel ett klädesplagg eller ett föremål.
                example_code: |
                    ```
                    namn = {ask} 'Vad heter du?'
                    {if} namn {is} '_'
                        a = 'Åk till flygplatsen'
                    {else}
                        a = 'Åk till tågstationen'
                    lösenord = {ask} 'Vad är lösenordet?'
                    {if} lösenord {is} _
                        b = 'imorgon kl. 02.00'
                    {else}
                        b = 'idag kl. 10.00'
                    {print} _ _ _
                    ```
            13:
                story_text: |
                    Vi kan förenkla superspionkoden med `{and}`, så att vi bara behöver en `{if}`.

                    ### Övning 1
                    Komplettera koden genom att fylla i det rätta kommandot på den tomma platsen. Tips: Superspionen måste besvara BÅDA frågorna korrekt innan hen får den hemliga informationen!

                    ### Övning 2
                    Vi vill förvirra fienden ännu mer! Skapa en lista med falska svar och välj ett slumpmässigt när ett felaktigt svar ges.
                example_code: |
                    ```
                    name = {ask} 'Vad heter du?'
                    lösenord = {ask} 'Vad är ditt lösenord?'
                    {if} namn {is} 'Agent007' _ lösenord {is} 'TOPSECRET'
                        {print} 'Åk till flygplatsen kl. 02.00'
                    {else}
                        {print} 'Åk till tågstationen kl. 10.00'.
                     ```
    simon:
        name: Simon Says
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    Let's make a game of Simon Says! Simon Says is a memory game in which the player will be given a color. They have to repeat that color back.
                    If they get it right a color is added to the sequence, so they now have to remember 2 colors, then 3, then 4 etc. the game stops as soon as the player makes a mistake.

                    ### Exercise
                    In this first part of the Simon Says adventure, we'll let the computer pick a random color and add it to a list.

                    ***Make 2 lists*** First, make a list called `colors` and fill it with the colors red, yellow, green and blue.
                    Then make a list called `simon_sequence`. This list will be used as the answer.
                    At the start of the game this lists need to be empty. unfortunately, we can't create an empty list (yet), so we'll fill it with the words 'empty' and 'list' and we'll remove them from the list immediately.

                    ***Create a function that adds a color to the sequence*** Now that we have an empty list called simon_sequence, we can start filling it with random colors.
                    We do that with a function, so we can call it everytime there's a new level in our game. Create a function called `add_random_color`.
                    Then create the variable random_color and set it to a random color. Next, add this random color to the simon_sequence.

                    ***Create a function that shows the simon_sequence*** Start by naming the new function `show_simon_sequence` with `level` as an argument. Now we want to show as many colors as the level we are in (in level 1 you see 1 color, in level 2 you see 2 colors etc).
                    So we repeat `level` times, to print the `simon_sequence[i]`. Each time a color is shown, wait for 1 second and then clear the screen.

                    ***Test your program*** Before you go to the next level, test if the functions are working by calling both of the functions. If they're working you should see a random color in your output screen.
                    Remove this testing part of your code, copy the code and continue to the next tab to learn more about the simon says game!
                example_code: |
                    ```
                    # Make 2 lists
                    colors = _
                    _ = ['empty', 'list']
                    {remove} _ {from} simon_sequence
                    {remove} _

                    # Create a function that adds a color
                    _ add_random_color
                        _
                        {add} _

                    # Create a function that shows the simon_sequence
                    {define} _
                        {for} i {in} {range} 1 {to} _
                            {print} _
                            _
                            _

                    # Test your program
                    {call} _
                    {call} show_simon_sequence {with} 1
                    ```
    simon_2:
        name: Simon Says 2
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    We'll continue with our Simon Says game!

                    ### Exercise
                    ***Paste your code here*** Paste your code from the previous level here. Don't forget to remove the part that was just used for testing the functions.

                    ***Create a function that creates the player_sequence*** The list `player_sequence` is used to capture the answers of the player. First we define the function with the argument level.
                    Next, we ask level times what the color is that they choose. We call that variable `answer`. Then we add the variable `answer` to the list player_sequence.

                    ***Setting up the game*** Before we program the game in the next tab, we'll need some starting variables. First, we'll set the variable `level` to 1 and the variable `game_over` to False.
                    Then we make an introduction for the game. We'll print 'Welcome to Simon Says!' and clear the screen after 1 second.

                    ***Continue to the next tab to finish the game!**** Don't forget to copy your code and take it with you to the next tab.
                example_code: |
                    ```
                    # Paste your code here


                    # Create a function that creates the player_sequence
                    {define} _
                        {for} _
                            _ 'What is color number ' i '?'
                            {add} answer {to} _

                    # Set up
                    level = _
                    game_over = _
                    {print} _
                    _ 1
                    _
                    ```
    simon_3:
        name: Simon Says 3
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    In this tab we'll program the game of Simon Says!

                    ### Exercise
                    ***Paste your code*** Copy your code from the previous tab and paste it here.

                    ***Program the game*** We start by making sure the game goes on while the game isn't over. Then we print what level the player is on, we use the variable level for that. We only show that for 1 second and then we clear the screen again.
                    Now, we have to create the empty list player_sequence. We've already programmed how to fill the list, with our function `player_sequence`, but we never made the list itself. To create the list we use the same trick as we did in the previous tab.
                    We'll make a list with the words 'empty' and 'list' on it, and then we remove both these words. Next, we'll call all of the 3 functions that we've created.
                    Lastly, we'll have to check if the player gave the correct answers (so if the player_sequence and the simon_sequence are the same).
                    If that's the case, we'll compliment the player. Wait for 1 second and increase the level with 1.
                    Did the player give the wrong answer, we'll tell them and end the game by setting game_over to 'True'

                    ***Enjoy your game!*** Great job! Does your game not work? Use the ladybug button to debug your code!
                example_code: |
                    ```
                    # Paste your code here

                    # The game
                    {while} game_over _
                        {print} _
                        _
                        _
                        _ = ['empty', 'list']
                        {remove} _
                        {remove} _
                        {call} _
                        {call} _ {with} _
                        {call} _ {with} _
                        {if} player_sequence == _
                            _
                            _
                            _
                        {else}
                            _
                            game_over = _
                    ```
    sleep_command:
        name: '{sleep}'
        default_save_name: kommandot_sov
        description: introduktion till kommandot sov
        levels:
            2:
                story_text: |
                    Ett annat nytt kommando på denna nivå är `{sleep}`, som pausar ditt program i en sekund. Om du skriver ett tal efter kommandot {sleep}, pausas programmet i det antalet sekunder.

                    ### Övning
                    Öva på det nya kommandot genom att göra egen kod där du använder kommandot {sleep} minst 3 gånger. För varje {sleep}-kommando ska paustiden variera.
                example_code: |
                    ```
                    {print} Min favoritfärg är …
                    {sleep} 2
                    {print} grön!
                    ```
    songs:
        name: Sjung en sång!
        default_save_name: Sång
        description: Skriv ut en sång
        levels:
            6:
                story_text: |
                    Sånger innehåller ofta många upprepningar. Ibland bygger upprepningarna också på räkning.
                    Till exempel i den välkända sången 'Bottles of beer'. Du kan programmera den låten med lite matematik.

                    Tips: Använd funktionen för högläsning för att låta Hedy sjunga sången för dig!

                    ### Övning
                    Du kan nu upprepa raderna 2 till 7 hur många gånger som helst genom att kopiera raderna.
                example_code: |
                    ```
                    vers = 99
                    {print} vers ' ölflaskor på väggen'
                    {print} vers ' ölflaskor'
                    {print} 'Ta en ner, skicka runt den'
                    vers = vers - 1
                    {print} vers ' ölflaskor på väggen'
                    {sleep}
                    ```
                story_text_2: |
                    Denna barnvisa räknar ner från fem små apor till en apa.
                    Om du kopierar rad 2–7 och klistrar in dem under koden kan du sjunga hela sången!
                example_code_2: |
                    ```
                    antal = 6
                    antal = antal - 1
                    {print} antal ' små apor som hoppar på sängen.'
                    {print} 'En av dem ramla ner av och slog huvudet.'
                    {print} 'Mamma ringde till doktorn och doktorn sa'
                    {print} 'INGA FLER APOR SOM HOPPAR PÅ SÄNGEN!'
                    {sleep}
                    ```
            7:
                story_text: |
                    Sånger innehåller ofta många upprepningar. Till exempel ... Baby Shark! Om du sjunger den sjunger du samma sak hela tiden:

                    Baby Shark tututududutudu <br>
                    Baby Shark tututududutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark

                    ### Övning
                    Kan du skriva ut låten Baby Shark med `{repeat}`? Avsluta koden genom att ersätta tomrummen i koden?
                    **Extra** Efter Baby Shark kan du naturligtvis också programmera andra låtar. Det finns många låtar med upprepning!
                    Kan du komma på en sång  tilloch skriva ut den?
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Baby Shark tututudutudu'
                    {print} 'Baby Shark'
                    ```
            8:
                story_text: |
                    I en tidigare nivå har du programmerat låten 'Bottles of beer'. Men utan kommandot `{repeat}` var du tvungen att kopiera verserna många gånger.
                    I den här nivån kan du upprepa sången 99 gånger, bara genom att lägga till en endarad!

                    ### Övning
                    Lägg till rätt kommando på de tomma platserna och indentera koden på rätt sätt.
                example_code: |
                    ```
                    verse = 99
                    _ 99 {times}
                    {print} verse ' bottles of beer on the wall'
                    {print} verse ' bottles of beer'
                    {print} 'Take one down, pass it around'
                    verse = verse - 1
                    {print} verse ' bottles of beer on the wall'
                    ```
            10:
                story_text: |
                    Med `{for}` kan du skriva ut hela sången om baby shark (inklusive alla andra hajar i familjen) på bara 6 rader!

                    ### Övning 1
                    Kan du göra baby shark-koden ännu kortare genom att använda kommandot `{for}`? Gör klart exempelkoden.
                example_code: "```\nfamily = baby, mammy, daddy, grandma, grandpa\n_ _ _ _ \n  {print} _\n```\n"
                story_text_2: |
                    ### Övning 2
                    Skriv ut låten Fem små apor hoppade på sängen. Slå upp texten om du inte kommer ihåg.

                    **Extrauppgift** Skriv ut låten Old MacDonald had a farm och se till att alla djur gör olika ljud med hjälp av ett `{if}`.
                example_code_2: |
                    ```
                    apor = 5, 4, 3, 2, 1
                    ```
            11:
                story_text: |
                    På den här nivån kan du använda `{for}` med `{range}` för att göra sånger där du räknar, till exempel fem små apor.

                    ### Övning 1
                    Fyll i luckorna och få koden att fungera! Om du inte kommer ihåg sångtexten kan du slå upp den själv.

                    ### Övning 2
                    Sångens sista rad skiljer sig från de andra. Skriv ut den raden inuti `{for}` och använd en `{if}` för att få den att fungera korrekt.
                example_code: |
                    ```
                    _ monkeys _ _ 5 _ 1
                        {print} monkeys ' little monkeys jumping on the bed'
                        _
                    ```
            12:
                story_text: |
                    I den här sången kan vi göra det ännu enklare att programmera 'if you're happy and you know it, clap your hands'. Eftersom vi kan placera alla handlingar i en variabel, kolla in det:

                    ### Övning
                    Kan du lägga till rätt antal indrag (mellanslag) på varje rad för att få låten att spelas korrekt?
                    Tips: Alla rader behöver inte vara indragna.
                example_code: |
                    ```
                    _ handlingar = 'klappa händerna', 'stampa fötterna', 'ropa hej till nån'
                    _ {for} handling {in} handlingar
                    _ {for} i {in} {range} 1 {to} 2
                    _ {print} handling
                    _ {print} 'om du är riktigt glad'
                    _ {print} 'du kan också glädja andra som på denna jorden vandra'
                    _ {print} handling
                    _ {print} 'om du är riktigt glad'
                    ```
            13:
                story_text: |
                    In the previous adventure you have learned how to use an argument in a function, but did you know that you could combine them with {ask} commands as well?
                    In this example we have changed the 'My Bonnie' program and made it interactive. You are now asked where Bonnie is.
                example_code: |
                    ```
                    {define} song {with} place
                        {print} 'My Bonnie is ' place

                    chosen_place = {ask} 'Where do you want Bonnie to be?'
                    synonym = {ask} 'What is another word for that?'

                    {call} song {with} chosen_place
                    {call} song {with} synonym
                    {call} song {with} chosen_place
                    ```
            16:
                story_text: |
                    På den här nivån kan du programmera en sång som OldMacDonald ännu snabbare. Du kan koppla rätt djur till rätt ljud genom att helt enkelt placera dem på samma plats i listan.
                    The Drunken Sailor går också snabbt att göra på den här nivån. Du behöver bara åtta rader för hela låten; kolla in det här!
                example_code: |
                    ```
                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    {for} i {in} {range} 1 {to} 3
                        animal = _
                        sound = _
                        {print} 'Old MacDonald had a farm'
                        {print} 'E I E I O!'
                        {print} 'and on that farm he had a ' animal
                        {print} 'E I E I O!'
                        {print} 'with a ' sound sound ' here'
                        {print} 'and a ' sound sound ' there'
                        {print} 'here a ' sound
                        {print} 'there a ' sound
                        {print} 'everywhere a ' sound sound
                    ```

                    ```
                    lines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} line {in} lines
                        {for} i {in} {range} 1 {to} 3
                            {print} line
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
            18:
                story_text: |
                    På nivå 16 gjorde vi låtar med hjälp av listor. De programmen fungerar inte längre korrekt på denna nivå. Kolonen från nivå 17 och parenteserna från nivå 18 behöver fortfarande läggas till.

                    ### Övning 1
                    Drunken sailor-låten ges som exempelkod, men fungerar inte än.
                    Kan du se till att allt fungerar igen? För att hjälpa dig har vi placerat _ på platsen för _några_ av felen.

                    ### Övning 2
                    Slå nu också upp din Old MacDonald-låt från nivå 16 och korrigera den.
                example_code: |
                    ```
                    lines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} line {in} lines _
                        {for} i {in} {range} 1 {to} 3 _
                            {print} _ line _
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
    songs_2:
        name: Sing a song! 2
        default_save_name: Song 2
        description: Sing a song 2
        levels:
            12:
                story_text: |
                    Songs contain a lot of repetition. We can capture it with a function!
                    ### Exercise
                    Look at the example code with the function. Fill out the two lines so the full song is printed.
                example_code: |
                    ```
                    {define} twinkle
                        {print} 'Twinkle'
                        {print} '...'

                    {call} twinkle
                    {print} 'Up above the world so high'
                    {print} 'Like a diamond in the sky'
                    {call} _
                    ```
            16:
                story_text: |
                    ### Exercise
                    Finish the nursery rhyme!
                example_code: |
                    ```
                    number = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
                    object = ['on his drum', 'on his shoe', 'on his knee', 'on his door', 'on his hive', 'on his sticks', 'up in heaven', 'on his gate', 'on his vine', 'once again']

                    _
                        {print} 'This old man'
                        {print} 'He played ' _
                        {print} 'He played knick-knack ' _
                        {print} 'With a knick-knack paddywhack'
                        {print} 'Give the dog a bone'
                        {print} 'This old man came rolling home'
                        {sleep} 8
                        {clear}
                    ```
                story_text_2: |
                    ### Exersice 2
                    Now create your own code for the nursery rhyme 'The wheels on the bus' on the same way!
                example_code_2: |
                    ```
                    object = ['wheels', 'doors', _]
                    movement = [ 'round and round', 'open and shut', _]
                    ```
    tic:
        name: Tic-Tac-Toe
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    Let's program a game of tic-tac-toe!

                    ### Exercise
                    In this adventure we'll start with creating an empty field.

                    ***Create a list called field*** This list will be our playing field. This list is filled with 9 dots, since there are no x's and o's yet at the start of our game.

                    ***Create a function that prints the field*** Firstly, clear the screen so the old playing fields will be removed. Then we print the first line of our Tic Tac Toe field. This line constists of the first 3 spots in our list field.
                    We have already programmed this line for you. Now finish the field by printing spot 4, 5, and 6 on the second row and spot 7, 8 and 9 in the third row.

                    ***Call the function that prints the field*** Now call the function.
                    <div class="w-full flex flex-row gap-2">
                        Run the code. Your output should look like this: <img src="https://github.com/hedyorg/hedy/assets/80678586/bcbd156e-4b48-4e82-84ae-f86d21b0cbcc" width="100">
                    </div>

                    ***Continue in the next tab*** In the next tab you'll learn how to program the game itself.
                example_code: |
                    ```
                    # Create a list called field
                    _ = ['.', '.', '.', '.', '.', '.', '.', '.', '.']

                    # Create a function that prints the field
                    {define} print_field
                        _
                        {print} 'TIC TAC TOE'
                        {print} field[1] field[2] field[3]
                        _
                        _

                    # Call the function
                    ```
            17:
                story_text: |
                    In the previous level you've learned how to make a tic-tac-toe game. The game works, but is quite annoying as it keeps asking you if you've won yet.
                    Now that we have the {elif} command, we can let the game decide if someone has won and it can stop asking us!

                    ### Exercise
                    ***Paste your code*** Paste your code from the previous level here and make it level 17 proof. In this level you've learned to use a colon everytime you create a block of code. Please add the colons in the correct spots.

                    ***Create a function that detects if someone's won*** We have started the function for you, paste it under the function `print_field` and finish the function. You can see that this first piece of code checks to see if spot 1, 2 and 3 are the same, because if they are you have 3 in a row.
                    It also checks if they are not a dot, because if they are, the line might have the same symbols on them, but that's just because it's still empty.
                    If all these conditions are met, the game is over and the winner is printed.
                    Finish this function with all possible ways to win. This means you have to make this for the other 2 rows, 3 columns and 2 diagonals.
                    If you've finished all the other options, the function should return the variable `game_over` so we can use it in our game.

                    ***Call the function in the game*** Go to the line `game_over = {ask} 'Did you win?'` and change it to `game_over = {call} detect_winner {with} field, sign`. Now the function will check if there's a winner and the game doesn't need to keep asking anymore!

                    ***Enjoy your game!*** Great job! You have finished the game! Enjoy playing it!

                example_code: |
                    ```
                    # Paste your code here and make it level 17 proof

                    # Create a function that detects if someone has won
                    {define} detect_winner {with} field, sign:
                        {if} field[1] == field[2] {and} field[2] == field[3] {and} field[1] != '.':
                            game_over = 'yes'
                            {print} 'Player ' sign 'wins!'
                        {elif}:
                            _
                        {else}:
                            game_over = 'no'
                    {return} _
                    ```
    tic_2:
        name: Tic-Tac-Toe 2
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    In the previous adventure you've learned how to create a playing field. Now you'll learn how to create the game!

                    ### Exercise
                    ***Paste your code*** Start by pasting your code from the previous adventure here.

                    ***Add variables*** Underneath your list called `field` we'll add 2 more variables that we'll need to program the game.
                    The variable `game_over` tells us if the game is over, and should be 'no' at the start of the game.
                    The variable `sign` tells us if it's the turn of player x or player o. Set the variable to 'x'.

                    ***The game*** First use a {while} command, to make sure the game keeps on playing the variable while game_over is set to no.
                    During the game, we first ask the player which spot they choose. Then we change the field with the number they chose into their sign.
                    Then we print the field again and we ask the player if they've won yet. Lastly we want to switch whose turn it is, so if the sign is 'x' it should be 'o' and the other way around.

                    ***Test your game*** Does your game work? Great, have fun playing the game! If not, use the ladybug button to debug your code.
                    You might have noticed one mistake in the code though, you can steal the other player's spot! If the other person chose spot 1, you could simply enter 1 after them and steal their spot.
                    That's not fair! Go to the next tab to learn how to fix this problem.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Add variables
                    game_over = _
                    sign = _

                    # The game
                    {while} _
                        choice = _ 'Player ' sign '_?'
                        field[choice] = _
                        _ print_field
                        game_over = {ask} _
                        {if} sign = 'o'
                            sign = _
                        _
                            sign = _
                    ```
    tic_3:
        name: Tic-Tac-Toe 3
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    You might have noticed one mistake in the code you've made in the previous adventure. You can steal the other player's spot! If the other person chose spot 1, you could simply enter 1 after them and steal their spot.
                    That's not fair! In this tab we'll fix that mistake.

                    ### Exercise
                    ***Paste your code here*** Paste your code from the previous adventure here.

                    ***Fix the mistake*** To fix the mistake we replace the line that says `field[choice] = sign`. This turns any spot that the player has chosen into their sign.
                    Go to the header that says 'Use this to fix the mistake' and finish the code. We first want to check if the chosen spot is still empty, so `if field[choice] = '.'`. If that is the case, you are allowed to take it.
                    Then we make an else command and print 'Sorry, this spot is already taken' if the spot is not empty. Lastly, we add a {sleep} command, so the players can actually read the text before it gets cleared again.
                    Now copy this piece of code and replace the line `field[choice] = sign` with this new piece of code.

                    ***Play your game!*** Now the game should work properly! Good job!
                    The only flaw is that you can get a bit annoyed that the game keeps asking you if you've won yet. Do you want to fix that? Go to level 17 and we'll fix it!
                example_code: |
                    ```
                    # Paste your code here

                    # Use this to fix the mistake
                    {if} _ = '.'
                        field[choice] = sign
                    {else}
                        {print} _
                        _
                    ```
    turtle:
        name: Sköldpadda
        default_save_name: Sköldpadda
        description: Gör din egen ritning
        levels:
            1:
                story_text: |
                    Du kan också rita med Hedy. Genom att kombinera svängar och linjer kan du göra en fyrkant eller trappa!

                    Med `{forward}` ritar du en linje framåt. Talet efter avgör hur långt sköldpaddan kommer att gå. `{turn} {right}` vrider ett kvarts varv medurs, `{turn} {left}` vrider moturs.

                    Om du vill gå bakåt använder du kommandot `{forward}` men med ett negativt tal. Till exempel `{forward} -100`
                example_code: |
                    ```
                    {forward} 100
                    {turn} {left}
                    ```
                story_text_2: |
                    ### Övning
                    Det här är början på en liten trappa. Kan du göra så den får fem steg?
                example_code_2: |
                    ```
                    {forward} 20
                    {turn} {right}
                    {forward} 20
                    {turn} {left}
                    {forward} 20
                    ```
            2:
                story_text: |
                    På den här nivån kan du använda variabler för att göra sköldpaddan interaktiv. Du kan t.ex. fråga spelaren hur många steg sköldpaddan ska ta.
                example_code: |
                    ```
                    svar {is} {ask} Hur många steg ska sköldpaddan ta?
                    {forward} svar
                    ```
                story_text_2: |
                    På nivå 1 kunde sköldpaddan dessutom bara svänga till vänster eller höger. Det är lite tråkigt!
                    På nivå 2 kan den peka med näsan åt alla håll.

                    Använd 90 för att vrida en kvarts varv. Vi kallar detta för grader. Ett helt varv är 360 grader.

                    ### Övning
                    Kan du göra en figur med den här koden? Kanske en triangel eller en cirkel?
                example_code_2: |
                    ```
                    {print} Rita figurer
                    vinkel {is} 90
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    ```
            3:
                story_text: |
                    På den här nivån kan du använda `{at} {random}` med sköldpaddan. Ett slumpmässigt val gör att sköldpaddan går en annan väg varje gång.
                    Använd `{at} {random}` för att välja ett värde från en lista.
                    ### Övning
                    Kan du kopiera och klistra in rad 2 och 3 för att skapa en längre slumpmässig väg?
                example_code: |
                    ```
                    vinklar {is} 10, 50, 90, 150, 250
                    {turn} vinklar {at} {random}
                    {forward} 25
                    ```
            4:
                story_text: |
                    På nivå 4 måste du använda citattecken med `{print}` och `{ask}`. Även när du ritar!
                example_code: |
                    ```
                    {print} _ Rita figurer _
                    vinkel {is} 90
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    ```
                story_text_2: |
                    Du kan också ändra färgen på linjerna med kommandot `{color}`. Kolla in exemplet.
                    Du kan också använda kommandot `{color} {white}` för att skapa 'osynliga' linjer. Du kan använda dessa vita linjer för att flytta sköldpaddan var som helst på skärmen innan du börjar rita.
                example_code_2: |
                    ```
                    {color} {white}
                    {forward} -80
                    {color} {green}
                    {forward} 50
                    {color} {yellow}
                    {forward} 50
                    {color} {red}
                    {forward} 50
                    ```
            5:
                story_text: |
                    På nivå 5 kan du göra ett val med `{if}`, till exempel mellan olika typer av figurer.
                example_code: |
                    ```
                    {print} 'Rita figurer'
                    figur {is} {ask} 'Vill du ha en kvadrat eller en triangel?'
                    {if} figur {is} triangel vinkel {is} 120
                    {else} vinkel {is} 90
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    ```
                story_text_2: |
                    ### Övning
                    Fyll i rätt tal i den här koden för att få det att fungera.
                    När du har gjort det kan du försöka lägga till alternativet baklänges.

                    **Extra** Istället för att använda 'vänster' och 'höger', gör om programmet med nord, ost, syd och väst.
                    På så sätt kan du lägga till ännu fler vägbeskrivningar som nordost och sydväst etc.
                example_code_2: |
                    ```
                    riktning {is} {ask} "Vill du gå åt vänster, höger eller rakt fram?
                    {if} riktning {is} vänster {turn} _
                    {if} riktning {is} höger {turn} _
                    {forward} 100
                    ```
            6:
                story_text: |
                    På den här nivån kan du använda beräkningar för att rita olika figurer.
                    Du kanske har lärt dig i skolan att det är 360 grader på ett helt varv. Om inte så vet du det nu!
                    Därför använder du 90 grader för en kvadrat. 360 dividerat med 4 är 90.
                    Nu när vi kan matte med Hedy kan vi rita alla figurer vi vill ha!
                example_code: |
                    ```
                    vinklar = {ask} 'Hur många vinklar vill du ha?'
                    vinkel = 360 / vinklar
                    {forward} 50
                    {turn} vinkel
                    {forward} 50
                    {turn} vinkel
                    {forward} 50
                    {turn} vinkel
                    {forward} 50
                    {turn} vinkel
                    {forward} 50
                    {turn} vinkel
                    {forward} 50
                    {turn} vinkel
                    ```
            8:
                story_text: "Nu när vi kan upprepa flera rader kan vi lättare skapa figurer.\n Vi behöver bara ställa in vinkeln en gång och sedan använda den variabeln i `{repeat}`.\n\n### Övning 1\nExempelkoden skapar en kvadrat. Ändra koden så att den skapar en annan figur, till exempel en triangel eller en sexhörning. \nDetta kräver en ändring av två kodrader.\nTips: En hel cirkel är 360 grader.\n \n### Övning 2\nSkapa nu en ritning som består av minst två polygoner.\n"
                example_code: |
                    ```
                    vinkel = 90
                    {repeat} 4 {times}
                        {turn} vinkel
                        {forward} 50
                    ```
                story_text_2: |
                    **Extrauppgift** Vi kan nu förbättra programmet för att rita olika figurer. Gör klart koden så kan du vilken polygon som helst!
                example_code_2: |
                    ```
                    figur = {ask} 'Hur många hörn ska jag rita?'
                    vinkel = 360 / figur
                    {repeat} figur {times}
                        {turn} _
                        {forward} _
                    ```
            9:
                story_text: |
                    Nu när vi kan använda en `{repeat}` inuti en `{repeat}`, kan vi skapa mer komplexa figurer.

                    ### Övning 1
                    Den här koden skapar tre svarta trianglar – ändra det till fem rosa kvadrater.

                     **Extrauppgift** Skapa en figur som du själv väljer som består av minst två olika former.
                example_code: |
                    ```
                    {color} {black}
                    {repeat} 3 {times}
                        {repeat} 3 {times}
                            {forward} 10
                            {turn} 120
                        {color} {white}
                        {forward} 50
                        {color} {black}
                    ```
            10:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.
                    ### Exercise 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                     **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!
                    ### Exercise 2
                    The spiral is drawn outwards, make it go inwards?
                example_code: |
                    ```
                    {turn} 90
                    distances = 10, 20, 30, 40, 50, 60
                    {for} distance {in} distances
                        {forward} distance
                    ```
            12:
                story_text: |
                    We can use functions to draw more complex figures with less code.
                    ### Exercise 1
                    Fill the function so that three squares are created. If you want the image to look nicer, you can make the lines between the squares white.

                    ### Exercise 2
                    The code can be made even shorter. Place the final lines into a `{repeat}` so the figure remains the same.

                    ### Exercise 3
                    Create your own drawing with different figures.
                    Change both the number of figures with the `{repeat}` and the shape of the figures in the `{define}`
                example_code: |
                    ```
                    {define} square
                        {repeat} 4 {times}
                            {turn} _
                            {forward} _
                    {call} square
                    {forward} 50
                    {call} square
                    {forward} 50
                    {call} square
                    ```
    turtle_draw_it:
        name: Draw it!
        default_save_name: Draw it
        description: Draw this picture with the turtle
        levels:
            1:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                        Rectangle <img src="https://github.com/hedyorg/hedy/assets/80678586/77aa99d5-cd8f-4969-b49d-e8fed34ac550" width="100">
                        Square <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                        Stairs<img src="https://github.com/hedyorg/hedy/assets/80678586/d4301e62-ec66-4031-827c-7d21f73ba106" width="200">
                    </div>
            2:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/e974b62c-f0cf-445a-8bd4-5ad9f1f71204" width="100">
                    Arrow <img src="https://github.com/hedyorg/hedy/assets/80678586/803d8f42-9708-448c-82ea-d035697f08c9" width="150">
                    Boat <img src="https://github.com/hedyorg/hedy/assets/80678586/94ef7189-442a-4c8f-827d-12a69203c2e9" width="150">
                    </div>
            3:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/71e04d98-9545-4614-9caf-a5f179b756a1" width="150">
                    Star <img src="https://github.com/hedyorg/hedy/assets/80678586/421c4d28-cb99-424b-be26-dcae30d65c80" width="150">
                    Arrow <img src="https://github.com/hedyorg/hedy/assets/80678586/3cbebcae-5258-47c5-a6ac-e7ee36c1d1ce" width="200">
                    </div>
            4:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Colored Star <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Rainbow <img src="https://github.com/hedyorg/hedy/assets/80678586/2728b10f-9f7f-45ea-964e-5b284033e4f0" width="500">
                    Nested squares <img src="https://github.com/hedyorg/hedy/assets/80678586/f013f9fa-bc68-4c60-b778-2c457799d6f7" width="200">
                    </div>
                example_code: |
                    **Extra** Up for a real challenge? Make sure that the colors of these figures are selected randomly, so that each time you run your programs they'll look differently!

                    ```
                    colors {is} red, orange, yellow, green, blue, purple, pink, brown, gray, black
                    color _
                    ```
            5:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** Make only one code that lets the player decide which letter they'd like to see! And can you add even more letters?

                    <div class="w-full flex flex-row gap-2">
                    F <img src="https://github.com/hedyorg/hedy/assets/80678586/8a021b76-c24b-4e7c-b960-48d57f3bcb20" width="100">
                    E <img src="https://github.com/hedyorg/hedy/assets/80678586/12821803-6422-416a-8e36-9902d14e57a4" width="100">
                    L <img src="https://github.com/hedyorg/hedy/assets/80678586/3af6f919-7b67-4ee7-b923-11e56f2b6b24" width="100">
                    </div>
                example_code: |
                    Hint:
                    ```
                    chosen_letter {is} {ask} 'Which letter would you like to see? F, E or L?'
                    {if} _
                    ```
            6:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** Let the player decide which color the square should be.

                    ***Extra*** Can you make the letter of your own first name and the flag of your own country too?

                    <div class="w-full flex flex-row gap-2">
                    Square <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="150">
                    Letters <img src="https://github.com/hedyorg/hedy/assets/80678586/e75f4fa5-f1f5-4b48-806c-916c28e4e8ad" width="100">
                    Flag <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hint for the square:
                    ```
                    chosen_color = {ask} _
                    ```
            7:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Hexagon <img src="https://github.com/hedyorg/hedy/assets/80678586/92e492e1-1593-489b-aaf0-51d2a29755f4" width="200">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/3629a5e6-1f02-4851-aab9-c5430ba4a1f1" width="200">
                    Fan <img src="https://github.com/hedyorg/hedy/assets/80678586/1ba2ff71-1230-4fe3-8255-b2c504cf1b4e" width="200">
                    </div>
            8:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** The number in brackets indicates in how many lines of code this figure can be drawn. Can you do it in the same amount of lines?

                    <div class="w-full flex flex-row gap-2">
                    Square (3) <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                    Randomly colored star (5) <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Randomly colored spiral (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/9bcdb3f1-367d-4ae0-878f-d09005424a35" width="150">
                    </div>
            9:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** The number in brackets indicates in how many lines of code this figure can be drawn. Can you do it in the same amount of lines?

                    **Extra** Give the player a choice which country they would like to see the flag of.

                    <div class="w-full flex flex-row gap-2">
                    Cross (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/76e42c76-aa3f-4863-8eee-ead73c09a186" width="150">
                    Randomly colored nested squares (8) <img src="https://github.com/hedyorg/hedy/assets/80678586/17f878cc-e893-4c10-b32e-a09a50bf08de" width="200">
                    Flags <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hint for the nested squares:
                    ```
                    colors = red, blue, orange, yellow, pink, purple, green, brown, black
                    distance = 120
                    repeat 5 times
                    _
                    ```
                    Hint for the flags:
                    ```
                    country = ask 'which country would you like to see the flag of?'
                    if country is 'the Netherlands'
                        color_1 = red
                        color_2 = white
                        color_3 = blue
                    ```
            10:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Nested Hexagon <img src="https://github.com/hedyorg/hedy/assets/80678586/3629e908-3cd5-44ac-bbcd-1f1cceb15654" width="150">
                    Traffic lights  <img src="https://github.com/hedyorg/hedy/assets/80678586/edbbb608-5ff8-4349-85a6-e47809adde43" width="100">
                    </div>
                example_code: |
                    Hint Nested Hexagon:
                    ```
                    distances = 100, 80, 60, 40, 20
                    {for} distance {in} distances
                    _
                    ```

                    Hint Traffic Lights:
                    ```
                    colors = red, yellow, green
                    {for} chosen_color {in} colors
                        color _
                        {repeat} _
                    ```
                story_text_2: |
                    Christmas lights <img src="https://github.com/hedyorg/hedy/assets/80678586/9637ea6d-6edc-4d88-a6f7-10271bfc5371" width="500">
                example_code_2: |
                    Hint Christmas Lights:

                    Start by moving to the left side of the screen with an invisible white line. Then hang up the Christmas lights!
                    ```
                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 90

                    colors = red, blue, yellow, purple, green, orange, pink
                    {for} chosen_color {in} colors
                    _
                    ```
            11:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Beehive (6) <img src="https://github.com/hedyorg/hedy/assets/80678586/ec02469c-907b-4695-9382-d39a8f3c00ec" width="150">
                    Fan (5)  <img src="https://github.com/hedyorg/hedy/assets/80678586/a032ab35-c70c-4e67-9b4e-036a03ecce87" width="150">
                    Snowflake (13) <img src="https://github.com/hedyorg/hedy/assets/80678586/90f56bbb-86e5-448d-8aec-16f8c2c05cf2" width="150">
                    </div>
                example_code: |
                    Hint Beehive:
                    ```
                    {for} amount_of_combs {in} {range} 1 {to} _
                        {for} walls_of_one_comb {in} {range} 1 {to} _
                            {forward} _
                            {turn} _
                        {forward} _
                        {turn} _
                    ```

                    Hint Fan:
                    Start out like the fan you made in level 7. Or take a peak at the hint for the beehive, because the codes are very similar.

                    Hint Snowflake: Start by making one 'leg' and repeat it 6 times.
            12:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!
                    Hint: Bracelet designing program. Firstly, define a function **for each shape** you want to use on the bacelet. Then, add the shapes to the bacelet like this:
                    </div>
                    Bracelet Designing program <img src="https://github.com/hedyorg/hedy/assets/80678586/549d7f3a-c492-4b4a-b173-746eb3400951" width="500">
                example_code: |
                    ```
                    {define} draw_a_square
                    _

                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 180

                    {for} i {in} {range} 1 {to} 5
                        {color} gray
                        {forward} 100
                        shape = {ask} 'What kind of shape would you like next on the bracelet?'
                        chosen_color = {ask} 'In which color?'
                        {color} chosen_color
                        {if} shape = 'square'
                            {call} draw_a_square
                    ```
            13:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    Street in different sizes <img src="https://github.com/hedyorg/hedy/assets/80678586/cdae9d97-d5ef-46f3-8838-24fa7b5b1bec" width="300">
                    Colored street  <img src="https://github.com/hedyorg/hedy/assets/80678586/9893e0bd-c0f8-49bc-a5a7-217182407724" width="300">
                    Snow Storm <img src="https://github.com/hedyorg/hedy/assets/80678586/111b0a1b-b0e1-47c3-b032-81cea05e6bbc" width="300">
                example_code: |
                    Hint Street in different sizes
                    ```
                    {define} draw_a_house {with} size
                    _

                    {call} draw_a_house {with} 90
                    {call} draw_a_house {with} 60
                    {call} draw_a_house {with} 30
                    ```

                    Hint Colored street
                    ```
                    {define} draw_a_house {with} chosen_color
                    _
                    ```

                    Hint Snow Storm
                    ```
                    {define} draw_snowflake {with} length, color
                        _

                    numbers = 10, 20, 30
                    colors = _

                    {for} i {in} {range} 1 {to} 5
                        random_number = _
                        random_color = _
                        {call} draw_snowflake {with} random_number, random_color
                        {color} white
                        {turn} random_number * 5
                        {forward} 80
                    ```
            14:
                story_text: |
                    ### Exercise
                    Create a program that asks the player how many corners their figure should have and then creates that figure.
                    The figure in the image is the output when the player fills in 10.

                    <div class="w-full flex flex-row gap-2">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/ee32f40e-dea1-4e7c-a813-3ef63671254b" width="300">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/3621bf77-527d-41e8-a44f-c5a21bb4ffd2" width="200">
                    </div>
                example_code: |
                    ```
                    {define} calculate_degrees {with} amount_of_corners
                        _ 360 / amount_of_corners


                    {define} draw_figure {with} degrees
                        _
                            {forward} 400/amount_of_corners
                            {turn} _

                    amount_of_corners = {ask} _
                    degrees = {call} _ {with} _

                    {call} _ {with}
                    {call} _ {with}
                    ```
            15:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    Spiral <img src="https://github.com/hedyorg/hedy/assets/80678586/6943223c-018b-435b-a391-23723cc7a6ad" width="150">
                example_code: |
                    Spiral
                    ```
                    distance = 5
                    {while} distance < 200
                        distance = distance + 5
                         _
                    ```
                story_text_2: |
                    Fan <img src="https://github.com/hedyorg/hedy/assets/80678586/cb671065-b47b-49f0-b298-dcbcd2a5e28f" width="150">
                example_code_2: |
                    Fan
                    ```
                    {define} draw_a_square {with} side
                    _

                    i = 100
                    {while} i > 1
                        _ {with} i
                        _
                        i = i - 3
                    ```
                story_text_3: |
                    Star <img src="https://github.com/hedyorg/hedy/assets/80678586/17564e0a-63e1-4794-8d41-15ac8c1a5a93" width="150">
                example_code_3: |
                    Star
                    A star is usually drawn using 144-degree-turns. If you change this slightly to 143 degrees for example and repeat the pattern multiple times with a {while} loop you can make this figure.
    while_command:
        name: '{while}'
        default_save_name: kommandot_så_länge
        description: så länge
        levels:
            15:
                story_text: |-
                    Vi ska lära oss en ny slinga, `{while}`-slingan! Vi fortsätter slingan så länge påståendet är sant.
                    Så glöm inte att uppdatera värdet inuti slingan.

                    I exempelkoden fortsätter vi tills ett korrekt svar har getts.
                    Om det rätta svaret aldrig ges slutar slingan aldrig!
                example_code: |
                    ``
                    svar = 0
                    {while} svar != 25
                        svar = {ask} 'Vad är 5 gånger 5?'
                    {print} 'Ett korrekt svar har getts'
                    ```
    years:
        name: Nyårsdagen
        default_save_name: Nedräkning till nyår
        description: Nedräkning till det nya året!
        levels:
            11:
                story_text: |
                    På den här nivån kan du använda kommandot `{for}` number `{in}` `{range}` för att räkna ner till det nya året.

                    ### Övning
                    Fyll i luckorna och få koden att fungera!
                example_code: |
                    ```
                    {for} tal {in} {range} _ {to} _
                        {print} tal
                    {print} 'Gott nytt år!'
                    ```
