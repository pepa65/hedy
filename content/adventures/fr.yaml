adventures:
    story:
        name: Histoire
        default_save_name: Story
        description: Histoire
        levels:
            1:
                story_text: |
                    Au niveau 1 tu peux faire une histoire avec un personnage principal dont tu auras choisi le nom toi-même.

                    À la première ligne, utilise `{ask}` pour demander le nom du personnage de ton histoire.

                    Après la première ligne, commence avec `{print}` si la phrase a besoin d'être affichée.
                    Ou utilise `{echo}` si tu veux que le nom de ton personnage principal soit ajouté à la fin de la phrase.
                example_code: |
                    ```
                    {ask} Le nom du personnage principal de cette histoire est
                    {print} Le personnage principal est en train de marcher dans la forêt
                    {echo} Il a un peu peur,
                    {print} Il entend de drôles de bruits tout autour
                    {print} Il craint que cette forêt soit hantée
                    ```
                story_text_2: |
                    ### Défi
                    Crée maintenant ta propre histoire à l'aide d'au moins 6 lignes de code.
                    Cette histoire doit être différente de celle proposée dans le code d'exemple.
                    Utilise au moins une commande `{ask}` et une commande `{echo}`.
                    Tu peux choisir n'importe quel sujet.
                    Si tu n'as pas d'idée, tu peux parler de l'un des sujets suivants : un film, un match ou une journée au zoo.
            2:
                story_text: |
                    Dans le niveau 2 tu peux créer une histoire plus drôle. Le nom de ton personnage principal peut être à n'importe quel endroit de la phrase

                    Tu vas devoir programmer un petit supplément pour ça. Maintenant, tu dois commencer par donner un nom à ton personnage principal.

                    Tu peux ensuite mettre ce nom n'importe où dans une phrase.
                example_code: |-
                    ```
                    nom {is} {ask} Quel est le nom du personnage principal ?
                    {print} nom va courir dans les bois
                    {print} nom a un peu peur
                    {print} Soudain, il entend un bruit étrange…
                    {sleep}
                    {print} nom craint que cette forêt soit hantée
                    ```
                story_text_2: |
                    ### Exercice
                    Il est maintenant temps d'ajouter des variables à l'histoire que tu as créée au niveau précédent.
                    Va dans « Mes programmes », recherche ton histoire créée au niveau 1 et copie le code. Colle le code dans la zone de programmation de ce niveau.

                    Ce code ne fonctionne pas à ce niveau, parce que tu n'as pas encore utilisé de variables.
                    Change les commandes `{ask}` et `{echo}` dans ton code en utilisant la bonne formulation que tu as appris dans ce niveau.

                    **Bonus** Pour ajouter du suspens à ton histoire, ajoute une commande `{sleep}`.
            3:
                story_text: |
                    Au niveau 3, tu peux rendre ton histoire plus amusante. Tu peux tirer au hasard un monstre, un animal ou un autre obstacle, comme ceci :
                example_code: |
                    ```
                    animaux {is} 🦔, 🐿, 🦉, 🦇
                    {print} Maintenant il entend des cris de animaux {at} {random}
                    ```
                story_text_2: |
                    La commande `{add}` peut aussi être pratique pour ton histoire.
                example_code_2: |
                    ```
                    {print} Il entend un bruit
                    animaux {is} un 🐿, un 🦔, une 🦇, une 🦉
                    animal {is} {ask} C'est quoi à ton avis ?
                    {add} animal {to_list} animaux
                    {print} C'était animaux {at} {random}
                    ```
                story_text_3: |
                    Ceci est un exemple de la commande `{remove}` dans ton histoire.

                    ### Exercice
                    Copie ton histoire des niveaux précédents dans celui-ci.
                    Dans ce niveau, tu as appris 3 nouvelles commandes `{at} {random}`, `{add} {to_list}` et `{remove} {from}`.
                    Ajoute de nouvelles lignes de code à ton histoire de manière à ce que ces nouvelles commandes apparaissent au moins une fois.
                example_code_3: |
                    ```
                    {print} Son sac à dos est beaucoup trop lourd.
                    {print} Il y a dedans une bouteille d'eau, une lampe torche et une brique.
                    sac_à_dos {is} eau, torche, brique
                    jeté {is} {ask} Quel objet devrions-nous jeter ?
                    {remove} jeté {from} sac_à_dos
                    ```
            4:
                story_text: |
                    ### Exercice
                    Copie l’exemple et ajoute des guillemets à la place des espaces vides aux lignes 1 et 2 pour le faire fonctionner.
                    Les espaces vides en ligne 3 et 4 ne doivent pas être remplacés par des guillemets, mais par une commande `{sleep}` et une commande `{clear}`. Peux-tu faire marcher tout l'exemple ?

                    ### Exercice 2
                    Rends-toi au niveau précédent et copie le code de ton histoire. Fais marcher ton code à ce niveau en ajoutant des guillemets aux bons endroits.
                    Attention : les variables de ton histoire ne doivent pas être entre guillemets, comme le montre la seconde ligne de l'exemple. Dans cette ligne, le nom de la variable n'est pas entre guillemets.
                example_code: |
                    ```
                    nom {is} {ask} _ Comment t'appelles-tu ? _
                    {print} _ Le personnage principal s'appelle _ nom
                    _
                    _
                    {print} nom _ va se promener dans les bois _
                    {print} nom _ a un peu peur _
                    animaux {is} 🦔, 🐿, 🦉, 🦇
                    {print} _ Il entend des bruits de _ animaux {at} {random}
                    {print} nom _ craint que la forêt ne soit hantée _
                    ```
            5:
                story_text: |
                    À ce niveau, différentes fins peuvent être programmées afin de rendre ton histoire encore plus amusante.
                    Le code exemple te montre comment réaliser deux fins différentes.

                    ### Exercice 1
                    Écris une nouvelle histoire courte du sujet de ton choix.
                    En panne d'inspiration ? Choisie l'un des sujets suivants : un super-héros, une journée d'école ennuyeuse, une île déserte.

                    Maintenant, donne la possibilité au joueur de choisir une fin heureuse ou non, comme indiqué dans le code exemple.
                    Programme les deux fins.

                    ### Exercice 2
                    Copie l'histoire créée aux niveaux précédents.
                    Trouve le moyen d'ajouter au moins deux commandes `{if}` et `{else}` à ton histoire.
                    La fin peut être heureuse ou non. Tu peux également trouver d'autres moyens d'inclure ces commandes.
                example_code: |
                    ```
                    nom {is} {ask} "Qui se promène en forêt ?"
                    {print} nom " se promène en forêt"
                    {print} nom " rencontre un monstre"
                    fin {is} {ask} "Voudrais-tu une fin triste ou heureuse ?"
                    {if} fin {is} heureuse {print} nom " sort son épée et le monstre s'enfuie à toutes jambes"
                    {else} {print} "Le monstre mange " nom
                    ```
            7:
                story_text: |
                    Dans une histoire, on se répète parfois. Par exemple, quand une personne appelle à l'aide ou chante une chanson.
                    À ce niveau, tu peux écrire ces répétitions dans ton histoire, avec `{repeat}`.

                    ### Exercice
                    Ajoute une répétition à ta propre histoire. Retourne en arrière dans tes programmes sauvegardés, choisi une histoire que tu as programmée à un niveau précédent, trouve une ligne contenant `{print}` et répète là !
                example_code: |
                    ```
                    {print} "Le prince appelait à l'aide sans arrêt"
                    {repeat} 5 {times} {print} 'Au secours !'
                    {print} "Pourquoi personne ne vient m'aider ?"
                    ```
            8:
                story_text: |
                    À ce niveau tu peux utiliser plusieurs lignes dans une commande `{if}`, ainsi tu peux améliorer la fin heureuse et la fin triste !

                    ### Exercice 1
                    L'exemple de code montre deux fins différentes, une ou les personnages sautent dans une machine à voyager dans le temps et une où ce n'est pas le cas.
                    Complète les espaces vide avec, au moins, une phrase pour chaque fin.
                    **Bonus** Fait une histoire plus longue. Que se passe-t-il dans l'histoire ? Tu peux aussi ajouter une seconde commande `{ask}` avec des options différentes.

                    ### Exercice 2
                    Recherche dans tes programmes sauvegardés et choisi une histoire du niveau 5. Maintenant écrit une fin triste et une fin heureuse d'au moins trois lignes de long pour chacune !
                example_code: |
                    ```
                    {print} "OH NON ! Le T-rex se rapproche !"
                    fin = {ask} "Voulez-vous une fin triste ou heureuse ?"
                    {if} fin {is} heureuse
                    …{print} "Juste à temps, Richard retourne d'un saut dans la machine à voyager dans le temps !"
                    …{print} _
                    {else}
                    …{print} "Oh non ! Richard est trop lent…"
                    …{print} _
                    ```
            9:
                story_text: |
                    À ce niveau tu peux utiliser les commandes `{if}` et `{repeat}` à l'intérieur d'autres commandes `{if}`et `{repeat}`.
                    Cela te donne de nombreuses options et t'aide vraiment à rendre ton histoire interactive.

                    ### Exercice
                    Termine le code pour que les `{if}` fonctionnent correctement.

                    ### Exercice 2
                    Ajoute aussi un `{if}`et `{else}` pour la partie de l'histoire où Robin rentre à la maison.

                    ### Exercice 3
                    Retourne chercher ton histoire du niveau 8 et utilise au moins deux `{if}` à l'intérieur d'un `{if}` existant.
                example_code: |
                    ```
                    {print} "Robin se promène en ville"
                    choix = {ask} "Est-ce que Robin entre dans un magasin ou rentre-t-il à la maison ?"
                    {if} choix {is} magasin
                        {print} "Il entre dans un magasin"
                        {print} "Robin trouve un livre qui a l'air intéressant"
                        achète = {ask} "Est-ce que Robin achète le livre ?"
                        {if} achète {is} oui
                        _ {print} "Robin achète le livre et rentre à la maison"
                        _ {else}
                        _ {print} "Robin quitte le magasin et rentre à la maison"
                    {else}
                        {print} "Robin rentre à la maison"
                    ```
            10:
                story_text: |
                    À ce niveau, tu peux utiliser la commande {for} dans ton histoire. Par exemple, tu peux facilement programmer le livre pour enfant « Ours brun, dis-moi ce que tu vois ? »

                    ### Exercice

                    Regarde <a href="https://fr.slideshare.net/smt786/our-brun-dismoi">l'histoire</a> si tu ne la connais pas et assure-toi ensuite de la programmer comme dans le livre.
                example_code: "```\nanimaux = _ , _ , _ \n{print} \"Ours brun, Ours brun\"\n{print} \"Que vois-tu ?\"\n```\n"
            12:
                story_text: |-
                    À ce niveau des guillemets sont nécessaires pour enregistrer plusieurs mots dans une variable.

                    ### Exercice

                    Prends une histoire de l'un des niveaux précédents, n'importe laquelle. Fait en sorte que les guillemets soient bien placés.
                example_code: |
                    ```
                    nom = "La reine d'Angleterre"
                    {print} nom " était en train de manger une part de gâteau, quand soudain…"
                    ```
            13:
                story_text: |
                    En utilisant les commandes `{and}` et `{or}` , vous pouvez rendre vos histoires plus complètes. Vous pouvez poser deux question combiner vos réponses.

                    ### Exercice 1
                    Regardez le code d'exemple et complétez-le. Puis, ajoutez au moins 2 `{if}`  de plus  avec `{and}` ou `{or}`.

                    ### Exercice 2
                    Prenez une histoire des niveaux précédents et ajoutez un `{and}` ou un `{or}` de plus.
                example_code: |
                    ```
                    {print} "Notre hero se promène en forêt"
                    {print} "Le chemin se sépare en deux"
                    chemin = {ask} "Quel chemin doit-elle choisir ?"
                    arme = {ask} "Quelle arme doit-elle prendre ?"
                    {if} chemin {is} "gauche" {and} arme {is} "épée"
                        _
                    ```
            15:
                story_text: |
                    Using the `{while}` loop can make your stories more interesting. For example, you can use `{while} game == 'on'` so you can play until the game is over.
                    Or you can use `{while} sword == 'lost'` so the player can't continue the game until they have found something.

                    ### Exercise
                    The example code shows you how to use the `{while}` loop in a story. Now **think of your own scenario** in which the player has to find something before they can continue.
                example_code: |
                    ```
                    keys = 'lost'
                    {print} 'You are standing in your garden and you have lost your keys.'
                    {print} 'Where do you want to look for them ?'
                    {print} 'You can choose : tree, flowerbed, rock, postbox'
                    {while} keys == 'lost'
                        location = {ask} 'Where do you want to look ?'
                        {if} location == 'flowerbed'
                            {print} 'Here they are !'
                            keys = 'found'
                        {else}
                            {print} 'Nope they are not at the ' location
                    {print} 'Now you can enter the house !'
                    ```
            18:
                story_text: |
                    We are going to print another story, but now we have to use brackets with `{print}`.

                    ### Exercice 1
                    Create a story of at least 5 sentences. You don't have to use 'name' just yet.
                example_code: |
                    ```
                    {print}('Bienvenue dans cette histoire!')
                    ```
                story_text_2: |
                    ### Exercice 2
                    Nous avons déjà préparé ce  `{input}` pour toi. D'abord, utilise cette variable `name` dans ton histoire.
                    Puis, ajoute un second `{ask}` et utilise cette variable également.
                    commentaire : N'oublie pas la virgule dans un `{print}` entre un texte et une variable !
                example_code_2: |
                    ```
                    naam = {input}("Quel est votre nom?")
                    {print}('Bienvenue dans cette histoire!')
                    ```
    add_remove_command:
        name: '{add} {to_list} & {remove} {from}'
        default_save_name: add_remove_command
        description: Introduction {add} {to_list} et {remove} {from}
        levels:
            3:
                story_text: |
                    ## Ajouter à
                    Tu peux ajouter des éléments à une liste avec la commande `{add} {to_list}`. Pour ajouter un élément à une liste, tu peux simplement écrire : `{add} pingouin {to_list} animaux` ou tu peux utiliser la commande `{ask}` comme dans le code d'exemple.
                example_code: |
                    ```
                    animaux {is} chien, chat, kangourou
                    préféré {is} {ask} Quel est ton animal préféré ?
                    {add} préféré {to_list} animaux
                    {print} Je choisis animaux {at} {random}
                    ```
                story_text_2: |
                    ## Supprimer d'une liste
                    Si tu peux ajouter des éléments à une liste, tu peux aussi en retirer bien sûr. Cela se fait avec la commande `{remove} {from}`
                example_code_2: |
                    ```
                    animaux {is} chien, chat, kangourou
                    mal_aimé {is} {ask} Quel animal n'aimes-tu pas ?
                    {remove} mal_aimé {from} animaux
                    {print} Je choisis animaux {at} {random}
                    ```
                story_text_3: |
                    ### Exercice
                    Essaye les nouvelles commandes dans ce restaurant virtuel. Ajoute le parfum que le joueur désire à la liste et supprime le parfum auxquels il est allergique.
                example_code_3: |
                    ```
                    {print} Le milkshake mystérieux
                    parfums {is} fraise, chololat, vanille
                    désiré {is} {ask} Quelle parfum désires-tu ?
                    _
                    allergie {is} {ask} Es-tu allergique à un parfum ?
                    _
                    {print} Voici un milkshake parfums {at} {random}
                    ```
    and_or_command:
        name: '{and} & {or}'
        default_save_name: et ou
        description: Introduction de {and} et {or}
        levels:
            13:
                story_text: |-
                    Nous allons maintenant apprendre `{and}` et `{or}` ! Si tu veux vérifier deux éléments, tu n'es plus obligé d'utiliser deux `{if}` mais tu peux utiliser `{and}` et `{or}`

                    Si tu utilises `{and}`, les deux éléments, à gauche et à droite du `{and}` doivent être vrai. Nous pouvons aussi utiliser `{or}`. Dans ce cas, seulement un des éléments doit être correct.
                example_code: |
                    ```
                    nom = {ask} "Quel est ton nom ?"
                    âge = {ask} "Quel est ton âge ?"
                    {if} nom {is} 'Hedy' {and} âge {is} 2
                        {print} "Tu es la vraie Hedy !"
                    ```
    ask_command:
        name: '{ask}'
        default_save_name: ask_command
        description: Introduction à la commande {ask}
        levels:
            1:
                story_text: |
                    ## La commande `{ask}`
                    Maintenant que tu sais utiliser la commande `{print}`, passons à la commande suivante : `{ask}`. Avec la commande `{ask}`, tu peux poser une question. Fais un essai :
                example_code: |
                    ```
                    {print} Salut !
                    {ask} Quel est ton nom ?
                    ```
                story_text_2: |
                    ## La commande `{echo}`
                    Si tu veux que l'ordinateur te répète ta réponse, tu peux utiliser la commande `{echo}`. La réponse sera ajoutée à la fin de la phrase, soit dans cet exemple, après Salut.
                example_code_2: |
                    ```
                    {print} Salut !
                    {ask} Quel est ton nom ?
                    {echo} Salut
                    ```
                story_text_3: |
                    ### Exercice
                    Essaie les commandes `{ask}` et `{echo}`. Tout d'abord, complète les espaces vides pour faire fonctionner ce programme.
                    Ensuite pose 2 autres questions avec la commande `{ask}`, après chaque `{ask}` utilise `{echo}` pour afficher la réponse à l'écran.
                example_code_3: |
                    ```
                    _ Comment vas-tu ?
                    _
                    ```
            2:
                story_text: |
                    ## La commande `{ask}`
                    Maintenant que l'on peut utiliser les **variables** dans nos codes, la commande `{echo}` n'est plus utile.
                    On peut utiliser les variables pour stocker les réponses à nos questions et ainsi utiliser la réponse à plusieurs questions dans nos codes.
                    Fais un essai :

                    De cette façon ton code devient interactif !
                example_code: |
                    ```
                    nom {is} {ask} Quel est ton nom ?
                    {print} Bonjour nom
                    âge {is} {ask} Quel âge as-tu ?
                    {print} nom a âge ans.
                    ```
                story_text_2: |
                    ### Exercice
                    Dans l'onglet précédent, tu t'es entraîné à attribuer des valeurs aux variables avec la commande `{is}`.
                    Tu as créé au moins 3 variables et les a utilisées avec la commande d'affichage.
                    Maintenant, au lieu de simplement définir les variables, nous voulons les rendre interactives, comme dans l'exemple.

                    Copie le code de l'onglet précédent et rend les variables interactives en utilisant la commande `{ask}`.
                example_code_2: |
                    ```
                    animal_préféré {is} {ask} Quel est ton animal préféré ?
                    {print} J'aime les animal_préféré
                    ```
            18:
                story_text: Le changement final que nous devons faire pour avoir du code Python c'est de remplacer `{ask}` par `{input}`.
                example_code: |
                    ```
                    {print}("Mon nom est hedy !")
                    nom = {input}("quel est ton nom ?")
                    {print}("Ainsi ton nom est ", nom)
                    ```
    blackjack:
        name: Blackjack
        default_save_name: Blackjack
        description: Try to get as close to 21 as you can
        levels:
            17:
                story_text: |
                    Blackjack is a simple game of cards in which you have to get as close to 21 points as possible. You get two cards. Each card is worth their numeral value, and the face cards (Jack, Queen and King) are worth 10 points.
                    The Ace is worth either 1 or 11 points (you can choose). The dealer, your opponent, also gets two cards.
                    If you want, you can get another card, and its points will be added to your total. The dealer can also choose to take another card.
                    But be careful not to get more than 21 points, because if you do, you lose!
                    The player who gets closest to 21, without going over it, wins!

                    ### Exercise
                    In this adventure we code the first part of our Blackjack game. We'll create a function to calculate how many points a card is worth.

                    ***Set the variables***
                    Start by making a list of all the cards, from 2 to Ace. Next make a list of the face cards, so Jack, Queen and King. Then pick a random card from the list of cards to be card_1.

                    ***Create a function to calculate the points***
                    Create a function that calculates how many points a card is worth.
                    All the face cards are worth 10 points, the Ace is worth 11 and all the other cards are worth their numeral.
                    Return the variable `points` at the end of the function.

                    ***Test the function***
                    Test if your function is working properly. Finish the first print command by filling in which card you've drawn. Then finish the second line by calling the function with card_1.
                    Run the code a couple of times. Are you happy with the results? Great! Then you can remove the testing part and move on the the next tab!
                example_code: |
                    ```
                    {print} 'BLACKJACK'

                    # Set these variables
                    cards = _
                    face_cards = _
                    card_1 =

                    # Create a function to calculate the points
                    {define} calculate_points {with} card:
                        {if} card {in} face_cards:
                            points = _
                        {elif} _
                            _
                        {else}:
                            _
                        _ points

                    # Test your function
                    {print} 'Your card is a ' _
                    {print} 'That is worth ' _ ' points'.
                    ```
    blackjack_2:
        name: Blackjack 2
        default_save_name: Blackjack_2
        description: Blackjack part 2
        levels:
            17:
                story_text: |
                    ### Exercise
                    In this adventure we code the second part of our Blackjack game.

                    ***Paste your code from the previous adventure***
                    In the previous adventure you've started a list of variables and created a function to calculate how many points a card is worth. Copy your code and paste it here. Mind that you don't need the testing part, so if you haven't removed that yet, please do so now.

                    ***Add more variables***
                    You have already set the lists `cards` and `face_cards` and the variable `card_1`. Underneath those variables create 3 more variables: `card_2`, dealer_card_1` and `dealer_card_2`. These variables are all set to a random card from the list of cards.

                    ***Add up points***
                    To calculate how many points you have scored we call the function with card 1 and we do it again for card 2. Then we add both these scores together to get your total.
                    Do the same thing for the dealers points, but be sure to use the dealer's cards and not your own!

                    ***2 Aces***
                    You're doing great! Almost all scores can be calculated now. There is only one exception: 2 Aces. If you get 2 Aces, your total is 12 points and not 22 (because 22 points would be losing!). This of course also goes for the dealer.

                    ***Show the score***
                    Lastly, you want to tell the program to tell you which cards you have drawn and how many points that is. Then show which cards the dealer has and how many points they have.

                    ***Continue in the next tab***
                    Great! You have finished this part of the game! Copy your code and go to the next tab to learn how to ask for an extra card and to declare a winner.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Add these variables to the list of variables
                    card_2 = _
                    dealer_card_1 = _
                    dealer_card_2 = _

                    # Add up your points
                    your_points_1 = {call} _ {with} card_1
                    your_points_2 = _
                    your_total = _

                    # Add up the dealers points
                    dealer_points_1 = _
                    _
                    _

                    # 2 Aces
                    {if} card_1 == 'Ace' {and} _
                        your_total = 12
                    {if} dealer_card_1 _
                        dealer_total = _

                    # Show the score
                    {print} 'You have drawn a ' _ ' and a ' _ '. That is ' _ ' points'
                    {print} 'The dealer has drawn a ' _ ' and a ' _ '. That is ' _ ' points'
                    ```
    blackjack_3:
        name: Blackjack 3
        default_save_name: Blackjack_3
        description: Blackjack part 3
        levels:
            17:
                story_text: |
                    In the previous tabs you have learned how to draw 2 random cards for yourself and for the dealer and to calculate how many points you both got.
                    In this adventure we add the option to ask for an extra card for both you and the dealer.

                    ### Exercise
                    ***Paste your code from the previous adventure*** Firstly, copy your code from the previous tab and paste it here.

                    ***Extra card for you*** If you want, you can get an extra card to get your total as close to 21 as possible. First ask the player if they want an extra card.
                    If they do, pick a random card and print what they have drawn. If the card is not an Ace, you can call the function and add the points to your total.
                    In case the card is an Ace, you can't use the function, because the Ace can be either 1 point or 11 points, depending on how many points you already have earned.
                    If your total is less than 11, you want the ace to be 11 points (because this is closest to 21). So you add 11 points to your total.
                    If the total is more than or equal to 11, you want the ace to be 1 point (because you don't want more than 21 points). So you add 1 point to your total.
                    Lastly, print your new total of points.

                    ***Extra card for the dealer*** The dealer can also get an extra card. The dealer doesn't need to be asked, because they always get an extra card if their total is less than 17.
                    Copy the 'Extra card for you code' and paste it in the dealers section. Then change it to fit the dealer picking an extra card and getting points added to their total.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Extra card for you
                    hit = {ask} _
                    {if} hit == 'yes':
                        card_3 = _
                        {print} _
                        {if} card_3 _ 'Ace':
                            your_points_3 = _
                            your_total = _
                        {else}:
                           {if} your_total _
                                _
                            {else}:
                                _
                        {print} _

                    # Extra card for the dealer
                    {if} dealer_total < 17
                    _
                    ```
    blackjack_4:
        name: Blackjack 4
        default_save_name: Blackjack_4
        description: Blackjack part 4
        levels:
            17:
                story_text: |
                    In the last 3 adventures you have alsmost created a working blackjack game! The only thing left to do is to decide a winner!

                    ### Exercise
                    ***Paste your code from the previous adventure*** Start by pasting the code that you've made so far into your programming field.

                    ***Decide a winner***
                    Firstly, if you and the dealer have an equal amount of points, it's a draw.
                    Secondly, if the dealer has more than 21 points and you don't, you are the winner.
                    Thirdly, if both you and the dealer have less than 22 points, we have to see who came closest to 21. We do that by comparing who has the highest score. Is your total higher than the dealer's total, then you are the winner. If not, the dealer wins.
                    Lastly, in all other scenarios (e.g. you have more than 21 points and the dealer doesn't, or you both have more than 21 points) you are the loser.

                    ***Enjoy the game!***
                    Does your game work properly? Amazing! You have done a great job! Enjoy your game!
                    If it doesn't work right away, no worries, you might have made a mistake. Just keep calm and bebug your code using the ladybug button.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Decide a winner
                    {if} _
                        {print} 'Its a draw! Play again!'
                    {elif} _
                        {print} 'You win!'
                    {elif} _ :
                        {if} _:
                            {print} _
                        {else}:
                            {print} _
                    {else}:
                        _
                    ```
    calculator:
        name: Calculatrice
        default_save_name: Calculatrice
        description: Créer une calculatrice
        levels:
            6:
                story_text: |
                    Maintenant que tu peux faire des maths, tu peux te faire une calculatrice !
                example_code: |
                    ```
                    nombre_1 = {ask} "Saisir le premier nombre :"
                    nombre_2 = {ask} "Saisir le deuxième nombre :"
                    bonne_réponse = nombre_1 * nombre_2
                    {print} nombre_1 " fois " nombre_2 " fait " bonne_réponse
                    ```
                story_text_2: |
                    ### Exercice
                    La calculatrice ci-dessus calcule les réponses pour toi, mais tu peux aussi faire un programme pour tester tes propres compétences en calcul, comme ceci :
                    Complète les espaces vides pour que ça marche !
                example_code_2: |
                    ```
                    bonne_réponse = 11 * 27
                    réponse = {ask} "Combient font 11 fois 27 ?"
                    {if} réponse {is} _ {print} "bon boulot !"
                    {else} {print} "Faux ! c'était " _
                    ```
                story_text_3: |
                    **Bonus** Tu peux également demander à l'ordinateur de faire des multiplications aléatoirement en utilisant `{random}`.
                example_code_3: |-
                    ```
                    nombres = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    nombre_1 = _
                    nombre_2 = _
                    bonne_réponse = nombre_1 * nombre_2
                    réponse_donnée = {ask} "Combiens font " nombre_1 " fois " nombre_2 " ?"
                    {if} _
                    {else} _
                    ```
            9:
                story_text: |
                    Au niveau 6 tu as créé une calculatrice, à ce niveau, tu peux étendre ce code pour qu'il pose plusieurs questions.

                    ### Exercice
                    Peux-tu terminer la ligne 10 pour faire fonctionner le programme ?

                    ### Exercice 2
                    Donne au joueur ou à la joueuse un retour quand il ou elle répond bien ou mal. Pour y parvenir, étant ton programme avec un `{else}`.
                example_code: |
                    ```
                    score = 0
                    {repeat} 10 {times}
                        nombres = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        nombre1 = nombres {at} {random}
                        nombre2 = nombres {at} {random}
                        bonne_réponse = nombre1 * nombre2
                        {print}"Combien font " nombre1 " fois " nombre2 " ?"
                        tentative = {ask} "Quel est ta réponse ?"
                        {print} "Ta réponse est " tentative
                        {if} _ {is} _
                            score = score + 1
                    {print} "Bon travail ! Ton score est… " score " sur 10 !"
                    ```
            10:
                story_text: |
                    This calculator game helps you practise your tables of multiplication!
                    ### Exercise
                    Fill in the blanks. We want this program to ask the player these questions:
                    ```
                    How much is 1 times 1?
                    How much is 1 times 2?
                    How much is 1 times 3?
                    How much is 2 times 1?
                    How much is 2 times 2?
                    How much is 2 times 3?
                    How much is 3 times 1?
                    How much is 3 times 2?
                    How much is 3 times 3?
                    _
                    ```
                example_code: |
                    ```
                    numbers = 1, 2, 3
                    {for} _
                        {for} _
                            answer = {ask} _
                            correct = number_1 * number_2
                            {if} answer {is} correct
                                {print} 'Great job!'
                            {else}
                                {print} 'That is wrong. The right answer is ' correct
                    ```
            11:
                story_text: |
                    Avec un `{for}` tu peux simplifier le programme pour apprendre les tables de multiplications.

                    ### Exercice 1
                    Améliore l'exemple de code pour qu'il affiche une jolie table de multiplication :<br> « 1 fois 10 fait 10 », « 2 fois 10 fait 20 », etc.

                    ### Exercice 2
                    Retourne chercher ton code du niveau 10 et modifie-le pour qu'il utilise un `{for}` and `{range}`.
                example_code: |
                    ```
                    nombre = 10
                    {for} i {in} {range} 1 {to} 10
                        {print} i * nombre
                    ```
            12:
                story_text: |
                    À ce niveau, tu peux fabriquer une calculatrice qui fonctionne avec des nombres décimaux.

                    ### Exercice 1
                    Complète les blancs pour faire marcher la calculatrice. Quand tu réponds aux questions, souviens-toi d'utiliser un point et non une virgule pour les nombres décimaux. 

                    ### Exercice 2
                    Crée un nouveau programme d'entrainement au calcul, mais utilise des nombres décimaux cette fois.
                    Crée une liste de nombres, choisis-en deux à multiplier et laisse le joueur répondre.
                    Bien sûr, tu dois valider la réponse ! **Bonus** Augmente la difficulté en ajoutant un système de vies : un joueur perd une vie pour une mauvaise réponse, et le jeu s'arrête après trois mauvaises réponses.
                example_code: |
                    ```
                    nombre1 = {ask} "Quel est le premier nombre ?"
                    nombre2 = {ask} "Quel est le second nombre ?"
                    réponse = nombre1 + nombre2
                    {print} nombre1 " plus " nombre2 " fait " _
                    ```
            13:
                story_text: |
                    ### Exercise 1
                    Let's make the practice program a bit harder. The player now has to answers two questions correctly. Fill out the blanks to complete the program.

                    ### Exercise 2 (extra)
                    Sometimes, calculations have multiple correct answers. For example, 10 can be divided by 5 and by 2. So the question 'What number divides 10?' can be answered by 2 and by 5.
                    Ask for a calculation that has multiple correct answers, ask the player to answer it, and determine if it is correct using `{or}`.
                    Empty the programming field and create your own solution.
                example_code: |
                    ```
                    réponse1 = {ask} 'Combien font 10 fois 7'
                    réponse2 = {ask} 'Combien font 6 fois 7?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
            14:
                story_text: |
                    Dans cette aventure, tu vas construire une calculatrice qui va calculer ta note moyenne pour toi. Si tu réussis à faire marcher ta calculatrice, tu peux continuer vers la prochaine aventure, ce qui te permet d'ajouter deux fonctionnalités supplémentaires.

                    ### Exercice 1
                    Remplis les blancs pour faire marcher la calculatrice.
                    * Commence avec la quatrième ligne, ajoute une question pour trouver la note qu'a eu l'étudiant.
                    * Dans la cinquième ligne, tu vas avoir besoin de calculer la somme de toutes les notes, donc total = total + note.
                    * Ensuite, nous devons fixer la valeur de retour. Nous voulons retourner la moyenne, donc le total divisé par le nombre de tests (4).
                    * Enfin, nous achevons le code en appelant la fonction dans la ligne 8.

                    Tu y arrives ? Génial ! Veux-tu ajouter davantage de fonctions à ta calculatrice ? **Cette aventure se poursuit dans l'onglet suivant !**
                example_code: |
                    ```
                    {print} 'Guess which number'
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number = numbers {at} {random}
                    game = 'on'
                    {for} i {in} {range} 1 {to} 10
                        {if} game == 'on'
                            guess = {ask} 'Which number do you think it is?'
                            {if} guess > number
                                {print} 'Lower!'
                            {if} guess < number
                                {print} 'Higher!'
                            {if} guess == number
                                {print} 'You win!'
                                game = 'over'
                    ```
            15:
                story_text: |
                    You can add the `{while}` loop to the calculator game you've learned to make in a previous level.
                    This makes sure the player can't continue to the next question if they answer incorrectly.

                    ### Exercise
                    Add the `{while}` loop in the function, ask the player what number_1 times number_2 is and print their answer.
                    Then `{call}` the function.
                example_code: |
                    ```
                    {define} new_question
                        numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        number_1 = numbers {at} {random}
                        number_2 = numbers {at} {random}
                        correct = number_1 * number_2
                        answer = 0
                        _
                        _
                        _
                        {print} 'Well done!'

                    {print} 'Give 10 correct answers to win!'
                    {for} i {in} {range} 1 {to} 10
                        _
                    {print} 'You win!'
                    ```
    calculator_2:
        name: Calculatrice 2
        default_save_name: Calculatrice 2
        description: Calculatrice 2
        levels:
            14:
                story_text: |
                    ### Exercise 2
                    **This is the second part of this adventure.** The adventure starts in the previous tab.
                    Of course, you don't always want to calculate the mean of 4 tests. You might want to calculate the mean of 10 tests or only 2...
                    We can fix this problem by adding the argument and variable 'amount_of_tests'.
                    * Start a new line on line 3. Set the amount_of_tests argument by asking the student how many tests they have made.
                    * Change the 4 in line 4 to the new argument amount_of_tests.
                    * Lastly, change the 4 in line 6 to amount_of_tests

                    Try out your new program. Does it work ?

                    ### Exercise 3
                    Did you want to make your program even better ? Great ! In the previous program you could only calculate the mean grade of 1 subject, but it would be better if you could calculate the mean grade for all subjects you want !
                    We won't tell you how to do it, but we will give you one tip : Start your code in line 1 with : define calculate_mean_grade with subject.
                example_code: |
                    ```
                    # Utilise ton code de l'aventure précédente.
                    ```
    clear_command:
        name: '{clear}'
        default_save_name: clear_command
        description: La commande {clear}
        levels:
            4:
                story_text: |
                    C'est le moment d'apprendre une nouvelle commande ! Avec `{clear}` tu peux effacer tout le texte de l'écran d'affichage. De cette manière, tu peux éviter que ton écran ne soit trop rempli de texte.
                    Attention ! Quand tu utilises une commande `{clear}`, il se peut que tu aies besoin d'utiliser un `{sleep}` juste avant. Sinon Hedy effacera ton écran sans te laisser le temps de le lire comme tu peux le voir dans cet exemple !
                example_code: |
                    ```
                    {print} "3"
                    {clear}
                    {print} "2"
                    {clear}
                    {print} "1"
                    {clear}
                    {print} "Attendez..."
                    {sleep} 3
                    {clear}
                    {print} "SURPRISE !"
                    ```
    debugging:
        name: débugage
        default_save_name: débugage
        description: adventure de débugage
        levels:
            1:
                story_text: |-
                    Bienvenue à l'aventure de débugage. Débuguer un code signifie éliminer toutes les erreurs dans le code.
                    Cela signifie que dans ces aventures de débugage, nous allons te montrer du code qui ne marche pas.
                    Tu devras trouver ce qui ne va pas et corriger les erreurs.

                    ### Exercice
                    Débug ce code. Bonne chance !
                example_code: |
                    **Attention ! Ce code doit être débuggé !**
                    ```
                    {print} J'aime la programmation
                    Aimes-tu la programmation aussi ?
                    {echo}
                    {print} Quels sont tes loisirs ?
                    {echo} Tes loisirs sont
                    ````
            2:
                story_text: |-
                    Bienvenue à l'aventure de débugage. Débuguer un code signifie éliminer toutes les erreurs dans le code.
                    Cela signifie que dans ces aventures de débugage, nous allons te montrer du code qui ne marche pas.
                    Tu devras trouver ce qui ne va pas et corriger les erreurs.

                    ### Exercice
                    Débug ce code. Bonne chance !
                example_code: |
                    **Attention ! Ce code doit être débuggé !**
                    ```
                    destination {ask} Où vas-tu partir en vacances ?
                    {print} L'avion pour dstination décolle à 15h00
                    {ask} as-tu déjà enregistré tes bagages ?
                    {echo}
                    {print} Permets-moi d'imprimer ta carte d'embarquement.
                    {sleep}
                    Voila ! Fait un bon voyage !
                    ```
            3:
                story_text: |-
                    Bienvenue à l'aventure de débugage. Débuguer un code signifie éliminer toutes les erreurs dans le code.
                    Cela signifie que dans ces aventures de débugage, nous allons te montrer du code qui ne marche pas.
                    Tu devras trouver ce qui ne va pas et corriger les erreurs.

                    ### Exercice
                    Débug ce code. Bonne chance !
                example_code: |
                    **Attention ! Ce code doit être débuggué !**
                    ```
                    choix_films {is} dracula, fast and furious, maman j'ai raté l'avion, barbie
                    film_choisi {is} films {at} {random}
                    {print} Ce soir nous allons regarder film_choisi
                    aime {ask} aimes-tu ce film ?
                    {print} Demain, nous regarderons autre chose.
                    {add} film_choisi {to_list} choix_films
                    {print} Demain nous regarderons film_pour_demain
                    film_pour_demain {is} choix_films {at} {random}
                    Je vais chercher le popcorn ! {print}
                    ```
            4:
                story_text: |-
                    ### Exercice
                    Débug ce code. Bonne chance !
                example_code: |
                    **Attention ! Ce code doit être débuggé !**
                    ```
                    {print} "Bienvenue à la bibliothèque en ligne !
                    {ask} Quel genre de livre aimes-tu ?
                    {print} Tu aimes le genre
                    nom {is} {ask} "Quel est ton auteur ou ton autrice préférée ?"
                    {print} "C'est nom que tu préfères"
                    {print} Hmmm… je pense que tu devrais essayer de lire… livres {at} {random}
                    ```
            5:
                story_text: |-
                    ### Exercice
                    Débug ce code. Bonne chance !
                example_code: |
                    **Attention ! Ce code doit être débuggé !**
                    ```
                    {print} Bienvenue à la piscine Hedy !
                    cours {is} {ask} "Es-tu ici pour un cours de natation ?"
                    {if} cours oui
                    {print} "Génial ! Tu as cours !
                    {print} {else} "Tu n'as pas cours"
                    réduction {is} {ask} "As-tu un code de réduction ?"
                    {if} réduction {is} oui
                    réponse_reduction {is} {ask} "Quel est ton code de réduction ?"
                    codes_reduction = Senior4231, élève8786, NouveauMembre6709
                    {if} réponse_reduction {is} {in} codes_reduction
                    {print} "Ça fera 3,50 €"
                    {else} "Ça fera 5,50 €"
                    {print} "Bonne baignade !"
                    ```
            6:
                story_text: |-
                    ### Exercice
                    Débug ce code. Bonne chance !
                example_code: |
                    **Attention ! Ce code doit être débuggé !**
                    ```
                    {print} "Distributeur automatique"
                    produit_choisi = {ask} "Veuillez sélectionner un produit"
                    1_euro = coca jus d'orange eau
                    2_euros = chocolat, cookie, barre muesli
                    3eruos = chips, charcuterie, gâteau à la banane
                    {if} produit {is} {in} 1_euro
                    prix = 1
                    {if} produit_choisi {is} 2_euros
                    prix = 2
                    {else} produit_choisi {in} 3_euros
                    prix = 3
                    nombre_de_produits = "{ask} combien de " produit_choisi voulez-vous ?"
                    total = prix + nombre_de_produits
                    {print} "Ça vous fera" prix " €, s'il vous plait"
                    ```
            7:
                story_text: |-
                    ### Exercice
                    Surprise ! Ce programme a plus l'air d'un résultat d'affichage que d'un code. Et en plus, nous ne voulons pas que tu ajoute juste des commandes `{print}` devant chaque ligne.
                    Corrige ce programme pour qu'il affiche les paroles de la chanson « Frère Jacques » en utilisant la commande {repeat} bien sûr !
                example_code: |
                    **Attention ! Ce code doit être débuggé !**
                    ```
                    Frère Jacques,
                    Dormez-vous ?
                    Sonnez les matines !
                    Ding, daing, dong !
                    ```
            8:
                story_text: |-
                    ### Exercice
                    Debug ce code. Bonne chance !
                example_code: |-
                    **Attention ! Ce code doit être débuggé !**
                    ```
                    {print} "Bienvenue a Manucure et Pédicures par Hedy"
                    choix = {ask} "Voulez-vous que l'on vous fasse les ongles de main ou les ongles de pieds aujourd'hui ? ou les deux ?"
                    {if} choix {is} les deux
                            {print} ça vous fera 25 €
                            prix = 25
                        {else}
                            {print} ça vous fera 18 €
                            prix = 18
                    color = {ask} Quelle couleur vous plairait ?
                    paillettes = {ask} "Voulez-vous qu'on ajoute des paillettes ?"
                    {if} paillettes {is} oui
                        {print} "Ça coûte 3 € de plus"
                    prix = prix + 3
                    {else} {print} "Pas de paillette" {print} "Pas de coût supplémentaire"
                    {sleep} 5
                    {print} "Tout est bon ! ça vous fera " prix " €, s'il vous plait !"
                    {print} "Merci et au revoir !"
                    ```
            9:
                story_text: |-
                    ### Exercise
                    Débug ce code. Bonne chance !
                example_code: |
                    **Attention ! Ce code doit être débuggé !**
                    ```
                    {print} "Bienvenue dans notre sandwicherie"
                    quantité "Combien de sandwichs voulez-vous acheter ?"
                    {repeat} quantité {times}
                    {ask} {is} {ask} "Quel type de pain voulez-vous pour votre sandwich ?"
                    type_de_pain {is} blanc, complet, seigle, à l'ail, sans gluten
                    {if} choix_pain in type_de_pain
                    {print} "Avec plaisir !"
                    {else}
                    "Je suis désolé mais je n'en vends pas"
                    garniture {is} {ask} "Quelle garniture voulez-vous ?"
                    sauce {is} {ask} "Quel type de sauce voulez-vous ?"
                    {print} Un pain choix_pain avec garniture et sauce.
                    prix = quantité * 6
                    {print} "Ça vous fera " prix euros" s'il vous plait"
                    ```
            10:
                story_text: |-
                    ### Exercice
                    Débug ce code. Bonne chance !
                example_code: |
                    **Attention ! Ce code doit être débuggé !**
                    ```
                    noms = Muad Hasan Samira Noura
                    activités = faire voler un cerf-volant, nager, faire de la randonnée, bronzer au soleil
                    {for} nom {is} noms
                    {print} À la plage nom aime activités {at} {random}
                    ```
            11:
                story_text: |-
                    ### Exercice
                    Debugge ce programme de calendrier. Ce programme devrait afficher une liste de dates

                    Par exemple :
                    ```
                    Le calendrier Hedy
                    Voici la liste des jours du mois de novembre
                    1 novembre
                    2 novembre
                    3 novembre
                    ```
                    Et ainsi de suite.

                    Attention, tu dois tester ton code avec attention pour le mois de février, car le nombre de jours de ce mois est différent les années bissextiles.
                example_code: |
                    **Attention ! Ce code doit être débuggé !**
                    ```
                    {print} "Le calendrier Hedy"
                    mois_avec_31 jours = janvier, mars, mai, juillet, septembre, octobre, décembre
                    mois_avec_30_jours = avril, juin, août, novembre
                    mois = {ask} "Quel mois voulez-vous voir ?"
                    {if} mois {in} mois_avec_31_jours
                        jours = 31
                        {if} mois {in} mois_avec_30_jours
                            jours = 30
                    {if} mois = février
                        années_bissextiles = 2020, 2024, 2028, 2036, 2040, 2044, 2028
                        année = {ask} "En quelle année ?"
                    {if} année {in} années_bissextiles
                        jours = 29
                    {else}
                        jours = 28

                    {print} "Voici la liste des jours du mois de " moi
                    {for} i {in} {range} 1 {to} jours
                        {print} i mois
                    ```
            12:
                story_text: |-
                    ### Exercise
                    Debugge ce code. Bonne chance !
                example_code: |
                    **Attention ! Ce code doit être débuggé !**
                    ```
                    {define} accueil
                    messages = "Salut", "Bonjour", "Bonsoir"
                        {print} messages {at} {random}

                    {define} prise_de_commande
                        nouriture = {ask} "Que voulez-vous manger ?"
                        {print} "Vous voulez manger nourriture"
                        boisson = "Que voulez-vous boire ?"
                        {print} "Vous voulez boire " boisson
                        en_plus = {ask} "Voulez-vous quelque chose d'autre ?"
                            {if} en_plus {is} "non"
                        {print} "D'accord"
                            {else}
                            {print} "Et " en_plus
                    {print} "Merci"

                    {print} "Bienvenue dans notre restaurant"
                    nombre_personnes = {ask} "Combien de personnes viendront à votre fête ce soir ?"
                    {for} i {in} {range} 0 {to} nombre_personnes
                        {call} accueil_client
                    ```
            13:
                story_text: |-
                    ### Exercice
                    Déboguez ce code. Bonne chance !
                example_code: "**Attention ! Ce code doit être débogué !**\n```\n{define}movie_recommendation {with} name\n\taction_movies == 'Die Hard', 'Fast and Furious', 'Inglorious Bastards'\n\tromance_movies = 'Love Actually', 'The Notebook', 'Titanic'\n\tcomedy_movies = 'Mr Bean' 'Barbie''Deadpool'\n\tkids_movies = 'Minions', 'Paddington', 'Encanto'\n\t{if} name {is} 'Camila' {or} name {is} 'Manuel'\n\t\trecommended_movie = kids_movie {at} {random}\n\t{if} name {is} 'Pedro' {or} 'Gabriella'\n\t\tmood = {ask} 'What you in the mood for?'\n\t{if} mood {is} 'action'\n\t\trecommended_movie = comedy_movies {at} {random}\n\t{if} mood {is} 'romance'\n\t\trecommended_movie = romance_movies\n\t{if} mood {is} 'comedy'\n\t\trecommended_movie = comedy_movies {at} {random}\n\n{print} 'Je recommande ' recommended_movie ' pour ' name\n\nname = {ask} 'Qui regarde ?'\nrecommendation = {ask} 'Voulez-vous une recommandation?'\n{if} recommendation {is} 'yes'\n\t{print} movie_recommendation {with} name\n{else}\n\t{print} 'Pas de problème!'\n```\n"
            14:
                story_text: |-
                    ### Exercice
                    Déboguez ce code. Bonne chance !
                example_code: |
                    **Attention ! Ce code doit être débuggé !**
                    ```
                    define calculate_heartbeat
                        print 'Press your fingertips gently against the side of your neck'
                        print '(just under your jawline)'
                        print 'Count the number of beats you feel for 15 seconds'
                        beats == ask 'How many beats do you feel in 15 seconds?'
                        heartbeat = beats*4
                        print 'Your heartbeat is ' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print 'Your heartbeat seems fine'
                        else
                            if heartbeat > 60
                                print 'Your heartbeat seems to be too low'
                            if heartbeat < 100
                                print 'Your heartbeat seems to be too high'
                            print 'You might want to contact a medical professional'

                    measure_heartbeat = ask 'Would you like to measure your heartbeat?'
                    if measure_heartbeat = 'yes'
                        call measure_heartbeat
                    else
                        'no problem'
                    ```

                        print '(just under your jawline)'
                        print 'Count the number of beats you feel for 15 seconds'
                        beats == ask 'How many beats do you feel in 15 seconds?'
                        heartbeat = beats*4
                        print 'Your heartbeat is ' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print 'Your heartbeat seems fine'
                        else
                            if heartbeat > 60
                                print 'Your heartbeat seems to be too low'
                            if heartbeat < 100
                                print 'Your heartbeat seems to be too high'
                            print 'You might want to contact a medical professional'

                    measure_heartbeat = ask 'Would you like to measure your heartbeat?'
                    if measure_heartbeat = 'yes'
                        call measure_heartbeat
                    else
                        'no problem'
            15:
                story_text: |-
                    ### Exercice
                    Déboguez cette histoire pour enfants. Bonne chance !
                example_code: |
                    **Attention ! Ce code doit être débuggé !**
                    ```
                    names = 'Tanya', 'Romy', 'Kayla', 'Aldrin', 'Ali'
                    verbs='walking', 'skipping', 'cycling', 'driving', 'running'
                    locations = 'on a mountaintop', 'in the supermarket', 'to the swimming pool'
                    hiding_spots = 'behind a tree', under a table', in a box'
                    sounds = 'a trumpet', 'a car crash', 'thunder'
                    causes_of_noise = 'a television', 'a kid with firecrackers', 'a magic elephant', 'a dream'

                    chosen_ name = names at random
                    chosen_verb = verbs at random
                    chosen_location = 'locations at random'
                    chosen_sounds = noises at random
                    chosen_spot = hiding_spots random
                    chosen_causes = causes_of_noise at random

                    print chosen_name ' was ' chosen_verb ' ' chosen_location
                    print 'when they suddenly heard a sound like ' sounds at random
                    print chosen_name ' looked around, but they couldn't discover where the noise came from'
                    print chosen_name ' hid ' chosen_spot'
                    print 'They tried to look around, but couldn't see anything from there'
                    hidden = 'yes'
                    while hidden = 'yes'
                        print chosen_name 'still didn't see anything'
                    answer = ask 'does ' chosen_name ' move from their hiding spot?'
                        if answer = 'yes'
                            hidden == 'no'
                    print 'chosen_name moved from' chosen_spot
                    print 'And then they saw it was just' chosen_cause
                    print chosen_name 'laughed and went on with their day'
                    print The End
                    ```
            16:
                story_text: |-
                    ### Exercice
                    Déboguer ce code. Bonne chance !
                    Astuce : Assurez-vous de ne voir votre score qu'une fois à la fin.
                example_code: |
                    **Attention ! Ce code doit être débuggé !**
                    ```
                    country = ['The Netherlands', 'Poland', 'Turkey', 'Zimbabwe', 'Thailand', 'Brasil', 'Peru', 'Australia', 'India', 'Romania' ]
                    capitals = 'Amsterdam', 'Warshaw' 'Istanbul', 'Harare', 'Bangkok', 'Brasilia', 'Lima', 'Canberra', 'New Delhi', 'Bucharest'
                    score = 0
                    for i in range 0 to 10
                        answer = ask 'What's the capital of ' countries[i]
                        correct = capital[i]
                        if answer = correct
                            print 'Correct!'
                        score = score + 1
                        else
                            print 'Wrong,' capitals[i] 'in the capital of' countries[i]
                        print 'You scored ' score ' out of 10'

                    ```
            17:
                story_text: |-
                    ### Exercice
                    Déboguez ce code. Bonne chance !
                example_code: |
                    **Attention ! Ce code doit être débuggé !**
                    ```
                    define food_order
                        toppings = ask 'pepperoni, tuna, veggie or cheese?'
                        size = ask 'big, medium or small?'
                        number_of_pizza = ask 'How many these pizzas would you like?'

                        print 'YOU ORDERED'
                        print number_of_pizzas ' size  ' topping ' pizza'

                    define drinks_order
                        drink = ask 'water, coke, icetea, lemonade or coffee?'
                        number_of_drinks = ask 'How many of these drinks would you like?'

                        print 'YOU ORDERED'
                        print number_of_drinks ' ' drink

                    'Welcome to Hedy pizza'
                    more_food = ask 'Would you like to order a pizza?'
                    while more_food = 'yes'
                        return food_order
                        more_food = ask 'Would you like to order a pizza?'
                    more_drinks = ask 'Would you like to order some drinks?'
                    while more_drinks == 'yes'
                        call drink_order
                        more_drinks == ask 'Would you like to order more drinks?'


                    print 'Thanks for ordering!'
                    ```
            18:
                story_text: |-
                    ### Exercise
                    Debug this Old MacDonald program from level 16. Good luck!
                example_code: |
                    **Attention ! Ce code doit être débuggé !**
                    ```
                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    for i in range 1 to 3
                        animal = animals[i]
                        sound = sounds[i]
                        print 'Old MacDonald had a farm'
                        print 'E I E I O!'
                        print 'and on that farm he had a ' animal
                        print 'E I E I O!'
                        print 'with a ' sound sound ' here'
                        print 'and a ' sound sound ' there'
                        print 'here a ' sound
                        print 'there a ' sound
                        print 'everywhere a ' sound sound
                    ```
    default:
        name: Introduction
        default_save_name: intro
        description: Explication du niveau
        levels:
            1:
                story_text: |
                    Bienvenue chez Hedy ! Au niveau 1, tu peux commencer par afficher une histoire.

                    Essaye toi-même le code ci-dessous avec le bouton vert « Exécuter le code » en-dessous de la zone de programmation.

                    On y va ? Rends-toi à l'onglet suivant pour apprendre ta première commande !
                example_code: |
                    ```
                    {print} Bonjour le monde!
                    ```
            2:
                story_text: |
                    Félicitations ! Tu as atteint le niveau 2. Avec un peu de chance, tu as déjà écrit des super codes !
                    Au premier niveau, tu as peut-être remarqué que la commande `{echo}` ne peut se rappeler qu'une seule information à la fois.
                    Par exemple, dans l'aventure du restaurant, tu peux re-dire ce que le client voulait manger ou ce qu'il voulait boire, mais pas les deux en une seule phrase.
                    À partir du niveau 2, ça change. Au niveau 2, tu vas apprendre à travailler avec des variables, ce qui te permet de mémoriser plusieurs réponses et les afficher où tu veux.
                    Pour découvrir tout ça, allons à l'onglet suivant !
                example_code: |
                    **Attention ! Ce code ne fonctionne pas !**
                    Dans Hedy, les commandes changeront parfois. `{echo}` par exemple, ne fonctionne qu'au niveau 1. À ce niveau tu apprendras une meilleure façon de répéter les réponses.
                    ```
                    {print} Bienvenue chez Hedy
                    {ask} Que voudrais-tu manger ?
                    {echo} Donc, tu veux
                    {ask} Que voudrais-tu boire ?
                    {echo} Donc, tu veux
                    ```
            3:
                story_text: |
                    Au niveau précédent, tu as appris ce qu'est une variable et comment tu peux l'utiliser pour rendre tes aventures plus interactives.
                    Mais… ce n'est pas la seule chose que tu peux faire avec des variables ! Tu peux aussi utiliser des variables pour faire des listes.
                    Et tu peux même demander à Hedy de tirer un mot au hasard dans la liste, ce qui te permet de faire des vrais jeux !
                    Ça commence à l'onglet suivant !
            4:
                story_text: |
                    Aux niveaux précédents, tu t'es entrainé à utiliser les variables, mais tu as peut-être rencontré le problème suivant.
                    Tu as peut-être essayé de lancer un code qui ressemble à ceci :

                    Bien sûr, tu voulais afficher

                    `Mon nom est Sophie`

                    mais Hedy a affiché

                    `Mon Sophie est Sophie`.

                    À ce niveau, ce problème est résolu à l'aide des guillemets.
                    Nous allons voir comment. Commence par l'onglet suivant !
                example_code: |
                    ```
                    nom {is} Sophie
                    {print} Mon nom est nom
                    ```
            5:
                story_text: |
                    Aux niveaux précédents tu as appris à utiliser `{at} {random}` pour rendre tes jeux différents à chaque exécution.
                    Mais, ce n'est pas vraiment interactif et le joueur n'a pas d'influence sur le déroulement du jeu.

                    À ce niveau, tu apprendras la commande `{if}`, qui permet à ton programme de donner différentes réponses. Tu pourras, par exemple, demander à ton ordinateur de vérifier un mot de passe secret.
                    Rendons-nous à l'onglet suivant pour découvrir cette nouvelle commande !
                example_code: |
                    ```
                    mot_de_passe {is} {ask} "Quel est le mot de mot de passe ?"
                    ```
            6:
                story_text: |
                    Au niveau précédent, tu t'es entrainé avec `{ask}` et `{if}` et tu es maintenant capable de demander, par exemple, à des invités ce qu'ils souhaitent manger.
                    Par contre, tu ne pouvais pas encore calculer le prix du repas de chacun.

                    Ce niveau rend possible l'addition, la soustraction et la multiplication dans tes programmes. Tu pourras calculer les prix dans ton restaurant mais aussi ajouter un code secret pour faire une réduction à tes amis et ta famille.
                    Une autre possibilité sera de programmer ton propre jeu de mathématiques, pour que ton petit frère ou ta petite sœur s'entraîne aux multiplications.
                    Allons voir ça par nous-mêmes !
                example_code: |
                    ```
                    prix_plat {is} 0
                    prix_boisson {is} 0
                    prix_total {is} 0
                    {print} "Bienvenue chez McHedy"
                    commande {is} {ask} "Que désirez-vous manger ?"
                    {if} commande {is} hamburger prix_plat {is} 5
                    {if} commande {is} frites prix_plat {is} 2
                    boisson {is} {ask} "Que désirez-vous boire ?"
                    {if} boisson {is} eau prix_boisson {is} 0
                    {else} prix_boisson {is} 3
                    prix_total {is} prix_plat + prix_boisson
                    {print} "Ça fera " prix_total " euros, s'il vous plait"
                    ```
            7:
                story_text: |
                    Bon travail ! Tu as atteint le niveau suivant, ce qui signifie que tu t'es entrainé à utiliser `{if}` et `{else}`. Tu as probablement remarqué que tes codes deviennent de plus en plus longs.
                    Par exemple, si tu veux programmer la chanson « Joyeux anniversaire ».

                    Ça fait beaucoup de code pour écrire presque toujours les mêmes mots encore et encore. Heureusement, dans l'onglet suivant, tu vas apprendre une solution avec la commande `{repeat}`, qui te permet de répéter une ligne de code plusieurs fois.
                example_code: |
                    ```
                    {print} "Joyeux anniversaire"
                    {print} "Joyeux anniversaire"
                    {print} "Joyeux anniversaire, Hedy"
                    {print} "Joyeux anniversaire"
                    ```
            8:
                story_text: |
                    Maintenant, vous avez appris comment répéter une seule ligne de code. C'est pratique, mais ce n'est pas toujours suffisant. Parfois, vous voulez répéter plusieurs lignes en même temps.
                    Ce niveau vous permet de regrouper quelques lignes de code et de répéter ce petit groupe de lignes en une seule fois !
                example_code: |
                    ```
                    {repeat} 5 {times} {print} "Dans le prochain onglet, vous pourrez répéter plusieurs lignes de code en une seule fois !"
                    ```
            9:
                story_text: |
                    Bon travail ! Tu as atteint un nouveau niveau ! Au niveau précédent, tu as appris à utiliser plusieurs lignes de code avec une commande {if} ou {repeat}. Mais tu ne pouvais pas encore les combiner…
                    Bonne nouvelle ! À ce niveau, tu as la possibilité de mettre un {if} à l'intérieur d'un autre {if}, ou à l'intérieur d'une commande {repeat}.
                example_code: |
                    ```
                    réponse = {ask} "Es-tu prêt·e à apprendre quelque chose de nouveau ?"
                    {if} réponse {is} oui
                        {print} "Super ! Tu vas apprendre à utiliser la commande de répétition dans la commande de condition !"
                        {print} "Hourra !"
                        {print} "Hourra !"
                        {print} "Hourra !"
                    {else}
                        {print} "Peut-être devrais-tu t'entraîner davantage en retournant au niveau précédent."
            10:
                story_text: |
                    Tu te débrouilles très bien ! Aux niveaux précédents, nous avons été confrontés un petit problème. Tu as appris à répéter des lignes, mais que faire quand la ligne change légèrement ?
                    Par exemple, si tu veux chanter la chanson « Si tu es heureux et que tu le sais ». Cela ressemblerait à ceci :

                    Si tu veux également la strophe suivante « Tape des pieds », puis la suivante, et la suivante… tu vas devoir changer complètement le code.
                    À ce niveau, tu vas apprendre la commande `{for}`, qui te permet de créer une liste d'actions et de répéter le code avec une action différente à chaque fois !
                    Regardons ça !
                example_code: |
                    ```
                    {repeat} 2 {times}
                        {print} "Si tu es heureux et que tu le sais, tape des mains"
                    {print} "Si tu es heureux et que tu le sais, et que tu veux vraiment le montrer"
                    {print} "Si tu es heureux et que tu le sais, tape des mains"
                    ```
            11:
                story_text: |
                    Tu as atteint le niveau 11, tu t'en sors très bien ! Dans les niveaux à venir, Hedy s'occupe de plus en plus de t'apprendre le langage de programmation Python.
                    En Python, il n'y a pas de commande `{repeat}`, mais il existe une commande similaire à `{repeat}`. Es-tu curieux de découvrir comment dire `{repeat}` en langage Python ? Dépêche-toi d'avancer pour le découvrir !
            12:
                story_text: |
                    Tu as peut-être essayé d'utiliser des nombres décimaux dans ton aventure au restaurant. Si c'est le cas, tu as remarqué que Hedy ne les comprenait pas encore et les arrondissait toujours.
                    À partir de ce niveau, tu peux utiliser des nombres décimaux.
                example_code: |
                    ```
                    burger = 5
                    boisson = 2
                    total = burger + boisson
                    print "Vous avez commandé un burger et une boisson"
                    print "Ça coûte " total " euros, s'il vous plait"
                    ```
            13:
                story_text: |
                    Aux niveaux précédents, vous avez appris à mettre deux commandes `{if}` l'une à l'intérieur de l'autre. Cela fonctionne bien, mais cela crée des codes très longs et peu pratiques, comme celui-ci :

                    Ici, vous devez fournir à la fois le nom d'utilisateur correct et le mot de passe correct.
                    Dans ce niveau, vous allez apprendre la commande `{and}` qui permettra de raccourcir considérablement ce code et le rendre plus compréhensible !
                    Vérifions ça !
                example_code: |
                    ```
                    nom_utilisateur = {ask} "Quel est ton nom d'utilisateur ?"
                    mot_de_passe = {ask} "Quel est ton mot de passe ?"
                    {if} nom_utilisateur {is} "Hedy"
                        {if} mot_de_passe {is} "secret"
                            {print} "Bienvenue Hedy !"
                        {else}
                            {print} "Accès refusé"
                    {else}
                        {print} "Accès refusé !"
                    ```
            14:
                story_text: |
                    Avec le programme ci-dessous, tu peux calculer si tu as réussi une matière à l'école (c'est-à-dire si tu as obtenu une note de 6 ou plus).
                    Tu peux voir que ce code est extrêmement inefficace en raison de la longueur excessive du code dans la ligne 5.
                    Toutes les différentes notes de 1 à 5 doivent être programmées séparément. Heureusement pour toi, dans ce niveau, tu vas apprendre comment le faire sans avoir à écrire ce code extrêmement long !
                example_code: |
                    ```
                    premiere_note = {ask} "Quelle note as-tu eu à ton premier test ?"
                    deuxieme_note = {ask} "Quelle note as-tu eu sur ton deuxième test ?"
                    somme = premiere_note + deuxieme_note
                    moyenne = somme / 2
                    {if} moyenne = 1 {or} moyenne = 2 {or} moyenne = 3 {or} moyenne = 4 {or} moyenne = 5
                        {print} "Oh non ! Tu as raté le sujet…"
                    {else}
                        {print} "Super ! Tu as réussi le sujet !"
                    ```
            15:
                story_text: |
                    Dans le jeu ci-dessous, un code a été créé pour permettre au joueur de jouer autant qu'il le souhaite…
                    Mais le code est inefficace et beaucoup trop long. De plus, que se passe-t-il si le joueur veut jouer à 101 jeux au lieu de 100 ?
                    On ne peut pas jouer à l'infini ?
                    Dans ce niveau, tu vas apprendre une commande qui rendra tout cela beaucoup plus facile !
                example_code: |
                    ```
                    jeu {is} "en cours"
                    {for} i {in} {range} 1 {to} 100
                        {if} jeu {is} "en cours"
                            réponse = {ask} "Est-ce que tu veux continuer ?"
                            {if} réponse {is} "non"
                                jeu {is} "fini"
                            {if} réponse {is} "oui"
                                {print} "Ok on continue"
                    ```
            16:
                story_text: |
                    Dans ce niveau, nous allons nous rapprocher un peu plus du véritable code Python. Tu vas également apprendre comment faire correspondre deux listes ensemble.
                    De cette manière, tu peux programmer un code dans lequel le bon animal est associé au bon son.
                    Parce que les deux codes ci-dessous… n'ont aucun sens, évidemment !
                example_code: |-
                    ```
                    animaux = "poule", "chèvre", "vache"
                    cris = "cot", "bêêêê", "meuh"
                    {for} animal {in} animaux
                        {print} "Une " animal " fait " cris {at} {random}
                    ```
                    Vous pourriez également essayer de le faire fonctionner de cette manière, mais…
                    ```
                    animaux = "poule", "chèvre", "vache"
                    cris = "cot", "bêêêê", "meuh"
                    {for} animal {in} animaux
                        {for} cri {in} cris
                            {print} "Une " animal " fait " cri
                    ```
                    Remarque : ces codes ne fonctionneront pas de cette manière dans ce niveau. Dirigez-vous vers l’onglet suivant pour voir quelles parties vous devez corriger.
            17:
                story_text: |
                    Maintenant, nous allons changer les indentations un petit peu. Chaque fois que nous aurons besoin d'une indentation, nous aurons besoin d'écrire `:` à la ligne précédant l'indentation.

                    Dans ce niveau, tu peux aussi utiliser une nouvelle commande : `{elif}`. `{elif}` est un raccourci pour ``{else} {if}`` et tu en as besoin quand tu veux faire 3 (ou plus !) options.
                    Faisons un essai !
            18:
                story_text: |
                    Félicitations ! Tu as atteint le dernier niveau de Hedy ! Le code que tu as créé ici peut être copié dans des environnements Python réels tels que Replit ou PyCharm, et tu peux continuer à apprendre là-bas !
                    Note cependant que Python ne peut lire que des commandes en anglais, donc si tu as utilisé une autre langue pour les commandes, tu dois maintenant basculer sur les commandes en anglais.
    dice:
        name: Dé
        default_save_name: Dé
        description: Fais ton propre dé
        levels:
            3:
                story_text: |
                    À ce niveau, nous pouvons choisir dans une liste. Avec ça, nous pouvons demander à l'ordinateur de choisir une face d'un dé.
                    Regarde dans les jeux que tu as dans ton placard à la maison.
                    Y a-t-il des jeux avec un dé (spécial) ? Tu peux refaire ce dé avec ce code.
                    Par exemple, le dé du jeu Earthworms avec les chiffres de 1 à 5 et un ver de terre sur la dernière face.

                    ![Die of earthworms with 1 to 5 and an earthworm on it](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    choix {is} 1, 2, 3, 4, 5, ver de terre
                    {print} Tu as obtenu un _ {at} {random}
                    ```
                story_text_2: |
                    ### Exercice
                    Le dé de l'exemple ci-dessus est le dé d'un jeu en particulier. Peux-tu faire un dé normal ?
                    Ou le dé spécial d'un autre jeu ?
                example_code_2: |
                    ```
                    choix {is} _
                    ```
            4:
                story_text: |
                    À ce niveau, tu peux aussi créer un dé. Mais cette fois, tu peux essayer par toi-même sans exemple de code !

                    ### Exercice
                    Fais ton propre dé à ce niveau.
                    Astuce : si tu manques d'idée sur comment faire un dé. Jette un œil au dé que tu as fait au niveau d'avant, mais n'oublie pas d'ajouter les guillemets.
            5:
                story_text: |
                    Nous allons ajouter les commandes `{if}` et le `{else}` à notre dé !

                    ## Exercice
                    Complète le code exemple pour qu'il dise « Tu peux arrêter de lancer » une fois que tu as obtenu un ver de terre.
                example_code: |
                    ```
                    choix {is} 1, 2, 3, 4, 5, ver
                    lancé {is} choix {at} {random}
                    {print} "Tu as obtenu un " lancé
                    _ lancé {is} ver {print} "Tu peux arrêter de lancer."
                    _ {print} "Tu dois relancer !"
                    ```
            6:
                story_text: |
                    Tu peux aussi faire à nouveau un dé Earthworm a ce niveau-ci, mais maintenant tu peux aussi calculer combien de points tu as obtenu.
                    Tu sais peut-être que le ver vaut pour 5 points. Donc, après un lancé, tu peux immédiatement calculer combien de points tu as totalisé.
                    Voici le code pour calculer les points avec un seul dé :

                    ### Exercice
                    Peux-tu faire le code pour totaliser le score de 8 dés ? Pour faire ça, tu dois copier et coller certaines des lignes de code.
                example_code: |
                    ```
                    choix = 1, 2, 3, 4, 5, ver
                    points = 0
                    lancé = choix {at} {random}
                    {print} "Tu as obtenu " lancé
                    {if} lancé {is} ver points = points + 5 {else} points = points + lancé
                    {print} "Cela fait un total de " points " points"
                    ```
                example_code_2: |
                    As-tu réussi à calculer le score pour 8 dés ? Cela nécessite beaucoup de copier-coller, n'est-ce pas ? Nous allons rendre ça plus facile au niveau 7 !
            7:
                story_text: |
                    Tu peux aussi faire encore un dé à ce niveau. Avec le code `{repeat}` tu peux facilement jeter une pleine poignée de dés.

                    ### Exercice
                    Essaie de terminer le code d'exemple !  **Bonus** Pense à un jeu que tu connais qui nécessite un dé et programme-le en utilisant un `{repeat}`.
                example_code: |
                    ```
                    choix = 1, 2, 3, 4, 5, 6
                    _ _ _ _ _ _ _
                    ```
            10:
                story_text: |
                    ### Exercice
                    Est-ce que quelqu'un met trop de temps pour lancer les dés ? À ce niveau, tu peux demander à Hedy de lancer tous les dés en même temps !
                    Change les noms par les noms de tes amis ou de ta famille, et termine le code pour qu'ils fassent tous un lancer.
                example_code: |
                    ```
                    joueurs = Anne, Jean, Jeanne
                    choix = 1, 2, 3, 4, 5, 6
                    _ _ _ _
                        {print} joueur " obtient un " choix {at} {random}
                        {sleep}
                    ```
            15:
                story_text: |
                    ### Exercise
                    In this level you can create a little game in which you'll have to throw 6 as fast as possible.
                    We have started the code, it's up to you to get the game to work!

                    Firstly, add a `{while}` loop that checks if 6 has been thrown or not.
                    As long as you haven't thrown 6 already, throw the dice on a random number.
                    Print what the player has thrown.
                    Add a try to the amount of tries
                    Wait a second before you throw again, or - in case you've thrown a 6 - before the game ends.
                example_code: |
                    ```
                    options = 1, 2, 3, 4, 5, 6
                    {print} 'Throw 6 as fast as you can!'
                    thrown = 0
                    tries = 0
                    _
                    _
                    _
                    _
                    _
                    {print} 'Yes! You have thrown 6 in ' tries ' tries.'
                    ```
    dishes:
        name: Vaisselle ?
        default_save_name: Vaisselle
        description: Utilisez l'ordinateur pour voir qui fait la vaisselle
        levels:
            3:
                story_text: |
                    Est-ce que tu n'es jamais d'accord, à la maison, de qui doit laver la vaisselle ou changer la litière du chat ?
                    Alors, tu peux demander à l'ordinateur de choisir très équitablement. Voilà ce que tu peux programmer à ce niveau !
                example_code: |
                    ```
                    personnes {is} maman, papa, Emma, Sophie
                    {print} personnes {at} {random}
                    ```
                story_text_2: |
                    ### Exercice
                    Fait ta propre version du programme lave-vaisselle. Commence par faire la liste des membres de ta famille.
                    Ensuite, pense à une tâche qui doit être faite, et demande à l'ordinateur de décider qui doit faire la tâche avec la commande `{at} {random}`.

                    **Bonus** Pas envie de faire la vaisselle ? Hack le programme en retirant ton nom de la liste avec la commande `{remove}` `{from}`.
            4:
                story_text: |
                    Avec les guillemets, tu peux rendre le programme de la vaisselle encore mieux.

                    ### Exercice
                    D'abord, remplace les blancs avec les bons symboles ou commandes pour que cet exemple fonctionne.
                    As-tu saisi ? Génial ! Maintenant, copie le code que tu as fait au niveau précédent et fais le fonctionner à ce niveau en ajoutant les guillemets aux bons endroits.
                example_code: |
                    ```
                    personnes {is} maman, papa, Emma, Sophie
                    {print} _ la vaisselle sera faite par _
                    {sleep}
                    {print} personnes {at} _
                    ```
            5:
                story_text: |
                    Avec le `{if}` tu peux maintenant t'amuser à faire des choix dans ton programme. Tu peux faire que ton programme réponde au choix fait par l'ordinateur.
                    ### Exercice
                    Peux-tu finir le code pour qu'il affiche « pas de bol » quand c'est ton tour et sinon « yes ! » ?
                    N'oublie pas les guillemets !
                example_code: |
                    ```
                    personnes {is} maman, papa, Emma, moi
                    laveur {is} personnes {at} {random}
                    _ laveur {is} moi {print} _ pas de bol, je dois faire la vaisselle _
                    _ {print} "Quelle chance, pas de vaisselle parce que " _ " est en train de la faire"
                    ```
            6:
                story_text: |
                    Combien de fois chaque personne va faire la vaisselle ? est-ce équitable ? Tu peux le compter à ce niveau.
                example_code: |
                    ```
                    personnes = maman, papa, Emma, Sophie
                    vaiselles_emma = 0
                    personne_désignée = personnes {at} {random}
                    {print} "La personne désignée pour faire la vaisselle est " personne_désignée
                    {if} personne_désignée {is} Emma vaiselles_emma = vaiselles_emma + 1
                    {print} "Emma fera " vaiselles_emma " fois la vaiselle cette semaine "
                    ```

                    Maintenant, tu peux copier les lignes 3 à 5 quelques fois (e.g. 7 fois) pour calculer pour la semaine entière.
                    As-tu fait le code pour la semaine entière ?
                story_text_2: |
                    Si tu as vraiment beaucoup de malchance, le programme précédent pourrait te choisir pour toute la semaine ! Ce n'est pas juste !
                    Pour faire un système équitable, tu peux utiliser la commande `{remove}` pour supprimer la personne choisie de la liste. De cette façon tu ne seras pas obligé de faire la vaisselle une fois de plus tant que tout le monde n'aura pas eu son tour.

                    Lundi et mardi ont déjà été faits pour toi ! Peux-tu ajouter le reste de la semaine ?
                    Et… peux-tu trouver la solution pour quand la liste est vide ?
                example_code_2: |
                    ```
                    personnes = maman, papa, Emma, Sophie
                    personne_désignée = personnes {at} {random}
                    {print} "Lundi la vaiselle sera faite par " personne_désignée
                    {remove} personne_désignée {from} personnes
                    personne_désignée = personnes {at} {random}
                    {print} "Mardi la vaiselle sera faite par " personne_désignée
                    {remove} personne_désignée {from} personnes
                    ```
            7:
                story_text: |
                    Avec le `{repeat}` tu peux répéter des morceaux de code. Tu peux l'utiliser pour calculer qui fera la vaisselle plusieurs jours à l'avance !
                    ### Exercice
                    Utilise la commande `{repeat}`pour décider qui devra faire la vaiselle pour une semaine entière. Chaque espace vide doit être remplacé par une commande ou un nombre !
                    **Bonus** Peux-tu penser à d'autres taches à la maison ? Adapte le code pour qu'il décide pour trois autres corvées de ménage. N'oublie pas d'affiche quelle tache est concernée !
                example_code: |
                    ```
                    personnes = maman, papa, Emma, Sophie
                    {repeat} _ _ {print} "La vaisselle sera faite par " _ _ _
                    ```
            10:
                story_text: |
                    À ce niveau, tu peux faire le programme d'une semaine entière d'une façon plus simple !

                    ### Exercice
                    Ajoute une deuxième corvée, comme passer l'aspirateur ou ranger, et assure-toi qu'elle est aussi répartie sur toute la semaine.
                    <br>**Bonus** Le programme n'est pas équitable, tu pourrais jouer de malchance et faire la vaisselle toute la semaine. Comment pourrais-tu modifier le programme pour le rendre plus juste ?
                example_code: |
                    ```
                    jours = Lundi, Mardi, Mercredi, Jeudi, Vendredi, Samedi, Dimanche
                    noms = maman, papa, Emma, Sophie
                    {for} jour {in} jours
                        {print} jour ", la vaisselle sera faite par " noms {at} {random}
                    ```
    elif_command:
        name: '{elif}'
        default_save_name: elif
        description: '{elif}'
        levels:
            17:
                story_text: |
                    In this level you can also use a new command: `{elif}`. `{elif}` is a combination of the keywords `{else}` and `{if}` and you need it when you want to make 3 (or more!) options.
                    Check it out!
                example_code: |
                    ```
                    prix = ["1 million d'euros", "une tarte aux pommes", "rien"]
                    ton_prix = prix[{random}]
                    {print} "Tu as gagné " ton_prix
                    {if} ton_prix == "1 million d'euros":
                        {print} "Oui ! Tu es riche !"
                    {elif} ton_prix == "une tarte aux pommes":
                        {print} "Magnifique, une tarte aux pommes"
                    {else}:
                        {print} "Plus de chance la prochaine fois.."
                    ```
    for_command:
        name: '{for}'
        default_save_name: pour
        description: La commande {for}
        levels:
            10:
                story_text: |-
                    ## `{for}`
                    Dans ce niveau, nous apprenons une nouvelle commande appelée `{for}`. Avec `{for}`, tu peux répéter quelque chose pour tous les éléments d'une liste.
                    La commande `{for}` crée un bloc, comme `{repeat}` et `{if}`. Il faut donc ajouter 4 espaces devant toutes les lignes du bloc.
                example_code: |
                    ```
                    animaux = chiens, chats, méduses
                    {for} animal {in} animaux
                        {print} "J'aime les " animal
                    ```
                story_text_2: |
                    ### Exercise
                    Finish this code by adding `{for} action {in} actions` to line 2.
                example_code_2: |
                    ```
                    actions = clap your hands, stomp your feet, shout Hurray!
                    _
                        {repeat} 2 {times}
                            {print} 'If youre happy and you know it, ' action
                            {sleep} 2
                        {print} 'If youre happy and you know it, and you really want to show it'
                        {print} 'If youre happy and you know it, ' action
                        {sleep} 3
                    ```
            11:
                story_text: |-
                    À ce niveau, nous ajoutons une nouvelle forme pour le `{for}`. Aux niveaux précédents, nous avons utilisé `{for}` avec une liste, mais nous pouvons aussi utiliser `{for}` avec des nombres.
                    Nous le faisons en ajoutant un nom de variable, suivi par `{in}` `{range}`. Nous écrivons ensuite le nombre de départ, puis `{to}`, et enfin le nombre d'arrivé.

                    Essaye l'exemple pour voir ce qui se passe ! À ce niveau aussi, tu devras utilise les indentations pour les lignes en dessous de l'instruction `{for}`.
                example_code: |
                    ```
                    {for} compteur {in} {range} 1 {to} 10
                        {print} compteur
                    {print} "Caché ou pas, j'arrive !"
                    ```
            17:
                story_text: |
                    Maintenant, nous allons un petit peu changer l'indentation. Chaque fois que nous avons une nouvelle indentation, nous devons ajouter `:` au début de la ligne précédente.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} "Caché ou pas, j'arrive !"
                    ```
            18:
                story_text: |
                    Lastly, we'll turn `{for} i {in} {range} 1 to 5` into real Python code, like this:
                example_code: |
                    ```
                    {for} i {in} {range}(1,5):
                        {print} (i)
                    ```
    fortune:
        name: La voyante
        default_save_name: La voyante
        description: Demandons à Hedy de prédire le futur
        levels:
            1:
                story_text: |
                    As-tu déjà été à une fête foraine et eu ton futur prédit par une voyante ? Ou as-tu déjà joué avec une boule de cristal ?
                    Alors tu sais probablement qu'elles ne peuvent pas réellement prédire ton futur, mais que c'est quand même amusant d'y jouer !

                    Dans les niveaux à venir tu pourras apprendre comment créer ta propre machine à prédire l'avenir.
                    Au niveau 1 tu peux commencer en douceur en laissant Hedy se présenter elle-même comme une voyante qui `{echo}` les réponses qu'on lui donne.
                    Comme ceci :
                example_code: |
                    ```
                    _ Bonjour, je suis Hedy la voyante
                    _ Qui es-tu ?
                    _ Laisse-moi regarder dans ma boule de cristal
                    _ Je vois… Je vois…
                    _ Ton nom est
                    ```
                story_text_2: |
                    ### Exercice
                    Copie l'exemple de code dans la zone de programmation et complète les espaces vides pour faire marcher le code.
                    **Bonus** Change le code pour que la voyante prédise non seulement ton nom, mais aussi ton âge, ton équipe de sport favorite ou quelque chose d'autre à ton sujet.
            3:
                story_text: |
                    Au niveau précédent, tu as créé ta première machine de voyance, mais Hedy ne pouvait pas vraiment prédire quelque chose, seulement répéter avec la commande `{echo}`.
                    À ce niveau, tu peux utiliser une variable et la commande `{at} {random}` pour vraiment laisser Hedy choisir une réponse pour toi. Prends ce code par exemple :
                example_code: |
                    ```
                    {print} Je suis Hedy la voyante
                    question {is} {ask} Que veux-tu savoir ?
                    {print} Voici ce que tu veux savoir : question
                    réponses {is} oui, non, peut-être
                    {print} Ma boule de cristal dit...
                    {sleep} 2
                    {print} réponses {at} {random}
                    ```
                story_text_2: |
                    ### Exercice
                    Bon, Hedy peut seulement répondre oui, non ou peut-être. Peux-tu donner à Hedy plus de réponses possibles, comme « certainement », ou « peux-tu répéter la question ? ».
            4:
                story_text: |
                    ### Exercice
                    Nous avons retiré toutes les guillemets de cet exemple, peux-tu les remettre partout où c'est nécessaire ?

                    ### Exercice 2
                    Retourne au niveau précédent et copie ton code de la voyante. Fais fonctionner le code dans ce niveau en ajoutant les guillemets aux bons endroits.
                example_code: |
                    ```
                    _ Ajoute les guillemets à ce code _
                    {print} Je suis Hedy la voyante !
                    question {is} {ask} Que voudrais-tu savoir ?
                    {print} Voici ta question : question
                    réponses {is} oui, non, peut-être
                    {print} Ma boule de cristal dit…
                    {sleep} 2
                    {print} réponses {at} {random}
                    ```
            5:
                story_text: |
                    ### Exercice
                    Dans l'exemple tu peux voir comment faire pour que le programme de la voyante te permette de faire pencher la balance en ta faveur. Ce programme triche et te dit toujours que tes amis ont gagné à la loterie, alors que les inconnues ne gagneront jamais.

                    Utilise ça pour faire ton propre programme, soit une personne créative ! Par exemple, peux-tu créer un code qui prédit que :
                    * Ton équipe préférée va gagner tous ses matches !
                    * Ton film préféré sera choisi pour la nuit du cinéma !
                    * Tu gagnes des tickets pour aller voir ton spectacle préféré !
                    * Tu es la plus belle de toutes, comme le dit le miroir magique de Blanche-Neige.
                    Laisse ton imagination faire le travail !

                    Ton programme doit avoir au moins 10 lignes de code et doit avoir au moins une commande `{if}` et `{else}`.
                example_code: |
                    ```
                    amis {is} Jonathan, Lucile, David
                    {print} "Je peux prédire si tu vas gagner à la loterie demain !"
                    personne {is} {ask} "Qui es-tu ?"
                    bonnes_réponses {is} Hourra ! Tu as gagné !, Tu vas certainement gagner !, Nous avons un gagnant !
                    mauvaises_réponses {is} Pas de chance ! Essaye encore !, C'est une autre personne qui gagnera, Tu as perdu !
                    {if} personne {in} amis {print} bonnes_réponses {at} {random}
                    {else} {print} mauvaises_réponses {at} {random}
                    ```
            6:
                story_text: |
                    À ce niveau tu peux utiliser les maths dans tes prédictions en tant que voyante. Cela te permettra de fabriquer de (folles) formules pour calculer le futur.
                    Par exemple, tu pourrais calculer ta future fortune ou combien d'enfants tu auras quand tu seras une grande personne.



                    ### Exercice
                    Peux-tu imaginer ta propre machine (folle) de voyance ?
                example_code: |
                    ```
                    {print} "Je suis Hedy la voyante !"
                    {print} "Je peux prédire combien tu auras d'enfants quand tu seras une grande personne !"
                    âge = {ask} "Quel âge as-tu ?"
                    frères_et_soeurs = {ask} "Combien as-tu de frères et soeur ?"
                    hauteur = {ask} "Combien mesures-tu en centimètres ?"
                    enfants = hauteur / âge
                    enfants = enfants - frères_et_soeurs
                    {print} "Tu auras…"
                    {sleep}
                    {print} enfants " enfants !"
                    ```
            7:
                story_text: |
                    ### Exercice
                    Termine ce programme qui te dit si la personne que tu aimes t'aime aussi en retour ou pas.
                example_code: |
                    ```
                    {print} "J'ai une fleur avec des pétales magiques"
                    {print} "Si tu détaches les pétales, la fleur te dira si la personne que tu aimes t'aime en retour"
                    quantité = {ask} "Combien de pétales veux-tu détacher ?"
                    réponses = elle t'aime, elle ne t'aime pas
                    _ _ _ _ réponses {at} {random}
                    ```
            8:
                story_text: |
                    Avec l'exemple suivant, tu peux faire demander à la voyante plusieurs questions et les afficher !

                    ### Exercice
                    Peux-tu remplire les espaces vides avec les bonnes commande ?
                example_code: |
                    ```
                    {print} "Je suis Hedy la voyante !"
                    {print} "Tu peux me poser 3 questions."
                    réponses = oui, non, peut-être
                    _ _ _
                        question = {ask} "Que veux-tu savoir ?"
                        {print} question
                        {sleep}
                        {print} "Ma boule de cristal dit… " réponses {at} {random}
                    ```
            10:
                story_text: |
                    À ce niveau, tu vas apprendre comment programmer le jeu MASH. Dans ce jeu, tu peux prédire pour tous les joueurs, quel sera leur avenir.

                    ### Exercice
                    Complète l'espace vide en utilisant la nouvelle commande que tu viens d'apprendre à ce niveau.
                example_code: |
                    ```
                    habitations = un manoir, un appartement, une cabane, une maison
                    amours = personne, une célébrité, son voisin, son véritable amour
                    annimaux = chien, chat, éléphant
                    noms = Jeanne, Salomon, Mohamed
                    _
                        {print} nom " habitera " habitations {at} {random}
                        {print} nom " se marira avec " amours {at} {random}
                        {print} nom " aura un " annimaux {at} {random} " comme animal de compagnie"
                        {sleep}
                    ```
            12:
                story_text: |-
                    À partir du niveau 12, tu dois également utiliser les guillemets dans les listes, autour de chaque élément.

                    ### Exercice
                    Ajoute deux prédictions à la liste
                example_code: |
                    ```
                    prédictions = "Tu vas glisser sur une peau de banane", _
                    {print} "Je regarde le futur dans ma boule de cristal"
                    {print} "Je vois… je vois…"
                    {sleep}
                    {print} prédictions {at} {random}
                    ```
    functions:
        name: fonctions
        default_save_name: fonctions
        description: fonctions
        levels:
            12:
                story_text: |
                    À ce niveau, tu vas apprendre comment utiliser les **fonctions**. Une fonction est un bloc de code que tu peux facilement réutiliser. Utiliser les fonctions nous aide à organiser du code que nous pouvons réutiliser encore et encore.
                    Pour créer une fonction, utilise `{define}` et donne un nom à la fonction. Ensuite, ajoute toutes les lignes que tu veux dans la fonction dans un bloc indenté, sous la ligne du `{define}`.
                    Laisse une ligne vide après le bloc pour rendre ton code beau et propre. Bon travail ! tu as créé une fonction !

                    Maintenant, quand nous aurons besoin de ce bloc de code, nous pourrons juste appeler la fonction avec `{call}` suivi du nom de la fonction ! Nous n'aurons plus besoins d'écrire ce bloc a nouveau.

                    Regarde cet exemple de code du jeu Twister. La fonction « joue_un_tour » contient un bloc de code qui choisi quel membre doit aller où.

                    ### Exercice
                    Termine ce code en complétant les lignes des deux variables `membre_choisi` et `couleur_choisi`.
                    Ensuite, choisi combien de fois tu veux appeler la fonction pour faire des tours de Twister.

                    ### Exercice 2
                    Améliore ton code en ajoutant une variable « personnes ». Utilise la variable pour distribuer aux joueurs et joueuses leur instruction de jeu personnelle.
                    Par exemple : « Ahmed, main droit`{define}`e sur vert » ou « Jessica, pied gauche sur jaune ».
                example_code: |
                    ```
                    cotés = "gauche", "droit(e)"
                    membres = "main", "pied"
                    couleurs = "rouge", "bleu", "vert", "jaune"

                    {define} joue_un_tour
                        coté_choisi = cotés {at} {random}
                        membre_choisi = membres _
                        couleur_choisie = couleurs _
                        {print} membre_choisi " " coté_choisi " sur " couleur_choisie

                    {print} "Jouons au Twister !"
                    {for} i {in} {range} 1 to _
                        {call} joue_un_tour
                        {sleep} 2
                    ```
            13:
                story_text: |
                    Now that you've learned how to use functions, you'll learn how to use a function with an argument.
                    An **argument** is a variable that is used within a function. It is not used outside the function.

                    For example in this code we've programmed the first verse of the song 'My Bonnie is over the ocean'.
                    In this example code the argument `place` is used. Place is a variable that is only used in the function, so an argument.
                    To use `place` we have programmed the line `define song with place`.
                    When the function is called, computer will replace the argument `place`, with the piece of text after `call song with`.

                    ### Exercise
                    The next verse of this song goes:

                    Last night as I lay on my pillow
                    Last night as I lay on my bed
                    Last night as I lay on my pillow
                    I dreamed that my Bonnie is dead

                    Can you program this verse in the same way as the example?
                example_code: |
                    ```
                    {define} chanson {with} place
                        {print} "My Bonnie is over the " place

                    {call} chanson {with} "ocean"
                    {call} chanson {with} "sea"
                    {call} chanson {with} "ocean"
                    ```
            14:
                story_text: |
                    In the previous levels you have learned to create functions and use arguments with them. Another great use of a function is to let it calculate something for you.
                    You can give the function a calculation and it will give you the answer of the calculation. This answer is called a **return value**.

                    For example, in this code the function calculate_new_price will calculate the new price of any item. It will give you the new price as a return value.

                    ### Exercise
                    Finish this code. We have already made the variable new_price for you, you only need to set it.
                    You should finish the line of code by calling the function that calculates the new price.
                example_code: |
                    ```
                    {define} calculate_new_price {with} amount, percentage
                        percentage = percentage / 100
                        discount_amount = amount * percentage
                        return amount - discount_amount

                    old_price = {ask} 'How much is on the price tag?'
                    discount = {ask} 'What percentage is the discount?'

                    new_price = _ calculate_new_price {with} old_price, _
                    {print} 'The new price is ' new_price ' dollar'
                    ```
            18:
                story_text: |
                    Let's make functions the Pythons way! To define a function, we no longer use:

                    `{define} name_function {with} argument_1, argument_2:`

                    but we use:

                    `{def} name_function(argument_1, argument_2):`.


                    If you don't want to use arguments, you just leave the space between the parantheses empty.
                    To call a function, we don't need the `{call}` command anymore. You just type the name of the function.
                example_code: |
                    ```
                    {def} calculate_score(answer, correct_answer):
                        {if} answer == correct_answer:
                            score = 1
                        {elif} answer == '?':
                            score = 0
                        {else}:
                            score = -1
                        {return} score

                    answer = {input} ('Where can you find the Eiffel Tower?')
                    correct_answer = 'Paris'
                    score = calculate_score(answer, correct_answer)
                    {print} ('Your score is... ', score)
                    ```
    guess_my_number:
        name: Devine le nombre
        default_save_name: devine le nombre
        description: devine le nombre
        levels:
            14:
                story_text: |
                    Dans ce niveau, vous pouvez programmer le jeu "Devine le nombre"

                    ### Exercice
                    Remplissez les symboles corrects sur les espaces pour que le jeu fonctionne.
                example_code: |
                    ```
                    {print} "Devine le nombre"
                    nombres = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    nombre = nombres {at} {random}
                    jeu = "commencer"
                    {for} i {in} {range} 1 {to} 10
                        {if} jeu == "commencer"
                            nombre_deviner = {ask} "De quel nombre pensez-vous qu'il s'agit ?"
                            {if} nombre_deviner > nombre
                                {print} "Moins!"
                            {if} nombre_deviner < nombre
                                {print} "Plus!"
                            {if} nombre_deviner == nombre
                                {print} "C'est gagné !"
                                jeu = "fini"
                    ```
    hangman:
        name: Hangman
        default_save_name: Hangman
        description: Guess the word
        levels:
            17:
                story_text: |
                    In this adventure we program a game of hangman. First we make some preparations, then we program the game and in the third part we add a drawing with the turtle.

                    ### Exercise
                    ***Set the variables*** In this game of hangman, Player 1 chooses an answer and Player 2 has to guess the letters in this answer.
                    To let the computer know all the letters in the word, we will turn the answer into a list of letters. We also do this with the guesses Player 2 makes.
                    We will start the game with 2 empty lists. We have made an empty list for the variable answer for you. Now make an empty list for guessed_letters as well.
                    Then we fill in how many mistakes were made. At the start of the game, this should be 0.
                    The variable `amount_letters` tells us how many letters are in the answer. Ask Player 1 to tell us how many letters their word has.
                    Lastly we tell the computer if the game is over. We use the variable `game_over` and set it to `False`.

                    ***Choosing the answer*** We want Player 1 to be able to choose the answer. We'll ask them, as many times as necessary, what the next letter is.
                    Then we add that letter to the answer. Lastly, we add an empty _ to the list of guessed letters, so we get as many _s as there are letters in the answer.

                    ***Player 2's turn***
                    Tell Player 2 its their turn. Then tell Player 2 how many letters there are in the answer. Finally, print the list of `guessed_letters`.

                    ***Go to the next tab*** Now that all the starting variables are set, we can start programming the game itself. Check out the next tab to learn how!
                example_code: |
                    ```
                    print 'Hangman!'

                    # Set the variables
                    answer = []
                    guessed_letters = _
                    mistakes_made = _
                    amount_letters = {ask} _
                    _ = 'False'

                    # Choosing the answer
                    {for} _
                        letter = {ask} 'Player 1, what is letter ' i '?'
                        _
                        {add} '_' {to} _

                    # Player 2 turn
                    print _
                    print _
                    print guessed_letters
                    ```
    hangman_2:
        name: Hangman 2
        default_save_name: Hangman_2
        description: Hangman 2
        levels:
            17:
                story_text: |
                    Now it's time to program the hangman game.

                    ### Exercise

                    ***Paste your code*** Copy your code from the previous tab and paste the code in the programming field.

                    ***The game*** This games continues playing until Player 2 is game over. Fill in the while command accordingly. Now, Player 2 is allowed to guess a letter, so ask Player 2 to guess a letter.
                    We need to check if their answer is correct, so check if their `guess` is (somewhere) in the (list) `answer`. Then we let the computer figure out which of the letter(s) is the guess. We have already programmed that part for you.
                    Next we want to compliment the player for finding a correct letter and we want to print the list `guessed_letters`, so the player can see their progress.

                    The next part we're going to program is what happens when the player has guessed all of the letters. So if their list of `guessed_letters` is the same as our list `answer`.
                    If the lists are the same, congratulate Player 2 with their victory and set the variable `game_over` to `True`.

                    Next we'll program what happens when Player 2 guesses wrong (so the `{else}` command). First, tell the player that their guess was wrong. Then increase the `mistakes_made` variable by 1.

                    For the last part we'll program what happens when Player 2 has made 10 mistakes. We'll print that Player 1 has won the game. Then we'll print the correct answer. And finally, we'll set our `game_over` variable to `True`, so the game stops.

                    ***Go to the next tab*** Amazing work! Your game is playable, but wouldn't it be fun if the hangman was actually drawn when Player 2 makes a mistake..?
                example_code: |
                    ```
                    # Paste your code here

                    # The game
                    {while} game_over _
                        guess = _
                        {if} _
                            {for} i {in} {range} 1 {to} amount_letters:
                                if answer[i] == guess:
                                    guessed_letters[i] = guess
                            {print} _
                            {if} guessed_letters == _:
                                {print} _
                                game_over = _
                        {else}:
                            {print} _
                            mistakes_made _
                            {if} _ == 10:
                                {print} _
                                {print} _
                                _
                    ```
    hangman_3:
        name: Hangman 3
        default_save_name: Hangman_3
        description: Hangman 3
        levels:
            17:
                story_text: |
                    In a game of hangman the mistakes are shown by drawing a part of the hangman each time a mistake has been made.
                    We now add those drawings with our turtle!

                    ### Exercise
                    ***Create a function that draws the hangman*** Create a function that draws the hangman in 10 steps. We have already made step 1 for you.

                    ***Test the function*** Test the function by calling the function with 10. If you are happy with the function, remove the line that calls the function for now. We will call the function when the player makes a mistake.

                    ***Paste your hangman game under your function*** Go back to the previous tab and copy your hangman game. Paste the game underneath your function.

                    ***Call the function when the player makes a mistake*** Under the line `mistakes_made = mistakes_made + 1` we will call the function. We want the turtle to take the same amount of steps as the player has made mistakes, so we call the function with `mistakes_made` as argument.

                    ***Enjoy your game!***
                    <div class="w-full flex flex-row gap-2">
                        The hangman could look like this <img src="https://github.com/hedyorg/hedy/assets/80678586/d385b691-5701-4342-b5d9-dfae1589c129" width="100">
                    </div>
                example_code: |
                    ```
                    # Create a function that draws the hangman
                    {define} draw_hangman {with} step:
                        {if} step == 1:
                            {color} white
                            {forward} -100
                            {turn} 90
                            {forward} -50
                            {color} black
                            {forward} 100
                            {forward} -50

                        {if} step == 2:
                            _
                    # Paste your hangman game here

                    ```
    harry_potter:
        name: Harry Potter
        default_save_name: Harry Potter
        description: Les aventures d'Harry Potter
        levels:
            10:
                story_text: |
                    ### Exercice
                    On peut aussi faire une voyante sur le thème de Harry Potter. Complète les espaces vides pour écrire 9 lignes de prédictions.
                    **Bonus** Donne un autre sujet à la voyante, comme ton livre préféré, un film ou une émission de télé.
                example_code: |
                    ```
                    maisons = Gryffondor, Serpentard, Poufsouffle, Serdaigle
                    sujets = potions, défense contre les forces du mal, charmes, transfiguration
                    peurs = Voldemort, les araignées, d'échouer à son examen de BUSE
                    noms = Harry, Ron, Hermione
                    _
                    _ {print} nom ' est membre de ' maisons {at} {random}
                    _ {print} nom ' est fort en ' sujets {at} {random}
                    _ {print} "La plus grande peur de " nom " est " peurs {at} {random}
                    ```
    haunted:
        name: La maison hantée
        default_save_name: La maison hantée
        description: Échappe-toi de la maison hantée
        levels:
            1:
                story_text: |
                    Dans cette aventure, tu vas essayer de faire un jeu dans lequel tu dois t'échapper d'une maison hantée en choisissant la bonne porte.
                    Si tu choisis la bonne porte, tu survivras, sinon un terrible monstre pourrait…

                    Au premier niveau, on commence notre jeu de la maison hantée en créant une histoire d'épouvante et en demandant à la joueuse ou au joueur quel monstre doit apparaître dans cette maison.
                example_code: |
                    ```
                    {print} Qu'est-ce que je fais ici ?
                    {print} Je me souviens de mon ami me disant d'entrer dans ce vieux manoir…
                    {print} et soudain, tout est devenu noir.
                    {print} Mais comment est-ce que j'ai atterri sur le sol… ?
                    {print} Ma tête me fait mal comme si j'avais pris un coup de batte de baseball !
                    {print} Quel est ce bruit ?
                    {print} Oh non ! J'ai l'impression qu'il n'y a pas que moi dans cette maison !
                    {print} Il faut que je m'échappe d'ici !
                    {print} Il y a 3 portes devant moi…
                    {ask} Quel porte choisis-tu ?
                    {echo} Je choisis la porte
                    {print} … ?
                    ```
                story_text_2: |
                    ### Exercice
                    Copie le code d'exemple dans la zone de programmation en cliquant sur le bouton jaune.
                    Maintenant finis l'histoire en ajoutant au moins 5 lignes de code.
                    Rappelle-toi de commencer chaque ligne de code avec la commande `{print}`.
            2:
                story_text: |
                    Dans cette maison hantée tu peux choisir tes monstres avec des emojis. Bien sûr tu peux aussi utiliser des mots.
                example_code: |
                    ```
                    monstre_1 {is} 👻
                    monstre_2 {is} 🤡
                    monstre_3 {is} 👶
                    {print} Tu entres dans la maison hantée.
                    {print} Soudain, tu vois un monstre_1
                    {print} Tu cours dans une autre pièce…
                    {print} Mais un monstre_2 t'y attend !
                    {print} Oh non ! Sauve-toi dans la cuisine.
                    {print} Mais, alors que tu y entres, monstre_3 t'attaque !
                    ```
                story_text_2: |
                    ### Exercice
                    Dans l'exemple ci-dessus, les monstres sont prédéterminés. Donc, à chaque fois que tu exécutes ton code, l'histoire est la même
                    Peux-tu ajouter la commande `{ask}` pour rendre la maison hantée interactive et permettre au joueur de choisir les montres qu'il rencontre ?
                example_code_2: |
                    ```
                    monstre_1 {is} _
                    monstre_2 {is} _
                    monstre_3 {is} _
                    {print} Tu entres dans la maison hantée.
                    {print} Soudain, tu vois un monstre_1
                    {print} Tu cours dans une autre pièce…
                    {print} Mais un monstre_2 t'y attend !
                    {print} Oh non ! Sauve-toi dans la cuisine.
                    {print} Mais, alors que tu y entres, monstre_3 t'attaque !
                    ```
            3:
                story_text: |
                    Au niveau précédent, nous avons écrit une introduction à ton jeu de maison hantée, mais comme tu l'as peut-être remarqué, l'histoire avait toujours la même fin horrible.
                    À ce niveau, tu peux rendre ton histoire plus interactive en changeant l'issue du jeu ; parfois tu te feras manger, parfois tu réussiras à t'échapper !
                    Laissons Hedy décider aléatoirement !

                    ## Exercice
                    Copie l'exemple de code et rempli les espace vide pour le faire marcher !

                    **Bonus** Cette histoire est assez simple, tu peux peut-être la rendre un peu effrayante en racontant plus de choses.
                    Et aussi, les fins possibles sont pour l'instant très limitées, il n'y a que 3 options possibles pour ce qui est derrière la porte. Peut-être peux-tu ajouter de nouveaux monstres à la liste !
                example_code: |
                    ```
                    _ Comment sortir de la maison hantée ?
                    _ Il y a trois portes devant toi…
                    _ _ _ Quelle porte choisis-tu ?
                    _ Tu as choisi la porte… choix
                    monstres _ un zombie, un vampire, RIEN DU TOUT ET TU T'ÉCHAPPES PAR LA SORTIE
                    _ Tu vois…
                    {sleep}
                    _ _ _ _
                    ```
            4:
                story_text: |
                    Dans ce niveau, tu vas apprendre comment utiliser les guillemets dans tes jeux.

                    ### Exercice
                    Peux-tu écrire ta maison hantée pour le niveau 4 ?

                    ### Exercice 2
                    Reviens au niveau précédent et copie ton code de la maison hantée. Fais fonctionner le code dans ce niveau en ajoutant des guillemets aux bons endroits.
                example_code: |
                    ```
                    _ Ajoute les guillemets à ce code _
                    {print} Echappe toi de la maison hantée !
                    {print} Il y a 3 portes devant toi…
                    choix {is} {ask} Quelle porte choisis-tu ?
                    {print} Tu as choisi la porte… choix
                    monstres {is} un zombie, un vampire, RIEN DU TOUT ET TU T'ÉCHAPPES PAR LA SORTIE
                    {print} Tu vois...
                    {sleep}
                    {print} monstres {at} {random}
                     ```
            5:
                story_text: |
                    Jusqu'à ce niveau, le jeu de la maison hantée demandait au joueur de choisir une porte, mais, comme tu l'as peut-être remarqué, il n'était pas vraiment obligé de répondre correctement.
                    Si le joueur donnait une réponse complètement au hasard, le jeu continuait de fonctionner et le joueur pouvait même gagner (sans même avoir choisi une porte).
                    À ce niveau, tu ne peux gagner qu'en choisissant la même porte que celle choisie par Hedy au hasard.
                example_code: |
                    ```
                    {print} "Échapes toi de la maison hantée !"
                    {print} "Il y a 3 portes devant toi…"
                    portes {is} 1, 2, 3
                    monstre {is} un loup-garou, ta maman, un vampire, un zombie
                    porte_choisie {is} {ask} "Quelle porte choisis-tu ?"
                    {print} "Tu as choisi la porte " porte_choisie
                    {sleep}
                    porte_correcte {is} portes {at} {random}
                    _ _ _ _ {print} "Bravo ! Tu t'échappes"
                    {else} {print} "Tu as été mangé par… " monstre {at} {random}
                    ```
            9:
                story_text: |
                    À ce niveau tu peux utiliser l'imbrication, ce qui te permet de rendre la maison hantée encore plus interactive !

                    ### Exercice
                    Maintenant, c'est vraiment dur de gagner à ce jeu. Pourrais-tu le rendre plus facile à gagner ?
                    Change ton code pour qu'il n'y ai qu'une seule mauvaise porte et deux bonnes plutôt qu'une correcte et deux mauvaises.
                    Indice : il te faudra changer la variable `bonne_porte` en `mauvaise_porte`, et échanger les blocs du `{if}` et du `{else}`.
                example_code: |
                    ```
                    {print} "S'échapper de la maison hantée !"
                    santé = vivant
                    portes = 1, 2, 3
                    monstres = un zombie, un vampire, une araignée géante
                    {repeat} 3 {times}
                        {if} santé {is} vivant
                            bonne_porte {is} portes {at} {random}
                            {print} "Il y a trois portes devant toi…"
                            porte_choisie = {ask} "Quelle porte choisis-tu ?"
                            {if} porte_choisie {is} bonne_porte
                                {print} "Aucun monstre ici !"
                            {else}
                                {print} "Tu est mangé par " monstres {at} {random}
                                santé = mort
                        {else}
                            {print} "GAME OVER"
                    {if} santé {is} vivant
                        {print} "Génial ! tu as survécu"
                    ```
            11:
                story_text: |
                    À ce niveau, nous avons changé la commande `{for}` pour que nous puissions dire au joueur où il est.

                    ### Exercice 1
                    Termine le programme pour que le joueur sache dans quelle pièce il est.

                    ### Exercice 2
                    Transforme le programme en une aventure en suivant ces étapes :

                    1. Fait une liste de choix (comme : combattre, voler ou fuir)
                    2. Affiche le monstre
                    3. Assure-toi que le joueur puisse choisir une option avec `{ask}`
                    4. Est-ce que la réponse est correcte ? Dans ce cas, il peut continuer jusqu'au monstre suivant. Dans l'autre cas, informe le joueur avec un `{print}`.

                    **Bonus** Si tu fais le mauvais choix, le monstre est quand même affiché ! Comment changer ça ?
                example_code: |
                    ```
                    {print} "Échappe-toi de la maison hantée !"
                    monstres = zombie, vampire, araignée géante
                    _
                        {print} "Pièce " i
                        monstre = monstres {at} {random}
                    ```
            14:
                story_text: |
                    ### Exercise
                    In this level you can use the `<` and `>` symbol to introduce lives to your game.
                    Make sure the player loses a life when they come across the wrong monster and that the game stops if you have no lives left.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house'
                    lives = 3
                    doors = 1, 2, 3
                    monsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'
                    {for} i {in} {range} 1 {to} 10
                        {if} lives _
                            good_door = doors {at} {random}
                            monster = monsters {at} {random}
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} good_door == chosen_door
                                {print} 'You have chosen the correct door'
                            {else}
                                {print} 'You see...' monster
                                {if} monster == 'a sleeping 3 headed dog'
                                    {print} 'Pffieuw.... Its asleep'
                                {else}
                                    {print} 'You lose one life'
                                    lives = _
                        {else}
                            {print} 'GAME OVER'
                    ```
            16:
                story_text: |
                    ### Exercise
                    This haunted house game uses the connection between the lists you can use in this level.
                    For example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.
                    Check out the code and fill in  `weapons[i]`, `monsters[i]` , `bad_fate[i]`, `good_fate[i]`, `hint[i]` on the correct blanks to get the code to work!
                example_code: |
                    ```
                    numbers = [1, 2, 3]
                    i = numbers[{random}]
                    hint = ['growling', 'a cackling laugh', 'fluttering batwings']
                    monsters = ['zombie', 'witch', 'vampire']
                    bad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']
                    good_fate = ['You throw the ham. The zombie is distracted and starts eating it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']
                    weapons = ['ham', 'lighter', 'garlic']
                    {print} 'You are standing in front of an old mansion'
                    {print} 'Something is not right here'
                    {print} 'You hear ' _
                    {print} 'You are going to explore it'
                    {print} 'You enter the kitchen and see a lighter, a raw ham and a garlic.'
                    your_weapon = {ask} 'What do you bring with you?'
                    {print} 'With your ' your_weapon ' you enter the living room'
                    {print} 'There you find a ' _
                    needed_weapon = _
                    {if} your_weapon == needed_weapon
                        {print} 'You use your ' your_weapon
                        {print} _
                        {print} 'YOU WIN!'
                    {else}
                        {print} 'You have chosen the wrong weapon...'
                        {print} _
                        {print} 'GAME OVER'
                    ```
    hotel:
        name: hôtel
        default_save_name: hôtel
        description: hôtel
        levels:
            13:
                story_text: |
                    Dans l'aventure précédente, vous avez appris à utiliser un argument dans une fonction et à le combiner avec un {ask}.
                    Vous vous êtes peut-être demandé pourquoi vous utiliseriez des fonctions, car les fonctions de l'exemple ne représentaient qu'une seule ligne de code.
                    Nous allons maintenant vous montrer à quoi ressemble une fonction plus grande et nous utiliserons également plusieurs arguments. Vous verrez à quel point il est préférable d’utiliser une fonction une fois qu’elle devient plus grande.
                    Voici un exemple de fonction avec des arguments combinés avec des commandes {ask}.
                example_code: |
                    ```
                    {define} welcome_message {with} title, last_name, country, room_number
                        {print} 'Welcome to Hotel Hedy, ' title ' ' last_name
                        nice_trip {is} {ask} 'Did you have a nice trip from, ' country '?'
                        {if} nice_trip {is} 'yes'
                            {print} 'Lovely!'
                        {else}
                            {print} 'Sorry to hear that.'
                            {print} 'Hopefully you can take a nice rest in you room.'
                        {print} 'Your room number is ' room_number

                    {print} 'Hello. Please fill in your information to check in.'
                    title = {ask} 'What is your title (mr, mrs, ms, dr, etc.)?'
                    name = {ask} 'What is you last name?'
                    homecountry = {ask} 'What country do you come from?'

                    {call} welcome_message {with} title, name, homecountry, 105
                    ```

                    title = {ask} 'What is your title (mr, mrs, ms, dr, etc.)?'
                    name = {ask} 'What is you last name?'
                    homecountry = {ask} 'What country do you come from?'

                    {call} welcome_message {with} title, name, homecountry, 105
    if_command:
        name: '{if} & {else}'
        default_save_name: if_command
        description: Introduction à la commande `{if}`
        levels:
            5:
                story_text: |
                    ## Si… sinon…
                    Au niveau 5 il y a quelque chose de nouveau, le `{if}` ! Avec le `{if}` tu peux choisir entre deux options différentes.
                    Ce code écrit « bien » si tu réponds « Hedy » comme nom, et « bouuu ! » si tu réponds quelque chose d'autre.
                    `{ask}` et `{print}` continuent de fonctionner de la même manière qu'au niveau 4.
                example_code: |
                    ```
                    nom {is} {ask} "Quel est ton nom ?"
                    {if} nom {is} Hedy {print} "bien" {else} {print} "bouu !"
                    ```
                story_text_2: |
                    Parfois, le code avec un `{if}` devient vraiment long et ne tient plus très bien sur la ligne.
                    Tu peux écrire le code sur deux lignes en commençant la seconde ligne avec le `{else}` comme ceci :
                example_code_2: |
                    ```
                    nom {is} {ask} "Quel est ton nom ?"
                    {if} nom {is} Hedy {print} "bien"
                    {else} {print} "bouuu !"
                    ```
                story_text_3: |
                    ### Exercice
                    Essaye de créer ton propre code avec `{if}` et `{else}`. Tu peux utiliser l'exemple de code si tu veux.
                example_code_3: |
                    ```
                    réponse {is} {ask} "2 + 2 = ?"
                    _ _ _ 4 _ "Bon travail !"
                    _ _ "Non, 2 + 2 = 4"
                    ```
            8:
                story_text: |
                    ## Si… Sinon…
                    Tu as appris à répéter un bloc de ligne de code après une commande `{repeat}`.
                    Maintenant, tu peux aussi utiliser l'indentation pour faire un bloc après une commande `{if}` ou `{else}`.
                    Regarde l'exemple de code.

                    ### Exercice
                    Ajoute une commande `{else}` à l'exemple. Fait un bloc de lignes en utilisant l'indentation. Tu le fais en commençant chaque ligne par 4 espaces.
                example_code: |
                    ```
                    nom = {ask} "Quel est ton nom ?"
                    {if} nom {is} Hedy
                        {print} "Bienvenue Hedy"
                        {print} "Tu peux jouer sur ton ordinateur !"
                    ```
            9:
                story_text: |
                    Dans ce niveau, tu peux aussi mettre une commande `{if}` à l'intérieur d'une autre commande `{if}`.
                example_code: |
                    ```
                    continuer = {ask} "Veux-tu continuer ?"
                    {if} continuer = oui
                        sûr = {ask} "Es-tu sûr ?"
                        {if} sûr {is} oui
                            {print} "Nous allons continuer"
                        {else}
                            {print} "Tu n'es pas sûr"
                    {else}
                        {print} "Tu ne veux pas continuer"
                    ```
    in_command:
        name: '{in}'
        default_save_name: in_command
        description: Introduction de la commande `{in}`
        levels:
            5:
                story_text: |
                    ## Listes
                    Quand nous voulons vérifier si quelque chose est dans une liste, nous pouvons maintenant utiliser la commande `{in}`.
                    Ce code écrit « joli ! » si tu choisis vert ou jaune, et « bof » sinon.
                example_code: |
                    ```
                    jolies_couleurs {is} vert, jaune
                    couleur_préférée {is} {ask} "Quelle est ta couleur préférée ?"
                    {if} couleur_préférée {in} jolies_couleurs {print} "jolie !"
                    {else} {print} "bof"
                    ```
                story_text_2: |
                    ### Exercice
                    Termine l'exemple de code en remplissant les espace vides avec les commandes que tu as apprises.
                    Quand tu auras fini, essaye de créer ton propre code et utilise une question que tu auras trouvée toi-même.
                example_code_2: |
                    ```
                    animaux {is} chien, vache, mouton
                    réponse {is} {ask} "Quel est ton animal préféré ?"
                    _ réponse _ animaux _ "c'est aussi le mien !"
                    _ _ "mes animaux préférés sont chien, vache et mouton"
                    ```

                    couleur_préférée {is} {ask} "Quelle est ta couleur préférée ?"
                    {if} couleur_préférée {in} jolies_couleurs {print} "jolie !"
                    {else} {print} "bof"
    is_command:
        name: '{is}'
        default_save_name: command_est
        description: Introduction de la commande {is}
        levels:
            2:
                story_text: |
                    ## Les variables
                    Tu peux donner une valeur à un mot avec `{is}`. C'est ce que l'on appelle une **variable**. Dans cet exemple, nous avons défini une variable qui s'appelle « nom » et une variable qui s'appelle « âge ». Tu peux utiliser le mot « nom » n'importe où dans ton code et il sera remplacé par « Hedy », comme ceci :
                example_code: |
                    ```
                    nom {is} Hedy
                    âge {is} 15
                    {print} nom a âge ans
                    ```
                story_text_2: |
                    ### Exercice
                    Il est temps de faire tes propres variables !
                    Dans le code d'exemple, nous avons défini la variable `animal_préféré`. En ligne 1, la variable reçoit une valeur, et en ligne 2 nous avons utilisé la variable dans une commande `{print}`.
                    Pour commencer, termine notre exemple en remplissant l'espace vide avec le nom de ton animal préféré. Ensuite, essaye d'écrire 3 autres codes toi-même. Choisi un nom de variable, donne-lui une valeur avec la commande `{is}`. Ensuite, utilise ta nouvelle variable dans une commande `{print}`, comme dans l'exemple.
                example_code_2: |
                    ```
                    animal_préféré {is} _
                    {print} J'aime les animal_préféré
                    ```
            6:
                story_text: |
                    Nous avons aussi un changement pour l'enregistrement dans une variable ! Tu peux maintenant utiliser `=` à la place de `{is}` quand tu enregistres un mot ou nombre dans une variable, comme ceci :
                example_code: |
                    ```
                    nom = Hedy
                    réponse = 20 + 4
                    ```
            14:
                story_text: |
                    Nous allons apprendre d'autres nouveaux éléments. Tu les connais peut-être déjà grâce aux mathématiques, le `<` et `>`.
                    Le `<` vérifie si le premier nombre est plus petit que le second, par exemple, âge `<` 1` vérifie si âge est plus petit que 12.
                    Si tu veux vérifier que le premier nombre est plus petit ou égal au second, tu peux utiliser `<=`. Par exemple âge `<=` 11.
                    Le `>` vérifie si le premier nombre est plus grand que le second, par exemple, points `>` 10 vérifie si points est plus grand que 10.
                    Si tu veux vérifier si le premier nombre est plus grand ou égal au second, tu peux utiliser `>=`. Par exemple points `>=` 11.
                    Ces comparaisons s'utilisent avec `{if}`, comme ceci :
                example_code: |
                    ```
                    âge = {ask} "Quel âge as-tu ?"
                    {if} âge > 12
                         {print} "Tu es plus agé que moi !"
                    ```
                story_text_2: |
                    A parti de ce niveau et pour les suivants, si tu veux comparer l'égalité, tu dois utiliser deux fois le signe égale. C'est ainsi que font la plupart des langages de programmation.
                example_code_2: |
                    ```
                    nom = {ask} "Quel est ton nom ?"
                    {if} nom == "Hedy"
                        {print} "Tu es cool !"
                    ```
                story_text_3: |
                    Tu peux aussi comparer si une chose n'est *pas* égale à une autre chose en utilisant `!=` comme ceci :
                example_code_3: |
                    ```
                    nom = {ask} "Quel est ton nom ?"
                    {if} nom != "Hedy"
                        {print} "Tu n'es pas Hedy"
                    ```
    language:
        name: Langage
        default_save_name: Language
        description: Pratique des mots dans une langue étrangère
        levels:
            5:
                story_text: |
                    Fait ton propre programme pour t'entraîner à apprendre des mots dans nouvelle langue.

                    ## Exercice
                    Écrit un code plus long en ajourant au moins 3 autres mots à apprendre.

                    **Bonus** Bien sûr, tu peux choisir d'utiliser un autre langage que l'anglais. Tu peux changer ton code pour apprendre le langage que tu veux.
                example_code: |
                    ```
                    {print} "Apprendre l'anglais !"
                    réponse1 {is} {ask} "🐱"
                    {if} réponse1 {is} cat {print} "Formidable !"
                    {else} {print} "Non, chat se dit cat"
                    réponse2 {is} {ask} "🐸"
                    {if} réponse2 {is} frog {print} "Super !"
                    {else} {print} "Non, grenouille se dit frog"
                    ```
            16:
                story_text: |
                    ### Exercise
                    Take a look at the example code. This is a program to practise French vocabulary. Now make your own program to practice your vocabulary in a new language.
                    If you don't know any other languages, you can use Google translate or you can use emojis and your native language.
                example_code: |
                    ```
                    french_words = ['bonjour', 'ordinateur', 'pomme de terre']
                    translation = ['hello', 'computer', 'potato']
                    score = 0
                    {for} i {in} {range} 1 {to} 3
                        answer = {ask} 'What does ' french_words[i] ' mean?'
                        correct = translation[i]
                        {if} answer == correct
                            {print} 'Correct!'
                            score = score + 1
                        {else}
                            {print} 'Wrong, ' french_words[i] ' means ' translation[i]
                    {print} 'You gave ' score ' correct answers.'
                    ```
    maths:
        name: maths
        default_save_name: maths
        description: Introduction des maths
        levels:
            6:
                story_text: |
                    In this level you learn something new: you can now also calculate.

                    The plus is easy, you write it like with math: `5 + 5` for example. The minus also works fine, it is `5 - 5`.

                    The times is a bit different, because there is no times symbol on your keyboard. Just search, there really isn't!
                    That is why we multiply with the asterisk above 8: `5 * 5`. Read that as "5 times 5" that helps you remember it best.
                example_code: |
                    ```
                    {print} "5 plus 5 fait " 5 + 5
                    {print} "5 moins 5 fait " 5 - 5
                    {print} "5 fois 5 fait " 5 * 5
                    {print} "5 divisé par 5 fait " 5 / 5
                    ```
            12:
                story_text: |-
                    **Nombres décimaux**
                    Jusqu'à présent, Hedy ne te permettait pas d'utiliser les nombres décimaux comme 1.5, mais maintenant nous les autorisons. Attention, les langages de programmation utilisent le point `.` pour les nombres décimaux et non la virgule.
                example_code: |
                    ```
                    {print} "Deux et demi plus deux et demi font…"
                    {print} 2.5 + 2.5
                    ```
                story_text_2: |-
                    **Les maths avec des mots**
                    À ce niveau, tu peux aussi additionner les mots comme ceci :
                example_code_2: |
                    ```
                    a = "Salut "
                    b = "le monde !"
                    {print} a + b
                    ```
    music:
        name: musique
        default_save_name: musique
        description: Jouez un morceau !
        levels:
            1:
                story_text: |-
                    In this level you'll learn how to use the `{play}` command to play a tune!

                    Type `{play}` followed by the note you want to play. The scale goes C-D-E-F-G-A-B.
                    As you can see there are 7 different letters, but we can play more than just 7 notes.
                    Type a number between 1 and 10 behind the letter to choose the scale, for example after B4 comes C5.
                    C1 is the lowest note you can play, C10 is the highest.

                    ### Exercise
                    Try out the example code and then play around with it! Can you create your own melody?
                    In the next level you'll learn how to play some existing songs.
                example_code: |-
                    ```
                    {play} C4
                    {play} D4
                    {play} E4
                    {play} F4
                    {play} G4
                    {play} A4
                    {play} B4
                    {play} C5
                    ```
            2:
                story_text: |
                    ### Exercise
                    Terminez les chansons ! Nous avons commencé les codes pour certaines mélodies.
                example_code: |
                    ```
                    {print} Old Mac Donald had a farm
                    {play} C5
                    {play} C5
                    {play} C5
                    {play} G4
                    {play} A4
                    {play} A4
                    {play} G4
                    ```
                story_text_2: Comme vous pouvez le voir, vous pouvez également utiliser la commande `{sleep}` pour ajouter une petite pause dans la chanson.
                example_code_2: |
                    ```
                    {print} Twinkle Twinkle Little Star
                    {play} C
                    {play} C
                    {play} G
                    {play} G
                    {play} A
                    {play} A
                    {play} G
                    {sleep} 1
                    {play} F
                    {play} F
                    ```
            3:
                story_text: |
                    Créez une mélodie aléatoire !

                    ### Exercice
                    L'exemple de code crée une mélodie aléatoire, mais elle est très courte et peu de notes sont utilisées.
                    Ajoutez plus de notes à la liste et créez une mélodie plus longue en copiant la dernière ligne plusieurs fois.
                example_code: |
                    ```
                    notes {is} A4, B4, C4
                    {play} notes {at} {random}
                    {play} notes {at} {random}
                    {play} notes {at} {random}
                    ```
            4:
                story_text: |
                    Use the `{clear}` command to create a karaoke machine!

                    ### Exercise
                    Finish the karaoke version of 'Mary had a little lamb'.
                    Then, create a karaoke version of any song you'd like!
                example_code: |
                    ```
                    {print} 'Mary had a little lamb'
                    {play} E
                    {play} D
                    {play} C
                    {play} D
                    {play} E
                    {play} E
                    {play} E
                    {clear}
                    {print} 'Little lamb, little lamb'
                    {play} D
                    {play} D
                    {play} D
                    {play} E
                    {play} E
                    {play} E
                    {clear}
                    {print} 'Mary had a little lamb'
                    {play} E
                    ```
            5:
                story_text: |
                    You don't always have to use the `{play}` command to play a whole song, sometimes you just want to play one note.
                    For example, if you want to make a quiz, you can play a happy high note if the answer is right and a sad low note if the answer is wrong.

                    ### Exercise
                    Finish the first question by adding a line of code that plays a C3 note if the wrong answer is given.
                    Then think of 3 more questions to add to this quiz.
                example_code: |
                    ```
                    answer {is} {ask} 'What is the capital of Zimbabwe?'
                    {if} answer {is} Harare {play} C6
                    _
                    ```
            6:
                story_text: "Instead of playing notes, you can also play numbers now. Simply type `{play} 1` for the lowest note, `{play} 70` for the highest note, or anything in between.\n\n### Exercise\n This calls for musical maths! Try out the example code a couple of times with different starting numbers. \nThen, see if you can compose a song using the numbers.\n"
                example_code: |
                    ```
                    number = {ask} 'Say a starting number between 1 and 67'
                    {print} number
                    {play} number
                    number = number + 1
                    {print} number
                    {play} number
                    number = number + 1
                    {print} number
                    {play} number
                    ```
            7:
                story_text: |
                    Using the `{repeat}` command can make your codes for melodies a lot shorter!

                    ### Exercise
                    Finish the code for Twinkle Twinkle Little Star by using the `{repeat}`command.
                    Then go back to the songs you've made in the previous levels. Can you shorten those codes too?
                example_code: |
                    ```
                    {print} 'Twinkle Twinkle Little Star'
                    {repeat} 2 {times} {play} C4
                    {repeat} 2 {times} {play} G4
                    _
                    ```
            8:
                story_text: |
                    Now that we can use the `{repeat}` command for multiple lines, we can make songs even more easily!

                    ### Exercise
                    Finish the song of Brother John (Frère Jacques). Don't forget to use `{repeat}`!
                example_code: |
                    ```
                    {print} 'Brother John'
                    {repeat} 2 {times}
                        {play} C
                        {play} D
                        {play} E
                        {play} C
                    {repeat} 2 {times}
                        {play} E
                        {play} F
                        {play} G
                        {sleep} 1
                    ```
            9:
                story_text: |
                    From this level on you can - among other things - use a {repeat} command inside a {repeat} command.
                    That makes songs like 'Happy birthday' even shorter!

                    ### Exercise
                    Finish the song!
                example_code: |
                    ```
                    first_time = yes
                    {repeat} 2 {times}
                        {repeat} 2 {times}
                            {play} C
                        {play} D
                        {play} C
                        {if} first_time {is} yes
                            {play} F
                            {play} E
                            first_time {is} no
                        {else}
                            _
                    ```
            12:
                story_text: |
                    Use functions in your songs! As you can see in the example code, you can make a function for each line of Twinkle Twinkle Little Star. Once you've programmed the first three lines, all you have to do is call the functions in the order you want them played in.

                    ### Exercise
                    Finish the song of Twinkle Twinkle Little Star.
                    Then look back at all the songs you've programmed in the levels before, can you make those codes better and shorter using functions too?
                example_code: |
                    ```
                    {define} first_line
                        {play} C
                        {play} C
                        {play} G
                        {play} G
                        {play} A
                        {play} A
                        {play} G
                        {sleep}

                    {define} second_line
                        {play} F
                        {play} F
                        {play} E
                        {play} E
                        {play} D
                        {play} D
                        {play} C
                        {sleep}

                    {define} third_line
                        {play} G
                        {play} G
                        {play} F
                        {play} F
                        {play} E
                        {play} E
                        {play} D
                        {sleep}

                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    ```
            13:
                story_text: |
                    You can use a function with an argument for songs that have line that are almost the same, but slightly different each time.
                    One example is the song 'Yankee Doodle'. The first 4 notes of the first lines are the same, but each time they are followed by a different couple of notes.

                    ### Exercise
                    Can you finish the song of Yankee Doodle?
                    Can you think of another song to program this way?
                example_code: |
                    ```
                    {print} 'Yankee Doodle'
                    {define} _ {with} note_1, note_2, note_3
                        {play} C4
                        {play} C4
                        {play} D4
                        {play} E4
                        {play} _
                        {play} _
                        {play} _

                    {call} line_1 {with} 29, 31, 30
                    {call} line_1 {with} 29, 28, 0
                    {call} line_1 {with} 32, 31, 30

                    {play} C4
                    {play} B3
                    {play} G3
                    {play} A3
                    {play} B3
                    {play} C4
                    {play} C4
                    ```
            14:
                story_text: |
                    You can program music for fun, but you can also use the musical notes to make something useful like a fire alarm!

                    ### Exercise
                    Make sure the fire alarm rings when there is a fire!
                example_code: |
                    ```
                    {define} fire_alarm
                        {print} 'FIRE!'
                        note = 40
                        {for} i {in} {range} 1 {to} 100
                            {if} note _ 50
                                note = note + 5
                                {play} _
                            {else}
                                note = 40

                    fire = {ask} 'Is there a fire?'
                    {if} fire _ 'yes'
                        {call} fire_alarm
                    ```
            15:
                story_text: |
                    **Warning** This adventure can become extremely annoying!
                    We can also use the {while} command to repeat a song forever.

                    ### Exercise
                    Finish the never-ending song.
                example_code: |
                    ```
                    {define} song
                        {play} _

                    yes_or_no = {ask} 'Do you want to hear my never-ending song?'
                    {while} yes_or_no = 'yes'
                        {call} song
                        {print} '🥳'
                    ```
            16:
                story_text: |
                    Upgrade your Old MacDonald code!

                    ### Exercise
                    Take your code from the 'Sing a Song' adventure and add musical notes to it!
                    You can make a function for each line in the song and call that function after the line is printed.
                    We defined the first line for you and called it in the code. Can you finish the whole song?
                example_code: |
                    ```
                    {define} line_1
                        {for} i {in} {range} 1 {to} 3
                            {play} G
                        {play} D
                        {for} i {in} {range} 1 {to} 2
                            {play} E
                        {play} D

                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    for i in range 1 to 3
                        animal = animals[i]
                        sound = sounds[i]
                        print 'Old MacDonald had a farm'
                        call line_1
                        print 'E I E I O!'
                        _
                    ```
            17:
                story_text: |
                    You can use the {elif} to create different options.

                    ### Exercise
                    Firstly, add colons to get the code to work.
                    Then finish this code by adding at least 2 other songs for other moods. For example a happy song and an angry song.
                example_code: |
                    ```
                    {define} scary_song
                        {for} i {in} {range} 1 {to} 3
                            {play} G
                        {play} E
                        {sleep} 2
                        {for} i {in} {range} 1 {to} 3
                            {play} F
                        {play} D

                    mood = {ask} 'Which emotion are you feeling?'
                    {if} mood {is} 'fear'
                        {call} scary_song
                    {elif} _
                    ```
            18:
                story_text: |
                    ### Exercise
                    Even in this last level of Hedy we can make some music! Be careful of all the syntax that is needed now.
                    Take a good look at how the functions are defined and called upon in the example code.
                    Finish the song!
                example_code: |
                    ```
                    {def} line_1():
                        {for} i {in} {range}(1, 5):
                            {play} A
                        {play} D
                        {play} F
                        {play} A

                    {def} line_2():
                        {for} i {in} {range}(1, 5):
                            {play} G
                        {play} C
                        {play} E
                        {play} G

                    {def} line_3():
                    _

                    {print} ('The drunken sailor')
                    {print} ('What shall we do with the drunken sailor?')
                    line_1()
                    line_2()
                    line_3()
                    {print} ('Early in the morning')
                    ```
    parrot:
        name: Perroquet
        default_save_name: Perroquet
        description: Crée ton propre perroquet en ligne qui te copiera !
        levels:
            1:
                story_text: |
                    Crée ton propre perroquet en ligne qui te copiera !
                example_code: |
                    ```
                    {print} Je suis Hedy le perroquet
                    {ask} quel est ton nom ?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### Exercice
                    Copie l'exemple de code dans la zone de programmation en cliquant sur le bouton jaune.
                    Fais poser au perroquet une question différente en écrivant quelque chose dans l'espace vide de l'exemple !

                    **Bonus** Tu peux aussi faire poser plusieurs questions au perroquet. Écris plusieurs autres lignes de code à la suite de ce que tu as déjà écrit.
                example_code_2: |
                    ```
                    {print} Je suis Hedy le perroquet
                    {ask} _
                    {echo}
                    {echo}
            2:
                story_text: |
                    Au niveau précédent, tu as fait un perroquet qui te répétait. À ce niveau, nous allons faire un perroquet interactif, en utilisant une variable et la commande `{ask}`.
                    Nous allons aussi rendre le perroquet plus vivant en ajoutant des commandes `{sleep}` après les choses qu'il dit.
                example_code: |
                    ```
                    {print} Je suis Hedy le perroquet
                    nom _ _ Quel est ton nom ?
                    {print} nom
                    _
                    {print} coco
                    _
                    {print} nom
                    ```
                story_text_2: |
                    ### Exercice
                    Pour commencer, termine la ligne 2 avec une commande `{is}` et une commande `{ask}`.
                    Ensuite, écrit une commande `{sleep}` aux lignes 4 et 6 pour que le perroquet se calme un petit peu.

                    **Bonus** Peux-tu faire que le perroquet demande plus que ton nom, en ajoutant des lignes de code ?
            3:
                story_text: |
                    Apprend à ton perroquet un nouveau mot avec `{add} {to_list}`.
                    ### Exercice
                    Peux-tu ajouter la commande `{add} {to_list}` pour faire marcher le code ?
                example_code: |
                    ```
                    mots {is} coco, Hedy
                    {print} Entraine ton perroquet !
                    nouveau_mot {is} {ask} Quel mot veux-tu lui apprendre ?
                    _ nouveau_mot _ mots
                    {print} 🧒 Dit nouveau_mot, Hedy !
                    {print} 🦜 mots {at} {random}
                    ```
            4:
                story_text: |
                    À ce niveau nous devons utiliser les guillemets avec les commandes `{ask}` et `{print}`.
                    ### Exercice
                    Complète le code en remplaçant les blancs par des guillemets.
                example_code: |
                    ```
                    mots {is} coco, Hedy
                    {print} _ Entraîne ton perroquet ! _
                    nouveau_mot {is} {ask} _ Quel mot souhaites-tu apprendre au perroquet ? _
                    {add} nouveau_mot {to_list} mots
                    {print} _ 🧒 Dis _ nouveau_mot _, Hedy !_
                    {print} _ 🦜 _ mots {at} {random}
                    ```
            5:
                story_text: |
                    Récompense ton perroquet s'il dit le bon mot !

                    ### Exercice
                    Termine le code en écrivant les 4 commandes qui manquent.
                example_code: |
                    ```
                    mots {is} coco, Hedy
                    {print} "Entraîne ton perroquet !"
                    nouveau_mot {is} {ask} "Quel mot veux-tu lui apprendre ?"
                    {add} nouveau_mot {to_list} mots
                    mot_dit {is} mots {at} {random}
                    {print} "🧒 Dis " nouveau_mot ", Hedy !"
                    {print} "🦜 " mot_dit
                    _ mot_dit {is} nouveau_mot _ "🧒 Bien joué, Hedy ! 🍪"
                    _ _ "🧒 Non, Hedy ! Dis " nouveau_mot
                    ```
    piggybank:
        name: Tirelire
        default_save_name: Tirelire
        description: Compte ton argent de poche !
        levels:
            12:
                story_text: |
                    Dans cette aventure, tu apprendras comment faire une tirelire numérique.

                    ### Exercice
                    Termine le code pour calculer combien d'argent, tu as et pendant combien de temps tu dois économiser pour t'acheter ce que tu veux !
                    Quand tu réponds aux questions, souviens-toi d'utiliser un point et non une virgule pour les nombres décimaux.
                    **Bonus** Peut-être as-tu déjà économisé un peu d'argent ? Déduis-le du montant total que tu devras économiser.
                example_code: |
                    ```
                    {print} "La tirelire numérique"
                    souhait = {ask} "Que veux-tu acheter ?"
                    prix = {ask} "Combien ça coûte ?"
                    économisé = {ask} "Combien d'argent as-tu déjà économisé ?"
                    argent_de_poche = {ask} "Combien d'argent de poche reçois-tu par semaine ?"
                    à_économiser = prix - économisé
                    nombre_semaines = à_économiser / argent_de_poche
                    {print} "Tu pourras acheter " _ " dans " _ " semaines."
                    ```
            14:
                story_text: |
                    ### Exercise
                    In this level you can let Hedy tell you if you have saved up enough money!
                    Finish this code by filling in the blanks!
                example_code: |
                    ```
                    _ calculate_budget with wish, money, allowance
                        to_save = wish - money
                        weeks = to_save / allowance
                        {if} wish _ money
                            {print} 'You need to save up some more!'
                            {print} 'Youll need ' weeks ' more weeks.'
                        {else}
                            {print} 'Great! You have enough'
                            {print} 'Lets go shopping!'

                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'

                    {call} calculate_budget with _, _, _
                    ```
    pressit:
        name: Presse une touche
        default_save_name: Pressed
        description: Try linking a keyboard key to a command!
        levels:
            5:
                story_text: |
                    À ce niveau il y a un nouveau mot clé : `{pressed}` !
                    Avec `{pressed}` tu peux utiliser des touches de ton clavier pour contrôler quelles lignes sont jouées.

                    ### Exercice
                    Regarde l'exemple et ajoute une ligne de code de plus qui réagit à une touche.
                example_code: |
                    ```
                    {print} "Voulez-vous une bonne (b) ou une mauvaise (m) fin ?"
                    {if} b {is} {pressed} {print} "Ils vécurent heureux et eurent beaucoup d'enfants ❤️"
                    {else} {print} "Le prince fut mangé par un hippopotame 😭"
                    ```
                story_text_2: |
                    Tu peux aussi associer les commande de la tortue à des touches.

                    ### Exercice
                    Copie les lignes plusieurs fois pour créer une image plus grande.
                example_code_2: |
                    ```
                    {if} y {is} {pressed} {forward} 15
                    {else} {turn} 90
                    ```
            7:
                story_text: |
                    Maintenant que tu sais tout sur le `{repeat}`, nous pouvons appuyer sur les touches plusieurs fois.

                    ### Exercice
                    Le code que tu as vu au niveau 5 ne détecte la touche qu'une seule fois. Copie l'exemple et ajoute-lui un `{repeat}` pour que tu puisses appuyer sur les touches plusieurs fois.
                example_code: |
                    ```
                    {if} x {is} {pressed} {forward} 15 {else} {turn} 90
                    ```
            9:
                story_text: |
                    Maintenant que tu sais comment combiner les éléments, tu peux créer un jeu tactile avec `{pressed}`.

                    ### Exercice
                    Termine le code. À chaque fois, une lettre doit être choisie au hasard, qu'il faut appuyer. Tu gagnes un point par bonne réponse, mais deux points sont retirés si tu te trompes.
                    **Bonus** Efface l'écran après chaque lettre, et affiche le score à la fin.
                example_code: |
                    ```
                    points = 0
                    lettre = a, b, c, d, e
                    {repeat} 10 {times}
                        lettre = _ _ _
                        {print} "Presse la touche " letter
                        {if} lettre {is} {pressed}
                        _
                        _
                        _
                    ```
    print_command:
        name: '{print}'
        default_save_name: affiche
        description: Introduction à la commande affiche
        levels:
            1:
                story_text: |
                    ## La commande d'affichage
                    Tu peux afficher du texte à l'écran en utilisant la commande `{print}`.
                example_code: |
                    ```
                    {print} Salut à toi, programmeur/programmeuse !
                    {print} Bienvenue chez Hedy !
                    ```
                story_text_2: |
                    ### Exercice
                    Dans Hedy tu as des exercices pour chaque aventure. Un exercice te permet de t'entraîner aux nouvelles commandes et concepts, et te permet de jouer avec les codes d'exemple.
                    Dans cet exercice, tu verras un espace vide rose. Tu dois écrire quelque chose à la place de cet espace vide pour que ton code fonctionne.

                    Complète l'espace vide en écrivant la commande `{print}` et ajoute cinq autres lignes de code. Chaque ligne doit commencer par la commande `{print}`.
                    Amuse-toi !
                example_code_2: |
                    ```
                    _ Salut !
                    ```
            18:
                story_text: |-
                    Nous sommes arrivés à du code Python réel ! Cela signifie qu'à partir de maintenant, nous devons utiliser les parenthèses avec `{print}` et `{range}`
                    Cela signifie aussi que tu peux utiliser le code Hedy de ce niveau dans n'importe quel environnement Python du moment que tu utilises les commandes en anglais. Si tu ne l'as pas encore fait, tu peux basculer en anglais dans le menu des commandes.
                example_code: |
                    ```
                    {print}('Salut !')
                    {for} i {in} {range}(1, 10):
                        {print}('Ceci est la ligne ', i)
                    ```
                story_text_2: Si tu veux afficher plus d'un élément, tu dois les séparer par une virgule.
                example_code_2: |
                    ```
                    temperature = 25
                    {print}("Il fait ", temperature, " degrés dehors")
                    ```
    quizmaster:
        name: Quizmaster
        default_save_name: Quizmaster
        description: Make your own quiz!
        levels:
            14:
                story_text: |
                    ### Exercise
                    In this adventure you can make your own quiz! Fill in the blanks, add more questions and enjoy your own quiz!
                    You can make a quiz about anything you like: your hobby, your favorite animal, your favorite book or anything at all!
                example_code: |
                    ```
                    {print} 'Make your own quiz'
                    points_a = 0
                    points_b = 0
                    {print} 'Question'
                    {print} 'Answer option A'
                    {print} 'Answer option B'
                    answer = {ask} 'Which answer?'
                    {if} answer == 'A'
                        points_a = points_a + 1
                    {if} answer == 'B'
                        points_b = points_b + 1
                    {print} 'End of the quiz!'
                    {print} 'Lets see the results!'
                    {if} points_a > points_b
                        {print} 'You belong to the A club'
                    {if} points_b > points_a
                        {print} 'You belong to the B club'
                    ```
    quotation_marks:
        name: '"Les guillemets"'
        default_save_name: quotation_marks
        description: Introduction des guillemets
        levels:
            4:
                story_text: |
                    ## "Les guillemets"
                    Au niveau 4 `{ask}` et `{print}` ont changé.
                    Tu dois mettre le texte que tu veux afficher entre des guillemets.
                    C'est utile, parce que tu peux maintenant afficher tous les mots que tu veux. Même les mots que tu as utilisés pour mémoriser des choses avec `{is}`.
                    La plupart des langages de programmation utilisent aussi des guillemets pour afficher, donc on s'approche un peu plus de la vraie programmation !
                example_code: |
                    ```
                    {print} "Tu as besoins d'utiliser les guillemets à partir de maintenant !"
                    réponse {is} {ask} "Qu'avons nous besoins d'utiliser à partir de maintenant ?"
                    {print} "Nous avons besoins d'utiliser " réponse
                    ```
                story_text_2: |
                    ## Apostrophes
                    Important ! Hedy accepte que tu utilises les guillemets ou les apostrophes pour entourer tes textes. En anglais, on utilise généralement les apostrophes car cela ne pose pas trop de problème, mais en français, cela pose un problème avec, par exemple, « aujourd'hui » ou « s'il vous plait »

                    Astuce : Nous te recommandons d'utiliser les guillemets qui fonctionnent bien dans la plupart des cas.

                    L'exemple montre le problème si tu entoures ton texte avec les apostrophes. Peux-tu le corriger en remplaçant par des guillemets ?
                example_code_2: |
                    ```
                    {print} _ Voici comment ça ne marche pas avec les apostrophes : _
                    {print} 'aujourd'hui je fais du babysitting avec les enfants de ma sœur'
                    {print} 'qu'y a-t-il de plus amusant que ça ?'
                    ```
            12:
                story_text: |
                    **Tous les textes doivent être entre guillemets**
                    À partir de ce niveau, tu devras utiliser les guillemets quand tu enregistres un texte avec `=` :
                example_code: |
                    ```
                    nom = "Hedy le robot"
                    {print} "Bonjour " nom
                    ```
                story_text_2: |
                    **Tous les éléments des listes ont aussi besoins des guillemets**
                    Les listes, c'est du texte ! Donc, elles ont aussi besoins des guillemets. Attention que chaque élément de la liste à besoins de ses guillemets individuellement.
                    Cela te permet d'avoir un élément de deux mots dans une liste. Par exemple "Black Widow".
                example_code_2: |
                    ```
                    superhéros = "Spiderman", "Batman", "Black Widow"
                    {print} superhéros {at} {random}
                    ```
                story_text_3: |
                    **Tout texte dans la comparaison d'un `{if}` a besoins de guillemets**
                example_code_3: |
                    ```
                    nom = {ask} "Quel est ton nom ?"
                    {if} nom = "Hedy le robot"
                        {print} "Salut !"
                    ```
                story_text_4: |
                    **Les nombres n'ont pas besoins de guillemets**
                    Pour les nombres, tu ne dois pas utiliser les guillemets avec `=` :
                example_code_4: |
                    ```
                    score = 25
                    {print} "Tu as eu " score " points"
                    ```
    random_command:
        name: '{random}'
        default_save_name: random_command
        description: Introduction de la commande `{at} {random}`
        levels:
            3:
                story_text: |
                    ## Au hasard
                    À ce niveau, tu peux créer une liste avec la commande `{is}`. Tu peux laisser l'ordinateur choisir un élément au hasard dans cette liste. Tu fais ça avec `{at} {random}`
                example_code: |
                    ```
                    animaux {is} chien, chat, kangourou
                    {print} animaux {at} {random}
                    ```
                story_text_2: |
                    Tu peux aussi utiliser la commande `{at} {random}` dans une phrase.
                example_code_2: |
                    ```
                    nouriture {is} part de tarte, part de pizza, salade, crêpe
                    {print} Je vais prendre une nouriture {at} {random} pour le déjeuner.
                    ```
                story_text_3: |
                    ### Exercice
                    Essaie la commande `{at} {random}` en faisant ton propre jeu concours (comme à la télé) où tu choisis une porte ou une valise qui peut contenir le gros lot !
                    Sauras-tu le faire ? Nous avons déjà écrit les premières lignes dans le code d'exemple.
                example_code_3: |
                    ```
                    {print} Le grand jeu concours !
                    {print} Voyez ces 3 valises devant vous…
                    choix {is} {ask} Quelle valise choisissez-vous ?
                    les_prix {is} _
                    _
                    ```
            16:
                story_text: |-
                    We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
                    We use square brackets to point out a place in a list. For example: `friends[1]` is the first name on the list of friends, as you can see in the first part of the example code.
                    The second part of the example code shows you that we can also match 2 lists using the variable i.
                example_code: |
                    ```
                    friends = ['Ahmed', 'Ben', 'Cayden']
                    {print} friends[1] ' is the first friend on the list.'
                    {print} friends[2] ' is the second friend on the list.'
                    {print} friends[3] ' is the third friend on the list.'
                    #now we will match 2 lists using the variable i
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} friends[i] 's lucky number is ' lucky_numbers[i]
                    ```
                story_text_2: |-
                    Now that you've learned to use the brackets in lists, you can also start using the {at} {random} command in the Python way!
                    You simply type the name of your list with `[random]` behind it!
                example_code_2: |-
                    ```
                    fruit = ["pomme", "banane", "cerise"]
                    {print} fruit[random]
                    ```
    repeat_command:
        name: '{repeat}'
        default_save_name: repeat_command
        description: la commande répète
        levels:
            7:
                story_text: |
                    ## Répète ! Répète ! Répète !
                    Le niveau 7 ajoute la commande `{repeat}`. `{repeat}` peut être utilisée pour exécuter une ligne de code plusieurs fois. Comme ceci :

                    ### Exercice
                    Joue avec la commande `{repeat}`. Peux-tu faire la chanson d'anniversaire avec seulement 3 lignes de code à la place de 4 maintenant ?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} "Hedy est amusante !"
                    ```
            8:
                story_text: |
                    ### La commande `{repeat}` et l'indentation
                    À ce niveau, tu peux répéter plusieurs lignes de code avec une seule commande `{repeat}`.
                    Tu le fais en faisant un bloc avec les lignes que tu veux répéter.
                    Pour faire un bloc, tu ajoutes quatre espaces au début de chaque ligne du bloc. C'est ce qu'on appelle une **indentation**.
                    Tu devras indenter même pour créer un bloc d'une seule ligne.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} "Salut tout le monde"
                        {print}"Tout ceci sera répété 5 fois"
                    ```

                        {print} "Bonjour tout le monde"
                        {print} "Ceci sera écrit 5 fois"
            9:
                story_text: |
                    À ce niveau, tu peux non seulement utiliser un bloc de lignes avec `{if}` et `{repeat}`, mais tu peux aussi mettre ces commandes ensemble !
                    Dans l'exemple, tu vois une commande `{if}` dans une commande `{repeat}`. Ça marche aussi à l'inverse, et un `{if}` peut aussi se trouver dans un autre `{if}` et un `{repeat}` dans un autre `{repeat}`.
                    Essaye !
                example_code: |
                    ```
                    {repeat} 3 {times}
                        nourriture = {ask} "Que veux-tu ?"
                        {if} nourriture {is} pizza
                            {print} "bien !"
                        {else}
                            {print} "La pizza c'est meilleur"
                    ```

                        nourriture = {ask} "Que veux-tu ?"
                        {if} nourriture {is} pizza
                            {print} "parfait !"
                        {else}
                            {print} "La pizza c'est meilleur"
    repeat_command_2:
        name: '{repeat} 2'
        default_save_name: repeat_command_2
        description: repeat command 2
        levels:
            7:
                story_text: |
                    ## Répète avec d'autres commandes et avec des variables
                    Tu t'es entrainé avec la commande `{repeat}` combinée avec la commande `{print}`. Mais, savais-tu que tu pouvais utiliser d'autres commandes avec `{repeat}` ?
                    L'exemple montre que `{repeat}` peut aussi être utilisée avec une commande `{ask}`, `{if}` ou `{else}`.
                example_code: |
                    ```
                    {repeat} 2 {times} réponse = {ask} "Savais-tu que tu pouvais poser une question plusieurs fois ?"
                    {if} réponse {is} oui {repeat} 2 {times} {print} "Tu le savais déjà !"
                    {else} {repeat} 3 {times} {print} "Tu as appris quelque chose de nouveau !"
                    ```
                story_text_2: |
                    Une autre chose intéressante que tu peux faire avec la commande `{repeat}` est d'utiliser une variable pour indiquer le nombre de fois que quelque chose doit être répété. Dans l'exemple, tu peux voir que nous demandons en premier quel âge a la personne.
                    Ensuite, en ligne 3, le message est répété `âge` fois. Ainsi nous avons utilisé la variable `âge` avec la commande `{repeat}`.
                example_code_2: |
                    ```
                    {print} "Youpi ! C'est ton anniversaire"
                    âge = {ask} "Quel âge as-tu ?"
                    {repeat} âge {times} {print} "Hip Hip Hip Hourra !"
                    ```
            8:
                story_text: |
                    ### C'est dans le bloc ou pas ?
                    À ce niveau, tu dois faire attention à quelles lignes de code doivent être dans le bloc et lesquelles ne doivent pas y être.
                    Par exemple : si tu veux chanter la chanson *Vive le vent*. Tu veux que seule la ligne avec « Vive le vent » soit répétée deux fois.
                    Cela veut dire que les lignes suivantes ne devrait pas démarrer avec une indentation car elles n'appartiennent pas au bloc.
                    Si tu commences les autres lignes avec une indentation, la chanson ne sera plus correcte.

                    ## Exercice
                    Chaque ligne de l'exemple de code commence par un espace vide. Retire les espaces vides et essaye de trouver quelle ligne a besoin d'une indentation et quelle ligne n'en a pas besoin pour faire la chanson de *vive le vent*.
                example_code: |
                    ```
                    _ {print} "Connais-tu la chanson vive le vent ?"
                    _ {repeat} 2 {times}
                    _ {print} "Vive le vent"
                    _ {print} "Vive le vent d'hiver"
                    _ {print} "Qui s'en va sifflant, soufflant"
                    _ {print} "Dans les grands sapins verts, oh !"
                    ```

                        {print} "Cette ligne sera répétée…"
                        {print} "Cette ligne aussi…"
                    {print} "mais celle-ci ne le sera pas !"
    restaurant:
        name: Restaurant
        default_save_name: Restaurant
        description: Crée ton propre restaurant virtuel
        levels:
            1:
                story_text: |
                    Au niveau 1 tu peux faire ton propre restaurant virtuel et prendre les commandes de tes clients.
                story_text_2: |
                    ### Exercice
                    Copie l'exemple de code dans la zone de programmation en cliquant sur le bouton jaune.
                    Pour commencer, complète avec la bonne commande dans l'espace vide pour faire marcher le code.
                    Ensuite, ajoute au moins 4 lignes de code supplémentaires au programme du restaurant.
                    Demande au client ce qu'il désire boire et demande-lui s'il veut payer en liquide ou avec la carte.
                    Enfin, pense à une façon sympa de dire au revoir à ton client.
                example_code_2: |
                    ```
                    {print} Bienvenu au restaurant Chez Hedy 🍟
                    _ Que voulez-vous commander ?
                    {echo} Ainsi vous voulez commander
                    {print} Merci pour votre commande !
                    {print} C'est bientôt prêt !
                    ```
            2:
                story_text: |
                    Au niveau 2 tu pourrais étendre ton restaurant en utilisant des variables. Au niveau 1, Hedy pouvait seulement `{echo}` les commandes et seulement retenir la dernière chose commandée.
                    Maintenant tu peux utiliser des variables et Hedy peut se rappeler à la fois la nourriture et l'accompagnement !
                example_code: |
                    ```
                    {print} Bienvenue dans le restaurant Chez Hedy !
                    {print} Aujourd'hui, nous avons pizza ou lasagnes.
                    nouriture {is} {ask} Que désirez-vous manger ?
                    {print} Très bon choix ! nourriture est mon choix préféré
                    accompagnement {is} {ask} Désirez-vous des frites ou de la salade avec ça ?
                    {print} nourriture avec accompagnement sont en route !
                    ```
                story_text_2: |
                    ### Exercice
                    Copie ton code du restaurant du niveau précédent dans la zone de programmation ci-dessous.
                    Corrige le code en remplaçant les commandes `{ask}` et `{echo}` et en utilisant des variables comme tu viens de l'apprendre à ce niveau.

                    Maintenant que ton code fonctionne à nouveau, c'est le moment d'ajouter quelquechose en plus.
                    Regarde la dernière ligne du code d'exemple : `{print} nouriture avec accompagnement sont en route !`
                    Dans cette simple ligne, deux variables ont été utilisés pour créer un résumé de la commande.
                    Maintenant ajoute ton propre résumé de la nourriture et de la boisson commandé par le client.

                    **Bonus** Maintenant que tu as appris comment utiliser les variables, tu peux utiliser autant de variables sur une ligne que tu le désires. Peux-tu ajouter plus de variables dans ton code, pour demander « sur place » ou « à emporter », « en liquide » ou « en carte », « avec ou sans paille », etc. ?
            3:
                story_text: |
                    As-tu du mal à décider ce que tu voudrais manger pour dîner ? Tu peux laisser Hedy décider pour toi !
                    Ajoute simplement une liste de tes plats préférés (ou ceux que tu détestes le plus) et Hedy pourra choisir ton dîner pour toi.
                    Tu peux aussi t'amuser, en laissant Hedy choisir, en plus, le prix de ton repas ! Que vas-tu obtenir ?
                example_code: |
                    ```
                    plats {is} spaghetti, choux de Bruxelles, Hamburgers
                    {print} Ce soir, tu mangeras des plats {at} {random} !
                    prix {is} 1 euro, 10 euros, 100 euros
                    {print} Ça fera prix {at} {random} s'il te plait.
                    ```
                story_text_2: |
                    ### Exercice
                    Maintenant, fais ta propre version du restaurant aléatoire.
                    Fais ta liste d'entrées, plats, desserts, boissons et prix.
                    Ensuite, utilise les commandes `{print}` et `{at} {random}` pour dire au client son menu pour ce soir.
                example_code_2: |
                    ```
                    {print} Bienvenue dans le restaurant aléatoire !
                    entrées {is} _
                    plats {is} _
                    desserts {is} _
                    boissons {is} _
                    prix {is} _
                    _
                    ```
            4:
                story_text: |
                    ### Exercice
                    Ajoute les guillemets à ce code pour le faire fonctionner ! Attention : les variables ne doivent pas être entourées de guillemets.
                    Ensuite, utilise la commande `{clear}` pour ne montrer qu'une ligne à la fois dans ton écran de sortie.

                    ### Exercice 2
                    Retourne au niveau précédent et copie ton code du restaurant. Fais fonctionner ce code dans ce niveau en ajoutant des guillemets aux bons endroits et ajoute des commandes  `{clear}`.
                example_code: |
                    ```
                    _ Ajoute les guillemets à ce code _
                    {print} Bienvenue au Restaurant Chez Hedy !
                    {print} Aujourd'hui nous servons pizza ou lasagne.
                    plat {is} {ask} Que voudrais-tu manger ?
                    {print} Très bon choix !  plat  est ce que je préfère !
                    garniture {is} {ask} Que veux-tu en garniture ? fromages ou légumes ?
                    {print} plat  aux  garniture  . C'est parti !
                    boisson {is} {ask} Que voudrais-tu boire avec ça ?
                    {print} Merci pour ta commande.
                    {print} Tes  plat  et  boisson  vont être servis !
                    ```
            5:
                story_text: |
                    ### Exercice
                    L'exemple montre comment tu peux programmer qu'il te manque un des éléments du menu de ton restaurant.
                    Copie ton propre code de restaurant du niveau précédent. Crée un problème dans ton restaurant et code-le, comme dans l'exemple.

                    **Bonus** As-tu programmé le problème et la réponse appropriée ? Alors essaye d'ajouter plus de `{if}` et `{else}` dans ton code.
                    Essaye d'ajouter un `{if}` après chaque commande `{ask}` dans ton code pour le rendre le plus interactif possible.
                example_code: |
                    ```
                    boisson_en_stock {is} eau, limonade, coca, jus d'orange
                    choix {is} {ask} "Que voulez vous boire ?"
                    {if} choix {in} boisson_en_stock {print} choix " en préparation !"
                    {else} {print} "Désolé, nous n'avons pas de " choix
                    ```
            6:
                story_text: |
                    À ce niveau tu peux utiliser les maths pour calculer le prix total pour la commande de ton client, pour faire un restaurant plus réaliste.
                    Mais tu peux aussi ajouter beaucoup plus de choses à ton restaurant virtuel, par exemple, plus de plats.

                    ### Exercice
                    Tu peux ajouter beaucoup plus de choses à ton restaurant virtuel. Par exemple, tu peux…
                    - demander combien de personnes vont manger et multiplier le prix par ce nombre ?
                    - ajouter un autre plat ?
                    - donner une réduction aux gens quand ils donnent un code de réduction (secret) ?
                    - ajouter un menu enfant ?
                    - penser à d'autres choses amusantes à ajouter ?
                example_code: |
                    Tu peux créer un code de restaurant simple, comme celui-ci :
                    ```
                    {print} "Bienvenue au restaurant Chez Hedy"
                    {print} "Voici notre menu :"
                    {print} "Nos plats principaux sont : pizza, lasagnes ou spaghetti"
                    plat_principal = {ask} "Quel plat principal souhaitez-vous ?"
                    {print} "Votre commande : " plat_principal
                    prix = 0
                    {if} plat_principal {is} pizza prix = 10
                    {if} plat_principal {is} lasagnes prix = 12
                    {if} plat_principal {is} spaghetti prix = 8
                    {print} "Ce sera " prix " euros, s'il vous plaît"
                    {print} "Merci, bon appétit !"
                    ```
            7:
                story_text: |
                    À ce niveau tu as appris comment utiliser la commande `{repeat}` pour répéter une ligne de code un certain nombre de fois.
                    Tu peux l'utiliser dans ton restaurant pour demander à plusieurs personnes ce qu'elles veulent manger.

                    ### Exercice
                    Peux-tu compléter le code ? Hedy doit demander le plat autant de fois qu'il y a de personnes. Donc s'il y a 5 personnes, la question doit être répétée 5 fois.
                    **Bonus** Enrichi ton code avec plus de questions, par exemple pour les boissons et les sauces.
                example_code: |
                    ```
                    {print} "Bienvenu au restaurant Chez Hedy"
                    personnes = {ask} "Combien de personnes vont nous rejoindre aujourd'hui ?"
                    ```
            8:
                story_text: |
                    À ce niveau, tu peux rendre ton restaurant virtuel plus élaboré en répétant plusieurs lignes de code. Comme ceci :

                    ### Exercice
                    Ce code peut être complété avec d'autres éléments de menu, par exemple, proposer des boissons, et/ou plusieurs plats ou desserts. Ajoute au moins un autre élément.
                    **Bonus** Ajoute encore plus d'éléments. Propose autant de choix que tu veux !
                example_code: |
                    ```
                    {print} "Bienvenue au restaurant Chez Hedy !"
                    personnes = {ask} "Combien de personnes doivent nous rejoindre aujourd'hui ?"
                    {print} "Génial !"
                    {repeat} personnes {times}
                        plat = {ask} "Que voulez-vous commander ?"
                        {print} plat
                    {print} "Merci d'avoir commandé !"
                    {print} "Bon appétit !"
                    ```
            9:
                story_text: |
                    À ce niveau tu peux utiliser l'imbrication pour rendre ton restaurant plus réaliste et plus amusant !

                    ### Exercice
                    L'indentation a été retiré du code d'exemple.
                    Peux-tu trouver combien d'indentations chaque ligne a besoin pour fonctionner correctement ?
                    Si le client commande une pizza, Hedy doit demander quelle sauce il veut.

                    **Bonus** Un restaurant n'a pas toutes les sauces en réserve. Fait une liste des sauces disponibles et répond pour chaque commande si tu la vends ou pas.<br>
                    **Bonus** Les pizzas ont des garnitures. Demande au client ce qu'il veut.<br>
                    **Bonus** Est-ce que le client a soif ? demande lui aussi sa boisson !<br>
                example_code: |
                    ```
                    {print} "Bienvenue au restaurant Chez Hedy !"
                    nombre_personnes = {ask} "Combien de personnes se joindront à nous aujourd'hui ?"
                    {print} "Génial !"
                    prix = 0
                    {repeat} nombre_personnes {times}
                    _ nourriture = {ask} "Que voulez-vous commander ?"
                    _ {print} nourriture
                    _ {if} nourriture {is} frites
                    _ prix = prix + 3
                    _ sauce = {ask} "Quelle sauce voulez-vous avec vos frites ?"
                    _ {if} sauce {is} aucune
                    _ {print} "pas de sauce"
                    _ {else}
                    _ prix = prix + 1
                    _ {print} "avec " sauce
                    _ {if} nourriture {is} pizza
                    _ prix = prix + 4
                    {print} "Cela fera " prix " euros"
                    {print} "Bon appétit !"
                    ```
            10:
                story_text: |
                    À ce niveau, tu vas apprendre comme demander facilement les commandes pour les différents plats.

                    ### Exercice 1
                    Termine le code avec une commande `{ask}` à la place des espaces vides, pour demander au client ce qu'il veut manger pour chaque plat.
                example_code: |
                    ```
                    menu = appéritif, plat principal, dessert
                    {for} service {in} menu
                        {print} "Que voulez-vous commander pour votre " service " ?"
                        _
                        _
                    ```
                story_text_2: |
                    ### Exercice
                    Bien sûr, tu peux aussi commander pour plusieurs personnes !
                    Peux-tu ajouter la bonne quantité d'indentations avant chaque ligne pour que le code fonctionne correctement ?
                    Conseil : certaines lignes n'ont pas besoin d'être indentées.
                example_code_2: |
                    ```
                    _ menu = appéritif, plat principal, dessert
                    _ noms = Timon, Ono
                    _ {for} nom {in} noms
                    _ {for} service {in} menu
                    _ plat = {ask} nom ", que voulez-vous manger pour votre " service " ?"
                    _ {print} nom " a commandé " plat " pour son " service
                    ```
            11:
                story_text: |
                    Nous pouvons utiliser le `{for}` avec `{range}` pour afficher les commandes de plusieurs clients dans l'ordre.

                    ### Exercice
                    Termine le code du restaurant, pour que tu puisses demander les commande de plusieurs personnes. Affiche le numéro de commande à chaque fois : « Commande 1 », « Commande 2 », etc.
                    Tu ne sais pas trop comment commencer ? Retourne chercher ton code du niveau 8.

                    **Bonus** Au niveau 9, le restaurant affichait aussi les prix. Tu peux ajouter ça ici aussi !
                example_code: |
                    ```
                    {print} "Bienvenue au restaurant Chez Hedy !"
                    nombre_personnes = {ask} "Pour combien de personnes souhaitez-vous commander ?"
                    {print} "Vous voulez donc commander pour " nombre_personnes " personnes."
                    {print} "Allons-y !"
                    ```
            12:
                story_text: |
                    À partir de ce niveau, tu peux utiliser les nombres décimaux pour rendre ton menu plus réaliste.

                    ### Exercice
                    Peux-tu écrire le code pour donner à tes amis et à ta famille une réduction de 15 % ?
                example_code: |
                    ```
                    total = 0.0
                    nouriture = {ask} "Que voulez-vous commander ?"
                    boisson = {ask} "Que voulez-vous boire ?"
                    {if} nouriture {is} "hamburger"
                        total = total + 6.50
                    {if} nouriture {is} "pizza"
                        total = total + 5.75
                    {if} boisson {is} "water"
                        total = total + 1.20
                    {if} boisson {is} "soda"
                        total = total + 2.35
                    {print} "Ça vous fera un total de " total " euros, s'il vous plait"
                    ```
            13:
                story_text: |
                    In this level we can use the new commands to upgrade our restaurant.
                    We use `{and}` to see {if} two things are both the case.
                example_code: |
                    ```
                    price = 10
                    food = {ask} 'What would you like to eat?'
                    drinks = {ask} 'What would you like to drink?'
                    {if} food {is} 'sandwich' {and} drinks {is} 'juice'
                        {print} 'Thats our discount menu'
                        price = price - 3
                    {print} 'That will be ' price ' dollars'
                    ```
            15:
                story_text: |
                    With the `{while}` you can make sure your costumers can keep adding orders until they are done.

                    ### Exercise
                    Correctly add the `{while}` command to this code.
                example_code: |
                    ```
                    {print} 'Welcome at McHedy'
                    more = 'yes'
                    _
                        order = {ask} 'What would you like to order?'
                        {print} order
                        more = {ask} 'Would you like to order anything else?'
                    {print} 'Thank you!'
                    ```
    rock:
        name: Pierre, papier, ciseaux
        default_save_name: Rock
        description: Make your own rock, paper, scissors game
        levels:
            1:
                story_text: |
                    Au niveau 1 tu peux commencer à programmer le jeu pierre, papier, ciseaux.

                    Avec `{ask}` tu peux faire un choix, et avec `{echo}` tu peux répéter ce choix.
                example_code: |
                    ```
                    {print} Que choisis-tu ?
                    {ask} Choisis parmi pierre, papier, ciseaux
                    {echo} ainsi, tu as choisi :
                    ```
                story_text_2: |
                    ### Exercice
                    Au lieu d'utiliser des mots, tu peux aussi utiliser des emojis : ✊✋✌️
                    Peux-tu écrire un code utilisant des emojis ?
                example_code_2: |
                    ```
                    {print} Que choisis-tu ?
                    {ask} Choisis parmi _
                    {echo} ainsi, tu as choisi :
                    ```
            2:
                story_text: |
                    À ce niveau tu peux t'entrainer à utiliser les variables pour faire passer le jeu pierre, papier, ciseaux au niveau supérieur !
                    ### Exercice
                    Termine le code en écrivant la **variable** dans les espaces vides.
                    Ce jeu n'est pas très interactif, mais ne t'inquiet pas ! Dans l'onglet suivant, tu apprendras comment utiliser les variables avec la commande `{ask}` pour rendre ton jeu interactif !
                example_code: |
                    ```
                    choix {is} pierre
                    {print} Je choisis _
                    ```
            3:
                story_text: |
                    Tu peux utiliser la commande `{at} {random}` pour faire choisir à l'ordinateur la pierre, le papier ou les ciseaux !

                    ### Exercice
                    Termine le code en utilisant la commande `{at} {random}`.
                example_code: |
                    ```
                    choix {is} pierre, papier, ciseaux
                    {print} choix {at} {random}
                    ```
                story_text_2: |
                    **Bonus** fait un jeu pour deux joueurs. Commence par demander aux deux joueurs leurs noms. Ensuite, laisse l'ordinateur tirer leur réponse au hasard.
                example_code_2: |
                    ```
                    choix {is} pierre, papier, ciseaux
                    joueur_1 {is} {ask} Nom du joueur 1 :
                    _
                    ```
            4:
                story_text: |
                    À ce niveau nous pouvons continuer le programme pierre, papier, ciseaux. Mais si tu veux ajouter du texte, tu dois utiliser les guillemets ici aussi.
                    ### Exercise
                    Fill in quotation marks on the blanks. Mind that the variable `choices` should be outside the quotes.
                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} _The computer chooses..._ choices {at} {random}
                    ```
            5:
                story_text: |
                    À ce niveau, nous pouvons déterminer s'il y a égalité ou non. En utilisant le nouveau `{if}` évidemment !

                    ### Exercice
                    Termine le code en remplissant les espaces vides :
                    * Demande à l'ordinateur de faire son choix au hasard.
                    * Demande au joueur son choix.
                    * Écris les bonnes variables en ligne 4 et 5.
                    * Termine la ligne 6 pour que Hedy te dise si c'est une égalité ou pas.
                example_code: |
                    ```
                    options {is} pierre, papier, ciseaux
                    choix_ordinateur {is} _
                    choix_joueur {is} {ask} "Que choisissez vous ?"
                    {print} "Votre choix " _
                    {print} "Choix de l'ordinateur " _
                    {if} _ {is} _ {print} "Égalité !" {else} {print} "Pas d'égalité"
                    ```

                    Écrit le bon code dans les espaces vides pour voir si c'est un match nul.
            9:
                story_text: |
                    À ce niveau tu peux programmer le jeu pierre, papier, ciseaux dans son ensemble, en imbriquant les commandes `{if}`.

                    ### Exercice
                    Peux-tu terminer ce code ? Le programme doit dire qui gagne pour chaque combinaison.

                    **Bonus** Tu veux jouer plus d'une partie ? Étant le code pour pouvoir jouer plusieurs fois. Tu peux même utiliser une commande `{ask}` pour demander aux joueurs combien de parties ils veulent jouer.
                example_code: |
                    ```
                    choix = pierre, papier, ciseaux
                    ton_choix = {ask} "Que choisis-tu ?"
                    {print} "Tu as choisi " ton_choix
                    choix_ordinateur = choix {at} {random}
                    {print} "L'ordinateur a choisi " choix_ordinateur
                    {if} choix_ordinateur {is} ton_choix
                        {print} "Égalité"
                    {if} choix_ordinateur {is} pierre
                        {if} ton_choix {is} papier
                            {print} "Tu as gagné !"
                        {if} ton_choix {is} ciseaux
                            {print} "Tu as perdu !"
                    # termine ce code
                    ```
            10:
                story_text: |
                    ### Exercice
                    Aux niveaux précédents, tu as déjà fait ton propre jeu pierre-papier-ciseau. Peux-tu finir l'exemple suivant en utilisant la commande `{for}` correctement pour que le jeu fonctionne ?
                example_code: |
                    ```
                    choix = _
                    joueurs = _
                    {for} _
                    ```
            13:
                story_text: |
                    With the `{and}` command you can shorten your rock, paper, scissors code! Check out the example code below and try to finish it.
                example_code: |
                    ```
                    options = 'rock', 'paper', 'scissors'
                    your_choice = {ask} 'What do you choose?'
                    computer_choice = options {at} {random}
                    {print} 'You choose ' your_choice
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'paper'
                        {print} 'You win!'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'scissors'
                        {print} 'The computer wins!'
                    ```
            15:
                story_text: |
                    ### Exercise
                    Play until you beat the computer! But first, finish the example code...
                example_code: |
                    ```
                    won = 'no'
                    options = 'rock', 'paper', 'scissors'
                    {while} won == 'no'
                        your_choice = {ask} 'What do you choose?'
                        computer_choice = options {at} {random}
                        {print} 'you chose ' your_choice
                        {print} 'the computer chose ' computer_choice
                        {if} computer_choice == your_choice
                            {print} 'Tie!'
                        {if} computer_choice == 'rock' {and} your_choice == 'scissors'
                            {print} 'You lose!'
                        {if} computer_choice == 'rock' {and} your_choice == 'paper'
                            {print} 'You win!'
                            won = 'yes'
                    ```
    rock_2:
        name: Pierre, papier, ciseaux 2
        default_save_name: rock_2
        description: Part 2 of rock, paper, scissors
        levels:
            2:
                story_text: |
                    Maintenant que tu as appris comment utiliser la commande `{ask}`, tu peux rendre ton code de pierre, papier, ciseaux interactif !

                    ### Exercice
                    Rend le code de pierre, papier, ciseaux interactif en ajoutant la commande `{ask}`et une question à ton code de pierre, papier, ciseaux.
                example_code: |
                    ```
                    choix {is} _
                    {print} Je choisi choix
                    ```
    secret:
        name: Agent secret
        default_save_name: AgentSecret
        description: Écrit ton code d'agent secret
        levels:
            12:
                story_text: |
                    Dans cette aventure, tu peux créer ton propre code d'agent secret. Encode un message que seul le bon agent pourra déchiffre.
                    Si l'ennemie essaye de craquer ton code, il recevra une fausse information pour lui faire perdre son temps.

                    ### Exercice 1
                    Invente ton propre code secret pour ton agent secret et retourne les deux parties seulement au vrai espion.

                    ### Exercice 2
                    Ajoute un troisième composant au code, comme le nom d'un vêtement ou d'un objet.
                example_code: |
                    ```
                    nom {is} {ask} "Quel est ton nom ?"
                    {if} nom {is} _
                        a = " rends-toi à l'aéroport "
                    {else}
                        a = " rends-toi à la gare "
                    mot_de_passe {is} {ask} "Quel est le mot de passe ?"
                    {if} mot_de_passe {is} _
                        b = "demain à 14 h 00."
                    {else}
                        b = "aujourd'hui à 10 h 00."
                    {print} _ _ _
                    ```
            13:
                story_text: |
                    Nous pouvons simplifier le code de super espion avec `{and}`, pour n'utiliser qu'un seul `{if}`.

                    ### Exercice 1
                    Termine le code en écrivant la bonne commande dans l'espace vide. Conseil : le super espion doit répondre correctement aux deux questions avant d'obtenir l'accès aux informations confidentielles !

                    ### Exercice 2
                    Nous voulons embrouiller l'ennemie encore plus ! Crée une liste avec de fausses réponses et choisis en une au hasard en cas de mauvaise réponse.
                example_code: |
                    ```
                    nom = {ask} "Quel est votre nom ?"
                    mot_de_passe = {ask} "Quel est votre mot de passe ?"
                    {if} nom {is} "Agent007" _ mot_de_passe {is} "TOPSECRET"
                        {print} '"Rendez vous à l'aéroport à 14 h 00"
                    {else}
                        {print} 'Rendez vous à la gare à 10 h 00'
                     ```
    simon:
        name: Simon Says
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    Let's make a game of Simon Says! Simon Says is a memory game in which the player will be given a color. They have to repeat that color back.
                    If they get it right a color is added to the sequence, so they now have to remember 2 colors, then 3, then 4 etc. the game stops as soon as the player makes a mistake.

                    ### Exercise
                    In this first part of the Simon Says adventure, we'll let the computer pick a random color and add it to a list.

                    ***Make 2 lists*** First, make a list called `colors` and fill it with the colors red, yellow, green and blue.
                    Then make a list called `simon_sequence`. This list will be used as the answer.
                    At the start of the game this lists need to be empty. unfortunately, we can't create an empty list (yet), so we'll fill it with the words 'empty' and 'list' and we'll remove them from the list immediately.

                    ***Create a function that adds a color to the sequence*** Now that we have an empty list called simon_sequence, we can start filling it with random colors.
                    We do that with a function, so we can call it everytime there's a new level in our game. Create a function called `add_random_color`.
                    Then create the variable random_color and set it to a random color. Next, add this random color to the simon_sequence.

                    ***Create a function that shows the simon_sequence*** Start by naming the new function `show_simon_sequence` with `level` as an argument. Now we want to show as many colors as the level we are in (in level 1 you see 1 color, in level 2 you see 2 colors etc).
                    So we repeat `level` times, to print the `simon_sequence[i]`. Each time a color is shown, wait for 1 second and then clear the screen.

                    ***Test your program*** Before you go to the next level, test if the functions are working by calling both of the functions. If they're working you should see a random color in your output screen.
                    Remove this testing part of your code, copy the code and continue to the next tab to learn more about the simon says game!
                example_code: |
                    ```
                    # Make 2 lists
                    colors = _
                    _ = ['empty', 'list']
                    {remove} _ {from} simon_sequence
                    {remove} _

                    # Create a function that adds a color
                    _ add_random_color
                        _
                        {add} _

                    # Create a function that shows the simon_sequence
                    {define} _
                        {for} i {in} {range} 1 {to} _
                            {print} _
                            _
                            _

                    # Test your program
                    {call} _
                    {call} show_simon_sequence {with} 1
                    ```
    simon_2:
        name: Simon Says 2
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    We'll continue with our Simon Says game!

                    ### Exercise
                    ***Paste your code here*** Paste your code from the previous level here. Don't forget to remove the part that was just used for testing the functions.

                    ***Create a function that creates the player_sequence*** The list `player_sequence` is used to capture the answers of the player. First we define the function with the argument level.
                    Next, we ask level times what the color is that they choose. We call that variable `answer`. Then we add the variable `answer` to the list player_sequence.

                    ***Setting up the game*** Before we program the game in the next tab, we'll need some starting variables. First, we'll set the variable `level` to 1 and the variable `game_over` to False.
                    Then we make an introduction for the game. We'll print 'Welcome to Simon Says!' and clear the screen after 1 second.

                    ***Continue to the next tab to finish the game!**** Don't forget to copy your code and take it with you to the next tab.
                example_code: |
                    ```
                    # Paste your code here


                    # Create a function that creates the player_sequence
                    {define} _
                        {for} _
                            _ 'What is color number ' i '?'
                            {add} answer {to} _

                    # Set up
                    level = _
                    game_over = _
                    {print} _
                    _ 1
                    _
                    ```
    simon_3:
        name: Simon Says 3
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    In this tab we'll program the game of Simon Says!

                    ### Exercise
                    ***Paste your code*** Copy your code from the previous tab and paste it here.

                    ***Program the game*** We start by making sure the game goes on while the game isn't over. Then we print what level the player is on, we use the variable level for that. We only show that for 1 second and then we clear the screen again.
                    Now, we have to create the empty list player_sequence. We've already programmed how to fill the list, with our function `player_sequence`, but we never made the list itself. To create the list we use the same trick as we did in the previous tab.
                    We'll make a list with the words 'empty' and 'list' on it, and then we remove both these words. Next, we'll call all of the 3 functions that we've created.
                    Lastly, we'll have to check if the player gave the correct answers (so if the player_sequence and the simon_sequence are the same).
                    If that's the case, we'll compliment the player. Wait for 1 second and increase the level with 1.
                    Did the player give the wrong answer, we'll tell them and end the game by setting game_over to 'True'

                    ***Enjoy your game!*** Great job! Does your game not work? Use the ladybug button to debug your code!
                example_code: |
                    ```
                    # Paste your code here

                    # The game
                    {while} game_over _
                        {print} _
                        _
                        _
                        _ = ['empty', 'list']
                        {remove} _
                        {remove} _
                        {call} _
                        {call} _ {with} _
                        {call} _ {with} _
                        {if} player_sequence == _
                            _
                            _
                            _
                        {else}
                            _
                            game_over = _
                    ```
    sleep_command:
        name: '{sleep}'
        default_save_name: sleep_command
        description: Introduction à la commande pour endormir
        levels:
            2:
                story_text: |
                    Une autre nouvelle commande de ce niveau est `{sleep}`. Elle endort le programme pendant une seconde. Si tu écris un nombre après la commande `{sleep}`, le programme s'endort durant le nombre de secondes correspondantes.

                    ### Exercice
                    Entraine-toi avec cette nouvelle commande en écrivant ton propre code dans lequel tu utiliseras la commande `{sleep}` au moins 3 fois. Pour chaque commande `{sleep}`, utilise un temps de sommeil différent.
                example_code: |
                    ```
                    {print} Ma couleur préférée est…
                    {sleep} 2
                    {print} le vert !
                    ```
    songs:
        name: Chante une chanson !
        default_save_name: Chanson
        description: Écrit une chanson
        levels:
            6:
                story_text: |
                    Les chansons contiennent souvent beaucoup de répétitions. Parfois la répétition est basée sur un comptage.
                    Par exemple, dans la fameuse chanson « Bouteilles vertes ». Tu peux programmer cette chanson avec un petit peu de maths.

                    Astuce : Utilise la fonction de lecture à voix haute pour que Hedy te chante la chanson !

                    ### Exercice
                    Maintenant que ton programme fonctionne, tu peux répéter les lignes 3 à 7 autant de fois que tu le veux en copiant les lignes.
                example_code: |
                    ```
                    verset = 99
                    {print} verset " bouteilles vertes posées sur le mur"
                    {print} verset " bouteilles vertes"
                    {print} "Et si une bouteille verte vient à tomber"
                    verset = verset - 1
                    {print} verset " bouteilles vertes posées sur le mur"
                    {sleep}
                    ```
                story_text_2: |
                    Cette chanson enfantine décompte à partir de 5 petits singes jusqu'à 1 seul singe.
                    Si tu recopies les lignes de 2 à 7 en dessous du code, tu peux chanter toute la chanson !
                example_code_2: |
                    ```
                    nombre = 6
                    nombre = nombre - 1
                    {print} nombre " petits singes sautant sur le lit"
                    {print} "Un tomba du lit et se cogna la tête"
                    {print} "Maman appella le docteur et le docteur dit"
                    {print} "PLUS AUCUN SINGE SAUTANT SUR LE LIT !"
                    {sleep}
                    ```
            7:
                story_text: |
                    Les chansons contiennent souvent beaucoup de répétitions. Par exemple… Baby Shark ! Si tu la chantes, tu ne fais que répéter la même chose.

                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark

                    ### Exercice
                    Peux-tu écrire la chanson Baby Shark avec un `{repeat}` ? Terminer le code en remplaçant les espace vides ?

                    **Bonus** Après Baby Shark, tu peux bien sûr aussi programmer d'autres chansons. Il y a de nombreuses chansons avec des répétitions !
                    Peux-tu penser à une autre chanson et l'écrire ?
                example_code: |
                    ```
                    {repeat} _ _ {print} "Baby Shark tututudutudu"
                    {print} "Baby Shark"
                    ```
            8:
                story_text: |
                    Aux niveaux précédents, tu as programmé la chanson « Bouteilles vertes ». Mais sans la commande `{repeat}` tu devais recopier les versets plusieurs fois.
                    À ce niveau, tu peux répéter la chanson 99 fois en ajoutant juste une simple ligne !

                    ### Exercice
                    Écris la bonne commande à la place de l'espace vide et indente le code correctement.
                example_code: |
                    ```
                    verset = 99
                    _ 99 {times}
                    {print} verset " bouteilles vertes posées sur le mur"
                    {print} verset " bouteilles vertes"
                    {print} "Et si une bouteille verte vient à tomber"
                    verset = verset - 1
                    {print} verset " bouteilles vertes posées sur le mur"
                    ```
            10:
                story_text: |
                    Avec `{for}` tu peux programmer la chanson « baby shark » en entier (y compris tous les autres requins de la famille) en seulement 6 lignes !

                    ### Exercice 1
                    Peux-tu rendre le code de la chanson « baby shark » aussi court en utilisant la commande `{for}` ? termine le code de l'exemple.
                example_code: |
                    ```
                    famille = Baby, Mammy, Daddy, Grandma, Grandpa
                    _ _ _ _
                        {repeat} 3 {times}
                            {print} _
                        {print} _
                    ```
                story_text_2: |
                    ### Exercice 2
                    Fais afficher la chanson « cinq petits singes sautant sur le lit ». Recherche le texte si tu ne t'en souviens pas.

                    **Bonus** Fait afficher la chanson « Le vieux MacDonald a une ferme », et assure-toi que tous les animaux font un cri différent en utilisant un `{if}`.
                example_code_2: |
                    ```
                    singes = 5, 4, 3, 2, 1
                    ```
            11:
                story_text: |
                    À ce niveau, tu peux utiliser le `{for}` avec `{range}` pour faire une chanson à compter, comme les « 5 petits singes ».

                    ### Exercice 1
                    Complète les espaces vides et fait marcher le code ! Si tu ne te rappelles plus le texte de la chanson, recherche le par toi-même.

                    ### Exercice 2
                    La dernière ligne de la chanson est différente des autres. Mets cette ligne à l'intérieur du bloc du `{for}`, et utilise un `{if}` pour que ça marche.
                example_code: |
                    ```
                    _ nombre _ _ 5 _ 1
                        {print} nombre " petits singes sautant sur le lit"
                        _
                    ```
            12:
                story_text: |
                    Dans cette chanson, nous pouvons programmer plus facilement la partie « si tu as de la joie au cœur, tape des mains ». Parce que nous pouvons mettre toutes les actions dans une liste, comme ceci :

                    ### Exercice
                    Peux-tu ajouter le bon nombre d'indentations pour chaque ligne pour que la chanson soit chantée correctement ?
                    Conseil : Tu n'es pas obligé d'indenter toutes les lignes.
                example_code: |
                    ```
                    _ actions = "tape des mains", "tape du pied", "crie hourra !"
                    _ {for} action {in} actions
                    _ {for} i {in} {range} 1 {to} 2
                    _ {print} "si tu as de la joie au coeur"
                    _ {print} action
                    _ {print} "si tu as de la joie au coeur et que tu souhaite le partager"
                    _ {print} "si tu as de la joie au coeur"
                    _ {print} action
                    ```
            13:
                story_text: |
                    In the previous adventure you have learned how to use an argument in a function, but did you know that you could combine them with {ask} commands as well?
                    In this example we have changed the 'My Bonnie' program and made it interactive. You are now asked where Bonnie is.
                example_code: |
                    ```
                    {define} song {with} place
                        {print} 'My Bonnie is ' place

                    chosen_place = {ask} 'Where do you want Bonnie to be?'
                    synonym = {ask} 'What is another word for that?'

                    {call} song {with} chosen_place
                    {call} song {with} synonym
                    {call} song {with} chosen_place
                    ```
            16:
                story_text: |
                    In this level, you can program a song like OldMacDonald even more quickly. You can connect the right animal to the right sound by simply putting them in the same place in the list.
                    The Drunken Sailor is also quickly made in this level. You only need 8 lines for the entire song, check it out!

                    ### Exercise
                    Complete the Old MacDonald song by setting the variable `animal` to `animals[i]` and `sound` to `sounds[i]`.
                example_code: |
                    ```
                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    {for} i {in} {range} 1 {to} 3
                        animal = _
                        sound = _
                        {print} 'Old MacDonald had a farm'
                        {print} 'E I E I O!'
                        {print} 'and on that farm he had a ' animal
                        {print} 'E I E I O!'
                        {print} 'with a ' sound sound ' here'
                        {print} 'and a ' sound sound ' there'
                        {print} 'here a ' sound
                        {print} 'there a ' sound
                        {print} 'everywhere a ' sound sound
                    ```

                    ```
                    lines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} line {in} lines
                        {for} i {in} {range} 1 {to} 3
                            {print} line
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
            18:
                story_text: |
                    In level 16 we made songs using lists. These programs however are no longer working properly in this level. The colons from level 17 and the brackets from level 18 still need to be added.

                    ### Exercice 1
                    The Drunken sailor song is given as sample code, but not yet working.
                    Can you make sure everything works again? To help you, we've put _ in the places of _some_ errors.

                    ### Exercice 2
                    Now also look up your Old MacDonald song from level 16, and correct it.
                example_code: |
                    ```
                    lines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} line {in} lines _
                        {for} i {in} {range} 1 {to} 3 _
                            {print} _ line _
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
    songs_2:
        name: Chante une chanson ! 2
        default_save_name: Chanson 2
        description: Chante une chanson ! 2
        levels:
            12:
                story_text: |
                    Les chansons contiennent beaucoup de répétitions. Nous pouvons capturer ces répétitions dans une fonction !
                    ### Exercice
                    Regarde l'exemple de code avec la fonction. Complète les deux lignes pour que la chanson soit écrite entièrement.
                example_code: |
                    ```
                    {define} brille
                        {print} "Brille"
                        {print} _

                    {call} brille
                    {print} "Si haut au-dessus du monde,"
                    {print} "Comme un diamant dans le ciel."
                    {call} _
                    ```
            16:
                story_text: |
                    ### Exercise
                    Finish the nursery rhyme!
                example_code: |
                    ```
                    number = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
                    object = ['on his drum', 'on his shoe', 'on his knee', 'on his door', 'on his hive', 'on his sticks', 'up in heaven', 'on his gate', 'on his vine', 'once again']

                    _
                        {print} 'This old man'
                        {print} 'He played ' _
                        {print} 'He played knick-knack ' _
                        {print} 'With a knick-knack paddywhack'
                        {print} 'Give the dog a bone'
                        {print} 'This old man came rolling home'
                        {sleep} 8
                        {clear}
                    ```
                story_text_2: |
                    ### Exersice 2
                    Now create your own code for the nursery rhyme 'The wheels on the bus' on the same way!
                example_code_2: |
                    ```
                    object = ['wheels', 'doors', _]
                    movement = [ 'round and round', 'open and shut', _]
                    ```
    tic:
        name: Tic-Tac-Toe
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    Let's program a game of tic-tac-toe!

                    ### Exercise
                    In this adventure we'll start with creating an empty field.

                    ***Create a list called field*** This list will be our playing field. This list is filled with 9 dots, since there are no x's and o's yet at the start of our game.

                    ***Create a function that prints the field*** Firstly, clear the screen so the old playing fields will be removed. Then we print the first line of our Tic Tac Toe field. This line constists of the first 3 spots in our list field.
                    We have already programmed this line for you. Now finish the field by printing spot 4, 5, and 6 on the second row and spot 7, 8 and 9 in the third row.

                    ***Call the function that prints the field*** Now call the function.
                    <div class="w-full flex flex-row gap-2">
                        Run the code. Your output should look like this: <img src="https://github.com/hedyorg/hedy/assets/80678586/bcbd156e-4b48-4e82-84ae-f86d21b0cbcc" width="100">
                    </div>

                    ***Continue in the next tab*** In the next tab you'll learn how to program the game itself.
                example_code: |
                    ```
                    # Create a list called field
                    _ = ['.', '.', '.', '.', '.', '.', '.', '.', '.']

                    # Create a function that prints the field
                    {define} print_field
                        _
                        {print} 'TIC TAC TOE'
                        {print} field[1] field[2] field[3]
                        _
                        _

                    # Call the function
                    ```
            17:
                story_text: |
                    In the previous level you've learned how to make a tic-tac-toe game. The game works, but is quite annoying as it keeps asking you if you've won yet.
                    Now that we have the {elif} command, we can let the game decide if someone has won and it can stop asking us!

                    ### Exercise
                    ***Paste your code*** Paste your code from the previous level here and make it level 17 proof. In this level you've learned to use a colon everytime you create a block of code. Please add the colons in the correct spots.

                    ***Create a function that detects if someone's won*** We have started the function for you, paste it under the function `print_field` and finish the function. You can see that this first piece of code checks to see if spot 1, 2 and 3 are the same, because if they are you have 3 in a row.
                    It also checks if they are not a dot, because if they are, the line might have the same symbols on them, but that's just because it's still empty.
                    If all these conditions are met, the game is over and the winner is printed.
                    Finish this function with all possible ways to win. This means you have to make this for the other 2 rows, 3 columns and 2 diagonals.
                    If you've finished all the other options, the function should return the variable `game_over` so we can use it in our game.

                    ***Call the function in the game*** Go to the line `game_over = {ask} 'Did you win?'` and change it to `game_over = {call} detect_winner {with} field, sign`. Now the function will check if there's a winner and the game doesn't need to keep asking anymore!

                    ***Enjoy your game!*** Great job! You have finished the game! Enjoy playing it!

                example_code: |
                    ```
                    # Paste your code here and make it level 17 proof

                    # Create a function that detects if someone has won
                    {define} detect_winner {with} field, sign:
                        {if} field[1] == field[2] {and} field[2] == field[3] {and} field[1] != '.':
                            game_over = 'yes'
                            {print} 'Player ' sign 'wins!'
                        {elif}:
                            _
                        {else}:
                            game_over = 'no'
                    {return} _
                    ```
    tic_2:
        name: Tic-Tac-Toe 2
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    In the previous adventure you've learned how to create a playing field. Now you'll learn how to create the game!

                    ### Exercise
                    ***Paste your code*** Start by pasting your code from the previous adventure here.

                    ***Add variables*** Underneath your list called `field` we'll add 2 more variables that we'll need to program the game.
                    The variable `game_over` tells us if the game is over, and should be 'no' at the start of the game.
                    The variable `sign` tells us if it's the turn of player x or player o. Set the variable to 'x'.

                    ***The game*** First use a {while} command, to make sure the game keeps on playing the variable while game_over is set to no.
                    During the game, we first ask the player which spot they choose. Then we change the field with the number they chose into their sign.
                    Then we print the field again and we ask the player if they've won yet. Lastly we want to switch whose turn it is, so if the sign is 'x' it should be 'o' and the other way around.

                    ***Test your game*** Does your game work? Great, have fun playing the game! If not, use the ladybug button to debug your code.
                    You might have noticed one mistake in the code though, you can steal the other player's spot! If the other person chose spot 1, you could simply enter 1 after them and steal their spot.
                    That's not fair! Go to the next tab to learn how to fix this problem.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Add variables
                    game_over = _
                    sign = _

                    # The game
                    {while} _
                        choice = _ 'Player ' sign '_?'
                        field[choice] = _
                        _ print_field
                        game_over = {ask} _
                        {if} sign = 'o'
                            sign = _
                        _
                            sign = _
                    ```
    tic_3:
        name: Tic-Tac-Toe 3
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    You might have noticed one mistake in the code you've made in the previous adventure. You can steal the other player's spot! If the other person chose spot 1, you could simply enter 1 after them and steal their spot.
                    That's not fair! In this tab we'll fix that mistake.

                    ### Exercise
                    ***Paste your code here*** Paste your code from the previous adventure here.

                    ***Fix the mistake*** To fix the mistake we replace the line that says `field[choice] = sign`. This turns any spot that the player has chosen into their sign.
                    Go to the header that says 'Use this to fix the mistake' and finish the code. We first want to check if the chosen spot is still empty, so `if field[choice] = '.'`. If that is the case, you are allowed to take it.
                    Then we make an else command and print 'Sorry, this spot is already taken' if the spot is not empty. Lastly, we add a {sleep} command, so the players can actually read the text before it gets cleared again.
                    Now copy this piece of code and replace the line `field[choice] = sign` with this new piece of code.

                    ***Play your game!*** Now the game should work properly! Good job!
                    The only flaw is that you can get a bit annoyed that the game keeps asking you if you've won yet. Do you want to fix that? Go to level 17 and we'll fix it!
                example_code: |
                    ```
                    # Paste your code here

                    # Use this to fix the mistake
                    {if} _ = '.'
                        field[choice] = sign
                    {else}
                        {print} _
                        _
                    ```
    turtle:
        name: Tortue
        default_save_name: Tortue
        description: Fait ton propre dessin
        levels:
            1:
                story_text: |
                    Tu peux aussi utiliser Hedy pour dessiner. En combinant tournants et lignes, tu peux dessiner un carré ou des escaliers !

                    En utilisant `{forward}` tu traces une ligne vers l'avant. Le nombre écrit après détermine la distance que va parcourir la tortue. `{turn} {right}` tourne d'un quart de tour dans le sens des aiguilles d'une montre, `{turn} {left}` tourne dans le sens inverse des aiguilles d'une montre.

                    Si tu veux reculer, tu utilises quand même la commande `{forward}`, mais avec un nombre négatif. Par exemple `{forward} -100`
                example_code: |
                    ```
                    {forward} 100
                    {turn} {left}
                    ```
                story_text_2: |
                    ### Exercice
                    Ceci est le début d'un petit escalier. Peux-tu lui dessiner 5 marches ?
                example_code_2: |
                    ```
                    {forward} 20
                    {turn} {right}
                    {forward} 20
                    {turn} {left}
                    {forward} 20
                    ```
            2:
                story_text: |
                    À ce niveau, tu peux utiliser des variables pour rendre la tortue interactive. Par exemple, tu peux demander au joueur de combien de pas la tortue doit avancer.
                example_code: |
                    ```
                    réponse {is} {ask} De combien de pas la tortue doit-elle avancer ?
                    {forward} réponse
                    ```
                story_text_2: |
                    Aussi, au niveau 1 la tortue pouvait seulement tourner à gauche ou à droite. C'était un peu lassant !
                    Au niveau 2 elle peut se diriger dans toutes les directions.

                    Utilise 90 pour tourner d'un quart de tour. On appelle ça des degrés. Un tour complet fait 360 degrés.

                    ### Exercice
                    Peux-tu faire une figure avec ce code ? Peut-être un triangle ou un cercle ?
                example_code_2: |
                    ```
                    {print} Dessin de formes
                    angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
            3:
                story_text: |
                    À ce niveau, tu peux utiliser `{at} {random}` avec la tortue dessinatrice. Un choix aléatoire permet à la tortue de suivre un chemin différent à chaque fois.
                    Utilise `{at} {random}` pour choisir une valeur dans une liste.
                    ### Exercice
                    Peux-tu copier-coller les lignes 2 et 3 pour créer un chemin aléatoire plus long ?
                example_code: |
                    ```
                    angles {is} 10, 50, 90, 150, 250
                    {turn} angles {at} {random}
                    {forward} 25
                    ```
            4:
                story_text: |
                    Au niveau 4 tu dois utiliser les guillemets avec `{print}` et `{ask}`. Aussi quand tu dessines !
                example_code: |
                    ```
                    {print} _ Dessin de formes _
                    angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
                story_text_2: |
                    Tu peux aussi changer la couleur des lignes avec la commande `{color}`. Jette un œil à l'exemple.
                    Quand tu utilises la commande `{color} {white}` pour dessiner, les lignes sont « invisibles ». Astuce : utilise le blanc pour déplacer la tortue où tu veux à l'écran avant de commencer à dessiner.
                example_code_2: |
                    ```
                    {color} {white}
                    {forward} -80
                    {color} {green}
                    {forward} 50
                    {color} {yellow}
                    {forward} 50
                    {color} {red}
                    {forward} 50
                    ```
            5:
                story_text: |
                    Au niveau 5 tu peux faire un choix avec `{if}`. Par exemple entre différent type de formes.
                example_code: |
                    ```
                    {print} "Dessins de formes"
                    forme {is} {ask} "Veux-tu un carré ou un triangle ?"
                    {if} forme {is} triangle angle {is} 120
                    {else} angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
                story_text_2: |
                    ### Exercice
                    Écrit les bons nombres dans ce code pour le faire marcher.
                    Après avoir fait ça, tu peux essayer d'ajouter l'option en arrière.

                    **Bonus** Au lieu d'utiliser `{left}` et `{right}`, refait le programme avec nord, est, sud et ouest.
                    Tu pourrais même ajouter encore plus de directions comme Nord-Est, Sud-Ouest, etc.
                example_code_2: |
                    ```
                    direction {is} {ask} "Dans quelle direction veux-tu aller ? gauche, droite ou tout droit"
                    {if} direction {is} gauche {turn} _
                    {if} direction {is} droite {turn} _
                    {forward} 100
                    ```
            6:
                story_text: |
                    À ce niveau tu peux utiliser les maths pour dessiner différentes formes.
                    Tu as sans doute appris à l'école qu'il faut 360 degrés pour faire tour complet. Si ce n'est pas le cas… maintenant tu le sais !
                    C'est pour ça que tu utilises 90 degrés pour le carré. 360 divisé par 4 fait 90.
                    Maintenant que nous pouvons faire des maths avec Hedy, nous pouvons dessiner toutes les formes que nous voulons !
                example_code: |
                    ```
                    nombre_sommets = {ask} "Combien de sommets veux-tu ?"
                    angle = 360 / nombre_sommets
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    ```
            8:
                story_text: |
                    Maintenant que nous pouvons répéter plusieurs lignes, nous pouvons faire des formes plus facilement.
                    Nous avons juste besoins de régler l'angle une fois et ensuite utiliser cette variable dans le `{repeat}`.

                    ### Exercice 1
                    L'exemple de code dessine un carré. Change le code pour qu'il dessine une autre forme, comme un triangle ou un hexagone.
                    Cela demande de changer deux lignes de code.
                    Indice : un cercle entier fait 360 degrés.

                    ### Exercice 2
                    Maintenant dessine au moins deux polygones sur le même dessin.
                example_code: |
                    ```
                    angle = 90
                    {repeat} 10 {times}
                        {turn} angle
                        {forward} 50
                    ```
                story_text_2: |
                    **Bonus** Nous pouvons améliorer le programme qui dessine différentes formes. Termine le code et tu pourras dessiner le polygone que tu veux !
                example_code_2: |
                    ```
                    sommets = {ask} "Combien de sommets dois-je dessiner ?"
                    angle = 360 / sommets
                    {repeat} sommets {times}
                        {turn} _
                        {forward} _
                    ```
            9:
                story_text: |
                    Maintenant que nous pouvons utiliser un `{repeat}` dans un `{repeat}`, nous pouvons dessiner des formes plus complexes.

                    ### Exercice 1
                    Ce code dessine trois triangles noirs, change ça en 5 carrés roses.

                     **Bonus** Crée un dessin de ton choix à partir d'au moins deux types de forme.
                example_code: |
                    ```
                    {color} {black}
                    {repeat} 3 {times}
                        {repeat} 3 {times}
                            {forward} 10
                            {turn} 120
                        {color} {white}
                        {forward} 50
                        {color} {black}
                    ```
            10:
                story_text: |
                    À ce niveau, tu peux faire dessiner une forme à la tortue.
                    La tortue va avancer en fonction des distances de la liste, une par une, en faisant des pas de plus en plus grands.
                    ### Exercice 1
                    Ajoute un tournant de 90 degrés dans la boucle, pour faire une spirale.
                    Ajoute au moins 5 nombre dans la liste, pour que la spirale grossisse encore plus.
                    **(bonus)** peux-tu transformer la spirale en une autre forme ? Fais des expériences en utilisant les nombres pour les tournants !
                    ### Exercice 2
                    La spirale est dessinée vers l'extérieur, fais-la se dessiner vers l'intérieur.
                example_code: |
                    ```
                    {turn} 90
                    distances = 10, 20, 30, 40, 50, 60
                    {for} distance {in} distances
                        {forward} distance
                    ```
            12:
                story_text: |
                    Nous pouvons utiliser les fonctions pour dessiner des formes plus complexes avec moins de code.
                    ### Exercice 1
                    Complète la fonction pour qu'elle dessine un carré. Tu peux rendre l'image finale plus belle en dessinant des lignes blanches entre les carrés.

                    ### Exercice 2
                    Le code peut être réduit encore plus. Place les lignes finales dans un `{repeat}` tout en conservant le même dessin.

                    ### Exercice 3
                    Crée ton propre dessin avec des formes différentes.
                    Change le nombre de formes avec le `{repeat}` et les formes elles-mêmes dans le `{define}`
                example_code: |
                    ```
                    {define} carré
                        {repeat} 4 {times}
                            {turn} _
                            {forward} _
                    {call} carré
                    {forward} 50
                    {call} carré
                    {forward} 50
                    {call} carré
                    ```
    turtle_draw_it:
        name: Dessine !
        default_save_name: Dessine
        description: Dessine cette forme avec la tortue
        levels:
            1:
                story_text: |
                    ### Exercice
                    Refait les dessins avec la tortue !

                    <div class="w-full flex flex-row gap-2">
                        Rectangle <img src="https://github.com/hedyorg/hedy/assets/80678586/77aa99d5-cd8f-4969-b49d-e8fed34ac550" width="100">
                        Square <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                        Stairs<img src="https://github.com/hedyorg/hedy/assets/80678586/d4301e62-ec66-4031-827c-7d21f73ba106" width="200">
                    </div>
            2:
                story_text: |
                    ### Exercice
                    Refait les dessins avec la tortue !

                    <div class="w-full flex flex-row gap-2">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/e974b62c-f0cf-445a-8bd4-5ad9f1f71204" width="100">
                    Arrow <img src="https://github.com/hedyorg/hedy/assets/80678586/803d8f42-9708-448c-82ea-d035697f08c9" width="150">
                    Boat <img src="https://github.com/hedyorg/hedy/assets/80678586/94ef7189-442a-4c8f-827d-12a69203c2e9" width="150">
                    </div>
            3:
                story_text: |
                    ### Exercice
                    Refait les dessins avec la tortue !

                    <div class="w-full flex flex-row gap-2">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/71e04d98-9545-4614-9caf-a5f179b756a1" width="150">
                    Star <img src="https://github.com/hedyorg/hedy/assets/80678586/421c4d28-cb99-424b-be26-dcae30d65c80" width="150">
                    Arrow <img src="https://github.com/hedyorg/hedy/assets/80678586/3cbebcae-5258-47c5-a6ac-e7ee36c1d1ce" width="200">
                    </div>
            4:
                story_text: |
                    ### Exercice
                    Refait les dessins avec la tortue !

                    <div class="w-full flex flex-row gap-2">
                    Colored Star <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Rainbow <img src="https://github.com/hedyorg/hedy/assets/80678586/2728b10f-9f7f-45ea-964e-5b284033e4f0" width="500">
                    Nested squares <img src="https://github.com/hedyorg/hedy/assets/80678586/f013f9fa-bc68-4c60-b778-2c457799d6f7" width="200">
                    </div>
                example_code: |
                    **Extra** Up for a real challenge? Make sure that the colors of these figures are selected randomly, so that each time you run your programs they'll look differently!

                    ```
                    colors {is} red, orange, yellow, green, blue, purple, pink, brown, gray, black
                    color _
                    ```
            5:
                story_text: |
                    ### Exercice
                    Refait les dessins avec la tortue !

                    **Extra** Make only one code that lets the player decide which letter they'd like to see! And can you add even more letters?

                    <div class="w-full flex flex-row gap-2">
                    F <img src="https://github.com/hedyorg/hedy/assets/80678586/8a021b76-c24b-4e7c-b960-48d57f3bcb20" width="100">
                    E <img src="https://github.com/hedyorg/hedy/assets/80678586/12821803-6422-416a-8e36-9902d14e57a4" width="100">
                    L <img src="https://github.com/hedyorg/hedy/assets/80678586/3af6f919-7b67-4ee7-b923-11e56f2b6b24" width="100">
                    </div>
                example_code: |
                    Hint:
                    ```
                    chosen_letter {is} {ask} 'Which letter would you like to see? F, E or L?'
                    {if} _
                    ```
            6:
                story_text: |
                    ### Exercice
                    Refait les dessins avec la tortue !

                    **Extra** Let the player decide which color the square should be.

                    ***Extra*** Can you make the letter of your own first name and the flag of your own country too?

                    <div class="w-full flex flex-row gap-2">
                    Square <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="150">
                    Letters <img src="https://github.com/hedyorg/hedy/assets/80678586/e75f4fa5-f1f5-4b48-806c-916c28e4e8ad" width="100">
                    Flag <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hint for the square:
                    ```
                    chosen_color = {ask} _
                    ```
            7:
                story_text: |
                    ### Exercice
                    Refait les dessins avec la tortue !

                    <div class="w-full flex flex-row gap-2">
                    Hexagon <img src="https://github.com/hedyorg/hedy/assets/80678586/92e492e1-1593-489b-aaf0-51d2a29755f4" width="200">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/3629a5e6-1f02-4851-aab9-c5430ba4a1f1" width="200">
                    Fan <img src="https://github.com/hedyorg/hedy/assets/80678586/1ba2ff71-1230-4fe3-8255-b2c504cf1b4e" width="200">
                    </div>
            8:
                story_text: |
                    ### Exercice
                    Refait les dessins avec la tortue !

                    **Extra** The number in brackets indicates in how many lines of code this figure can be drawn. Can you do it in the same amount of lines?

                    <div class="w-full flex flex-row gap-2">
                    Square (3) <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                    Randomly colored star (5) <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Randomly colored spiral (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/9bcdb3f1-367d-4ae0-878f-d09005424a35" width="150">
                    </div>
            9:
                story_text: |
                    ### Exercice
                    Refait les dessins avec la tortue !

                    **Extra** The number in brackets indicates in how many lines of code this figure can be drawn. Can you do it in the same amount of lines?

                    **Extra** Give the player a choice which country they would like to see the flag of.

                    <div class="w-full flex flex-row gap-2">
                    Cross (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/76e42c76-aa3f-4863-8eee-ead73c09a186" width="150">
                    Randomly colored nested squares (8) <img src="https://github.com/hedyorg/hedy/assets/80678586/17f878cc-e893-4c10-b32e-a09a50bf08de" width="200">
                    Flags <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hint for the nested squares:
                    ```
                    colors = red, blue, orange, yellow, pink, purple, green, brown, black
                    distance = 120
                    repeat 5 times
                    _
                    ```
                    Hint for the flags:
                    ```
                    country = ask 'which country would you like to see the flag of?'
                    if country is 'the Netherlands'
                        color_1 = red
                        color_2 = white
                        color_3 = blue
                    ```
            10:
                story_text: |
                    ### Exercice
                    Refait les dessins avec la tortue !

                    <div class="w-full flex flex-row gap-2">
                    Hexagones imbriqués <img src="https://github.com/hedyorg/hedy/assets/80678586/3629e908-3cd5-44ac-bbcd-1f1cceb15654" width="150">
                    Feux de circulation <img src="https://github.com/hedyorg/hedy/assets/80678586/edbbb608-5ff8-4349-85a6-e47809adde43" width="100">
                    </div>
                example_code: |
                    Aide pour les hexagones imbriqués :
                    ```
                    distances = 100, 80, 60, 40, 20
                    {for} distance {in} distances
                    _
                    ```

                    Aide pour les feux de circulation :
                    ```
                    couleurs = rouge, jaune, vert
                    {for} couleur_choisie {in} couleurs
                        {color} _
                        {repeat} _
                    ```
                story_text_2: |
                    Guirlande de Noël <img src="https://github.com/hedyorg/hedy/assets/80678586/9637ea6d-6edc-4d88-a6f7-10271bfc5371" width="500">
                example_code_2: |
                    Aide pour la guirlande de Noël :

                    Commence par bouger jusqu'au côté gauche de l'écran avec une ligne blanche invisible. Ensuite suspend les lumières de Noël !
                    ```
                    {color} blanc
                    {turn} -90
                    {forward} 300
                    {turn} 90

                    couleurs = rouge, bleu, jaune, violet, vert, orange, rose
                    {for} couleur_choisie {in} couleurs
                    _
                    ```
            11:
                story_text: |
                    ### Exercice
                    Refait les dessins avec la tortue !

                    <div class="w-full flex flex-row gap-2">
                    Ruche (6) <img src="https://github.com/hedyorg/hedy/assets/80678586/ec02469c-907b-4695-9382-d39a8f3c00ec" width="150">
                    Ventilateur (5)  <img src="https://github.com/hedyorg/hedy/assets/80678586/a032ab35-c70c-4e67-9b4e-036a03ecce87" width="150">
                    Flocon de neige (13) <img src="https://github.com/hedyorg/hedy/assets/80678586/90f56bbb-86e5-448d-8aec-16f8c2c05cf2" width="150">
                    </div>
                example_code: |
                    Aide pour la ruche :
                    ```
                    {for} nombre_d_alveole {in} {range} 1 {to} _
                        {for} mur_d_une_alveole {in} {range} 1 {to} _
                            {forward} _
                            {turn} _
                        {forward} _
                        {turn} _
                    ```

                    Aide pour le ventilateur :
                    Commence comme pour le ventilateur que tu as fait au niveau 7. Ou inspire-toi de l'aide pour la ruche, le code est très similaire.

                    Hint Snowflake: Start by making one 'leg' and repeat it 6 times.
            12:
                story_text: |
                    ### Exercice
                    Refait les dessins avec la tortue !
                    Aide pour le programme de conception de bracelet. Commence par définir une fonction **pour chaque forme** que tu veux utiliser dans le bracelet. Ensuite, ajoute les formes au bracelet comme ceci :

                    Bracelet <img src="https://github.com/hedyorg/hedy/assets/80678586/549d7f3a-c492-4b4a-b173-746eb3400951" width="500">
                example_code: |
                    ```
                    {define} dessine_un_carré
                    _

                    {color} blanc
                    {turn} -90
                    {forward} 300
                    {turn} 180

                    {for} i {in} {range} 1 {to} 5
                        {color} gris
                        {forward} 100
                        forme = {ask} "Quelle forme veux-tu ensuite dans ton bracelet ?"
                        couleur = {ask} "Dans quelle couleur ?"
                        {color} couleur
                        {if} forme {is} "carré"
                            {call} dessine_un_carré
                    ```
            13:
                story_text: |
                    ### Exercice
                    Refait les dessins avec la tortue !

                    Street in different sizes <img src="https://github.com/hedyorg/hedy/assets/80678586/cdae9d97-d5ef-46f3-8838-24fa7b5b1bec" width="300">
                    Colored street  <img src="https://github.com/hedyorg/hedy/assets/80678586/9893e0bd-c0f8-49bc-a5a7-217182407724" width="300">
                    Snow Storm <img src="https://github.com/hedyorg/hedy/assets/80678586/111b0a1b-b0e1-47c3-b032-81cea05e6bbc" width="300">
                example_code: |
                    Hint Street in different sizes
                    ```
                    {define} draw_a_house {with} size
                    _

                    {call} draw_a_house {with} 90
                    {call} draw_a_house {with} 60
                    {call} draw_a_house {with} 30
                    ```

                    Hint Colored street
                    ```
                    {define} draw_a_house {with} chosen_color
                    _
                    ```

                    Hint Snow Storm
                    ```
                    {define} draw_snowflake {with} length, color
                        _

                    numbers = 10, 20, 30
                    colors = _

                    {for} i {in} {range} 1 {to} 5
                        random_number = _
                        random_color = _
                        {call} draw_snowflake {with} random_number, random_color
                        {color} white
                        {turn} random_number * 5
                        {forward} 80
                    ```
            14:
                story_text: |
                    ### Exercise
                    Create a program that asks the player how many corners their figure should have and then creates that figure.
                    The figure in the image is the output when the player fills in 10.

                    <div class="w-full flex flex-row gap-2">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/ee32f40e-dea1-4e7c-a813-3ef63671254b" width="300">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/3621bf77-527d-41e8-a44f-c5a21bb4ffd2" width="200">
                    </div>
                example_code: |
                    ```
                    {define} calculate_degrees {with} amount_of_corners
                        _ 360 / amount_of_corners


                    {define} draw_figure {with} degrees
                        _
                            {forward} 400/amount_of_corners
                            {turn} _

                    amount_of_corners = {ask} _
                    degrees = {call} _ {with} _

                    {call} _ {with}
                    {call} _ {with}
                    ```
            15:
                story_text: |
                    ### Exercice
                    Refait les dessins avec la tortue !

                    Spiral <img src="https://github.com/hedyorg/hedy/assets/80678586/6943223c-018b-435b-a391-23723cc7a6ad" width="150">
                example_code: |
                    Spiral
                    ```
                    distance = 5
                    {while} distance < 200
                        distance = distance + 5
                         _
                    ```
                story_text_2: |
                    Fan <img src="https://github.com/hedyorg/hedy/assets/80678586/cb671065-b47b-49f0-b298-dcbcd2a5e28f" width="150">
                example_code_2: |
                    Fan
                    ```
                    {define} draw_a_square {with} side
                    _

                    i = 100
                    {while} i > 1
                        _ {with} i
                        _
                        i = i - 3
                    ```
                story_text_3: |
                    Star <img src="https://github.com/hedyorg/hedy/assets/80678586/17564e0a-63e1-4794-8d41-15ac8c1a5a93" width="150">
                example_code_3: |
                    Star
                    A star is usually drawn using 144-degree-turns. If you change this slightly to 143 degrees for example and repeat the pattern multiple times with a {while} loop you can make this figure.
    while_command:
        name: '{while}'
        default_save_name: while_command
        description: tant que
        levels:
            15:
                story_text: |-
                    Nous allons apprendre une nouvelle boucle, la boucle `{while}` ! La boucle continue tant que la condition est vraie.
                    Alors n'oublie pas de changer la valeur dans la boucle.

                    Dans l'exemple de code, on continue jusqu'à obtenir une réponse correcte.
                    Si la réponse correcte n'est jamais donnée, la boucle ne se termine pas !
                example_code: |
                    ```
                    réponse = 0
                    {while} réponse != 25
                        réponse = {ask} "Combien font 5 fois 5 ?"
                    {print} "Une réponse correcte a été donnée"
                    ```

                        réponse = {ask} "Combien font 5 fois 5 ?"
                    {print} "Une réponse correcte a été donnée"
    years:
        name: Nouvel an
        default_save_name: New Year's Countdown
        description: Countdown to the new year!
        levels:
            11:
                story_text: |
                    À ce niveau, tu peux utiliser la commande `{for}` nombre `{in}` `{range}` pour faire un compte à rebours pour la nouvelle année.

                    ### Exercice
                    Complète les espaces vides et fait fonctionner le code !
                example_code: "```\n{for} nombre {in} {range} _ {to} _\n\t{print} nombre\n\t{sleep}\n{print} \"Bonne année !\"\n```\n"
