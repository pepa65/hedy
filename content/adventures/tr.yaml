adventures:
    story:
        name: Hikaye
        default_save_name: Hikaye
        description: Hikaye
        levels:
            1:
                story_text: |
                    Seviye 1'de, kendiniz oluşturduğu farklı bir ana karakterle bir hikaye oluşturabilirsiniz.

                    İlk satırda `{ask}` kullanın ve hikayenin ana karakterinin kim olacağını sorun.

                    Bu ilk satırdan sonra, cümlenin yazdırılması gerekiyorsa `{print}` ile başlayın.
                    Ana karakterinizin cümlenin sonunda olmasını istiyorsanız `{echo}` kullanırsınız.
                example_code: |
                    ```
                    {ask} Bu hikayenin ana karakteri kim?
                    {print} Ana karakter şimdi ormanda yürüyecek
                    {echo} Biraz korkmuş,
                    {print} Her yerde çılgın sesler duyuyor.
                    {print} Buranın perili bir orman olmasından korkuyor.
                    ```
                story_text_2: |
                    ### Alıştırma
                    Şimdi en az 6 satır koddan oluşan kendi hikayenizi oluşturun.
                    Bu hikaye örnek kodumuzdaki ile aynı olmasın.
                    En az bir tane `{ask}` ve bir tane `{echo}` komutu kullanın.
                    İstediğiniz herhangi bir konu hakkında yapabilirsiniz.
                    Aklınıza bir konu gelmiyorsa, seçeneklerimizden birini kullanın: sinemaya gitmek, bir spor karşılaşması veya hayvanat bahçesinde bir gün.
            2:
                story_text: |
                    Bu 2. seviyede, hikayenizi daha eğlenceli hale getirebilirsiniz. Ana karakterinizin adı artık cümle içinde herhangi bir yerde olabilir.

                    Bunun için birazcık daha fazla programlamanız gerekiyor. İlk önce ana karakterinize isim vermelisiniz.

                    Daha sonra bu ismi cümle içinde herhangi bir yere koyabilirsiniz.
                example_code: |-
                    ```
                    isim {is} {ask} Ana karakterin adı nedir?
                    {print} isim şimdi ormanda koşacak
                    {print} isim biraz korkuyor
                    {print} Aniden çılgın bir ses duydu....
                    {sleep}
                    {print} isim buranın perili bir orman olmasından korkuyor
                    ```
                story_text_2: |
                    ### Alıştırma
                    Şimdi sırada bir önceki seviyede oluşturduğunuz kendi hikayenize değişkenler ekleme zamanı.
                    'Programlarım'a gidin, 1. seviye hikaye maceranızı bulun ve kodunuzu kopyalayın. Kodu bu seviyedeki giriş ekranınıza yapıştırın.

                    Bu kod bu seviyede çalışmayacaktır, çünkü henüz değişkenleri kullanmadınız.
                    Kodunuzdaki `{ask}` komutlarını ve `{echo}` komutlarını bu seviyede öğrendiğiniz doğru şekilleriyle değiştirin.

                    **Ek Görev** Hikayenizde gerilim oluşturmak için kodunuza bir `{sleep}` komutu ekleyin.
            3:
                story_text: |
                    3. seviyede, hikayenizi daha eğlenceli hale getirebilirsiniz. Bunun gibi herhangi bir canavar, hayvan veya diğer engeller için rastgelelik kullanabilirsiniz:
                example_code: |
                    ```
                    hayvanlar {is} 🦔, 🐿, 🦉, 🦇
                    {print} Şimdi şunun sesini duyuyor: bir hayvanlar {at} {random}
                    ```
                story_text_2: |
                    Hikayenizde `{add}` komutu da kullanışlı olabilir.
                example_code_2: |
                    ```
                    {print} Bir ses duyuyor
                    hayvanlar {is} 🐿, 🦔, 🦇, 🦉
                    hayvan {is} {ask} Ne olduğunu düşünüyorsun?
                    {add} hayvan {to_list} hayvanlar
                    {print} bu bir hayvanlar {at} {random}
                    ```
                story_text_3: |
                    Bu, hikayenizdeki `{remove}` komutunun bir örneğidir

                    ### Alıştırma
                    Önceki seviyelerdeki hikayenizi bu seviyeye kopyalayın.
                    Bu seviyede, 3 yeni komut öğrendiniz `{at} {random}` , `{add} {to_list}` ve `{remove} {from}`.
                    Hikayenize yeni kod satırları ekleyin, böylece tüm yeni komutlar hikayenizde en az bir kez yer alsın.
                example_code_3: |
                    ```
                    {print} Sırt çantası çok ağırlaştı.
                    {print} İçinde bir şişe su, bir el feneri ve bir tuğla vardı.
                    çanta {is} şişe su, el feneri, tuğla
                    çıkar {is} {ask} Hangi eşyayı atmalı?
                    {remove} çıkar {from} çanta
                    ```
            4:
                story_text: |
                    ### Alıştırma
                    Örnek kodu kopyalayın ve 1. ve 2. satırlardaki boşluklara tırnak işareti ekleyerek tamamlayın.
                    Satır 3 ve 4'teki boşluklar tırnak işaretleriyle değil, bir `{sleep}` ve bir `{clear}` komutuyla değiştirilmelidir. Bunu çalıştırabilir misin?

                    ### Alıştırma 2
                    Önceki seviyeye geri dönün ve hikaye kodunuzu kopyalayın. Doğru noktalara tırnak işaretleri ekleyerek kodun bu seviyede çalışmasını sağlayın.
                    Aklınızda bulunsun: Hikayenizdeki değişkenler tırnak işaretlerinin dışında olmalıdır; tıpkı örnek kodun ikinci satırında olduğu gibi. Bu satırda değişken adı tırnak işaretlerinin dışına yerleştirilmiştir.
                example_code: |
                    ```
                    isim {is} {ask} _ Adın nedir? _
                    {print}  _ Ana karakterin adı _ isim
                    _
                    _
                    {print} isim _ şimdi ormanda yürüyecek _
                    {print} isim _ biraz korkuyor _
                    hayvanlar {is} 🦔, 🐿, 🦉, 🦇
                    {print} _ Şunun sesini duyuyor _ hayvanlar {at} {random}
                    {print} isim _ buranın perili bir orman olmasından korkuyor _
                    ```
            5:
                story_text: |
                    Bu seviyede, hikayenizi daha da eğlenceli hale getirecek farklı sonlar programlayabilirsiniz.
                    Örnek kodda 2 farklı sonun nasıl yapıldığını görebilirsiniz.

                    ### Alıştırma 1
                    Seçtiğiniz bir konu hakkında en az 6 satırlık yeni bir kısa hikaye yazın.
                    İlham gelmedi mi? Şu konulardan birini seçin: bir süper kahraman, sıkıcı bir okul günü, ıssız bir adada mahsur kalmak.

                    Şimdi oyuncuya örnek kodda olduğu gibi mutlu veya kötü sonu seçmesi için bir şans verin.
                    Her iki sonu da programlayın.

                    ### Alıştırma 2
                    Önceki seviyelerde kendi hikaye maceranızda oluşturduğunuz hikayeyi kopyalayın.
                    Hikayenize en az 2 tane `{if}` ve `{else}` komutu eklemenin bir yolunu bulun.
                    Bu mutlu ya da kötü bir son için olabilir, ancak komutları dahil etmek için başka yollar da bulmaya çalışabilirsiniz.
                example_code: |
                    ```
                    isim {is} {ask} 'Ormanda yürüyen kim?'
                    {print} isim ' ormanda yürüyor'
                    {print} isim ' bir canavarla karşılaşır'
                    son {is} {ask} 'İyi bir son mu yoksa kötü bir son mu istersiniz?'
                    {if} son {is} iyi {print} isim ' kılıcını çıkarır ve canavar hızla kaçar'
                    {else} {print} isim ' canavar tarafından yendi'
                    ```
            7:
                story_text: |
                    Bir hikayede, birileri kelimeleri birkaç kez söyler. Örneğin, birisi yardım istediğinde veya şarkı söylediğinde.
                    Bu seviyede, bu tür tekrarları hikayenize `{repeat}` ile koyabilirsiniz.

                    ### Alıştırma
                    Kendi hikayenize tekrarlama ekleyin. Kayıtlı programlarınıza geri dönün, önceki seviyedeki hikaye programınızı seçin ve
                    `{print}` içeren bir satır seçip onu tekrarlayın!
                example_code: |
                    ```
                    {print} 'Prens sürekli yardım istiyordu.'
                    {repeat} 5 {times} {print} 'Yardım edin!'
                    {print} 'Neden kimse bana yardım etmiyor?'
                    ```
            8:
                story_text: |
                    Bu seviyede `{if}` komutlarınızda birden fazla satır kullanabilirsiniz, bu şekilde mutlu veya üzücü sonunuzu güncellemiş olacaksınız!

                    ### Alıştırma 1
                    Örnek kodda iki farklı son gösterilmektedir; biri karakterlerin zaman makinesine atladığı, diğeri ise atlamadığı son.
                    Boşlukları her sonda en az bir cümle olacak şekilde tamamlayın.
                    **Ek Görev** Hikayeyi daha uzun hale getirin. Hikayede ne oluyor? Farklı seçenekler içeren ikinci bir `{ask}` da ekleyebilirsiniz.

                    ### Alıştırma 2
                    Kayıtlı programlarınıza geri dönün, 5. seviyedeki hikaye programınızı seçin. Şimdi her biri en az üç satır uzunluğunda bir iyi ve bir kötü son yazın!
                example_code: |
                    ```
                    {print} 'OLAMAZ! T-rex yaklaşıyor!'
                    son = {ask} 'Mutlu bir son mu yoksa hüzünlü bir son mu istiyorsunuz?'
                    {if} son {is} mutlu
                        {print} 'Ali tam zamanında zaman makinesine geri atlıyor!'
                        {print} _
                    {else}
                        {print} 'Olamaz! Ali çok yavaştı ve....'
                        {print} _
                    ```
            9:
                story_text: |
                    Bu seviyede artık `{if}` ve `{repeat}` komutlarını, diğer `{if}` ve `{repeat}` komutlarının içinde kullanabilirsiniz.
                    Bu size birçok seçenek sunar ve hikayenizi gerçekten etkileşimli hale getirmenize yardımcı olur.

                    ### Alıştırma 1
                    Kodu tamamlayın, böylece `{if}` doğru şekilde çalışsın.

                    ### Alıştırma 2
                    Hikayede, Ayşe'nin de eve gittiği kısmı için bir `{if}` ve `{else}` ekleyin.

                    ### Alıştırma 3
                    Seviye 8 'deki hikayenize geri dönün ve başka bir `{if}` içinde en az iki `{if}` kullanın.
                example_code: |
                    ```
                    {print} 'Ayşe şehir merkezinde yürüyor.'
                    yer = {ask} 'Ayşe bir dükkana mı giriyor, yoksa eve mi gidiyor?'
                    {if} yer {is} dükkan
                        {print} 'Dükkana girer.'
                        {print} 'Ayşe ilginç görünümlü bir kitap görür'
                        kitap = {ask} 'Ayşe kitabı satın aldı mı?'
                        {if} kitap {is} evet
                        _ {print} 'Ayşe kitabı satın alır ve eve gider.'
                        _ {else}
                        _ {print} 'Ayşe dükkânı terk eder ve eve gider.'
                    {else}
                        {print} 'Ayşe eve gider'
                    ```
            10:
                story_text: |
                    Bu seviyede {for} komutunu hikayenizde kullanabilirsiniz. Bu şekilde 'Brown bear, Brown bear, what do you see' adlı çocuk kitabını kolayca programlayabilirsiniz.

                    ### Alıştırma

                    Eğer bilmiyorsanız <a href="https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf"> hikayeye bir göz atın</a> , ve kitapta yazıldığı gibi yazdığınızdan emin olun. (Bunun gibi bir Türkçe kitap biliyorsanız onu da yazabilirsiniz)
                example_code: "```\nhayvanlar = _ , _ , _ \n{print} 'Brown bear, Brown bear'\n {print} 'What do you see?'\n```\n"
            12:
                story_text: |-
                    Bu seviyede, bir değişkene birden fazla kelimeyi kaydetmek için tırnak işaretlerine ihtiyaç duyulacaktır.

                    ### Alıştırma

                    Önceki seviyelerden bir hikaye bulun, herhangi bir seviye olabilir. Şimdi tırnak işaretlerinin doğru yerlere eklendiğinden emin olun.
                example_code: |
                    ```
                    isim = 'İngiltere Kraliçesi'
                    {print} isim ' bir parça kek yiyordu, sonra aniden…'
                    ```
            13:
                story_text: |
                    `{and}` ve `{or}` komutlarını kullanarak hikayelerinizi çok yönlü hale getirebilirsiniz. İki soru sorabilir ve cevapların bir karışımına yanıt verebilirsiniz.

                    ### Alıştırma 1
                    Örnek koda bakın ve tamamlayın. Ardından `{and}` veya `{or}` ile en az 2 `{if}` kodu daha ekleyin.

                    ### Alıştırma 2
                    Önceki bir seviyeden bir hikaye bulun ve bir `{and}` veya `{or}` ekleyin.
                example_code: |
                    ```
                    {print} 'Kahramanımız ormanda yürüyor.'
                    {print} 'Yol ikiye ayrılıyor'
                    yol = {ask} 'Hangi yolu seçmeli?'
                    silah = {ask} 'Hangi silahı çekiyor?'
                    {if} yol {is} 'sol' {and} silah {is} 'kılıç'
                        _
                    ```
            15:
                story_text: |
                    `{while}` döngüsünü kullanmak hikayelerinizi daha ilginç hale getirebilir. Örneğin, oyun bitene kadar oynayabilmek için `{while} oyun == 'devam'` kullanabilirsiniz.
                    Ya da `{while} kılıç == 'kayıp'` kullanabilirsiniz, böylece oyuncu bir şey bulana kadar oyuna devam edemez.

                    ### Exercise
                    The example code shows you how to use the `{while}` loop in a story. Now **think of your own scenario** in which the player has to find something before they can continue.
                example_code: |
                    ```
                    anahtarlar = 'kayıp'
                    {print} 'Bahçenizde duruyorsunuz ve anahtarlarınızı kaybettiniz.'
                    {print} 'Onları nerede aramak istersiniz?'
                    {print} 'Seçebilirsiniz: ağaç, çiçeklik, kaya, posta kutusu'
                    {while} anahtarlar == 'kayıp'
                        yer = {ask} 'Nereye bakmak istiyorsun?'
                        {if} yer == 'çiçeklik'
                            {print} 'İşte buradalar!'
                            anahtarlar = 'bulundu'
                        {else}
                            {print} 'Hayır, burada değiller: ' yer
                    {print} 'Şimdi eve girebilirsiniz!'
                    ```
            18:
                story_text: |
                    Başka bir hikaye yazdıracağız, ancak şimdi `{print}` ile parantez kullanmak zorundayız.

                    ### Alıştırma 1
                    En az 5 cümlelik bir hikaye oluşturun. Henüz herhangi bir 'isim' kullanmak zorunda değilsiniz.
                example_code: |
                    ```
                    {print}('Bu hikayeye hoş geldiniz!')
                    ```
                story_text_2: |
                    ### Alıştırma 2
                    Sizin için zaten bir `{input}` hazırladık. Öncelikle hikayenizde `isim` değişkenini kullanın.
                    Ardından ikinci bir `{ask}` ekleyin ve bu değişkeni de kullanın.
                    İpucu: `{print}` içinde, metin ve değişkenler arasındaki virgülleri unutmayın!
                example_code_2: |
                    ```
                    isim = {input}("Senin adın ne?")
                    {print}('Bu hikayeye hoş geldin!')
                    ```
    add_remove_command:
        name: '{add} {to} & {remove} {from}'
        default_save_name: ekle_çıkar_komutu
        description: ekle şuraya ve çıkar şuradan komutlarına giriş
        levels:
            3:
                story_text: |
                    ## ekle şuraya
                    Listeye `{add} {to_list}` komutu ile yeni öğeler ekleyebilirsiniz. Listeye bir öğe eklemek için sadece şunu yazın: `{add} penguen {to} hayvanlar` , ya da örnek koddaki gibi `{ask}` komutunu kullanabilirsiniz.
                example_code: |
                    ```
                    hayvanlar {is} köpek, kedi, kanguru
                    sevilen {is} {ask} En sevdiğin hayvan hangisi?
                    {add} sevilen {to_list} hayvanlar
                    {print} Benim seçimim hayvanlar {at} {random}
                    ```
                story_text_2: |
                    ## kaldır şuradan
                    Bir listeye öğe ekleyebiliyorsanız, elbette bunları listeden çıkarabilirsiniz de. Bu işlem `{remove} {from}` komutu ile yapılır.
                example_code_2: |
                    ```
                    hayvanlar {is} köpek, kedi, kanguru
                    sevilmeyen {is} {ask} Hangi hayvanı sevmiyorsun?
                    {remove} sevilmeyen {from} hayvanlar
                    {print} Benim seçimim hayvanlar {at} {random}
                    ```
                story_text_3: |
                    ### Alıştırma
                    Bu yeni komutları sanal restoranımızda deneyin. Oyuncunun istediği lezzeti listeye ekleyin ve alerjisi olduğu lezzetleri listeden çıkarın.
                example_code_3: |
                    ```
                    {print} Gizemli milkshake
                    çeşitler {is} çilek, çikolata, vanilya
                    beklenti {is} {ask} Nasıl bir lezzet bekliyorsunuz?
                    _
                    alerjiler {is} {ask} Herhangi bir çeşide alerjiniz var mı?
                    _
                    {print} Size çeşitler {at} {random} milkshake hazırladık
                    ```
    and_or_command:
        name: '{and} & {or}'
        default_save_name: ve veya
        description: ve ile veya 'ya giriş
        levels:
            13:
                story_text: |-
                    Şimdi `{and}` ve `{or}`'yı öğreneceğiz! İki ifadeyi birden kontrol etmek istiyorsanız, iki tane `{if}` kullanmak zorunda değilsiniz, bunun yerine `{and}` ve `{or}` kullanabilirsiniz.

                    Eğer `{and}` kullanırsanız, `{and}` nin sağındaki ve solundaki her iki ifadenin de doğru olması gerekir. Ayrıca `{or}` da kullanabiliriz. O zaman sadece bir ifadenin doğru olması gerekir.
                example_code: |
                    ```
                    isim = {ask} 'adınız nedir?'
                    yaş = {ask} 'yaşınız kaç?'
                    {if} isim {is} 'Hedy' {and} yaş {is} 2
                        {print} "Sen gerçek Hedy'sin!"
                    ```

                        {print} "Sen gerçek Hedy'sin!"
    ask_command:
        name: '{ask}'
        default_save_name: sor_komutu
        description: sor komutuna giriş
        levels:
            1:
                story_text: |
                    ## sor komutu
                    Artık `{print}` komutunu kullanabildiğinize göre, bir sonraki komutu öğrenmeye hazırsınız: `{ask}`. `{ask}` komutunu kullanarak bir soru sorabilirsiniz. Şuna bir bakın:
                example_code: |
                    ```
                    {print} Merhaba!
                    {ask} Senin adın ne?
                    ```
                story_text_2: "## `{echo}` komutu \nEğer bilgisayarın cevabı size tekrar etmesini istiyorsanız, `{echo}` komutunu kullanabilirsiniz. Cevabın cümlenin sonunda yankılandığını unutmayın, yani bu örnek için merhaba'dan sonra.\n"
                example_code_2: |
                    ```
                    {print} Merhaba!
                    {ask} Senin adın ne?
                    {echo} merhaba
                    ```
                story_text_3: |
                    ### Alıştırma
                    `{ask}` ve `{echo}` komutlarını deneyin. İlk olarak, bu programı çalıştırmak için boşlukları doldurun.
                    Daha sonra `{ask}` komutunu kullanarak 2 soru daha sorun, her `{ask}` komutundan sonra cevabı ekrana yazdırmak için bir `{echo}` kullanın.
                example_code_3: |
                    ```
                    _ Nasılsın?
                    _
                    ```
            2:
                story_text: |
                    ## sor komutu
                    Artık kodlarımızda **değişkenleri** kullanabildiğimize göre, `{echo}` komutuna artık ihtiyacımız yok.
                    Sorularımızın cevaplarını saklamak için değişkenler kullanabiliriz ve bu şekilde kodlarımızda birden fazla sorunun cevabını kullanabiliriz.
                    Şuna bir bakın:

                    Bu şekilde kodunuz etkileşimli hale geliyor!
                example_code: |
                    ```
                    isim {is} {ask} Senin adın ne?
                    {print} Merhaba isim
                    yaş {is} {ask} Kaç yaşındasın?
                    {print} isim yaş yaşındadır.
                    ```
                story_text_2: |
                    ### Alıştırma
                    Önceki sekmede `{is}` komutu ile değişkenleri ayarlama alıştırması yaptınız.
                    En az 3 değişken oluşturdunuz ve bunları bir yazdır komutu ile kullandınız.
                    Şimdi, değişkenleri ayarlamak yerine, örneğimizde yaptığımız gibi değişkenleri etkileşimli hale getirmenizi istiyoruz.

                    Kodunuzu önceki sekmeden kopyalayın ve `{ask}` komutlarını kullanarak değişkenleri etkileşimli hale getirin.
                example_code_2: |
                    ```
                    favori_hayvan {is} {ask} En sevdiğin hayvan hangisi?
                    {print} En sevdiğim hayvan favori_hayvan
                    ```
            18:
                story_text: Python kodunu elde etmek için yapmamız gereken son değişiklik `{ask}` ifadesini `{input}` olarak değiştirmektir.
                example_code: |
                    ```
                    {print}('Benim adım Hedy!')
                    isim = {input}('Senin adın ne?')
                    {print}('Demek senin ismin ', isim)
                    ```
    blackjack:
        name: Yirmibir
        default_save_name: Yirmibir
        description: 21'e olabildiğince yaklaşmaya çalışın
        levels:
            17:
                story_text: |
                    Yirmibir, 21 puana mümkün olduğunca yaklaşmanız gereken basit bir kart oyunudur. İki kart alırsınız. Her kart kendi rakam değerindedir ve surat kartları (Vale, Kız ve Papaz) 10 puan değerindedir.
                    As ya 1 ya da 11 puan değerindedir (seçebilirsiniz). Rakibiniz olan dağıtıcı da iki kart alır.
                    İsterseniz başka bir kart daha alabilirsiniz ve onun puanı toplamınıza eklenir. Dağıtıcı da başka bir kart almayı seçebilir.
                    Ancak 21 puandan fazla almamaya dikkat edin, çünkü alırsanız kaybedersiniz!
                    21'i aşmadan 21'e en çok yaklaşan oyuncu kazanır!

                    ### Exercise
                    In this adventure we code the first part of our Blackjack game. We'll create a function to calculate how many points a card is worth.

                    ***Set the variables***
                    Start by making a list of all the cards, from 2 to Ace. Next make a list of the face cards, so Jack, Queen and King. Then pick a random card from the list of cards to be card_1.

                    ***Create a function to calculate the points***
                    Create a function that calculates how many points a card is worth.
                    All the face cards are worth 10 points, the Ace is worth 11 and all the other cards are worth their numeral.
                    Return the variable `points` at the end of the function.

                    ***Test the function***
                    Test if your function is working properly. Finish the first print command by filling in which card you've drawn. Then finish the second line by calling the function with card_1.
                    Run the code a couple of times. Are you happy with the results? Great! Then you can remove the testing part and move on the the next tab!
                example_code: |
                    ```
                    {print} 'BLACKJACK'

                    # Set these variables
                    cards = _
                    face_cards = _
                    card_1 =

                    # Create a function to calculate the points
                    {define} calculate_points {with} card:
                        {if} card {in} face_cards:
                            points = _
                        {elif} _
                            _
                        {else}:
                            _
                        _ points

                    # Test your function
                    {print} 'Your card is a ' _
                    {print} 'That is worth ' _ ' points'.
                    ```
    blackjack_2:
        name: Blackjack 2
        default_save_name: Blackjack_2
        description: Blackjack part 2
        levels:
            17:
                story_text: |
                    ### Exercise
                    In this adventure we code the second part of our Blackjack game.

                    ***Paste your code from the previous adventure***
                    In the previous adventure you've started a list of variables and created a function to calculate how many points a card is worth. Copy your code and paste it here. Mind that you don't need the testing part, so if you haven't removed that yet, please do so now.

                    ***Add more variables***
                    You have already set the lists `cards` and `face_cards` and the variable `card_1`. Underneath those variables create 3 more variables: `card_2`, dealer_card_1` and `dealer_card_2`. These variables are all set to a random card from the list of cards.

                    ***Add up points***
                    To calculate how many points you have scored we call the function with card 1 and we do it again for card 2. Then we add both these scores together to get your total.
                    Do the same thing for the dealers points, but be sure to use the dealer's cards and not your own!

                    ***2 Aces***
                    You're doing great! Almost all scores can be calculated now. There is only one exception: 2 Aces. If you get 2 Aces, your total is 12 points and not 22 (because 22 points would be losing!). This of course also goes for the dealer.

                    ***Show the score***
                    Lastly, you want to tell the program to tell you which cards you have drawn and how many points that is. Then show which cards the dealer has and how many points they have.

                    ***Continue in the next tab***
                    Great! You have finished this part of the game! Copy your code and go to the next tab to learn how to ask for an extra card and to declare a winner.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Add these variables to the list of variables
                    card_2 = _
                    dealer_card_1 = _
                    dealer_card_2 = _

                    # Add up your points
                    your_points_1 = {call} _ {with} card_1
                    your_points_2 = _
                    your_total = _

                    # Add up the dealers points
                    dealer_points_1 = _
                    _
                    _

                    # 2 Aces
                    {if} card_1 == 'Ace' {and} _
                        your_total = 12
                    {if} dealer_card_1 _
                        dealer_total = _

                    # Show the score
                    {print} 'You have drawn a ' _ ' and a ' _ '. That is ' _ ' points'
                    {print} 'The dealer has drawn a ' _ ' and a ' _ '. That is ' _ ' points'
                    ```
    blackjack_3:
        name: Blackjack 3
        default_save_name: Blackjack_3
        description: Blackjack part 3
        levels:
            17:
                story_text: |
                    In the previous tabs you have learned how to draw 2 random cards for yourself and for the dealer and to calculate how many points you both got.
                    In this adventure we add the option to ask for an extra card for both you and the dealer.

                    ### Exercise
                    ***Paste your code from the previous adventure*** Firstly, copy your code from the previous tab and paste it here.

                    ***Extra card for you*** If you want, you can get an extra card to get your total as close to 21 as possible. First ask the player if they want an extra card.
                    If they do, pick a random card and print what they have drawn. If the card is not an Ace, you can call the function and add the points to your total.
                    In case the card is an Ace, you can't use the function, because the Ace can be either 1 point or 11 points, depending on how many points you already have earned.
                    If your total is less than 11, you want the ace to be 11 points (because this is closest to 21). So you add 11 points to your total.
                    If the total is more than or equal to 11, you want the ace to be 1 point (because you don't want more than 21 points). So you add 1 point to your total.
                    Lastly, print your new total of points.

                    ***Extra card for the dealer*** The dealer can also get an extra card. The dealer doesn't need to be asked, because they always get an extra card if their total is less than 17.
                    Copy the 'Extra card for you code' and paste it in the dealers section. Then change it to fit the dealer picking an extra card and getting points added to their total.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Extra card for you
                    hit = {ask} _
                    {if} hit == 'yes':
                        card_3 = _
                        {print} _
                        {if} card_3 _ 'Ace':
                            your_points_3 = _
                            your_total = _
                        {else}:
                           {if} your_total _
                                _
                            {else}:
                                _
                        {print} _

                    # Extra card for the dealer
                    {if} dealer_total < 17
                    _
                    ```
    blackjack_4:
        name: Blackjack 4
        default_save_name: Blackjack_4
        description: Blackjack part 4
        levels:
            17:
                story_text: |
                    In the last 3 adventures you have alsmost created a working blackjack game! The only thing left to do is to decide a winner!

                    ### Exercise
                    ***Paste your code from the previous adventure*** Start by pasting the code that you've made so far into your programming field.

                    ***Decide a winner***
                    Firstly, if you and the dealer have an equal amount of points, it's a draw.
                    Secondly, if the dealer has more than 21 points and you don't, you are the winner.
                    Thirdly, if both you and the dealer have less than 22 points, we have to see who came closest to 21. We do that by comparing who has the highest score. Is your total higher than the dealer's total, then you are the winner. If not, the dealer wins.
                    Lastly, in all other scenarios (e.g. you have more than 21 points and the dealer doesn't, or you both have more than 21 points) you are the loser.

                    ***Enjoy the game!***
                    Does your game work properly? Amazing! You have done a great job! Enjoy your game!
                    If it doesn't work right away, no worries, you might have made a mistake. Just keep calm and bebug your code using the ladybug button.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Decide a winner
                    {if} _
                        {print} 'Its a draw! Play again!'
                    {elif} _
                        {print} 'You win!'
                    {elif} _ :
                        {if} _:
                            {print} _
                        {else}:
                            {print} _
                    {else}:
                        _
                    ```
    calculator:
        name: Hesap Makinesi
        default_save_name: Hesap Makinesi
        description: Bir hesap makinesi oluşturun
        levels:
            6:
                story_text: |
                    Artık matematik yapabildiğinize göre, kendi başınıza bir hesap makinesi yapabilirsiniz!
                example_code: |
                    ```
                    sayı_1 = {ask} 'İlk sayıyı girin:'
                    sayı_2 = {ask} 'İkinci sayıyı girin:'
                    doğru_cevap = sayı_1 * sayı_2
                    {print} sayı_1 ' kere ' sayı_2 ' eder ' doğru_cevap
                    ```
                story_text_2: |
                    ### Alıştırma
                    Yukarıdaki hesap makinesi, cevabı sizin için hesaplayacaktır, ancak bunun gibi bir programı kendi matematik becerilerinizi test etmek için de yapabilirsiniz:
                    Tamamlamak için boşlukları doldurun!
                example_code_2: |
                    ```
                    doğru_cevap = 11 * 27
                    cevap = {ask} '11 kere 27 kaç eder?'
                    {if} cevap {is} _ {print} 'Aferin, iyi işti!'
                    {else} {print} 'Yanlış! doğru cevap ' _
                    ```
                story_text_3: |
                    **Ek Görev** `{random}` komutunu kullanarak bilgisayarın kendi başına rastgele maddeler yapmasını da sağlayabilirsiniz.
                example_code_3: |-
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number_1 = _
                    number_2 = _
                    correct_answer = number_1 * number_2
                    given_answer = 'What is ' number_1 ' times ' number_2 '?'
                    {if} _
                    {else} _
            9:
                story_text: |
                    Seviye 6'da bir hesap makinesi oluşturmuştunuz, bu seviyede bu kodu birden fazla soru soracak şekilde genişletebilirsiniz.

                    ### Alıştırma 1
                    Programın çalışması için 10. satırı tamamlayabilir misiniz?

                    ### Alıştırma 2
                    Oyuncu doğru veya yanlış bir cevap girdiğinde ona geri bildirim verin. Bunu başarmak için programınızı bir `{else}` ile genişletin.
                example_code: |
                    ```
                    puan = 0
                    {repeat} 10 {times}
                        sayılar = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        sayı1 = sayılar {at} {random}
                        sayı2 = sayılar {at} {random}
                        cevap_correct = sayı1 * sayı2
                        {print} 'Söyle bakalım ' sayı1 ' kere ' sayı2 ' kaç eder?'
                        cevap = {ask} 'Cevabını buraya yaz...'
                        {print} 'Cevabın ' cevap
                        {if} _ {is} _
                            puan = puan + 1
                    {print} 'Aferin, iyi işti! Toplam puanın... 10 üzerinden ' puan
                    ```
            10:
                story_text: |
                    This calculator game helps you practise your tables of multiplication!
                    ### Exercise
                    Fill in the blanks. We want this program to ask the player these questions:
                    ```
                    How much is 1 times 1?
                    How much is 1 times 2?
                    How much is 1 times 3?
                    How much is 2 times 1?
                    How much is 2 times 2?
                    How much is 2 times 3?
                    How much is 3 times 1?
                    How much is 3 times 2?
                    How much is 3 times 3?
                    _
                    ```
                example_code: |
                    ```
                    numbers = 1, 2, 3
                    {for} _
                        {for} _
                            answer = {ask} _
                            correct = number_1 * number_2
                            {if} answer {is} correct
                                {print} 'Great job!'
                            {else}
                                {print} 'That is wrong. The right answer is ' correct
                    ```
            11:
                story_text: |
                    Bir `{for}` ile çarpım tablosu alıştırma programını basitleştirebilirsiniz.

                    ### Alıştırma 1
                    Örnek kodu güzel bir çarpım tablosu yazdıracak şekilde geliştirin: <br> "1 kere 10 eder 10", "2 kere 10 eder 20" gibi.

                    ### Alıştırma 2
                    Seviye 10'daki çarpma kodunuza geri dönün ve kodu `{for}` ve `{range}` kullanacak şekilde değiştirin.
                example_code: |
                    ```
                    sayı = 10
                    {for} i {in} {range} 1 {to} 10
                        {print} i * sayı
                    ```
            12:
                story_text: |
                    Bu seviyede, ondalık sayılar ile çalışan bir hesap makinesi yapabilirsiniz.

                    ### Alıştırma 1
                    Hesap makinesini tamamlamak için boşlukları doldurun. Ondalık sayılar için virgül değil nokta kullanmayı unutmayın.

                    ### Alıştırma 2
                    Yeni bir matematik alıştırma programı oluşturun, ama şimdi ondalık sayıları kullanın.
                    Bir sayı listesi oluşturun, çarpma için iki tanesini seçin ve oyuncunun cevaplamasını sağlayın.
                    Ve tabii ki cevabı doğrulamanız gerekiyor! **Ek Görev** Can ekleyerek zorluğu artırın: Bir oyuncu yanlış cevap için bir can kaybetsin ve üç yanlış cevaptan sonra oyun sona ersin.
                example_code: |
                    ```
                    sayı1 = {ask} 'İlk sayı nedir?'
                    sayı2 = {ask} 'İkinci sayı nedir?'
                    cevap = _
                    {print} sayı1 ' artı ' sayı2 ' eşittir ' _
                    ```
            13:
                story_text: |
                    ### Alıştırma 1
                    Alıştırma programını biraz daha zorlaştıralım. Oyuncu şimdi iki soruya doğru cevap vermek zorunda. Programı tamamlamak için boşlukları doldurun.

                    ### Alıştırma 2 Ek Görev
                    Bazen hesaplamaların birden fazla doğru cevabı vardır. Örneğin, 10 hem 5'e hem de 2'ye bölünebilir. Dolayısıyla, "Hangi sayı 10'u böler?" sorusunu hem 2 hem de 5 cevaplanabilir.
                    Birden fazla doğru cevabı olan bir hesaplama sorun, oyuncudan cevaplamasını isteyin ve `{or}` kullanarak doğru olup olmadığını belirleyin.
                    Programlama alanını temizleyin ve kendi çözümünüzü oluşturun.
                example_code: |
                    ```
                    cevap1 = {ask} '10 kere 7 kaç eder?'
                    cevap2 = {ask} '6 kere 7 kaç eder?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
            14:
                story_text: |
                    In this adventure you will build a calculator that calculates your mean grade for you. If you get your calculator to work, you can move on to the next adventure, which allows you to add two extra features.

                    ### Exercise 1
                    Fill in the blanks to get the calculator to work.
                    * Start with the fourth line, add a question to figure out what grade the student got.
                    * In the fifth line you'll want to calculate the total of all grades, so the total = total + grade.
                    * Then we get to set the return value. We want to return the mean, so the total devided by the amount of tests (4).
                    * Lastly we finish the code by calling the function in line 8.

                    Did you get it? Awesome! Would you like to add even more to your calculator? **This adventure continues in the next tab!**
                example_code: |
                    ```
                    {define} calculate_mean_grade
                        total = 0
                        {for} i {in} {range} 1 {to} 4
                            grade = {ask} _
                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
                    ```

                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
            15:
                story_text: |
                    Önceki bir seviyede yapmayı öğrendiğiniz hesap makinesi oyununa `{while}` döngüsünü ekleyebilirsiniz.
                    Bu, oyuncunun yanlış cevap vermesi durumunda bir sonraki soruya devam edememesini sağlar.

                    ### Exercise
                    Add the `{while}` loop in the function, ask the player what number_1 times number_2 is and print their answer.
                    Then `{call}` the function.
                example_code: |
                    ```
                    {define} new_question
                        numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        number_1 = numbers {at} {random}
                        number_2 = numbers {at} {random}
                        correct = number_1 * number_2
                        answer = 0
                        _
                        _
                        _
                        {print} 'Well done!'

                    {print} 'Give 10 correct answers to win!'
                    {for} i {in} {range} 1 {to} 10
                        _
                    {print} 'You win!'
                    ```
    calculator_2:
        name: Calculator 2
        default_save_name: Calculator 2
        description: Calculator 2
        levels:
            14:
                story_text: |
                    ### Exercise 2
                    **This is the second part of this adventure.** The adventure starts in the previous tab.
                    Of course, you don't always want to calculate the mean of 4 tests. You might want to calculate the mean of 10 tests or only 2...
                    We can fix this problem by adding the argument and variable 'amount_of_tests'.
                    * Start a new line on line 3. Set the amount_of_tests argument by asking the student how many tests they have made.
                    * Change the 4 in line 4 to the new argument amount_of_tests.
                    * Lastly, change the 4 in line 6 to amount_of_tests

                    Try out your new program. Does it work?

                    ### Exercise 3
                    Did you want to make your program even better? Great! In the previous program you could only calculate the mean grade of 1 subject, but it would be better if you could calculate the mean grade for all subjects you want!
                    We won't tell you how to do it, but we will give you one tip: Start your code in line 1 with: define calculate_mean_grade with subject.
                example_code: |
                    ```
                    # Use your own code from the previous adventure.
                    ```
    clear_command:
        name: '{clear}'
        default_save_name: temizle_komutu
        description: temizle komutu
        levels:
            4:
                story_text: |
                    Yeni bir komut zamanı! `{clear}` ile çıktı ekranınızdaki tüm metni temizleyebilirsiniz. Bu şekilde ekranınızın çok fazla metinle dolmasını önleyebilirsiniz.
                    Dikkat! Eğer bir `{clear}` komutu kullanıyorsanız, bunun yanında bir `{sleep}` kullanmayı unutmayın. Aksi takdirde Hedy size okumaya zaman bırakmadan ekranınızı temizleyecektir!
                example_code: |
                    ```
                    {print} '3'
                    {clear}
                    {print} '2'
                    {clear}
                    {print} '1'
                    {clear}
                    {print} 'Beklemek...'
                    {sleep} 3
                    {clear}
                    {print} 'SÜRPRİZ!'
                    ```
    debugging:
        name: hata ayıklama
        default_save_name: hata ayıklama
        description: debugging adventure
        levels:
            1:
                story_text: |-
                    Welcome to a debugging adventure. Debugging a code means getting rid of mistakes in the code.
                    That means that in these debugging adventures, we will show you code that does not work yet.
                    You will have to figure out what's wrong and correct the mistakes.

                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} I love programming
                    Do you love programming too?
                    {echo}
                    {print} What are your hobbies?
                    {echo} Your hobbies are
                    ```
            2:
                story_text: |-
                    Welcome to a debugging adventure. Debugging a code means getting rid of mistakes in the code.
                    That means that in these debugging adventures, we will give you a code that does not work yet.
                    You will have to figure out what's wrong and correct the mistakes.

                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    destination {ask} Where are you going on holidays?
                    {print} The flight to dstination leaves at 3 pm.
                    {ask} Did you check in your luggage yet?
                    {echo}
                    {print} Let me print your boarding pass for you.
                    {sleep}
                    Here you go! Have a nice trip!
                    ```
            3:
                story_text: |-
                    Welcome to a debugging adventure. Debugging a code means getting rid of mistakes in the code.
                    That means that in these debugging adventures, we will give you a code that does not work yet.
                    You will have to figure out what's wrong and correct the mistakes.

                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    movie_choices {is} dracula, fast and furious, home alone, barbie
                    chosen_movie {is} movies {at} {random}
                    {print} Tonight we will watch chosen _movies
                    like {ask} Do you like that movie?
                    {print} Tomorrow we will watch something else.
                    {add} chosen_movie {to} movie_choices
                    {print} Tomorrow we will watch tomorrows_movie
                    tomorrows_movie {is} movie_choices {at} {random}
                    I'll go get the popcorn! {print}
                    ```
            4:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to the online library!
                    {ask} What genre of books do you like?
                    {print} You like genre
                    author {is} {ask} 'Who's your favorite author?'
                    {print} 'author is your favorite author'
                    {print} Hmmm... i think you should try... books {at} {random}
                    ```
            5:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} Welcome to Swimming Pool Hedy!
                    class {is} {ask} 'Are you here to join a class today?'
                    {if} class yes
                    {print} 'Great! You're joining a class!
                    {print} {else} 'You will not be joining a class'
                    discount {is} 'Do you have a discount code?'
                    {if} discount {is} yes
                    discount_answer {is} {ask} 'What's your discount code?'
                    discount_codes = Senior4231, Student8786, NewMember6709
                    {if} discount_answer {is} {in} discount_cods
                    {print} 'That will be $3,50'
                    'That will be $5,50'
                    {print} 'Have a nice swim!'
                    ```
            6:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Vending machine'
                    chosen_product = {ask} 'Please select a product'
                    1_dollar_products = coke orange juice water
                    2_dollar_products = chocolate, cookie, museli bar
                    3dollar_prodcuts = potato chips, beef jerky, banana bread
                    {if} chosen {is} {in} 1_dollar_products
                    price = 1
                    {if} chosen_product {is} 2_dollar_products
                    price = 2
                    {else} chosen_product {in} 3_dollar_products
                    price = 3
                    amount_of_products = '{ask} How many of ' chosen_product would you like to have?'
                    total = price + amount_of_product
                    {print} 'That will be $' price 'please'
                    ```
            7:
                story_text: |-
                    ### Exercise
                    Surprise! This program looks more like an output than a code. And yet, we don't want you to just add `{print}` commands in front of each line.
                    Fix this program to turn it into the nursery rhyme 'Brother John (Frère Jaques)' by using the {repeat} command of course!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    Are you sleeping?
                    Brother John!
                    Morning bells are ringing!
                    Ding, dang, dong!
                    ```
            8:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to Manicures and Pedicures by Hedy'
                    bodypart = {ask} 'Are you getting your fingernails or toenails done today? Or both?'
                    {if} bodyparts {is} both
                            {print} That will be $25'
                            price = 25
                        {else}
                            {print} That will be $18'
                            price = 18
                    color = {ask} What color would you like?
                    sparkles = {ask} 'Would you like some sparkles with that?'
                    {if} sparkles {is} yes
                        {print} 'We charge $3 extra for that'
                    price = price + 3
                    {else} {print} 'No sparkles' {print} 'So no extra charge'
                    {sleep} 5
                    {print} 'All done! That will be $' price ' please!'
                    {print} 'Thank you! Byebye!'
                    ```
            9:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to our sandwich shop'
                    amount 'How many sandwiches would you like to buy?'
                    {repeat} amount {times}
                    {ask} {is} {ask} 'What kind or bread would you like your sandwich to be?'
                    types_of_bread {is} white, wheat, rye, garlic, gluten free
                    {if} chosen_bread in types_of_bread
                    {print} 'Lovely!'
                    {else}
                    'I'm sorry we don't sell that'
                    topping {is} {ask} 'What kind of topping would you like?'
                    sauce {is} {ask} 'What kind of sauce would you like?'
                    {print} One chosen_bread with topping and sauce.
                    price = amount * 6
                    {print} 'That will be 'price dollar' please'
                    ```

                    price = amount * 6
                    {print} 'That will be 'price dollar' please'
            10:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    names = Muad Hasan Samira Noura
                    activities = fly a kite, go swimming, go hiking, catch tan in the sun
                    {for} name {is} names
                    {print} At the beach name loves to activity at random
                    ```
            11:
                story_text: |-
                    ### Exercise
                    Debug this calender program. The output of this program is supposed to look like a list of dates.
                    For example:

                    ```
                    Hedy calender
                    Here are all the days of November
                    November 1
                    November 2
                    November 3
                    ```
                    And so on.

                    Mind that you have to test your code extra carefully for the month February, because the amount of days in this month changes in leap years.
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    print 'Hedy calender'
                    months_with_31 days = January, March, May, July, September, October, December
                    months_with_30_days = April, June, August, November
                    month = ask 'Which month would you like to see?'
                    if month in months_with_31_days
                        days = 31
                        if month in months_with30_days
                            days = 30
                    if month = February
                        leap_years = 2020, 2024, 2028, 2036, 2040, 2044, 2028
                        year = ask 'What year is it?'
                    if year in leap_years
                        days = 29
                    else
                        days = 28

                    print 'Here are all the days of ' moth
                    for i in range 1 to days
                        print month i
                    ```
            12:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define greet
                    greetings = 'Hello', 'Hi there', 'Goodevening'
                        print greetings at random

                    define take_order
                        food = ask 'What would you like to eat?'
                        print 'One food'
                        drink = 'What would you like to drink?'
                        print 'One ' drink
                        more = ask 'Would you like anything else?'
                            if more is 'no'
                        print 'Alright'
                            else
                            print 'And ' more
                    print 'Thank you'

                    print 'Welcome to our restaurant'
                    people = ask 'How many people are in your party tonight?'
                    for i in range 0 to people
                        call greet_costumer
                    ```
            13:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    defin movie_recommendation with name
                        action_movies == 'Die Hard', 'Fast and Furious', 'Inglorious Bastards'
                        romance_movies = 'Love Actually', 'The Notebook', 'Titanic'
                        comedy_movies = 'Mr Bean' 'Barbie''Deadpool'
                        kids_movies = 'Minions', 'Paddington', 'Encanto'
                        if name is 'Camila' or name is 'Manuel'
                            recommended_movie = kids_movie at random
                        if name is 'Pedro' or 'Gabriella'
                                mood = ask 'What you in the mood for?'
                            if mood is 'action'
                                recommended_movie = comedy_movies at random
                            if mood is 'romance'
                                recommended_movie = romance_movies
                        if mood is 'comedy'
                                recommended_movie = comedy_movies at random

                    print 'I would recommend ' recommended_movie ' for ' name

                    name = ask 'Who is watching?'
                    recommendation = ask 'Would you like a recommendation?'
                    if recommendaion is 'yes'
                    print movie_recommendation with name
                    else
                    print 'No problem!'
                    ```
            14:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define calculate_heartbeat
                        print 'Press your fingertips gently against the side of your neck'
                        print '(just under your jawline)'
                        print 'Count the number of beats you feel for 15 seconds'
                        beats == ask 'How many beats do you feel in 15 seconds?'
                        heartbeat = beats*4
                        print 'Your heartbeat is ' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print 'Your heartbeat seems fine'
                        else
                            if heartbeat > 60
                                print 'Your heartbeat seems to be too low'
                            if heartbeat < 100
                                print 'Your heartbeat seems to be too high'
                            print 'You might want to contact a medical professional'

                    measure_heartbeat = ask 'Would you like to measure your heartbeat?'
                    if measure_heartbeat = 'yes'
                        call measure_heartbeat
                    else
                        'no problem'
                    ```

                        print '(just under your jawline)'
                        print 'Count the number of beats you feel for 15 seconds'
                        beats == ask 'How many beats do you feel in 15 seconds?'
                        heartbeat = beats*4
                        print 'Your heartbeat is ' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print 'Your heartbeat seems fine'
                        else
                            if heartbeat > 60
                                print 'Your heartbeat seems to be too low'
                            if heartbeat < 100
                                print 'Your heartbeat seems to be too high'
                            print 'You might want to contact a medical professional'

                    measure_heartbeat = ask 'Would you like to measure your heartbeat?'
                    if measure_heartbeat = 'yes'
                        call measure_heartbeat
                    else
                        'no problem'
            15:
                story_text: |-
                    ### Exercise
                    Debug this random children's story. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    names = 'Tanya', 'Romy', 'Kayla', 'Aldrin', 'Ali'
                    verbs='walking', 'skipping', 'cycling', 'driving', 'running'
                    locations = 'on a mountaintop', 'in the supermarket', 'to the swimming pool'
                    hiding_spots = 'behind a tree', under a table', in a box'
                    sounds = 'a trumpet', 'a car crash', 'thunder'
                    causes_of_noise = 'a television', 'a kid with firecrackers', 'a magic elephant', 'a dream'

                    chosen_ name = names at random
                    chosen_verb = verbs at random
                    chosen_location = 'locations at random'
                    chosen_sounds = noises at random
                    chosen_spot = hiding_spots random
                    chosen_causes = causes_of_noise at random

                    print chosen_name ' was ' chosen_verb ' ' chosen_location
                    print 'when they suddenly heard a sound like ' sounds at random
                    print chosen_name ' looked around, but they couldn't discover where the noise came from'
                    print chosen_name ' hid ' chosen_spot'
                    print 'They tried to look around, but couldn't see anything from there'
                    hidden = 'yes'
                    while hidden = 'yes'
                        print chosen_name 'still didn't see anything'
                    answer = ask 'does ' chosen_name ' move from their hiding spot?'
                        if answer = 'yes'
                            hidden == 'no'
                    print 'chosen_name moved from' chosen_spot
                    print 'And then they saw it was just' chosen_cause
                    print chosen_name 'laughed and went on with their day'
                    print The End
                    ```
            16:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                    Tip: Make sure that you only see your score once in the end.
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    country = ['The Netherlands', 'Poland', 'Turkey', 'Zimbabwe', 'Thailand', 'Brasil', 'Peru', 'Australia', 'India', 'Romania' ]
                    capitals = 'Amsterdam', 'Warshaw' 'Istanbul', 'Harare', 'Bangkok', 'Brasilia', 'Lima', 'Canberra', 'New Delhi', 'Bucharest'
                    score = 0
                    for i in range 0 to 10
                        answer = ask 'What's the capital of ' countries[i]
                        correct = capital[i]
                        if answer = correct
                            print 'Correct!'
                        score = score + 1
                        else
                            print 'Wrong,' capitals[i] 'in the capital of' countries[i]
                        print 'You scored ' score ' out of 10'

                    ```
            17:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define food_order
                        toppings = ask 'pepperoni, tuna, veggie or cheese?'
                        size = ask 'big, medium or small?'
                        number_of_pizza = ask 'How many these pizzas would you like?'

                        print 'YOU ORDERED'
                        print number_of_pizzas ' size  ' topping ' pizza'

                    define drinks_order
                        drink = ask 'water, coke, icetea, lemonade or coffee?'
                        number_of_drinks = ask 'How many of these drinks would you like?'

                        print 'YOU ORDERED'
                        print number_of_drinks ' ' drink

                    'Welcome to Hedy pizza'
                    more_food = ask 'Would you like to order a pizza?'
                    while more_food = 'yes'
                        return food_order
                        more_food = ask 'Would you like to order a pizza?'
                    more_drinks = ask 'Would you like to order some drinks?'
                    while more_drinks == 'yes'
                        call drink_order
                        more_drinks == ask 'Would you like to order more drinks?'


                    print 'Thanks for ordering!'
                    ```
            18:
                story_text: |-
                    ### Exercise
                    Debug this Old MacDonald program from level 16. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    for i in range 1 to 3
                        animal = animals[i]
                        sound = sounds[i]
                        print 'Old MacDonald had a farm'
                        print 'E I E I O!'
                        print 'and on that farm he had a ' animal
                        print 'E I E I O!'
                        print 'with a ' sound sound ' here'
                        print 'and a ' sound sound ' there'
                        print 'here a ' sound
                        print 'there a ' sound
                        print 'everywhere a ' sound sound
                    ```
    default:
        name: Giriş
        default_save_name: giriş
        description: Seviye açıklaması
        levels:
            1:
                story_text: |
                    Hedy'ye hoş geldiniz! Seviye 1'de, bir hikaye yazdırarak başlayabilirsiniz.

                    Programlama alanının altındaki yeşil 'Kodu çalıştır' düğmesini kullanarak kodu kendiniz deneyin.

                    Hazır mısınız? O zaman ilk komutunuzu öğrenmek için bir sonraki sekmeye gidin!
                example_code: |
                    ```
                    {print} Hello world!
                    ```
            2:
                story_text: |
                    Tebrikler! Seviye 2'ye ulaştınız. Umarım şimdiden bazı harika kodlar yapmışsınızdır!
                    İlk seviyede `{echo}` komutunun bir seferde sadece bir bilgi kaydedebildiğini fark etmiş olabilirsiniz.
                    Örneğin restoran macerasında, müşterinin ne yemek istediğini veya ne içmek istediğini yankılayabilirsiniz, ancak her ikisi tek bir cümlede olmaz.
                    Seviye 2'de bu durum değişiyor. Seviye 2'de, birden fazla bilgi parçasını kaydetmenize ve bunları istediğiniz yere yazdırmanıza olanak tanıyan değişkenlerle çalışmayı öğreneceksiniz.
                    O halde hadi bir sonraki sekmeye geçelim!
                example_code: |
                    **Uyarı! Bu kod çalışmaz!**
                    Hedy'de komutlar arada değişecektir. Örneğin `{echo}` sadece 1. seviyede çalışır. Bu seviyede cevapları geri yankılamanın daha iyi bir yolunu öğreneceksiniz.
                    ```
                    {print} Hedy's 'e Hoş Geldiniz
                    {ask} Ne yemek istersiniz?
                    {echo} Demek isteğiniz
                    {ask} Ne içmek istersiniz?
                    {echo} Demek isteğiniz
                    ```
            3:
                story_text: |
                    Bir önceki seviyede değişkenin ne olduğunu ve maceralarınızı daha etkileşimli hale getirmek için nasıl kullanabileceğinizi öğrendiniz.
                    Ancak... değişkenlerle yapabileceğiniz tek şey bu değil! Değişkenleri liste yapmak için de kullanabilirsiniz.
                    Ve hatta Hedy'nin bir listeden rastgele bir kelime seçmesini sağlayabilirsiniz, bu da gerçek oyunlar yapmanıza olanak tanır!
                    Bir sonraki sekmeye hızlıca göz atın!
            4:
                story_text: |
                    Önceki seviyelerde değişkenlerle pratik yaptınız, ancak bu problemle karşılaşmış olabilirsiniz.
                    Bunun gibi bir kodu çalıştırmayı denemiş olabilirsiniz:

                    Aslında şunu yazdırmak istedin

                    `Benim adım Sophie`

                    ama Hedy bunu yazdı

                    `Benim Sophie Sophie`.

                    Bu seviyede tırnak işaretleri kullanılarak bu sorun giderilir.
                example_code: |
                    ```
                    adım {is} Sophie
                    {print} Benim adım adım
                    ```
            5:
                story_text: |
                    Önceki seviyelerde, kodu her çalıştırdığınızda oyunlarınızı farklı kılan `{at} {random}` kullanmayı zaten öğrenmiştiniz.
                    Ancak bu gerçekten etkileşimli değil, oyuncunun oyunda neler olacağı üzerinde herhangi bir etkisi yok.

                    Bu seviyede, programınızda farklı yanıtlar vermenizi sağlayan `{if}` komutunu öğreneceksiniz. Bu şekilde örneğin bilgisayarınız için gizli bir şifre programlayabilirsiniz.
                    Yeni komut için bir sonraki sekmeye geçelim!
                example_code: |
                    ```
                    şifre {is} {ask} 'Doğru şifre nedir?'
                    ```
            6:
                story_text: |
                    Önceki seviyede `{ask}` ve `{if}` ile pratik yaptınız. Örneğin artık konuklara ne yemek istediklerini sorabilirsiniz.
                    Ancak henüz yapamadığınız şey, herkesin akşam yemeğinin fiyatını hesaplamak.

                    Bir sonraki seviye, programlarınızda toplama, çıkarma ve çarpma işlemlerini kullanmanızı sağlayacak. Bu şekilde restoranınızdaki fiyatları hesaplayabilir, ama aynı zamanda arkadaşlarınıza ve ailenize indirim yapmak için gizli bir kod ekleyebilirsiniz.
                    Bir sonraki seviyedeki bir başka seçenek de küçük kardeşinizin çarpma işlemlerinde pratik yapması için kendi matematik oyununuzu programlamaktır.
                    Gidip kendiniz görün!
                example_code: |
                    ```
                    yemek_ücreti {is} 0
                    içecek_ücreti {is} 0
                    toplam_ücret {is} 0
                    {print} 'McHedy'e Hoş Geldiniz'
                    sipariş {is} {ask} 'Ne yemek istersiniz?'
                    {if} sipariş {is} hamburger yemek_ücreti {is} 5
                    {if} sipariş {is} kızartma yemek_ücreti {is} 2
                    içecek {is} {ask} 'Ne içmek istersiniz?'
                    {if} içecek {is} su içecek_ücreti {is} 0
                    {else} içecek_ücreti {is} 3
                    toplam_ücret {is} yemek_ücreti + içecek_ücreti
                    {print} 'Toplamda 'toplam_ücret ' lira ödeyin, lütfen'
                    ```
            7:
                story_text: |
                    Harika bir iş çıkardınız! Bir sonraki seviyeye ulaştınız, bu da `{if}` ve `{else}` ile pratik yaptığınız anlamına geliyor. Muhtemelen kodlarınızın gittikçe uzadığını fark etmişsinizdir.
                    Örneğin 'Doğum Günün Kutlu Olsun' şarkısını programlamak isterseniz.

                    Bu, çoğunlukla aynı kelimeleri tekrar ve tekrar yazmak için çok fazla kod demek. Neyse ki bir sonraki sekmede `{repeat}` komutu ile bir kod satırını birden çok kez tekrarlamanıza olanak tanıyan bir çözüm öğreneceksiniz.
                example_code: |
                    ```
                    {print} 'mutlu yıllar sana'
                    {print} 'mutlu yıllar sana'
                    {print} 'Mutlu yıllar sevgili Hedy'
                    {print} 'mutlu yıllar sana'
                    ```
            8:
                story_text: |
                    Artık tek bir kod satırını nasıl tekrarlayacağınızı öğrendiniz. Bu kullanışlı olabilir, ancak her zaman yeterli değildir. Bazen aynı anda birden fazla satırı tekrarlamak istersiniz.
                    Bu seviye, birkaç kod satırını gruplandırmanıza ve bu küçük satır grubunu bir kerede tekrarlamanıza yardım edecek!
                example_code: |
                    ```
                    {repeat} 5 {times} {print} 'Bir sonraki sekmede birden fazla kod satırını aynı anda tekrarlayabilirsiniz!'
                    ```
            9:
                story_text: |
                    Harika bir iş! Yeni bir seviyeye daha ulaştınız! Bir önceki seviyede {if} veya {repeat} komutunda birden fazla kod satırı kullanmayı öğrendiniz. Ancak henüz ikisini birleştiremiyorsunuz...
                    İyi haberim var! Bu seviyede, bir {if} içine {if} veya bir {repeat} komutu koymanıza izin verilecektir.
                example_code: |
                    ```
                    cevap = {ask} 'Yeni bir şeyler öğrenmeye hazır mısınız?'
                    {if} cevap {is} evet
                        {print} 'Harika! eğer komutunda tekrarla komutunu kullanmayı öğrenebilirsiniz!'
                        {print} 'Yaşasın!'
                        {print} 'Yaşasın!'
                        {print} 'Yaşasın!'
                    {else}
                        {print} 'Belki de bir önceki seviyede biraz daha pratik yapmalısınız'
            10:
                story_text: |
                    Harika gidiyorsunuz! Önceki seviyelerde hep küçük bir sorunla karşılaştık. Satırları tekrarlamayı öğrendiniz, ama ya satırı biraz değiştirmek isterseniz?
                    Örneğin 'eğer mutluysan ve bunu biliyorsan.' şarkısını söylemek istiyorsunuz. Şöyle görünecektir:

                    Eğer bir sonraki mısranın 'ayaklarını yere vur', ve bir sonrakinin, ve bir sonrakinin de aynı olmasını istiyorsanız, kodu tamamen değiştirmeniz gerekir.
                    Bu seviyede, bir eylem listesi oluşturmanıza ve kodu her seferinde başka bir eylemle tekrarlamanıza olanak tanıyan `{for}` komutunu öğreneceksiniz!
                    Lütfen bir göz atın!
                example_code: |
                    ```
                    {repeat} 2 {times}
                        {print} 'Mutluysanız ve bunu biliyorsanız ellerinizi çırpın.'
                    {print} 'eğer mutluysanız ve bunu biliyorsanız ve gerçekten göstermek istiyorsanız'
                    {print} 'eğer mutluysanız ve bunu biliyorsanız ellerinizi çırpın'
                    ```
            11:
                story_text: |
                    Seviye 11'e ulaştınız, harika gidiyorsunuz! Daha yüksek seviyelerde, Hedy size Python programlama dilini öğretmeye daha fazla odaklanıyor.
                    Python'da `{repeat}` komutu yoktur, ancak {repeat} gibi çalışan bir komut vardır. Python dilinde `{repeat}` komutunun nasıl söylendiğini merak ediyor musunuz? Öğrenmek için hemen devam edin!
            12:
                story_text: |
                    Belki restoran maceranızda ondalık sayıları kullanmayı denemişsinizdir. Eğer denediyseniz, muhtemelen Hedy'nin bunları henüz anlamadığını ve her zaman yuvarladığını fark etmişsinizdir.
                    Bu seviyeden itibaren ondalık sayıları kullanabilirsiniz.
                example_code: |
                    ```
                    burger = 5
                    içecek = 2
                    toplam = burger + içecek
                    print 'Bir hamburger ve içecek sipariş ettiniz'
                    print 'Toplam ' toplam ' lira ödeyin lütfen'
                    ```
            13:
                story_text: |
                    Önceki seviyelerde iki `{if}` komutunu birbirinin içine nasıl yerleştireceğinizi öğrendiniz. Bu sorunsuz çalışır, ancak size bunun gibi çok uzun ve kullanışsız kodlar verir:

                    Bu sistemde hem doğru kullanıcı adını hem de doğru şifreyi vermeniz gerekmektedir.
                    Bu seviyede, bu kodu çok daha kısa ve anlaşılır hale getirecek `{and}` komutunu öğreneceksiniz!
                    Şuna bir bakın!
                example_code: |
                    ```
                    kullanıcı = {ask} 'Kullanıcı adınız nedir?'
                    şifre = {ask} 'Şifreniz nedir?'
                    {if} kullanıcı {is} 'Hedy'
                        {if} şifre {is} 'gizli'
                            {print} 'Hoş geldin Hedy!'
                        {else}
                            {print} 'Erişim reddedildi'
                    {else}
                        {print} 'Erişim reddedildi!'
                    ```
            14:
                story_text: |
                    Aşağıdaki program ile okulda bir dersi geçip geçmediğinizi hesaplayabilirsiniz (yani, altı yada daha yüksek bir not).
                    Bu kodun, 5. satırdaki çok uzun kod nedeniyle son derece verimsiz olduğunu görebilirsiniz.
                    1'den 5'e kadar tüm farklı notların ayrı ayrı programlanması gerekiyordu. Şanslısınız ki, bu seviyede bu son derece uzun kod olmadan bunu nasıl yapacağınızı öğreneceksiniz!
                example_code: |
                    ```
                    birinci_not = {ask} 'İlk sınavınızda kaç puan aldınız?'
                    ikinci_not = {ask} 'İkinci sınavınızda kaç puan aldınız?'
                    toplam = birinci_not + ikinci_not
                    ortalama_not = toplam / 2
                    {if} ortalama_not = 1 {or} ortalama_not = 2 {or} ortalama_not = 3 {or} ortalama_not = 4 {or} ortalama_not = 5
                        {print} 'Olamaz! Bu dersi geçemediniz.'
                    {else}
                        {print} 'Harika! Bu dersi geçtiniz!'
                    ```
            15:
                story_text: |
                    Aşağıdaki bu oyunda, oyuncunun istediği kadar oynayabilmesini sağlamak için bir kod yapılmıştır...
                    Ancak kod etkisiz ve çok uzun. Ayrıca, oyuncu 100 yerine 101 oyun oynamak isterse ne olacak?
                    Sonsuza kadar da oynayamaz mısın?
                    Bu seviyede tüm bunları çok daha kolay hale getiren bir komut öğreneceksiniz!
                example_code: |
                    ```
                    oyun {is} 'devam'
                    {for} i {in} {range} 1 {to} 100
                        {if} oyun {is} 'devam'
                            cevap = {ask} 'Devam etmek istiyor musun?'
                            {if} cevap {is} 'hayır'
                                oyun {is} 'bitti'
                            {if} cevap {is} 'evet'
                                {print} 'Tamamdır, devam ediyoruz.'
                    ```
            16:
                story_text: |
                    Bu seviyede gerçek Python koduna doğru biraz daha yakınlaşacağız. Ayrıca iki listeyi nasıl eşleştireceğinizi de öğreneceksiniz.
                    Bu şekilde, doğru hayvanın doğru sesle eşleştirildiği bir kod programlayabilirsiniz.
                    Çünkü aşağıdaki iki kod... açıkça saçmalıyorlar!
                example_code: |-
                    ```
                    hayvanlar = 'tavuk', 'köpek', 'inek'
                    sesler = 'gıtgıdak', 'havhav', 'möö'
                    {for} hayvan {in} hayvanlar
                        {print} 'Bir ' hayvan ' ses çıkarıyor ' sesler {at} {random}
                    ```
                    Bu şu şekilde de deneyebilirdiniz, ama...
                    ```
                    hayvanlar = 'tavuk', 'köpek', 'inek'
                    sesler = 'gıtgıdak', 'havhav', 'möö'
                    {for} hayvan {in} hayvanlar
                        {for} ses {in} sesler
                            {print} 'Bir ' hayvan ' ses çıkarıyor ' ses
                    ```
                    Not: Bu kodlar, bu bölümde bu haldeyken çalışmaz. Neresini düzelteceğinizi görmek için sonraki sekmeye gidin.
            17:
                story_text: |
                    Şimdi girintilemeyi biraz değiştireceğiz. Her girintiye ihtiyaç duyduğumuzda, girintiden önceki satırda `:` işaretine ihtiyacımız var.

                    Bu seviyede yeni bir komut da kullanabilirsiniz: `{elif}`. `{elif}` `{else} {if}`'in kısaltmasıdır ve 3 (veya daha fazla!) seçenek arasından seçim yapmak istediğinizde buna ihtiyacınız vardır.
                    Şuna bir bakın!
            18:
                story_text: |
                    Tebrikler! Hedy'nin son seviyesine ulaştınız! Burada oluşturduğunuz kodu replit veya PyCharm gibi gerçek Python ortamlarına kopyalayabilir ve orada öğrenmeye devam edebilirsiniz!
                    Ancak Python'un yalnızca İngilizce komutları okuyabildiğini unutmayın. Şimdiye kadar gördüğünüz komutları İngilizce olanları ile değiştirmeniz gerekecek. Komutları yazarken cümledeki yerlerinin biraz Tarzan'ca olduğunu farketmişsinizdir. Bunun sebebi, komut kelimelerinin aynı oldukları yerlere İngilizcelerini yazınca, kodunuzun gerçek bir Python programına dönüşebilmesiydi (tabi biraz da Türkçemizin bazı harflerini değiştirmek gerekecek ama bu pek bir sorun değil).
    dice:
        name: Zar
        default_save_name: Zar
        description: Kendi zarınızı yapın
        levels:
            3:
                story_text: |
                    Bu seviyede bir listeden seçim yapabiliriz. Bununla bilgisayarın zarın bir tarafını seçmesini sağlayabiliriz.
                    Evinizde dolabınızda bulunan oyunlara bir göz atın.
                    (Özel) bir zarı olan oyunlar var mı? Onları da bu kodla da kopyalayabilirsiniz.
                    Örneğin, üzerinde 1'den 5'e kadar sayılar ve bir solucan bulunan Solucan oyunu zarı.

                    ![üzerinde 1'den 5'e kadar sayılar ve solucan olan bir solucan zarı](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    seçimler {is} 1, 2, 3, 4, 5, solucan
                    {print} Attığın zar _ {at} {random} !
                    ```
                story_text_2: |
                    ### Alıştırma
                    Yukarıdaki örnekteki zarlar belirli bir oyun için zarlardır. Normal bir zar yapabilir misiniz?
                    Ya da farklı bir oyundaki diğer özel zarları?
                example_code_2: |
                    ```
                    seçimler {is} _
                    ```
            4:
                story_text: |
                    Bu seviyede, ayrıca zar da oluşturabilirsiniz. Ancak bu sefer örnek bir kod olmadan kendiniz deneyebilirsiniz!

                    ### Alıştırma
                    Bu seviyede kendi zarınızı yapın.
                    İpucu: Nasıl zar atılacağı hakkında hiçbir fikriniz yoksa. Bir önceki seviyedeki zarlarınıza bir göz atın, ancak tırnak işareti eklemeyi unutmayın.
            5:
                story_text: |
                    Zarımıza `{if}` ve `{else}` komutlarını ekleyeceğiz!

                    ### Alıştırma
                    Örnek kodu, bir solucan attığınız zaman "Atmayı durdurabilirsiniz" yazacak şekilde tamamlayın. Başka bir şey attığınızda ise "Tekrar atmanız gerekiyor" demelidir.
                    **Ek Görev** Belki de tamamen farklı bir oyundaki bir kalıbı yeniden yaratmak istiyorsunuz. Bu da güzel! O zaman kendi tepkinizi oluşturun, örneğin 6 için 'evet' ve başka bir şey için 'yazık' gibi.
                example_code: |
                    ```
                    seçimler {is} 1, 2, 3, 4, 5, solucan
                    atılan {is} seçimler {at} {random}
                    {print} 'Attığın zar ' atılan
                    _ atılan {is} solucan {print} 'Atmayı bırakabilirsin.'
                    _ {print} 'Tekrar atmalısın!'
                    ```
            6:
                story_text: |
                    Burada da yine bir Solucan zarı yapabilirsiniz, ancak şimdi kaç puan atıldığını da hesaplayabilirsiniz.
                    Solucanlar oyununda solucanın 5 puan saydığını biliyor olabilirsiniz. Şimdi bir zar attıktan sonra kaç puan attığınızı hemen hesaplayabilirsiniz.
                    Bu, bir zar için puanları hesaplayan koddur:

                    ### Alıştırma
                    Kodu 8 zar için toplam puanı alacak şekilde yapabilir misiniz? Bunu yapmak için kodun bazı satırlarını kesip yapıştırmanız gerekiyor.
                example_code: |
                    ```
                    seçimler = 1, 2, 3, 4, 5, solucan
                    puan = 0
                    atılan = seçimler {at} {random}
                    {print} 'Attığın zar ' atılan
                    {if} atılan {is} solucan puan = puan + 5 {else} puan = puan + atılan
                    {print} 'toplam puan ' puan ' oldu'
                    ```
                example_code_2: |
                    Sekiz zar için puan hesaplamayı başardınız mı? Bu çok fazla kesme ve yapıştırma gerektiriyordu, değil mi? Seviye 7'de bunu daha kolay hale getireceğiz!
            7:
                story_text: |
                    Bu seviyede de yine zar atabilirsiniz. `{repeat}` kodu ile kolayca bir el dolusu zar atabilirsiniz.

                    ### Alıştırma
                    Örnek kodu bitirmeye çalışın! **Ek Görev** Bildiğiniz bir zar oyunu düşünün ve bunu bir `{repeat}` kullanarak programlayın.
                example_code: |
                    ```
                    seçimler = 1, 2, 3, 4, 5, 6
                    _ _ _ _ _ _ _
                    ```
            10:
                story_text: |
                    ### Alıştırma
                    Herkesin zar atması çok mu uzun sürüyor? Bu seviyede Hedy'nin tüm zarları tek seferde atmasını sağlayabilirsiniz!
                    İsimleri arkadaşlarınızın veya ailenizin isimleriyle değiştirin ve her biri zarları yuvarlayacak şekilde kodu tamamlayın.
                example_code: |
                    ```
                    oyuncular = Ali, Betül, Ceyda
                    seçimler = 1, 2, 3, 4, 5, 6
                    _ _ _ _
                        {print} oyuncu ' atıyor ve gelen ' seçimler {at} {random}
                        {sleep}
                    ```
            15:
                story_text: |
                    ### Exercise
                    In this level you can create a little game in which you'll have to throw 6 as fast as possible.
                    We have started the code, it's up to you to get the game to work!

                    Firstly, add a `{while}` loop that checks if 6 has been thrown or not.
                    As long as you haven't thrown 6 already, throw the dice on a random number.
                    Print what the player has thrown.
                    Add a try to the amount of tries
                    Wait a second before you throw again, or - in case you've thrown a 6 - before the game ends.
                example_code: |
                    ```
                    options = 1, 2, 3, 4, 5, 6
                    {print} 'Throw 6 as fast as you can!'
                    thrown = 0
                    tries = 0
                    _
                    _
                    _
                    _
                    _
                    {print} 'Yes! You have thrown 6 in ' tries ' tries.'
                    ```
    dishes:
        name: Bulaşıklar mı?
        default_save_name: Bulaşıklar
        description: Bulaşıkları kimin yıkayacağını seçmek için bilgisayarı kullanın
        levels:
            3:
                story_text: |
                    Bugün bulaşıkları kimin yıkayacağı ya da kedinin kum kabını kimin değiştireceği konusunda evde hep anlaşmazlığa mı düşüyorsunuz?
                    O zaman bilgisayarın çok adil bir şekilde seçim yapmasını sağlayabilirsiniz. Bunu bu seviyede programlayabilirsiniz!
                example_code: |
                    ```
                    kişiler {is} anne, baba, Ali, Ayşe
                    {print} kişiler {at} {random} bulaşığı yıkayacak
                    ```
                story_text_2: |
                    ### Alıştırma
                    Bulaşık makinesi programının kendi çeşidinizi yapın. Öncelikle aile üyelerinizin bir listesini yapın.
                    Ardından yapılması gereken bir görev düşünün ve bilgisayarın `{at} {random}` komutuyla görevi kimin yapması gerektiğine karar vermesini sağlayın.

                    **Ek Görev** Bulaşıkları kendiniz yıkamak istemiyor musunuz? Adınızı `{remove}` `{from}` komutuyla listeden kaldırarak programda hile yapın.
            4:
                story_text: |
                    Tırnak işaretleri ile bulaşık yıkama programınızı daha da iyi hale getirebilirsiniz.

                    ### Alıştırma
                    Öncelikle, bu örnek programı çalıştırmak için boşluklara doğru sembolleri veya komutları doldurun.
                    Anladınız mı? Harika! Şimdi, önceki seviyeden kendi kodunuzu kopyalayın ve doğru noktalara tırnak işaretleri ekleyerek bu seviyede çalışmasını sağlayın.
                example_code: |
                    ```
                    kişiler {is} anne, baba, Ali, Ayşe
                    {print} _ bulaşıkları yıkayacak olan _
                    {sleep}
                    {print} kişiler {at} _
                    ```
            5:
                story_text: |
                    `{if}` ile artık programda seçim yaparak daha fazla eğlenebilirsiniz. Programınızın bilgisayarın yaptığı seçime yanıt vermesini sağlayabilirsiniz.
                    ### Alıştırma
                    Kodu, sıra size geldiğinde "çok kötü", aksi halde "evet!" yazdıracak şekilde tamamlayabilir misiniz?
                    Tırnakları unutmayın!
                example_code: |
                    ```
                    kişiler {is} anne, baba, Ali, Ayşe
                    bulaşıkçı {is} kişiler {at} {random}
                    _ bulaşıkçı {is} Ayşe {print} _ Bulaşıkları yıkamak zorunda olmam çok kötü. _
                    _ {print} 'Neyse ki bulaşık yok çünkü ' _ ' zaten yıkıyor'
                    ```
            6:
                story_text: |
                    Herkes bulaşıkları ne sıklıkla yıkayacak? Bu adil mi? Bunu bu seviyede sayabilirsiniz.
                example_code: |
                    ```
                    kişiler = anne, baba, Ali, Ayşe
                    ali_yıkadı = 0
                    bulaşıkçı = kişiler {at} {random}
                    {print} 'Bulaşıkçımız bugün ' bulaşıkçı
                    {if} bulaşıkçı {is} Ali ali_yıkadı = ali_yıkadı + 1
                    {print} 'Ali bu hafta bulaşıkları ' ali_yıkadı ' kere yıkadı'
                    ```

                    Şimdi 3'ten 5'e kadar olan satırları birkaç kez (örneğin tüm hafta için 7 kez) kopyalayarak tekrar tüm hafta için hesaplama yapabilirsiniz.
                    Bütün hafta için kod yazabilir misiniz?
                story_text_2: |
                    Eğer çok şanssızsanız, bir önceki program sizi tüm hafta boyunca bulaşıkları yıkamanız için seçebilir! Bu hiç adil değil!
                    Daha adil bir sistem oluşturmak için `{remove}` komutunu kullanarak seçilen kişiyi listeden çıkarabilirsiniz. Bu şekilde, herkes sırasını alana kadar bulaşıkları tekrar yıkamak zorunda kalmazsınız.

                    Pazartesi ve salı günleri sizin için hazır! Haftanın geri kalanını da ekleyebilir misiniz?
                    Ve... listenizin boşaldığı durum için bir çözüm bulabilir misiniz?
                example_code_2: |
                    ```
                    kişiler = anne, baba, Ali, Ayşe
                    bulaşıkçı = kişiler {at} {random}
                    {print} 'Pazartesi günü bulaşıkçımız: ' bulaşıkçı
                    {remove} bulaşıkçı {from} kişiler
                    bulaşıkçı = kişiler {at} {random}
                    {print} 'Salı günü bulaşıkçımız: ' bulaşıkçı
                    {remove} bulaşıkçı {from} kişiler
                    ```
            7:
                story_text: |
                    `{repeat}` ile kod parçalarını tekrarlayabilirsiniz. Bunu, birden fazla gün boyunca bulaşıkları kimin yıkayacağını hesaplamak için kullanabilirsiniz!
                    ### Alıştırma
                    Bütün bir hafta boyunca bulaşıkları kimin yıkaması gerektiğine karar vermek için `{repeat}` komutunu kullanın. Her boşluğun bir komut veya sayı ile doldurulması gerekiyor!
                    **Ek Görev** Evdeki diğer görevleri düşünebiliyor musunuz? Kodu üç ev işine karar verecek şekilde uyarlayın. Hangi görevlerle ilgili olduğunu yazdırmayı unutmayın!
                example_code: |
                    ```
                    kişiler = anne, baba, Ali, Ayşe
                    {repeat} _ _ {print} 'Bugün bulaşıkçımız ' _ _ _
                    ```
            10:
                story_text: |
                    Bu seviyede, kolay bir şekilde tüm hafta için bir program yapabilirsiniz!

                    ### Alıştırma
                    Süpürmek veya ortalığı toplamak gibi ikinci bir angarya iş ekleyin ve bunun da tüm haftaya bölündüğünden emin olun.
                    <br> **Ek Görev** Program adil değil, şanssız olabilir ve tüm hafta boyunca temizlikçi olabilirsiniz. Programı nasıl daha adil hale getirebilirsiniz?
                example_code: |
                    ```
                    günler = Pazartesi, Salı, Çarşamba, Perşembe, Cuma, Cumartesi, Pazar
                    isimler = anne, baba, Ali, Ayşe
                    {for} gün {in} günler
                        {print} isimler {at} {random} ' bulaşıkları ' gün ' günü yıkayacak'
                    ```
    elif_command:
        name: '{elif}'
        default_save_name: değileğer
        description: değileğer
        levels:
            17:
                story_text: |
                    Bu seviyede yeni bir komutu daha kullanabilirsiniz: `{elif}`. `{elif}`, `{else}` `{if}` komutunun kısaltmasıdır ve 3 (veya daha fazla!) seçenek yapmak istediğinizde buna ihtiyaç duyarsınız.
                    Şuna bir bakın!
                example_code: |
                    ```
                    ödüller = ['1 milyon lira', 'bir elmalı turta', 'hiçbir şey']
                    senin_ödülün = ödüller[{random}]
                    {print} 'Kazandığın ödül ' senin_ödülün
                    {if} senin_ödülün == '1 milyon lira' :
                        {print} 'Evet! Sen artık zenginsin!'
                    {elif} senin_ödülün == 'bir elmalı turta' :
                        {print} 'Çok güzel, bir elmalı turta!'
                    {else}:
                        {print} 'Bir dahaki sefere iyi şanslar...'
                    ```
    for_command:
        name: '{for}'
        default_save_name: for
        description: için komutu
        levels:
            10:
                story_text: |-
                    ## için
                    Bu seviyede `{for}` adında yeni bir kod öğreniyoruz. `{for}` ile bir liste oluşturabilir ve onun tüm öğelerini kullanabilirsiniz.
                    `{for}`, `{repeat}` ve `{if}` gibi bir blok oluşturur, bu nedenle bloktaki tüm satırların 4 boşlukla başlaması gerekir.
                example_code: |
                    ```
                    hayvanlar = köpek, kedi, balık
                    {for} hayvan {in} hayvanlar
                        {print} 'Benim sevdiğim ' hayvan
                    ```
                story_text_2: |
                    ### Exercise
                    Finish this code by adding `{for} action {in} actions` to line 2.
                example_code_2: |
                    ```
                    actions = clap your hands, stomp your feet, shout Hurray!
                    _
                        {repeat} 2 {times}
                            {print} 'If youre happy and you know it, ' action
                            {sleep} 2
                        {print} 'If youre happy and you know it, and you really want to show it'
                        {print} 'If youre happy and you know it, ' action
                        {sleep} 3
                    ```
            11:
                story_text: |-
                    Bu seviyede, `{for}` in yeni bir şeklini ekliyoruz. Daha önceki seviyelerde `{for}` i bir liste ile kullanmıştık, ancak `{for}` ni sayılarla da kullanabiliriz.
                    Bunu bir değişken adı ve ardından `{in}` `{range}` ekleyerek yaparız. Daha sonra ilk başlanacak sayıyı, ardından `{to}`, ve sonra bitecek sayıyı yazıyoruz.

                    Ne olduğunu görmek için örneği deneyin! Bu seviyede de yine, `{for}` ifadelerinin altındaki satırlarda girintiler kullanmanız gerekecektir.
                example_code: |
                    ```
                    {for} sayaç {in} {range} 1 {to} 10
                        {print} sayaç
                    {print} 'önüm arkam sağım solum sobe!'
                    ```
            17:
                story_text: |
                    Şimdi girintilemeyi biraz değiştireceğiz. Girintiye her ihtiyaç duyduğumuzda, girintiden önceki satırda `:` işaretine ihtiyacımız var.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Önüm arkam sağım solum sobe, saklanmayan ebe!'
                    ```
            18:
                story_text: |
                    Lastly, we'll turn `{for} i {in} {range} 1 to 5` into real Python code, like this:
                example_code: |
                    ```
                    {for} i {in} {range}(1,5):
                        {print} (i)
                    ```
    fortune:
        name: Falcı
        default_save_name: Falcı
        description: Hedy'nin geleceği tahmin etmesini sağlayın
        levels:
            1:
                story_text: |
                    Hiç bir karnavala gittiniz ve bir falcı tarafından geleceğinizin tahmin edildiğini gördünüz mü? Ya da hiç sihirli sekiz topla oynadınız mı? Ya da bunları bir filmde gördünüz mü?
                    O zaman muhtemelen geleceğinizi gerçekten tahmin edemeyeceklerini biliyorsunuzdur, ama yine de oynamak eğlenceli!

                    İlerleyen seviyelerde kendi fal makinenizi nasıl yaratacağınızı öğrenebilirsiniz!
                    1. seviyede, Hedy'nin kendini falcı olarak tanıtmasını ve oyuncuların cevaplarını `{echo}` ile yankılamasını sağlayarak kolay bir başlangıç yapabilirsiniz.
                    Bunun gibi:
                example_code: |
                    ```
                    _ Merhaba, ben falcı Hedy!
                    _ Peki sen kimsin?
                    _ Kristal küreme bir göz atayım
                    _ Görüyorum... Evet görüyorum...
                    _ Senin adın
                    ```
                story_text_2: |
                    ### Alıştırma
                    Örnek kodu girdi ekranınıza kopyalayın ve kodun çalışması için boşlukları doldurun.
                    **Ek Görev** Kodu değiştirin ve falcının yalnızca adınızı değil, yaşınızı, tuttuğunuz spor takımını veya kendinizle ilgili başka bir şeyi de tahmin etmesini sağlayın.
            3:
                story_text: |
                    Önceki seviyelerde ilk fal makinenizi yapmıştınız, ancak Hedy gerçekten hiçbir şey tahmin edemedi, sadece `{echo}` kullandı.
                    Bu seviyede, Hedy'nin sizin için bir cevap seçmesini gerçekten sağlamak için bir değişken ve `{at} {random}` komutunu kullanabilirsiniz. Örneğin bu koda göz atın:
                example_code: |
                    ```
                    {print} Ben falcı Hedy'im!
                    soru {is} {ask} Ne bilmek istiyorsun?
                    {print} Demek bilmek istediğin şey: soru
                    cevaplar {is} evet, hayır, belki
                    {print} Kristal kürem diyor ki...
                    {sleep} 2
                    {print} cevaplar {at} {random}
                    ```
                story_text_2: |
                    ### Alıştırma
                    Şimdilik, Hedy sadece evet, hayır veya belki cevaplarını verebiliyor. Hedy'ye 'kesinlikle' veya 'tekrar sor' gibi daha fazla cevap seçeneği verebilir misiniz?
            4:
                story_text: |
                    ### Alıştırma
                    Bu örnek koddan tüm tırnak işaretlerini kaldırdık, bunları doğru yerlere ekleyebilir misiniz?

                    ### Alıştırma 2
                    Önceki seviyeye geri dönün ve falcı kodunuzu kopyalayın. Doğru noktalara tırnak işaretleri ekleyerek kodun bu seviyede çalışmasını sağlayın.
                example_code: |
                    ```
                    _ Bu koda tırnak işaretlerini ekleyin _
                    {print} Ben falcı Hedy!
                    soru {is} {ask} Ne bilmek istiyorsun?
                    {print} Sorduğun soru: soru
                    cevaplar {is} evet, hayır, belki
                    {print} Kristal kürem diyor ki...
                    {sleep} 2
                    {print} cevaplar {at} {random}
                    ```
            5:
                story_text: |
                    ### Alıştırma
                    Örnek kodda, olasılıkları kendi lehinize çevirmenizi sağlayan bir falcı programının nasıl yapıldığını göreceksiniz. Bu hile programı size her zaman piyangoyu kazanacağınızı söyler, ancak arkadaşlarınız asla kazanamaz.

                    Bunu kendi programınızı yapmak için kullanın, yaratıcı olun! Örneğin şunu tahmin eden bir kod oluşturabilirsiniz:
                    * tuttuğunuz spor takımı tüm rakiplerini yenecek!
                    * film gecesi için en sevdiğiniz film seçilecek!
                    * en sevdiğiniz gösteriye bilet kazanın!
                    * Pamuk Prenses'in sihirli aynası gibi, hepsinin içinde en güzeli sensin.
                    Bırakın işi hayal gücünüz yapsın!

                    Programınız en az 10 satır koddan oluşmalı ve en az bir `{if}` ve `{else}` komutuna sahip olmalıdır.
                example_code: |
                    ```
                    arkadaşlar {is} Leyla, Orhan, Nergis
                    {print} 'Yarın piyangoyu kazanıp kazanmayacağınızı tahmin edebilirim!'
                    kişi {is} {ask} 'Sen kimsin?'
                    iyi_cevap {is} Yaşasın! Sen kazandın!, Kesinlikle sen kazanacaksın!, Bir kazananımız var!
                    kötü_cevap {is} Kötü şans! Tekrar dene!, Başka biri kazanacak, Sen kaybedeceksin!
                    {if} kişi {in} arkadaşlar {print} iyi_cevap {at} {random}
                    {else} {print} kötü_cevap {at} {random}
                    ```
            6:
                story_text: |
                    Bu seviyede artık bir falcı olarak tahminlerinizde matematiği kullanabilirsiniz. Bu, geleceği hesaplamak için (aptalca) formüller oluşturmanıza olanak tanır.
                    Örneğin, ne kadar zengin olacağınızı veya büyüdüğünüzde kaç çocuğunuz olacağını hesaplayabilirsiniz.



                    ### Alıştırma
                    Kendinize ait (aptalca) bir fal makinenizi hayal edebiliyor musunuz?
                example_code: |
                    ```
                    {print} "Ben falcı Hedy'im!"
                    {print} 'Büyüdüğünde kaç çocuğun olacağını tahmin edebiliyorum!'
                    yaş = {ask} 'Kaç yaşındasın?'
                    kardeşler = {ask} 'Kaç kardeşin var?'
                    boy = {ask} 'Santimetre cinsinden boyun kaç?'
                    çocuklar = boy / yaş
                    çocuklar = çocuklar - kardeşler
                    {print} 'Büyüdüğünde...'
                    {sleep}
                    {print} çocuklar ' çocuğun olacak!'
                    ```
            7:
                story_text: |
                    ### Alıştırma
                    Aşık olduğunuz kişinin sizi sevip sevmediğini söyleyen bu programı bitirin.
                example_code: |
                    ```
                    {print} 'Sihirli yaprakları olan bir çiçeğim var'
                    {print} 'Eğer taç yapraklarını koparırsanız, çiçek size aşkınızın sizi sevip sevmediğini söyleyecektir.'
                    miktar = {ask} 'Kaç tane taç yaprağı koparmak istiyorsun?'
                    seçenekler = seni seviyor, seni sevmiyor
                    _ _ _ _ seçenekler {at} {random}
                    ```
            8:
                story_text: |
                    Bir sonraki örnekte, falcınızın birden fazla soru sormasını ve bunları yazdırmasını sağlayabilirsiniz!

                    ### Alıştırma
                    Boşlukları doğru komutla doldurabilir misiniz?
                example_code: |
                    ```
                    {print} "Ben falcı Hedy'im!"
                    {print} 'Bana 3 soru sorabilirsin.'
                    cevaplar = evet, hayır, belki
                    _ _ _
                       soru = {ask} 'Ne bilmek istiyorsun?'
                       {print} soru
                       {sleep}
                       {print} 'Kristal kürem diyor ki... ' cevaplar {at} {random}
                    ```
            10:
                story_text: |
                    Bu seviyede MASH (konak, apartman, kulübe, ev) oyununu nasıl programlayacağınızı öğreneceksiniz. Bu oyunda tüm oyuncular için aynı anda geleceklerinin neye benzeyeceğini tahmin edebilirsiniz.

                    ### Alıştırma
                    Bu seviyede öğrendiğiniz yeni komutu kullanarak boşlukları doldurun.
                example_code: |
                    ```
                    evler = konak, apartman, baraka, ev
                    aşklar = hiç kimse, bir soylu, bir komşu, gerçek aşkı
                    hayvanlar = köpek, kedi, fil
                    isimler = Bulut, Sema, Deniz
                    _
                        {print} isim ' şu evde yaşayacak: ' houses {at} {random}
                        {print} isim ' şununla evlenecek: ' loves {at} {random}
                        {print} isim ' evcil hayvan olarak ' pets {at} {random} ' besleyecek.'
                        {sleep}
                    ```
            12:
                story_text: |-
                    12. seviyeden itibaren artık, listelerde her öğeden önce ve sonra tırnak işareti kullanmanız gerekecektir.

                    ### Alıştırma
                    Listeye iki tane tahmin ekleyin
                example_code: |
                    ```
                    fallar = 'muz kabuğuna basıp kayacaksın', _
                    {print} 'Geleceğin için kristal küreme bir göz atacağım.'
                    {print} 'Görüyorum... Görüyorum...'
                    {sleep}
                    {print} fallar {at} {random}
                    ```
    functions:
        name: functions
        default_save_name: functions
        description: functions
        levels:
            12:
                story_text: |
                    In this level you'll learn how to use **functions**. A function is a block of code you can easily use multiple times. Using functions helps us organize pieces of code that we can use again and again.
                    To create a function, use `{define}` and give the function a name. Then put all the lines you want in the function in a indented block under the `{define}` line.
                    Leave one empty line in your code to make it look nice and neat. Great job! You have created a function!

                    Now, whenever we need that block of code, we just use <code>{call}</code> with the function's name to call it up! We don't have to type that block of code again.

                    Check out this example code of a game of Twister. The function 'turn' contains a block of code that chooses which limb should go where.

                    ### Exercise
                    Finish this code by setting the 2 variables chosen_limb and chosen_color.
                    Then, choose how many times you want to call the function to give the twister spinner a spin.

                    ### Exercise 2
                    Improve your code by adding a variable called 'people'. Use the variable to give all the players their own command in the game.
                    For example: 'Ahmed, right hand on green' or 'Jessica, left foot on yellow'.
                example_code: |
                    ```
                    sides = 'left', 'right'
                    limbs = 'hand', 'foot'
                    colors = 'red', 'blue', 'green', 'yellow'

                    {define} turn
                        chosen_side = sides {at} {random}
                        chosen_limb = limbs _
                        chosen_color = colors _
                        {print} chosen_side ' ' chosen_limb ' on ' chosen_color

                    {print} 'Lets play a game of Twister!'
                    {for} i {in} {range} 1 to _
                        {call} turn
                        {sleep} 2
                    ```
            13:
                story_text: |
                    Now that you've learned how to use functions, you'll learn how to use a function with an argument.
                    An **argument** is a variable that is used within a function. It is not used outside the function.

                    For example in this code we've programmed the first verse of the song 'My Bonnie is over the ocean'.
                    In this example code the argument `place` is used. Place is a variable that is only used in the function, so an argument.
                    To use `place` we have programmed the line `define song with place`.
                    When the function is called, computer will replace the argument `place`, with the piece of text after `call song with`.

                    ### Exercise
                    The next verse of this song goes:

                    Last night as I lay on my pillow
                    Last night as I lay on my bed
                    Last night as I lay on my pillow
                    I dreamed that my Bonnie is dead

                    Can you program this verse in the same way as the example?
                example_code: |
                    ```
                    {define} song {with} place
                        {print} 'My Bonnie is over the ' place

                    {call} song {with} 'ocean'
                    {call} song {with} 'sea'
                    {call} song {with} 'ocean'
                    ```
            14:
                story_text: |
                    In the previous levels you have learned to create functions and use arguments with them. Another great use of a function is to let it calculate something for you.
                    You can give the function a calculation and it will give you the answer of the calculation. This answer is called a **return value**.

                    For example, in this code the function calculate_new_price will calculate the new price of any item. It will give you the new price as a return value.

                    ### Exercise
                    Finish this code. We have already made the variable new_price for you, you only need to set it.
                    You should finish the line of code by calling the function that calculates the new price.
                example_code: |
                    ```
                    {define} calculate_new_price {with} amount, percentage
                        percentage = percentage / 100
                        discount_amount = amount * percentage
                        return amount - discount_amount

                    old_price = {ask} 'How much is on the price tag?'
                    discount = {ask} 'What percentage is the discount?'

                    new_price = _ calculate_new_price {with} old_price, _
                    {print} 'The new price is ' new_price ' dollar'
                    ```
            18:
                story_text: |
                    Let's make functions the Pythons way! To define a function, we no longer use:

                    `{define} name_function {with} argument_1, argument_2:`

                    but we use:

                    `{def} name_function(argument_1, argument_2):`.


                    If you don't want to use arguments, you just leave the space between the parantheses empty.
                    To call a function, we don't need the `{call}` command anymore. You just type the name of the function.
                example_code: |
                    ```
                    {def} calculate_score(answer, correct_answer):
                        {if} answer == correct_answer:
                            score = 1
                        {elif} answer == '?':
                            score = 0
                        {else}:
                            score = -1
                        {return} score

                    answer = {input} ('Where can you find the Eiffel Tower?')
                    correct_answer = 'Paris'
                    score = calculate_score(answer, correct_answer)
                    {print} ('Your score is... ', score)
                    ```
    guess_my_number:
        name: Guess my number
        default_save_name: guess my number
        description: guess my number
        levels:
            14:
                story_text: |
                    In this level you can program the game 'Guess my number'

                    ### Exercise
                    Fill in the correct symbols on the blanks to get the game to work.
                example_code: |
                    ```
                    {print} 'Guess my number'
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number = numbers {at} {random}
                    game = 'on'
                    {for} i {in} {range} 1 {to} 10
                        {if} game == 'on'
                            guess = {ask} 'Which number do you think it is?'
                            {if} guess _ number
                                {print} 'Lower!'
                            {if} guess _ number
                                {print} 'Higher!'
                            {if} guess _ number
                                {print} 'You win!'
                                game = 'over'
                    ```
    hangman:
        name: Hangman
        default_save_name: Hangman
        description: Guess the word
        levels:
            17:
                story_text: |
                    In this adventure we program a game of hangman. First we make some preparations, then we program the game and in the third part we add a drawing with the turtle.

                    ### Exercise
                    ***Set the variables*** In this game of hangman, Player 1 chooses an answer and Player 2 has to guess the letters in this answer.
                    To let the computer know all the letters in the word, we will turn the answer into a list of letters. We also do this with the guesses Player 2 makes.
                    We will start the game with 2 empty lists. We have made an empty list for the variable answer for you. Now make an empty list for guessed_letters as well.
                    Then we fill in how many mistakes were made. At the start of the game, this should be 0.
                    The variable `amount_letters` tells us how many letters are in the answer. Ask Player 1 to tell us how many letters their word has.
                    Lastly we tell the computer if the game is over. We use the variable `game_over` and set it to `False`.

                    ***Choosing the answer*** We want Player 1 to be able to choose the answer. We'll ask them, as many times as necessary, what the next letter is.
                    Then we add that letter to the answer. Lastly, we add an empty _ to the list of guessed letters, so we get as many _s as there are letters in the answer.

                    ***Player 2's turn***
                    Tell Player 2 its their turn. Then tell Player 2 how many letters there are in the answer. Finally, print the list of `guessed_letters`.

                    ***Go to the next tab*** Now that all the starting variables are set, we can start programming the game itself. Check out the next tab to learn how!
                example_code: |
                    ```
                    print 'Hangman!'

                    # Set the variables
                    answer = []
                    guessed_letters = _
                    mistakes_made = _
                    amount_letters = {ask} _
                    _ = 'False'

                    # Choosing the answer
                    {for} _
                        letter = {ask} 'Player 1, what is letter ' i '?'
                        _
                        {add} '_' {to} _

                    # Player 2 turn
                    print _
                    print _
                    print guessed_letters
                    ```
    hangman_2:
        name: Hangman 2
        default_save_name: Hangman_2
        description: Hangman 2
        levels:
            17:
                story_text: |
                    Now it's time to program the hangman game.

                    ### Exercise

                    ***Paste your code*** Copy your code from the previous tab and paste the code in the programming field.

                    ***The game*** This games continues playing until Player 2 is game over. Fill in the while command accordingly. Now, Player 2 is allowed to guess a letter, so ask Player 2 to guess a letter.
                    We need to check if their answer is correct, so check if their `guess` is (somewhere) in the (list) `answer`. Then we let the computer figure out which of the letter(s) is the guess. We have already programmed that part for you.
                    Next we want to compliment the player for finding a correct letter and we want to print the list `guessed_letters`, so the player can see their progress.

                    The next part we're going to program is what happens when the player has guessed all of the letters. So if their list of `guessed_letters` is the same as our list `answer`.
                    If the lists are the same, congratulate Player 2 with their victory and set the variable `game_over` to `True`.

                    Next we'll program what happens when Player 2 guesses wrong (so the `{else}` command). First, tell the player that their guess was wrong. Then increase the `mistakes_made` variable by 1.

                    For the last part we'll program what happens when Player 2 has made 10 mistakes. We'll print that Player 1 has won the game. Then we'll print the correct answer. And finally, we'll set our `game_over` variable to `True`, so the game stops.

                    ***Go to the next tab*** Amazing work! Your game is playable, but wouldn't it be fun if the hangman was actually drawn when Player 2 makes a mistake..?
                example_code: |
                    ```
                    # Paste your code here

                    # The game
                    {while} game_over _
                        guess = _
                        {if} _
                            {for} i {in} {range} 1 {to} amount_letters:
                                if answer[i] == guess:
                                    guessed_letters[i] = guess
                            {print} _
                            {if} guessed_letters == _:
                                {print} _
                                game_over = _
                        {else}:
                            {print} _
                            mistakes_made _
                            {if} _ == 10:
                                {print} _
                                {print} _
                                _
                    ```
    hangman_3:
        name: Hangman 3
        default_save_name: Hangman_3
        description: Hangman 3
        levels:
            17:
                story_text: |
                    In a game of hangman the mistakes are shown by drawing a part of the hangman each time a mistake has been made.
                    We now add those drawings with our turtle!

                    ### Exercise
                    ***Create a function that draws the hangman*** Create a function that draws the hangman in 10 steps. We have already made step 1 for you.

                    ***Test the function*** Test the function by calling the function with 10. If you are happy with the function, remove the line that calls the function for now. We will call the function when the player makes a mistake.

                    ***Paste your hangman game under your function*** Go back to the previous tab and copy your hangman game. Paste the game underneath your function.

                    ***Call the function when the player makes a mistake*** Under the line `mistakes_made = mistakes_made + 1` we will call the function. We want the turtle to take the same amount of steps as the player has made mistakes, so we call the function with `mistakes_made` as argument.

                    ***Enjoy your game!***
                    <div class="w-full flex flex-row gap-2">
                        The hangman could look like this <img src="https://github.com/hedyorg/hedy/assets/80678586/d385b691-5701-4342-b5d9-dfae1589c129" width="100">
                    </div>
                example_code: |
                    ```
                    # Create a function that draws the hangman
                    {define} draw_hangman {with} step:
                        {if} step == 1:
                            {color} white
                            {forward} -100
                            {turn} 90
                            {forward} -50
                            {color} black
                            {forward} 100
                            {forward} -50

                        {if} step == 2:
                            _
                    # Paste your hangman game here

                    ```
    harry_potter:
        name: Harry Potter
        default_save_name: Harry Potter
        description: Harry Potter maceraları
        levels:
            10:
                story_text: |
                    ### Alıştırma
                    Harry Potter temalı bir falcı da yapabiliriz. Boşlukları 9 satır yazdıracak şekilde doldurun.
                    **Ek Görev** Falcının temasını en sevdiğiniz kitap, film veya televizyon programı gibi başka bir şeye dönüştürün.
                example_code: |
                    ```
                    evler = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    konular = iksirler, karanlık sanatlara karşı savunma, tılsımlar, başkalaşım
                    korkular = Voldemort, örümcekler, OWL sınavında başarısız olmak
                    isimler = Harry, Ron, Hermione
                    _
                    _ {print} isim ' şu okula gidiyor: ' evler {at} {random}
                    _ {print} isim ' şu konuda çok iyi: ' konular {at} {random}
                    _ {print} isim ' en çok şundan korkuyor: ' korkular {at} {random}
                    ```
    haunted:
        name: Perili Ev
        default_save_name: Perili Ev
        description: Perili evden kaçış
        levels:
            1:
                story_text: |
                    Bu macerada, doğru kapıyı seçerek perili bir evden kaçmanız gereken bir oyun yapmak için çalışıyorsunuz.
                    Eğer doğru kapıyı seçerseniz hayatta kalırsınız, ama seçmezseniz korkunç bir canavar sizi...

                    1. seviyede, perili ev oyunumuza korkutucu bir hikaye uydurarak başlıyoruz ve oyuncuya perili evde hangi canavarı göreceklerini soruyoruz.
                example_code: |
                    ```
                    {print} Buraya nasıl geldim?
                    {print} Arkadaşımın bana eski malikaneye gitmemi söylediğini hatırlıyorum...
                    {print} sonra her şey aniden karardı.
                    {print} Ama nasıl oldu da kendimi yerde buldum?
                    {print} Başım beyzbol sopasıyla vurulmuş gibi ağrıyor!
                    {print} Bu ses de ne?
                    {print} Oh hayır! Bu evde yalnız değilmişim gibi hissediyorum!
                    {print} Buradan çıkmam lazım!
                    {print} Önümde 3 kapı var...
                    {ask} Hangi kapıyı seçmeliyim?
                    {echo} Seçtiğim kapı
                    {print} ...?
                    ```
                story_text_2: |
                    ### Alıştırma
                    Sarı düğmeye tıklayarak örnek kodu girdi ekranınıza kopyalayın.
                    Şimdi en az 5 satır kod ekleyerek hikayeyi bitirin.
                    Her kod satırına `{print}` komutuyla başlamayı unutmayın.
            2:
                story_text: |
                    Bu perili evde canavarlarınızı emojilerle seçebilirsiniz. Tabii ki yine kelimeleri de kullanabilirsiniz.
                example_code: |
                    ```
                    canavar_1 {is} 👻
                    canavar_2 {is} 🤡
                    canavar_3 {is} 👶
                    {print} Perili eve giriyorsunuz.
                    {print} Aniden bir canavar_1 görüyorsunuz
                    {print} Diğer odaya koşuyorsunuz...
                    {print} Ama canavar_2 sizi orada bekliyor!
                    {print} Olamaz! Çabuk mutfağa gidin.
                    {print} Ama siz içeri girerken canavar_3 size saldırıyor!
                    ```
                story_text_2: |
                    ### Alıştırma
                    Yukarıdaki örnekte canavarlar önceden belirlenmiştir. Yani kodunuzu her çalıştırdığınızda çıktı aynı olacaktır.
                    Perili evi etkileşimli hale getirmek ve oyuncuların karşılaştıkları canavarları seçmelerini sağlamak için `{ask}` komutları ekleyebilir misiniz?
                example_code_2: |
                    ```
                    canavar_1 {is} _
                    canavar_2 {is} _
                    canavar_3 {is} _
                    {print} Perili eve giriyorsunuz.
                    {print} Aniden bir canavar_1 görüyorsunuz
                    {print} Diğer odaya koşuyorsunuz...
                    {print} Ama canavar_2 sizi orada bekliyor!
                    {print} Olamaz! Çabuk mutfağa gidin.
                    {print} Ama siz içeri girerken canavar_3 size saldırıyor!
                    ```
            3:
                story_text: |
                    Önceki seviyelerde, perili ev oyununuza bir giriş yaptınız, ancak fark etmiş olabileceğiniz gibi hikaye her zaman korkunç bir sona sahip oluyordu.
                    Bu seviyede oyunun sonucunu değiştirerek hikayenizi daha etkileşimli hale getirebilirsiniz; bazen yenileceksiniz, bazen kaçmayı başaracaksınız!
                    Bırakın Hedy rastgele karar versin!

                    ### Alıştırma
                    Örnek kodları kopyalayın ve çalışmasını sağlamak için boşlukları doldurun!

                    **Ek Görev** Bu hikaye oldukça basit, belki daha heyecanlı bir hikaye ekleyerek biraz canlandırabilirsiniz.
                    Ayrıca şu anda çok sınırlı sonuçlarınız var, kapıların arkasında ne olduğuna dair sadece 3 seçenek var. Belki listeye eklemek için daha fazla canavar düşünebilirsiniz!
                example_code: |
                    ```
                    _ Perili evden kaçış!
                    _ Önünüzde 3 kapı var...
                    _ _ _ Hangi kapıyı seçiyorsunuz?
                    _ Seçtiğiniz kapı ... choice
                    canavarlar _ bir zombi, bir vampir, KAÇAMAYACAĞINIZ BİR ŞEY
                    _ Karşınıza çıkan...
                    {sleep}
                    _ _ _ _
                    ```
            4:
                story_text: |
                    Bu seviyede oyunlarınızda tırnak işaretlerini nasıl kullanacağınızı öğreneceksiniz.

                    ### Alıştırma
                    Perili Evinizi 4. seviyeye dayanıklı yapabilir misiniz?

                    ### Alıştırma 2
                    Önceki seviyeye geri dönün ve perili ev kodunuzu kopyalayın. Doğru noktalara tırnak işaretleri ekleyerek kodun bu seviyede çalışmasını sağlayın.
                example_code: |
                    ```
                    _ Bu koda tırnak işaretleri ekleyin _
                    {print} Perili evden kaçış!
                    {print} Önünüzde 3 kapı var...
                    seçim {is} {ask} Hangi kapıyı seçiyorsunuz?
                    {print} Seçtiğiniz kapı ... choice
                    canavarlar {is} bir zombi, bir vampir, KAÇAMAYACAĞINIZ BİR ŞEY
                    {print} Karşınıza çıkan...
                    {sleep}
                    {print} canavarlar {at} {random}
                     ```
            5:
                story_text: |
                    Bu seviyeye kadar perili ev oyunu her zaman oyuncudan bir kapı seçmesini istedi, ancak fark etmiş olabileceğiniz gibi, gerçekten doğru cevap vermek zorunda değillerdi.
                    Oyuncu tamamen rastgele bir cevap girerse, oyun yine de çalışır ve hatta oyuncu kazanabilirdi (bir kapı seçmemesine rağmen).
                    Bu seviyede oyunu sadece Hedy'nin rastgele seçtiği kapıyı seçerek kazanabilirsiniz.

                    ### Alıştırma
                    Kodu tamamlamak için eksik 4 kelimeyi bulabilir misiniz?
                example_code: |
                    ```
                    {print} 'Perili evden kaçış!'
                    {print} 'Önünüzde 3 kapı var...'
                    kapılar {is} 1, 2, 3
                    canavarlar {is} kurt adam, mumya, vampir, zombi
                    seçilen_kapı {is} {ask} 'Hangi kapıyı seçiyorsunuz?'
                    {print} 'Seçtiğini kapı...' seçilen_kapı
                    {sleep}
                    doğru_kapı {is} kapılar {at} {random}
                    _ _ _ _ {print} 'Harika! Kaçmayı başardınız!'
                    {else} {print} 'Olamaz! Bir ' canavarlar {at} {random} ' sizi yedi!'
                    ```
            9:
                story_text: |
                    Bu seviyede, perili evi daha da etkileşimli hale getirmenize olanak tanıyan iç içe geçirme özelliğini kullanabilirsiniz!

                    ### Alıştırma
                    Şu anda bu oyunu kazanmak çok zor, kazanmayı daha kolay hale getirebilir misiniz?
                    Kodunuzu bir doğru kapı ve iki yanlış kapı yerine sadece bir yanlış kapı ve iki doğru kapı olacak şekilde değiştirebilir misiniz?
                    İpucu: Bu, doğru_kapı değişkenini yanlış_kapı olarak değiştirmek ve sonra `{if}` ve `{else}` kodlarını değiştirmek anlamına gelir.
                    Ve tabii ki hikayeyi değiştirebilir ve kendinize ait hale getirebilirsiniz. Canavarları değiştirin ya da hediye aldığınız mutlu bir oyun gösterisine çevirin!
                example_code: |
                    ```
                    {print} 'Perili Evden Kaçış!'
                    oyuncu = canlı
                    kapılar = 1, 2, 3
                    canavarlar = zombi, vampir, dev örümcek
                    {repeat} 3 {times}
                        {if} oyuncu {is} canlı
                            doğru_kapı {is} kapılar {at} {random}
                            {print} 'Önünüzde 3 kapı var...'
                            seçilen_kapı = {ask} 'Hangi kapıyı seçiyorsunuz?'
                            {if} seçilen_kapı {is} doğru_kapı
                                {print} 'Burada hiç canavar yok!'
                            {else}
                                {print} 'Bir ' canavarlar {at} {random} ' sizi yakaladı ve yedi'
                                oyuncu = ölü
                        {else}
                            {print} 'OYUN BİTTİ'
                    {if} oyuncu {is} canlı
                        {print} 'Harika! Hayatta kaldınız!'
                    ```
            11:
                story_text: |
                    Bu seviyede, `{for}` komutunu değiştirdik, böylece oyuncuya nerede olduklarını söyleyebiliyoruz.

                    ### Alıştırma 1
                    Oyuncunun hangi odada olduğunu bilmesi için programı tamamlayın.

                    ### Alıştırma 2
                    Bu adımları takip ederek programı bir maceraya dönüştürün:

                    1. Seçeneklerin bir listesini yapın (savaş ya da kaç gibi)
                    2. Oyuncunun `{ask}` ile bir seçenek seçebildiğinden emin olun
                    3. Cevap doğru mu? O zaman bir sonraki canavara geçebilirler. Yanlış bir cevap mı verdiler? Oyuncuya bir `{print}` ile bildirin.

                    **Ek Görev** Şu anda, yanlış bir seçim yaparsanız, yine de bir canavar gösteriliyor! Bunu nasıl değiştirebilirsiniz?
                example_code: |
                    ```
                    {print} 'Perili Evden Kaçış!'
                    canavarlar = zombi, vampir, dev örümcek
                    _
                        {print} 'Oda ' i
                        canavar = canavarlar {at} {random}
                    ```
            14:
                story_text: |
                    ### Exercise
                    In this level you can use the `<` and `>` symbol to introduce lives to your game.
                    Make sure the player loses a life when they come across the wrong monster and that the game stops if you have no lives left.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house'
                    lives = 3
                    doors = 1, 2, 3
                    monsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'
                    {for} i {in} {range} 1 {to} 10
                        {if} lives _
                            good_door = doors {at} {random}
                            monster = monsters {at} {random}
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} good_door == chosen_door
                                {print} 'You have chosen the correct door'
                            {else}
                                {print} 'You see...' monster
                                {if} monster == 'a sleeping 3 headed dog'
                                    {print} 'Pffieuw.... Its asleep'
                                {else}
                                    {print} 'You lose one life'
                                    lives = _
                        {else}
                            {print} 'GAME OVER'
                    ```
            16:
                story_text: |
                    ### Exercise
                    This haunted house game uses the connection between the lists you can use in this level.
                    For example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.
                    Check out the code and fill in  `weapons[i]`, `monsters[i]` , `bad_fate[i]`, `good_fate[i]`, `hint[i]` on the correct blanks to get the code to work!
                example_code: |
                    ```
                    numbers = [1, 2, 3]
                    i = numbers[{random}]
                    hint = ['growling', 'a cackling laugh', 'fluttering batwings']
                    monsters = ['zombie', 'witch', 'vampire']
                    bad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']
                    good_fate = ['You throw the ham. The zombie is distracted and starts eating it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']
                    weapons = ['ham', 'lighter', 'garlic']
                    {print} 'You are standing in front of an old mansion'
                    {print} 'Something is not right here'
                    {print} 'You hear ' _
                    {print} 'You are going to explore it'
                    {print} 'You enter the kitchen and see a lighter, a raw ham and a garlic.'
                    your_weapon = {ask} 'What do you bring with you?'
                    {print} 'With your ' your_weapon ' you enter the living room'
                    {print} 'There you find a ' _
                    needed_weapon = _
                    {if} your_weapon == needed_weapon
                        {print} 'You use your ' your_weapon
                        {print} _
                        {print} 'YOU WIN!'
                    {else}
                        {print} 'You have chosen the wrong weapon...'
                        {print} _
                        {print} 'GAME OVER'
                    ```
    hotel:
        name: hotel
        default_save_name: hotel
        description: hotel
        levels:
            13:
                story_text: |
                    In the previous adventure you have learned how to use an argument in a function, and you've learned how to combine it with an {ask}.
                    You might have wondered why you would use functions, because the functions in the example were only one line of code.
                    Now we will show you what a bigger function looks like and we will use multiple agruments now as well. You'll see how much better it is to use a function once the function gets bigger.
                    Here is an example of a function with arguments combined with {ask} commands.
                example_code: |
                    ```
                    {define} welcome_message {with} title, last_name, country, room_number
                        {print} 'Welcome to Hotel Hedy, ' title ' ' last_name
                        nice_trip {is} {ask} 'Did you have a nice trip from, ' country '?'
                        {if} nice_trip {is} 'yes'
                            {print} 'Lovely!'
                        {else}
                            {print} 'Sorry to hear that.'
                            {print} 'Hopefully you can take a nice rest in you room.'
                        {print} 'Your room number is ' room_number

                    {print} 'Hello. Please fill in your information to check in.'
                    title = {ask} 'What is your title (mr, mrs, ms, dr, etc.)?'
                    name = {ask} 'What is you last name?'
                    homecountry = {ask} 'What country do you come from?'

                    {call} welcome_message {with} title, name, homecountry, 105
                    ```

                    title = {ask} 'What is your title (mr, mrs, ms, dr, etc.)?'
                    name = {ask} 'What is you last name?'
                    homecountry = {ask} 'What country do you come from?'

                    {call} welcome_message {with} title, name, homecountry, 105
    if_command:
        name: '{if} & {else}'
        default_save_name: eğer_komutu
        description: eğer komutuna giriş
        levels:
            5:
                story_text: |
                    ## eğer... değilse....
                    5. seviyede sizin için yeni bir şey var, `{if}`! `{if}` ile iki farklı seçenek arasında seçim yapabilirsiniz.
                    Bu kod, isim olarak Hedy girerseniz güzel, başka bir şey girerseniz böö! yazdırır.
                    `{ask}` ve `{print}` hala 4. seviyede olduğu gibi çalışmaya devam ediyorlar.
                example_code: |
                    ```
                    isim {is} {ask} 'Senin adın ne?'
                    {if} isim {is} Hedy {print} 'güzel' {else} {print} 'böö!'
                    ```
                story_text_2: |
                    Bazen `{if}` içeren kod gerçekten uzun olur ve satıra iyi sığmaz. <br> Ayrıca kodu iki satıra bölebilir, ikinci satırı `{else}` ile şu şekilde başlatabilirsiniz:
                example_code_2: |
                    ```
                    isim {is} {ask} 'senin adın ne?'
                    {if} isim {is} Hedy {print} 'güzel'
                    {else} {print} 'böö!'
                    ```
                story_text_3: |
                    ### Alıştırma
                    `{if}` ve `{else}` ile kendi kodunuzu oluşturmaya çalışın. İsterseniz örnek kodu kullanabilirsiniz.
                example_code_3: |
                    ```
                    cevap {is} {ask} '2 + 2 = ?'
                    _ _ _ 4 _ 'Harikasın!'
                    _ _ 'Hayır, 2 + 2 = 4'
                    ```
            8:
                story_text: |
                    ## eğer... değilse...
                    Bir `{repeat}` komutundan sonra bir kod satır bloğunu tekrarlamayı öğrendiniz.
                    Şimdi artık bir {if} veya {else} komutundan sonra bloklar oluşturmak için girinti de kullanabilirsiniz.
                    Örnek koda göz atın.

                    ### Alıştırma
                    Örnek koda bir {else} komutu ekleyin. Girinti kullanarak bir satır bloğu oluşturun. Bunu her satırı 4 boşlukla başlatarak yaparsınız.
                example_code: |
                    ```
                    isim = {ask} 'Senin adın ne?'
                    {if} isim {is} Hedy
                        {print} 'Hoşgeldin Hedy'
                        {print} 'Bilgisayarında oynayabilirsin!'
                    ```
            9:
                story_text: |
                    Bu seviyede bir {if} komutunu başka bir {if} komutunun içine de koyabilirsiniz.
                example_code: |
                    devam = {ask} 'Devam etmek istiyor musun?'
                    {if} devam = evet
                        emin = {ask} 'Emin misin?'
                        {if} emin {is} evet
                            {print} 'Devam edeceğiz'
                        {else}
                            {print} 'Emin değilsin'
                    {else}
                        {print} 'Devam etmek istemiyorsun'
    in_command:
        name: '{in}'
        default_save_name: içinde_komutu
        description: içinde komutuna giriş
        levels:
            5:
                story_text: |
                    ## Listeler
                    Bir şeyin bir listede olup olmadığını kontrol etmek istediğimizde, artık `{in}` komutunu kullanabiliriz.
                    Bu kod, yeşili veya sarıyı seçerseniz güzel, aksi takdirde eh işte yazdırır.
                example_code: |
                    ```
                    güzel_renkler {is} yeşil, sarı
                    favori_renk {is} {ask} 'En sevdiğin renk nedir?'
                    {if} favori_renk {in} güzel_renkler {print} 'güzel!'
                    {else} {print} 'eh işte'
                    ```
                story_text_2: |
                    ### Alıştırma
                    Boşlukları öğrendiğiniz komutlarla doldurarak örnek kodu tamamlayın.
                    Kodu bitirdiğinizde, kendinize ait bir kod oluşturmaya çalışın ve kendi düşündüğünüz bir soruyu kullanın.
                example_code_2: |
                    ```
                    hayvanlar eşit köpek, inek, koyun
                    cevap eşit sor 'En sevdiğin hayvan hangisi?'
                    _ cevap _ hayvanlar _ 'Benimki de öyle!'
                    _ _ 'En sevdiğim hayvanlar köpekler, inekler ve koyunlar'
                    ```
    is_command:
        name: '{is}'
        default_save_name: eşit_komutu
        description: eşit komutuna giriş
        levels:
            2:
                story_text: |
                    ## Değişkenler
                    Bir kelimeyi `{is}` ile isimlendirebilirsiniz. Buna bir **değişken** denir. Bu örnekte isim adında bir değişken ile yaş adında bir değişken oluşturduk. Kodunuzun herhangi bir yerinde isim kelimesini kullanabilirsiniz ve Hedy bu kelimeyi değiştirilecektir, bunun gibi:
                example_code: |
                    ```
                    isim {is} Hedy
                    yaş {is} 15
                    {print} isim yaş yaşındadır
                    ```
                story_text_2: |
                    ### Alıştırma
                    Kendi değişkenlerinizi oluşturma zamanı!
                    Örnek kodda `favori_hayvan` değişkeni ile bir örnek yaptık. Satır 1'de değişken ayarlandı ve satır 2'de değişkeni bir `{print}` komutunda kullandık.
                    Öncelikle, boşluklara en sevdiğiniz hayvanı doldurarak örneğimizi tamamlayın. Daha sonra bu kodlardan en az 3 tane daha kendiniz ekleyin. Bir değişken seçin ve bu değişkeni `{is}` komutu ile ayarlayın. Daha sonra tıpkı bizim yaptığımız gibi `{print}` komutu ile kullanın.
                example_code_2: |
                    ```
                    favori_hayvan {is} _
                    {print} En sevdiğim havyan favori_hayvan
                    ```
            6:
                story_text: |
                    Bir kelimeyi bir değişkende saklama konusunda da bir değişiklik yapıyoruz! Artık bir değişkende bir isim veya sayı sakladığımızda `{is}` yerine `=` kullanabilirsiniz, bunun gibi:
                example_code: |
                    ```
                    isim = Hedy
                    cevap = 20 + 4
                    ```
            14:
                story_text: |
                    Daha fazla yeni öğe öğrenmeye devam ediyoruz. Bunları matematikten zaten biliyor olabilirsiniz, `<` ve `>`.
                    `<`, ilk sayının ikinciden küçük olup olmadığını kontrol eder, örneğin yaş `<` 12, yaşın 12'den küçük olup olmadığını kontrol eder.
                    İlk sayının ikinciden küçük veya ona eşit olup olmadığını kontrol etmek istiyorsanız, `<=` kullanabilirsiniz, örneğin yaş `<=` 11.
                    `>`, İlk sayının ikinciden büyük olup olmadığını kontrol eder, örneğin puan `>` 10, puan'ın 10'dan büyük olup olmadığını kontrol eder.
                    İlk sayının ikinciden büyük veya ona eşit olup olmadığını kontrol etmek istiyorsanız, `>=` kullanabilirsiniz, örneğin puan `>=` 11.
                    Bu karşılaştırmaları aşağıdaki gibi bir `{if}` içinde kullanırsınız:
                example_code: |
                    ```
                    yaş = {ask} 'Kaç yaşındasın?'
                    {if} yaş > 12
                        {print} 'Sen benden daha yaşlısın!'
                    ```
                story_text_2: |
                    Bu seviyeden itibaren, tam değer karşılaştırması istiyorsanız, iki eşit işareti kullanabilirsiniz. Çoğu programlama dili bunu yapar:
                example_code_2: |
                    ```
                    isim = {ask} 'Senin adın ne?'
                    {if} isim == 'Hedy'
                        {print} 'Çok havalısın!'
                    ```
                story_text_3: |
                    Bir şeyin başka bir şeye eşit *olmadığını* `!=` kullanarak karşılaştırabilirsiniz:
                example_code_3: |
                    ```
                    isim = {ask} 'Senin adın ne?'
                    {if} isim != 'Hedy'
                        {print} 'Sen Hedy değilsin.'
                    ```

                    {if} yaş < 13
                        {print} 'Sen benden daha gençsin!'
                    {else}
                        {print} 'Sen benden daha yaşlısın!'
    language:
        name: Dil
        default_save_name: Dil
        description: Yabancı dilde kelime pratiği yapın
        levels:
            5:
                story_text: |
                    Yeni bir dilde kelime bilginizi geliştirmek için kendi programınızı yapın.

                    ### Alıştırma
                    Oyuncunun öğrenmesi için en az 3 kelime daha ekleyerek kodu daha uzun hale getirin.
                    **Ek Görev** Elbette Fransızca'dan farklı bir dil kullanmayı seçebilirsiniz. Kodu öğrenmek istediğiniz herhangi bir dile değiştirebilirsiniz.
                example_code: |
                    ```
                    {print} 'Fransızca öğrenin!'
                    kedi {is} {ask} '🐱'
                    {if} kedi {is} chat {print} 'Müthiş!'
                    {else} {print} 'Hayır, kedinin karşılığı chat'
                    kurbağa {is} {ask} '🐸'
                    {if} kurbağa {is} grenouille {print} 'Süper!'
                    {else} {print} 'Hayır, kurbağanın karşılığı grenouille'
                    ```
            16:
                story_text: |
                    ### Exercise
                    Take a look at the example code. This is a program to practise French vocabulary. Now make your own program to practice your vocabulary in a new language.
                    If you don't know any other languages, you can use Google translate or you can use emojis and your native language.
                example_code: |
                    ```
                    fransızca_kelimeler = ['bonjour', 'ordinateur', 'pomme de terre']
                    çevirisi = ['merhaba', 'bilgisayar', 'patates']
                    puan = 0
                    {for} i {in} {range} 1 {to} 3
                        cevap = {ask} fransızca_kelimeler[i] ' kelimesinin anlamı nedir?'
                        doğrusu = çevirisi[i]
                        {if} cevap == doğrusu
                            {print} 'Doğru bildin!'
                            puan = puan + 1
                        {else}
                            {print} 'Yanlış, ' fransızca_kelimeler[i] ' kelimesi ' çevirisi[i] ' anlamına geliyor'
                    {print} 'Toplam ' puan ' doğru cevap verdin.'
                    ```
    maths:
        name: matematik
        default_save_name: matematik
        description: matematiğe giriş
        levels:
            6:
                story_text: |
                    In this level you learn something new: you can now also calculate.

                    The plus is easy, you write it like with math: `5 + 5` for example. The minus also works fine, it is `5 - 5`.

                    The times is a bit different, because there is no times symbol on your keyboard. Just search, there really isn't!
                    That is why we multiply with the asterisk above 8: `5 * 5`. Read that as "5 times 5" that helps you remember it best.
                example_code: |
                    ```
                    {print} '5 artı 5 eder ' 5 + 5
                    {print} '5 eksi 5 eder ' 5 - 5
                    {print} '5 çarpı 5 eder ' 5 * 5
                    {print} '5 bölü 5 eder ' 5 / 5
                    ```
            12:
                story_text: |-
                    **Ondalık sayılar**
                    Şimdiye kadar Hedy, 1.5 gibi ondalık sayılara izin vermiyordu, ancak şimdi buna izin veriyoruz. Bilgisayarların ondalık sayılar için `.` (nokta) kullandığını unutmayın.
                example_code: |
                    ```
                    {print} 'İki buçuk artı iki buçuk eder...'
                    {print} 2.5 + 2.5
                    ```
                story_text_2: |-
                    **Maths with words**
                    In this level you can also do addition with words like this:
                example_code_2: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```

                    {print} 2.5 + 2.5
    music:
        name: music
        default_save_name: music
        description: Play a tune!
        levels:
            1:
                story_text: |-
                    In this level you'll learn how to use the `{play}` command to play a tune!

                    Type `{play}` followed by the note you want to play. The scale goes C-D-E-F-G-A-B.
                    As you can see there are 7 different letters, but we can play more than just 7 notes.
                    Type a number between 1 and 10 behind the letter to choose the scale, for example after B4 comes C5.
                    C1 is the lowest note you can play, C10 is the highest.

                    ### Exercise
                    Try out the example code and then play around with it! Can you create your own melody?
                    In the next level you'll learn how to play some existing songs.
                example_code: |-
                    ```
                    {play} C4
                    {play} D4
                    {play} E4
                    {play} F4
                    {play} G4
                    {play} A4
                    {play} B4
                    {play} C5
                    ```
            2:
                story_text: |
                    ### Exercise
                    Finish the songs! We have started the codes for some melodies.
                example_code: |
                    ```
                    {print} Old Mac Donald had a farm
                    {play} C5
                    {play} C5
                    {play} C5
                    {play} G4
                    {play} A4
                    {play} A4
                    {play} G4
                    ```
                story_text_2: As you can see, you can also use the `{sleep}` command to add a little pause in the song.
                example_code_2: |
                    ```
                    {print} Twinkle Twinkle Little Star
                    {play} C
                    {play} C
                    {play} G
                    {play} G
                    {play} A
                    {play} A
                    {play} G
                    {sleep} 1
                    {play} F
                    {play} F
                    ```
            3:
                story_text: |
                    Create a random melody!

                    ### Exercise
                    The example code creates a random melody, but it's very short and not many notes are used.
                    Add more notes to the list and create a longer melody by copying the last line a couple more times.
                example_code: |
                    ```
                    notes {is} A4, B4, C4
                    {play} notes {at} {random}
                    {play} notes {at} {random}
                    {play} notes {at} {random}
                    ```
            4:
                story_text: |
                    Use the `{clear}` command to create a karaoke machine!

                    ### Exercise
                    Finish the karaoke version of 'Mary had a little lamb'.
                    Then, create a karaoke version of any song you'd like!
                example_code: |
                    ```
                    {print} 'Mary had a little lamb'
                    {play} E
                    {play} D
                    {play} C
                    {play} D
                    {play} E
                    {play} E
                    {play} E
                    {clear}
                    {print} 'Little lamb, little lamb'
                    {play} D
                    {play} D
                    {play} D
                    {play} E
                    {play} E
                    {play} E
                    {clear}
                    {print} 'Mary had a little lamb'
                    {play} E
                    ```
            5:
                story_text: |
                    You don't always have to use the `{play}` command to play a whole song, sometimes you just want to play one note.
                    For example, if you want to make a quiz, you can play a happy high note if the answer is right and a sad low note if the answer is wrong.

                    ### Exercise
                    Finish the first question by adding a line of code that plays a C3 note if the wrong answer is given.
                    Then think of 3 more questions to add to this quiz.
                example_code: |
                    ```
                    answer {is} {ask} 'What is the capital of Zimbabwe?'
                    {if} answer {is} Harare {play} C6
                    _
                    ```
            6:
                story_text: "Instead of playing notes, you can also play numbers now. Simply type `{play} 1` for the lowest note, `{play} 70` for the highest note, or anything in between.\n\n### Exercise\n This calls for musical maths! Try out the example code a couple of times with different starting numbers. \nThen, see if you can compose a song using the numbers.\n"
                example_code: |
                    ```
                    number = {ask} 'Say a starting number between 1 and 67'
                    {print} number
                    {play} number
                    number = number + 1
                    {print} number
                    {play} number
                    number = number + 1
                    {print} number
                    {play} number
                    ```
            7:
                story_text: |
                    Using the `{repeat}` command can make your codes for melodies a lot shorter!

                    ### Exercise
                    Finish the code for Twinkle Twinkle Little Star by using the `{repeat}`command.
                    Then go back to the songs you've made in the previous levels. Can you shorten those codes too?
                example_code: |
                    ```
                    {print} 'Twinkle Twinkle Little Star'
                    {repeat} 2 {times} {play} C4
                    {repeat} 2 {times} {play} G4
                    _
                    ```
            8:
                story_text: |
                    Now that we can use the `{repeat}` command for multiple lines, we can make songs even more easily!

                    ### Exercise
                    Finish the song of Brother John (Frère Jacques). Don't forget to use `{repeat}`!
                example_code: |
                    ```
                    {print} 'Brother John'
                    {repeat} 2 {times}
                        {play} C
                        {play} D
                        {play} E
                        {play} C
                    {repeat} 2 {times}
                        {play} E
                        {play} F
                        {play} G
                        {sleep} 1
                    ```
            9:
                story_text: |
                    From this level on you can - among other things - use a {repeat} command inside a {repeat} command.
                    That makes songs like 'Happy birthday' even shorter!

                    ### Exercise
                    Finish the song!
                example_code: |
                    ```
                    first_time = yes
                    {repeat} 2 {times}
                        {repeat} 2 {times}
                            {play} C
                        {play} D
                        {play} C
                        {if} first_time {is} yes
                            {play} F
                            {play} E
                            first_time {is} no
                        {else}
                            _
                    ```
            12:
                story_text: |
                    Use functions in your songs! As you can see in the example code, you can make a function for each line of Twinkle Twinkle Little Star. Once you've programmed the first three lines, all you have to do is call the functions in the order you want them played in.

                    ### Exercise
                    Finish the song of Twinkle Twinkle Little Star.
                    Then look back at all the songs you've programmed in the levels before, can you make those codes better and shorter using functions too?
                example_code: |
                    ```
                    {define} first_line
                        {play} C
                        {play} C
                        {play} G
                        {play} G
                        {play} A
                        {play} A
                        {play} G
                        {sleep}

                    {define} second_line
                        {play} F
                        {play} F
                        {play} E
                        {play} E
                        {play} D
                        {play} D
                        {play} C
                        {sleep}

                    {define} third_line
                        {play} G
                        {play} G
                        {play} F
                        {play} F
                        {play} E
                        {play} E
                        {play} D
                        {sleep}

                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    ```
            13:
                story_text: |
                    You can use a function with an argument for songs that have line that are almost the same, but slightly different each time.
                    One example is the song 'Yankee Doodle'. The first 4 notes of the first lines are the same, but each time they are followed by a different couple of notes.

                    ### Exercise
                    Can you finish the song of Yankee Doodle?
                    Can you think of another song to program this way?
                example_code: |
                    ```
                    {print} 'Yankee Doodle'
                    {define} _ {with} note_1, note_2, note_3
                        {play} C4
                        {play} C4
                        {play} D4
                        {play} E4
                        {play} _
                        {play} _
                        {play} _

                    {call} line_1 {with} 29, 31, 30
                    {call} line_1 {with} 29, 28, 0
                    {call} line_1 {with} 32, 31, 30

                    {play} C4
                    {play} B3
                    {play} G3
                    {play} A3
                    {play} B3
                    {play} C4
                    {play} C4
                    ```
            14:
                story_text: |
                    You can program music for fun, but you can also use the musical notes to make something useful like a fire alarm!

                    ### Exercise
                    Make sure the fire alarm rings when there is a fire!
                example_code: |
                    ```
                    {define} fire_alarm
                        {print} 'FIRE!'
                        note = 40
                        {for} i {in} {range} 1 {to} 100
                            {if} note _ 50
                                note = note + 5
                                {play} _
                            {else}
                                note = 40

                    fire = {ask} 'Is there a fire?'
                    {if} fire _ 'yes'
                        {call} fire_alarm
                    ```
            15:
                story_text: |
                    **Warning** This adventure can become extremely annoying!
                    We can also use the {while} command to repeat a song forever.

                    ### Exercise
                    Finish the never-ending song.
                example_code: |
                    ```
                    {define} song
                        {play} _

                    yes_or_no = {ask} 'Do you want to hear my never-ending song?'
                    {while} yes_or_no = 'yes'
                        {call} song
                        {print} '🥳'
                    ```
            16:
                story_text: |
                    Upgrade your Old MacDonald code!

                    ### Exercise
                    Take your code from the 'Sing a Song' adventure and add musical notes to it!
                    You can make a function for each line in the song and call that function after the line is printed.
                    We defined the first line for you and called it in the code. Can you finish the whole song?
                example_code: |
                    ```
                    {define} line_1
                        {for} i {in} {range} 1 {to} 3
                            {play} G
                        {play} D
                        {for} i {in} {range} 1 {to} 2
                            {play} E
                        {play} D

                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    for i in range 1 to 3
                        animal = animals[i]
                        sound = sounds[i]
                        print 'Old MacDonald had a farm'
                        call line_1
                        print 'E I E I O!'
                        _
                    ```
            17:
                story_text: |
                    You can use the {elif} to create different options.

                    ### Exercise
                    Firstly, add colons to get the code to work.
                    Then finish this code by adding at least 2 other songs for other moods. For example a happy song and an angry song.
                example_code: |
                    ```
                    {define} scary_song
                        {for} i {in} {range} 1 {to} 3
                            {play} G
                        {play} E
                        {sleep} 2
                        {for} i {in} {range} 1 {to} 3
                            {play} F
                        {play} D

                    mood = {ask} 'Which emotion are you feeling?'
                    {if} mood {is} 'fear'
                        {call} scary_song
                    {elif} _
                    ```
            18:
                story_text: |
                    ### Exercise
                    Even in this last level of Hedy we can make some music! Be careful of all the syntax that is needed now.
                    Take a good look at how the functions are defined and called upon in the example code.
                    Finish the song!
                example_code: |
                    ```
                    {def} line_1():
                        {for} i {in} {range}(1, 5):
                            {play} A
                        {play} D
                        {play} F
                        {play} A

                    {def} line_2():
                        {for} i {in} {range}(1, 5):
                            {play} G
                        {play} C
                        {play} E
                        {play} G

                    {def} line_3():
                    _

                    {print} ('The drunken sailor')
                    {print} ('What shall we do with the drunken sailor?')
                    line_1()
                    line_2()
                    line_3()
                    {print} ('Early in the morning')
                    ```
    parrot:
        name: Papağan
        default_save_name: Papağan
        description: Sizi taklit edecek kendi çevrimiçi evcil papağanınızı yaratın!
        levels:
            1:
                story_text: |
                    Sizi taklit edecek kendi çevrimiçi evcil papağanınızı yaratın!
                example_code: |
                    ```
                    {print} Ben papağan Hedy.
                    {ask} Adın ne senin?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### Alıştırma
                    Sarı düğmeye tıklayarak örnek kodu girdi ekranınıza kopyalayın.
                    Papağanın farklı bir soru sormasını sağlayın. Örnekteki boşlukları doldurun!
                    **Ek Görev** Papağanın birden fazla soru sormasını da sağlayabilirsiniz. Kendi kodunuzun altına birkaç satır daha kod yazın.
                example_code_2: |
                    ```
                    {print} Ben papağan Hedy.
                    {ask} _
                    {echo}
                    {echo}
            2:
                story_text: |
                    Bir önceki seviyede, sizden sonra tekrar eden bir papağan yapmıştınız. Bu seviyede papağanı bir değişken ve `{ask}` komutu kullanarak etkileşimli hale getireceğiz.
                    Ayrıca bir şey söylendikten sonra `{sleep}` komutları ekleyerek papağanı daha gerçekçi hale getireceğiz.
                example_code: |
                    ```
                    {print} Ben papağan Hedy.
                    isim _ _ Adın ne senin?
                    {print} isim
                    _
                    {print} gaak
                    _
                    {print} isim
                    ```
                story_text_2: |
                    ### Alıştırma
                    İlk olarak, 2. satırı bir `{is}` ve bir `{ask}` komutuyla bitirin.
                    Ardından papağanın bir süre sessiz kalmasını sağlamak için 4. ve 6. satırlara `{sleep}` komutunu girin.

                    **Ek Görev** Daha fazla kod satırı ekleyerek papağanın sadece adınızdan daha fazlasını sormasını sağlayabilir misiniz?
            3:
                story_text: |
                    Papağanınıza `{add}` ile yeni bir kelime öğretin.
                    ### Alıştırma
                    Kodun çalışması için `{add} {to_list}` komutunu ekleyebilir misiniz?
                example_code: |
                    ```
                    kelimeler {is} gaak, Hedy
                    {print} Papağanınızı eğitin!
                    yeni_kelime {is} {ask} Ona hangi kelimeyi öğretmek istiyorsunuz?
                    _ yeni_kelime _ kelimeler
                    {print} 🧒 hadi yeni_kelime de, Hedy!
                    {print} 🦜 kelimeler {at} {random}
                    ```
            4:
                story_text: |
                    Bu seviyede `{ask}` ve `{print}` komutları ile tırnak işaretlerini kullanmamız gerekiyor.
                    ### Alıştırma
                    Boşluklardaki tırnak işaretlerini doldurarak kodu tamamlayın.
                example_code: |
                    ```
                    kelimeler {is} gaak, Hedy
                    {print} _ Papağanınızı eğitin! _
                    yeni_kelime {is} {ask} _ Ona hangi kelimeyi öğretmek istiyorsunuz? _
                    {add} yeni_kelime {to_list} kelimeler
                    {print} _ 🧒 Hadi _ new_word _ de, Hedy!_
                    {print} _ 🦜 _ kelimeler {at} {random}
                    ```
            5:
                story_text: |
                    Doğru kelimeyi söylerse papağanınızı ödüllendirin!

                    ### Alıştırma
                    Eksik olan 4 komutu doldurarak kodu tamamlayın.
                example_code: |
                    ```
                    kelimeler {is} gaak, Hedy
                    {print} 'Papağanınızı eğitin!'
                    yeni_kelime {is} {ask} 'Ona hangi kelimeyi öğretmek istiyorsunuz?'
                    {add} yeni_kelime {to_list} kelimeler
                    dediği_kelime {is} kelimeler {at} {random}
                    {print} '🧒 Hadi ' new_word ' de, Hedy!'
                    {print} '🦜 ' dediği_kelime
                    _ dediği_kelime {is} yeni_kelime _ '🧒 Aferin, Hedy! 🍪'
                    _ _ '🧒 Hayır, Hedy! ' yeni_kelime ' de!'
                    ```
    piggybank:
        name: Kumbara
        default_save_name: Kumbara
        description: Cebindeki parayı say!
        levels:
            12:
                story_text: |
                    Bu macerada, dijital bir kumbaranın nasıl yapılacağını öğreneceksiniz.

                    ### Alıştırma
                    Ne kadar paranız olduğunu ve istediğinizi satın almak için ne kadar süre biriktirmeniz gerektiğini hesaplamak için kodu tamamlayın!
                    **Ek Görev** Belki de zaten biraz para biriktirmişsinizdir? Bunu biriktirmeniz gereken miktardan düşebilirsiniz.
                example_code: |
                    ```
                    {print} 'Dijital kumbara'
                    istek = {ask} 'Ne satın almak isterdiniz?'
                    fiyat = {ask} 'Bu fiyatı ne kadar?'
                    biriken = {ask} 'Şimdiye kadar ne kadar para biriktirdiniz?'
                    haftalık = {ask} 'Haftada ne kadar cep harçlığı alıyorsunuz?'
                    birikmesi_gereken = fiyat - biriken
                    haftalar = birikmesi_gereken / haftalık
                    {print} 'Yeni bir ' _ ' almak için ' _ ' hafta biriktirmek gerekiyor.'
                    ```
            14:
                story_text: |
                    ### Exercise
                    In this level you can let Hedy tell you if you have saved up enough money!
                    Finish this code by filling in the blanks!
                example_code: |
                    ```
                    _ calculate_budget with wish, money, allowance
                        to_save = wish - money
                        weeks = to_save / allowance
                        {if} wish _ money
                            {print} 'You need to save up some more!'
                            {print} 'Youll need ' weeks ' more weeks.'
                        {else}
                            {print} 'Great! You have enough'
                            {print} 'Lets go shopping!'

                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'

                    {call} calculate_budget with _, _, _
                    ```
    pressit:
        name: Tuşa basma
        default_save_name: Basılı
        description: Bir klavye tuşu ile bir komutu birbirine bağlamayı deneyin!
        levels:
            5:
                story_text: |
                    Bu seviyede yeni bir anahtar kelimemiz daha var: `{pressed}`!
                    `{pressed}` ile, klavyenizdeki tuşları kullanarak hangi satırların kullanılacağını kontrol edebilirsiniz.

                    ### Alıştırma
                    Örneğe bir bakın, ve bir tuşa basıldığında tepki veren bir kod satırı daha ekleyin.
                example_code: |
                    ```
                    {print} 'İyi (i) mi yoksa kötü (k) bir son mu istiyorsunuz?'
                    {if} i {is} {pressed} {print} 'Sonsuza kadar mutlu yaşadılar. ❤'
                    {else} {print} 'Prens bir su aygırı tarafından yenmiş. 😭'
                    ```
                story_text_2: |
                    Kaplumbağa komutlarını da tuşlara bağlayabilirsiniz.

                    ### Alıştırma
                    Satırları birkaç kez kopyalayın, böylece daha büyük bir çizim yapabilirsiniz.
                example_code_2: |
                    ```
                    {if} i {is} {pressed} {forward} 15
                    {else} {turn} 90
                    ```
            7:
                story_text: |
                    Artık `{repeat}` hakkında bilgi sahibi olduğunuza göre, tuşlara birden çok kez basabiliriz.
                    Kaplumbağanın ileri doğru yürümesini ve dönmesini sağlamak için kullanabilirsiniz.

                    ### Alıştırma
                    Seviye 5'te gördüğünüz kod, tuşu yalnızca bir kez kontrol ediyor. Örnek kodu kopyalayın ve tuşlara birçok kez basabilmeniz için ona bir `{repeat}` ekleyin.
                    Güzel bir şey çizmek için bu kodu kullanın.
                example_code: |
                    ```
                    {if} x {is} {pressed} {forward} 15 {else} {turn} 90
                    ```
            9:
                story_text: |
                    Artık ifadeleri nasıl birleştireceğinizi bildiğinize göre, `{pressed}` ile dokunma-türü bir araç oluşturabilirsiniz.

                    ### Alıştırma
                    Kodu tamamlayın. Her seferinde basmanız gereken rastgele bir harf seçilmelidir. Doğru basınca bir puan ödül, yanlış basarsanız iki puan kesinti alırsınız.
                    **Ek Görev** Her harften sonra ekranı temizleyin ve kullanıcıya kaç puan aldığını gösterin.
                example_code: |
                    ```
                    puan = 0
                    harfler = a, b, c, d, e
                    {repeat} 10 {times}
                        harf = _ _ _
                        {print} 'Hemen şu tuşa bas: ' harf
                        {if} harf {is} {pressed}
                        _
                        _
                        _
                    ```
    print_command:
        name: '{print}'
        default_save_name: yazdır
        description: yazdır komutuna giriş
        levels:
            1:
                story_text: |
                    ## yazdır komutu
                    `{print}` komutunu kullanarak ekrana metin yazdırabilirsiniz.
                example_code: |
                    ```
                    {print} Merhaba, programcı!
                    {print} Hedy'ye hoş geldin!
                    ```
                story_text_2: |
                    ### Alıştırma
                    Hedy'de, her macerada alıştırmalar bulacaksınız. Bir alıştırma, yeni komutları ve kavramları uygulamanıza ve örnek kodlara kendi yorumunuzu katmanıza olanak tanır.
                    Bu alıştırmada pembe bir boşluk göreceksiniz. Kodun çalıştırılabilmesi için boş alanın yerine bir şey yazıp doldurmanız gerekiyor.

                    Boş alana `{print}` komutunu girin ve ardından beş tane daha kod satırı ekleyin. Her satır bir `{print}` komutu ile başlamalıdır.
                    İyi eğlenceler!
                example_code_2: |
                    ```
                    _ Merhaba!
                    ```
            18:
                story_text: |-
                    Gerçek Python koduna ulaştık! Yani bu, bundan sonra `{print}` ve `{range}` ile beraber artık bir de parantez kullanmamız gerektiği anlamına geliyor.
                    Bu aynı zamanda İngilizce komutları kullandığınız sürece bu seviyedeki Hedy kodunu herhangi bir Python ortamında kullanabileceğiniz anlamına gelir. Şimdiye kadar kullanmadıysanız, bunu yapmak için komutlar menüsünden geçişi değiştirebilirsiniz.
                example_code: |
                    ```
                    {print}('Merhaba!')
                    {for} i {in} {range}(1, 10):
                        {print}('Bu, satır ', i)
                    ```
                story_text_2: Birden fazla öğe yazdırmak istiyorsanız, bunları virgülle ayırmanız gerekir.
                example_code_2: |
                    ```
                    sıcaklık = 25
                    {print}('Hava dışarıda ', sıcaklık, ' derece')
                    ```

                    {print}('Benim adım ', isim)
    quizmaster:
        name: Kısa sınav ustası
        default_save_name: Kısa sınav ustası
        description: Kendi kısa sınavınızı yapın!
        levels:
            14:
                story_text: |
                    Bu macerada kendi kısa sınavınızı yapabilirsiniz! Boşlukları doldurun, daha fazla soru ekleyin ve kendi kısa sınavınızın tadını çıkarın!
                    İstediğiniz herhangi bir şey hakkında bir kısa sınav yapabilirsiniz: hobiniz, en sevdiğiniz hayvan, en sevdiğiniz kitap veya herhangi bir şey!
                example_code: |
                    ```
                    {print} 'Kendi kısa sınavınızı yapın'
                    puanlar_a = 0
                    puanlar_b = 0
                    {print} 'Soru'
                    {print} 'Cevap seçeneği A'
                    {print} 'Cevap seçeneği B'
                    cevap = {ask} 'Cevap hangisi?'
                    {if} cevap == 'A'
                        puanlar_a = puanlar_a + 1
                    {if} cevap == 'B'
                        puanlar_b = puanlar_b + 1
                    {print} 'Kısa sınav bitti!'
                    {print} 'Sonuçları görelim!'
                    {if} puanlar_a > puanlar_b
                        {print} 'Sen A kulübüne aitsin.'
                    {if} puanlar_b > puanlar_a
                        {print} 'Sen B kulübüne aitsin.'
                    ```
    quotation_marks:
        name: '''tırnak işaretleri'''
        default_save_name: quotation_marks
        description: Tırnak işaretlerine giriş
        levels:
            4:
                story_text: |
                    ## 'Tırnak işaretleri'
                    4. seviyede `{ask}` ve `{print}` artık biraz değişti.
                    Yazdırmak istediğiniz metni tırnak işaretleri arasına almalısınız.
                    Bu yararlıdır, çünkü artık istediğiniz tüm kelimeleri yazdırabilirsiniz. Ayrıca `{is}` ile bir şeyi saklamak için kullandığınız kelimeler de buna dahil.
                    Çoğu programlama dilinde de yazdırırken tırnak işareti kullanılır, böylece gerçek programlamaya bir adım daha yaklaşmış oluruz!
                example_code: |
                    ```
                    {print} 'Şu andan itibaren tırnak işareti kullanmanız gerekiyor!'
                    cevap {is} {ask} 'Bundan sonra ne kullanmamız gerekiyor?'
                    {print} 'Kullanmamız gereken ' cevap
                    ```
                story_text_2: |
                    ## Kısaltmalar
                    Önemli! Artık tırnak işareti kullandığımıza göre, Hedy'nin veya TC'de gibi kısaltmalar için kesme işareti kullandığınızda Hedy'nin kafasının karışacağını unutmayın.
                    Bu kesme işaretlerini kaldırdığınızdan ve yazım şeklini "Hedy nin" veya "TC de" olarak değiştirdiğinizden emin olun. (Tek tırnak için şimdilik başka çözümümüz yok).
                    Kesme işaretlerinin yanlış kullanım şeklini görmek için örnek koda göz atın.
                example_code_2: |
                    ```
                    _ Kesme işaretlerini kullanmanın yanlış yolu budur _
                    {print} 'Ayşe'nin çocuklarına bakıyorum.'
                    {print} 'Çocuklarla oyun'dan daha eğlenceli ne olabilir ki?'
                    ```
            12:
                story_text: |
                    **Tüm metinlerin tırnak içinde olması gerekir**
                    Bu seviyeden itibaren bir metni `=` ile kaydederken tırnak işaretlerini de kullanmanız gerekecektir:
                example_code: |
                    ```
                    isim = 'Robot Hedy'
                    {print} 'Merhaba ' isim
                    ```
                story_text_2: |
                    **Listelerdeki tüm öğelerin de tırnak işaretine ihtiyacı vardır**
                    Listeler metindir, bu nedenle onlarında tırnak işaretlerine ihtiyaçları vardır. Listedeki her bir öğenin tırnak işaretine sahip olduğuna dikkat edin.
                    Bu, örneğin 'Black Widow' gibi iki kelimeyi listeye 1 öğe olarak kaydetmenizi sağlar.
                example_code_2: |
                    ```
                    süperkahramanlar = 'Spiderman', 'Batman', 'Black Widow'
                    {print} süperkahramanlar {at} {random}
                    ```
                story_text_3: |
                    **`{if}` karşılaştırmalarından sonraki tüm metinler de tırnak işaretine ihtiyaç duyar**
                example_code_3: |
                    ```
                    isim = {ask} 'Senin adın ne?'
                    {if} isim = 'Robot Hedy'
                        {print} 'Merhaba!'
                    ```
                story_text_4: |
                    **Sayıların tırnak işaretine ihtiyacı yoktur**
                    Sayılar için `=` içinde tırnak işareti kullanmazsınız:
                example_code_4: |
                    ```
                    puan = 25
                    {print} 'Puanın ' puan
                    ```
    random_command:
        name: '{random}'
        default_save_name: restgele_komutu
        description: şurada rastgele komutuna giriş
        levels:
            3:
                story_text: |
                    ## şurada rastgele
                    Bu seviyede `{is}` komutunu kullanarak bir liste oluşturabileceksiniz. Bilgisayarın bu listeden rastgele bir öğe seçmesini sağlayabilirsiniz. Bunu `{at} {random}` ile yaparsınız.
                example_code: |
                    ```
                    hayvanlar {is} köpekler, kediler, kangurular
                    {print} hayvanlar {at} {random}
                    ```
                story_text_2: |
                    `{at} {random}` komutunu cümle içinde de kullanabilirsiniz.
                example_code_2: |
                    ```
                    yemek {is} sandviç, bir dilim pizza, salata, dürüm
                    {print} Öğle yemeğinde bir yemek {at} {random} yiyeceğim.
                    ```
                story_text_3: |
                    ### Alıştırma
                    Bir kapı veya bir bavul seçtiğiniz ve içinde büyük bir ödül bulunan kendi oyun programınızı (televizyondakiler gibi) yapmak için `{at} {random}` komutunu deneyin!
                    Bunu yapabilir misiniz? İlk satırları sizin için örnek koda zaten koyduk.
                example_code_3: |
                    ```
                    {print} Büyük oyun gösterisi!
                    {print} Önünüzde 3 bavul var...
                    seçim {is} {ask} Hangi bavulu seçiyorsunuz?
                    ödüller {is} _
                    _
                    ```
            16:
                story_text: |-
                    We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
                    We use square brackets to point out a place in a list. For example: `friends[1]` is the first name on the list of friends, as you can see in the first part of the example code.
                    The second part of the example code shows you that we can also match 2 lists using the variable i.
                example_code: |
                    ```
                    friends = ['Ahmed', 'Ben', 'Cayden']
                    {print} friends[1] ' is the first friend on the list.'
                    {print} friends[2] ' is the second friend on the list.'
                    {print} friends[3] ' is the third friend on the list.'
                    #now we will match 2 lists using the variable i
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} friends[i] 's lucky number is ' lucky_numbers[i]
                    ```
                story_text_2: |-
                    Now that you've learned to use the brackets in lists, you can also start using the {at} {random} command in the Python way!
                    You simply type the name of your list with `[random]` behind it!
                example_code_2: |-
                    ```
                    fruit = ['apple', 'banana', 'cherry']
                    {print} fruit[random]
                    ```
    repeat_command:
        name: '{repeat}'
        default_save_name: tekrarla_komutu
        description: tekrarla komutu
        levels:
            7:
                story_text: |
                    ## Tekrarla! Tekrarla! Tekrarla!
                    Seviye 7 de `{repeat}` komutunu ekliyoruz. `{repeat}` bir kod satırını birden çok kez çalıştırmak için kullanılabilir. Bunun gibi:

                    ### Alıştırma
                    Tekrarla komutu ile oynayın. Mutlu yıllar şarkısını şimdi 4 yerine sadece 3 satır kodla yapabilir misiniz?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy çok eğlenceli!'
                    ```
            8:
                story_text: |
                    ### Tekrarla komutları ve girinti
                    Bu seviyede sadece 1 tekrar komutu ile birden fazla kod satırını tekrarlayabilirsiniz.
                    Bunu, tekrarlamak istediğiniz satırlardan bir blok oluşturarak yaparsınız.
                    Bu bloktaki satırların **girintiye** ihtiyacı olacaktır.
                    Bu, her satırın başına dört boşluk koymak anlamına geliyor. Sadece tek satırlık bir blok oluşturmak istediğinizde de girinti yapmanız gerekecektir.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} 'Herkese merhaba'
                        {print} 'Bunların hepsi 5 kez tekrarlanır'
                    ```
            9:
                story_text: |
                    Bu seviyede sadece `{if}` ve `{repeat}` ile birden fazla satır kullanmakla kalmaz, aynı zamanda bunları bir araya da getirebilirsiniz!
                    Bu örnekte, bir `{repeat}` komutu içinde bir `{if}` komutu görüyorsunuz. Bunun tersine de izin verilir ve ayrıca bir `{if}` içinde bir `{if}` ve bir `{repeat}` içinde bir `{repeat}` komutu da kullanılabilir.
                    Bir deneyin bakalım!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        yemek = {ask} 'Ne yemek istiyorsun?'
                        {if} yemek {is} pizza
                            {print} 'güzel!'
                        {else}
                            {print} 'pizza daha iyi olur'
                    ```
    repeat_command_2:
        name: '{repeat} 2'
        default_save_name: tekrarla_komutu_2
        description: tekrarla komutu 2
        levels:
            7:
                story_text: |
                    ## tekrarla ile diğer komutlar ve değişkenler
                    `{print}` komutu ile birlikte `{repeat}` komutunu yeterince uyguladınız, ancak `{repeat}` ile başka komutlar da kullanabileceğinizi biliyor muydunuz?
                    Bu örnek kodda `{repeat}` komutunun bir `{ask}`, `{if}` veya `{else}` komutuyla da kullanılabileceğini görebilirsiniz.
                example_code: |
                    ```
                    {repeat} 2 {times} cevap = {ask} 'Bir soruyu birden fazla kez sorabileceğinizi biliyor muydunuz?'
                    {if} cevap {is} evet {repeat} 2 {times} {print} 'Demek bunu zaten biliyordunuz!'
                    {else} {repeat} 3 {times} {print} 'Yeni bir şey daha öğrendiniz!'
                    ```
                story_text_2: |
                    `{repeat}` komutuyla yapabileceğiniz bir başka ilginç şey de, bir şeyin kaç kez tekrarlanacağını ayarlamak için, değişkenler kullanmaktır. Örnek kodda ilk olarak kişiye kaç yaşında olduğunu sorduğumuzu görebilirsiniz.
                    Ardından, 3. satırda, bu soru 'yaş' kez tekrarlanır. Yani `{repeat}` komutu ile 'yaş' değişkenini kullandık.
                example_code_2: |
                    ```
                    {print} 'Yaşasın! Bugün senin doğum günün!'
                    yaş = {ask} 'Şimdi kaç yaşındasın?'
                    {repeat} yaş {times} {print} 'Hey Çok Yaşa!'
                    ```
            8:
                story_text: |
                    ### blok mu değil mi?
                    Bu seviyede, hangi kod satırlarının blokta yer alması ve hangilerinin yer almaması gerektiğini dikkatlice düşünmeniz gerekir.
                    Örneğin: Eğer *çörek adam* şarkısını söylemek isterseniz, sadece 'çörek adam' satırının iki kez tekrarlanmasını istersiniz.
                    Bu, son satırın bloğa ait olmadığı için girintiyle başlamaması gerektiği anlamına gelir.
                    Son satıra girinti ile başlarsanız şarkı yanlış olur.

                    ## Alıştırma
                    Örnek koddaki her satır bir boşlukla başlar. Boşlukları kaldırın ve çörek adam şarkısını yapmak için hangi satırın girintiye ihtiyacı olduğunu ve hangisinin olmadığını bulmaya çalışın.
                example_code: |
                    ```
                    _ {print} 'Kim tanır çörek adamı?'
                    _ {repeat} 2 {times}
                    _ {print} 'çörek adamı'
                    _ {print} 'kim tanır çörek adamı, nerede yaşıyor?'
                    ```
    restaurant:
        name: Restoran
        default_save_name: Restoran
        description: Kendi sanal restoranınızı oluşturun
        levels:
            1:
                story_text: |
                    Seviye 1'de, kendi sanal restoranınızı oluşturabilir ve konuklarınızın siparişlerini alabilirsiniz.
                story_text_2: |
                    ### Alıştırma
                    Sarı düğmeye tıklayarak örnek kodu giriş ekranınıza kopyalayın.
                    Öncelikle, kodun düzgün çalışması için boşluklara doğru komutu girin.
                    Ardından restoran programına en az 4 satır kod daha ekleyin.
                    Müşteriye ne içmek istediklerini sorun ve nakit mi yoksa kartla mı ödeme yapmak istediklerini sorun.
                    Son olarak, müşterinize veda etmek için güzel bir yol düşünün.
                example_code_2: |
                    ```
                    {print} Hedy'nin restoranına hoş geldiniz 🍟
                    _ Ne sipariş etmek istersiniz?
                    {echo} Yani siparişiniz
                    {print} Siparişiniz için teşekkür ederiz!
                    {print} Şimdi hazırlıyoruz!
                    ```
            2:
                story_text: |
                    Seviye 2'de, değişkenler kullanarak restoranınızı genişletebilirsiniz. Seviye 1'de Hedy siparişi sadece bir kez `{echo}` yapabiliyordu ve sadece en son sipariş edilen şeyi hatırlayabiliyordu.
                    Artık değişkenleri kullanabilirsiniz ve Hedy'nin hem yemeği hem de sosları hatırlamasını sağlayayabilirsiniz!
                example_code: |
                    ```
                    {print} Hedy'nin restoranına hoş geldiniz!
                    {print} Bugün pizza ya da lazanya servis edeceğiz.
                    yemek {is} {ask} Ne yemek istersiniz?
                    {print} Harika bir seçim! yemek benim de favorim!
                    sos {is} {ask} Et mi yoksa sebze mi istersiniz?
                    {print} sos içeren yemek hemen geliyor!
                    ```
                story_text_2: |
                    ### Alıştırma
                    Kendi restoran kodunuzu bir önceki seviyeden kopyalayıp aşağıdaki girdi ekranına yapıştırın.
                    Bu seviyede öğrendiğiniz gibi, `{ask}` ve `{echo}` komutlarını değiştirerek ve değişkenleri kullanarak kodu düzeltin.

                    Artık kodunuz tekrar çalıştığına göre, bir şeyler daha eklemenin zamanı geldi.
                    Örnek kodun son satırına bakın: `{print} sos içeren yemek hemen geliyor!`
                    Bu tek satırda, siparişin bir özetini oluşturmak için 2 değişken kullanılmıştır.
                    Şimdi müşteriniz tarafından sipariş edilen yiyecek ve içeceklerin özetini kendiniz ekleyin.

                    **Ek Görev** Artık değişkenleri nasıl kullanacağınızı öğrendiğinize göre, bir satırda istediğiniz kadar değişken kullanabilirsiniz. Kodunuza daha fazla değişken ekleyebilir misiniz, örneğin masada yemek ya da paket servis, nakit ya da kart, pipetli ya da pipetsiz gibi.
            3:
                story_text: |
                    Akşam yemeğinde ne yemek istediğinize karar vermekte zorlanıyor musunuz? Hedy'nin sizin için seçmesini sağlayabilirsiniz!
                    En çok sevdiğiniz (veya en az sevdiğiniz) yemeklerin listesini ekleyin ve Hedy rastgele akşam yemeğinizi seçsin.
                    Ayrıca Hedy'nin akşam yemeğinizin fiyatını seçmesini de sağlayarak biraz eğlenebilirsiniz! Ne alacaksınız?
                example_code: |
                    ```
                    anayemek {is} spagetti, brüksel lahanası, hamburger
                    {print} Bu akşam yemekte anayemek {at} {random} var!
                    fiyatlar {is} 1 lira, 10 lira, 100 lira
                    {print} Ödemeniz toplam fiyatlar {at} {random} lütfen.
                    ```
                story_text_2: |
                    ### Alıştırma
                    Şimdi rastgelelik restoranının kendi versiyonunuzu yapın.
                    Başlangıçlar, ana yemekler, tatlılar, içecekler ve fiyatların bir listesini kendiniz yapın.
                    Ardından müşteriye bu akşamın menüsünde ne olacağını söylemek için `{print}` ve `{at} {random}` komutlarını kullanın.
                example_code_2: |
                    ```
                    {print} Kendi rastgele restoranınıza hoş geldiniz!
                    mezeler {is} _
                    yemekler {is} _
                    tatlılar {is} _
                    içecekler {is} _
                    fiyatlar {is} _
                    _
                    ```
            4:
                story_text: |
                    ### Alıştırma
                    Çalışması için bu koda tırnak işaretlerini ekleyin! Dikkatli olun: değişkenler tırnak işareti içinde olmamalıdır.
                    Ardından, çıktı ekranınızda her seferinde yalnızca bir satır göstermek için `{clear}` komutunu kullanın.

                    ### Alıştırma 2
                    Önceki seviyeye geri dönün ve restoran kodunuzu kopyalayın. Doğru noktalara tırnak işaretleri ekleyerek ve bazı yerlerde `{clear}` komutları ekleyerek kodun bu seviye için de çalışmasını sağlayın.
                example_code: |
                    ```
                    _ Bu koda tırnak işaretlerini ekleyin _
                    {print} Restaurant Chez Hedy'ye hoş geldiniz!
                    {print} Bugün pizza ya da lazanya servis edeceğiz.
                    yemek {is} {ask} Ne yemeyi istersiniz?
                    {print} Harika bir seçim! yemek benim de favorim!
                    sos {is} {ask} Et mi yoksa sebze mi istersiniz?
                    {print} sos içeren yemek hemen geliyor!
                    içecek {is} {ask} Yanında ne içmek istersiniz?
                    {print} Siparişiniz için teşekkür ederiz.
                    {print} yemek ve içecek hemen hazır olacak!
                    ```
            5:
                story_text: |
                    ### Alıştırma
                    Örnek kod, restoranınızda bir menü öğesinin tükenmesini nasıl programlayabileceğinizi gösterir.
                    Önceki seviyelerden kendi restoran kodunuzu kopyalayın. Restoranınızda bir sorun çıkarın ve bunu örnek kodda olduğu gibi kodlayın.
                    Örneğin, bir menü öğesi tükenmiş olabilir veya kredi kartı kabul etmiyor olabilirsiniz ya da dondurma makinesi bozuk olabilir.

                    **Ek Görev** Sorunu programlayıp, buna uygun yanıtları da programladınız mı? O zaman şimdi kodunuza daha fazla `{if}` ve `{else}` komutları eklemeyi deneyin.
                    Kodu olabildiğince etkileşimli hale getirmek için kodunuzdaki her `{ask}` komutundan sonra bir `{if}` eklemeye çalışın!
                example_code: |
                    ```
                    depodaki_içecekler {is} su, limonata, kola, portakal suyu
                    içecek {is} {ask} 'Ne içmek istersiniz?'
                    {if} içecek {in} depodaki_içecekler {print} 'Bir ' içecek ' hemen geliyor!'
                    {else} {print} 'Üzgünüm, ondan satmıyoruz'
                    ```
            6:
                story_text: |
                    Bu seviyede, müşterinizin siparişinin toplam fiyatını hesaplamak için matematiği kullanabilirsiniz, bu da sanal restoranınızı daha gerçekçi hale getirecektir.
                    Ancak sanal restoranınıza daha birçok şey, örneğin daha fazla çeşitler de ekleyebilirsiniz.

                    ### Alıştırma
                    Sanal restoranınıza daha birçok şey ekleyebilirsiniz. Örneğin...
                    - kaç kişinin geleceğini sorup fiyatı bu miktarla çarpmak?
                    - başka bir çeşit eklemek?
                    - insanlara (gizli) bir kupon kodu girdiklerinde indirim vermek?
                    - bir çocuk menüsü eklemek?
                    - eklemek için başka eğlenceli şeyler aklınıza geliyor mu?
                example_code: |
                    Bunun gibi basit bir restoran kodu oluşturabilirsiniz:
                    ```
                    {print} "Restaurant Chez Hedy'ye Hoş Geldiniz"
                    {print} 'İşte menümüz:'
                    {print} 'Ana yemeklerimiz pizza, lazanya veya spagetti'
                    ana = {ask} 'Hangi ana yemeği istersiniz?'
                    fiyat = 0
                    {if} ana {is} pizza fiyat = 10
                    {if} ana {is} lazanya fiyat = 12
                    {if} ana {is} spagetti fiyat = 8
                    {print} 'Siparişiniz ' ana
                    {print} 'Ücret toplamı ' fiyat ' lira, lütfen'
                    {print} 'Teşekkürler, afiyet olsun!'
                    ```
            7:
                story_text: |
                    Bu seviyede, bir kod satırını belirli sayıda tekrarlamak için `{repeat}` komutunu nasıl kullanacağınızı öğrendiniz.
                    Bunu restoranınızda birden fazla kişiye `{ask}` ile ne yemek istediklerini sormak için kullanabilirsiniz.

                    ### Alıştırma
                    Kodu tamamlayabilir misiniz? Hedy'nin bu soruyu kişi sayısı kadar tekrarlaması gerekiyor. Yani 5 kişi varsa, sorunun 5 kez sorulması gerekir.
                    **Ek Görev** Kodunuzu daha fazla soru ile genişletin, örneğin içecekler veya sos hakkında.
                example_code: |
                    ```
                    {print} "Restaurant Chez Hedy'ye Hoş Geldiniz"
                    kişiler = {ask} 'Bugün bize kaç kişi katılıyor?'
                    ```
            8:
                story_text: |
                    Bu seviyede, birden fazla kod satırını tekrarlayarak sanal restoranınızı daha ayrıntılı hale getirebilirsiniz. Bunun gibi:

                    ### Alıştırma
                    Bu kod, menüde daha fazla öğe eklenerek genişletilebilir, örneğin içecekler ve/veya birden fazla yemek veya tatlı sunulabilir. En az bir öğe daha ekleyin.
                    **Ek Görev** Daha da fazla ürün ekleyin, istediğiniz kadar seçenek olsun!
                example_code: |
                    ```
                    {print} "Restaurant Chez Hedy'ye hoş geldiniz!"
                    kişiler = {ask} 'Bugün bize kaç kişi katılacak?'
                    {print} 'Harika!'
                    {repeat} kişiler {times}
                        yemek = {ask} 'Ne sipariş etmek istersiniz?'
                        {print} yemek
                    {print} 'Siparişiniz için teşekkür ederiz!'
                    {print} 'Afiyet olsun!'
                    ```
            9:
                story_text: |
                    Bu seviyede restoranınızı daha gerçekçi ve daha eğlenceli hale getirmek için iç içe geçmeyi kullanabilirsiniz!

                    ### Alıştırma
                    Örnek kodda girintiler kaldırılmıştır.
                    Kodun düzgün çalışması için her satırın ne kadar girintiye ihtiyacı olduğunu bulabilir misiniz?
                    Eğer müşteri pizza sipariş ederse, Hedy müşterinin hangi sosu istediğini sormamalıdır.

                    **Extra** Bir restoranın deposunda tüm soslar bulunmaz. Mevcut sosların bir listesini yapın ve her siparişte satıp satmadığınıza dair bir yanıt verin. <br>
                    **Extra** Pizzalarda sos vardır. Müşterilere ne istediklerini sorun.<br>
                    **Extra** Müşteriler içecek mi istiyor? Onları da sorun! <br>
                example_code: |
                    ```
                    {print} "Restaurant Chez Hedy'ye hoş geldiniz!"
                    kişiler = {ask} 'Bugün bize kaç kişi katılacak?'
                    {print} 'Harika!'
                    fiyat = 0
                    {repeat} kişiler {times}
                    _ yemek = {ask} 'Ne sipariş etmek istersiniz?'
                    _ {print} yemek
                    _ {if} yemek {is} kızartma
                    _ fiyat = fiyat + 3
                    _ sos = {ask} 'Patates kızartmanızın yanında ne tür bir sos istersiniz?'
                    _ {if} sos {is} 'hayır'
                    _ {print} 'sos olmayacak'
                    _ {else}
                    _ fiyat = fiyat + 1
                    _ {print} sos ' sosu olacak '
                    _ {if} yemek {is} pizza
                    _ fiyat = fiyat + 4
                    {print} 'Toplam ücret ' price ' lira'
                    {print} 'Afiyet olsun!'
                    ```
            10:
                story_text: |
                    Bu seviyede, farklı çeşitler için nasıl kolayca sipariş vereceğinizi öğreneceksiniz.

                    ### Alıştırma 1
                    Kodu boşluklara bir `{ask}` koyarak tamamlayın, böylece müşteriye her yemek için ne yemek istediği sorulur.
                example_code: "```\nçeşitler = meze, ana yemek, tatlı\n{for} çeşit {in} çeşitler\n    {print} 'Siparişiniz için ' course ' ne olacak?'\n    _ \n    _\n```\n"
                story_text_2: |
                    ### Alıştırma
                    Tabii ki, birden fazla kişi için de sipariş verebilirsiniz!
                    Kodun düzgün çalışması için her satırdan önce doğru miktarda girinti ekleyebilir misiniz?
                    İpucu: Bazı satırlarda hiç girintiye gerek yoktur.
                example_code_2: |
                    ```
                    _ çeşitler = meze, ana yemek, tatlı
                    _ isimler = Ali, Ayşe
                    _ {for} isim {in} isimler
                    _ {for} çeşit {in} çeşitler
                    _ yemek = {ask} isim ', yemekte ' course ' olarak ne yemek istersin?'
                    _ {print} isim ' yemekte ' çeşit ' olarak ' yemek ' sipariş ediyor'
                    ```
            11:
                story_text: |
                    Birden fazla müşteriden gelen siparişleri düzenli bir şekilde yazdırmak için `{for}` ile `{range}` kullanabiliriz.

                    ### Alıştırma
                    Restoran kodunu tamamlayın, böylece birden fazla kişinin siparişini alabilirsiniz. Her seferinde sipariş numarasını yazdırın: 'Sipariş 1', 'Sipariş 2', gibi.
                    Bunu nasıl yapacağınızdan emin değil misiniz? Seviye 8 kodunuza bir göz atın.

                    **Ek Görev** 9. seviyede, restoran fiyatlarını da kullanmıştınız. Bunu da buraya ekleyebilirsiniz!
                example_code: |
                    ```
                    {print} "Restaurant Hedy'ye hoş geldiniz!"
                    kişiler = {ask} 'Kaç kişi için sipariş vermek istersiniz?'
                    {print} 'Demek ' kişiler ' kişi için sipariş vermek istiyorsunuz'
                    {print} 'Tamam, başlayalım!'
                    ```
            12:
                story_text: |
                    Bu seviyeden itibaren menünüzü daha gerçekçi hale getirmek için ondalık sayıları kullanabilirsiniz.

                    ### Alıştırma
                    Arkadaşlarınıza ve ailenize %15 indirim sağlayacak bir kod düşünebiliyor musunuz?
                example_code: |
                    ```
                    fiyat = 0.0
                    yemek = {ask} 'Ne sipariş etmek istersiniz?'
                    içecek = {ask} 'Ne içmek istersiniz?'
                    {if} yemek {is} 'hamburger'
                        fiyat = fiyat + 6.50
                    {if} yemek {is} 'pizza'
                        fiyat = fiyat + 5.75
                    {if} içecek {is} 'su'
                        fiyat = fiyat + 1.20
                    {if} içecek {is} 'soda'
                        fiyat = fiyat + 2.35
                    {print} 'Toplam ' fiyat ' lira, lütfen'
                    ```
            13:
                story_text: |
                    Bu seviyede kodunuzu daha da genişletmek için yeni komutlar öğreneceksiniz.

                    ### Alıştırma 1
                    Programdaki mantıklı olan yerlere bir `{and}` ve bir `{or}` yerleştirin.

                    ### Alıştırma 2
                    Restoranınızı en az bir tane daha `{and}` ve bir tane `{or}` ile genişletin.
                    Örneğin, yalnızca pizza için geçerli olan özel bir indirim kuponu oluşturun veya müşterinize patates kızartması ve krep ile birlikte ücretsiz bir içecek verin.
                    Ya da tabii ki tamamen farklı bir şey de olabilir!
                example_code: |
                    ```
                    ücret = 10
                    yemek = {ask} 'Ne yemek istersiniz?'
                    içecek = {ask} 'Ne içmek istersiniz?'
                    {if} yemek {is} 'sandviç' _ içecek {is} 'meyve suyu'
                        {print} 'Bu bizim indirim menümüz'
                        ücret = ücret - 3
                    {if} içecek {is} 'su' _ içecek {is} 'meyve suyu'
                        {print} 'Bu sağlıklı bir seçim'
                    {print} 'Toplam ' ücret ' lira ediyor'
                    ```
            15:
                story_text: |
                    `{while}` ile müşterilerinizin istekleri bitene kadar sipariş eklemeye devam edebilmelerini sağlayabilirsiniz.
                    ### Exercise
                    Correctly add the `{while}` command to this code.
                example_code: |
                    ```
                    {print} "McHedy'ye Hoş Geldiniz"
                    dahafazla = 'evet'
                    _
                        sipariş = {ask} 'Ne sipariş etmek istersiniz?'
                        {print} sipariş
                        dahafazla = {ask} 'Başka bir şey sipariş etmek ister misiniz?'
                    {print} 'Teşekkür ederiz!'
                    ```
    rock:
        name: Taş, kağıt, makas
        default_save_name: Rock_2
        description: Kendi taş, kağıt, makas oyununuzu yapın
        levels:
            1:
                story_text: |
                    Seviye 1'de, taş, kağıt, makas oyunu yazmaya başlayabilirsiniz.

                    `{ask}` ile bir seçim yapabilir ve `{echo}` ile bu seçimi tekrarlayabilirsiniz.
                example_code: |
                    ```
                    {print} Neyi seçiyorsun?
                    {ask} taş, kağıt veya makas arasından seçim yap
                    {echo} Demek senin seçimin:
                    ```
                story_text_2: |
                    ### Alıştırma
                    Kelimeleri kullanmak yerine emojileri de kullanabilirsiniz: ✊✋✌
                    Emojileri kullanarak bir kod oluşturabilir misiniz? (kopyala-yapıştır deneyin)
                example_code_2: |
                    ```
                    {print} Neyi seçiyorsun?
                    {ask} Bunlardan birini seçin _
                    {echo} Demek senin seçimin:
                    ```
            2:
                story_text: |
                    Bu seviyede değişkenleri kullanarak pratik yapabilir, böylece taş, kağıt, makas oyununuzu yeni bir seviyeye taşımız olursunuz!
                    ### Alıştırma
                    Boşluklardaki **değişkeni** doldurarak kodu tamamlayın.
                    Bu oyun çok etkileşimli değil, ama endişelenmeyin! Bir sonraki sekmede oyununuzu etkileşimli hale getirmek için değişkenleri `{ask}` komutu ile birlikte nasıl kullanacağınızı öğreneceksiniz!
                example_code: |-
                    ```
                    seçim {is} taş
                    {print} Benim seçimim _
                    ```
            3:
                story_text: |
                    Bilgisayarın taş, kağıt veya makas seçmesini sağlamak için `{at} {random}` komutunu kullanabilirsiniz!

                    ### Alıştırma
                    `{at} {random}` komutunu kullanarak kodu tamamlayın.
                example_code: |
                    ```
                    seçimler {is} taş, kağıt, makas
                    {print} seçimler _ _
                    ```
                story_text_2: |
                    **Ek Görev** İki oyunculu bir oyun hazırlayın. İlk olarak iki oyuncudan isimlerini yazmalarını isteyin. Ardından bilgisayarın rastgele seçim yapmasını sağlayın.
                example_code_2: |
                    ```
                    seçimler {is} taş, kağıt, makas
                    oyuncu_1 {is} {ask} 1 numaralı oyuncunun adı:
                    _
                    ```
            4:
                story_text: |
                    Bu seviyede, taş, kağıt, makas programını daha da geliştirebiliriz. Ancak metin eklemek istiyorsanız, burada da tırnak işareti kullanmanız gerekir.
                    ### Alıştırma
                    Fill in quotation marks on the blanks. Mind that the variable `choices` should be outside the quotes.
                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} _The computer chooses..._ choices {at} {random}
                    ```
            5:
                story_text: |
                    Bu seviyede beraberlik olup olmadığını belirleyebiliriz. Bunun için yeni `{if}` koduna ihtiyacınız var.

                    ### Alıştırma
                    Boşlukları doldurarak kodu tamamlayın:
                    * Bilgisayarın rastgele bir seçeneği seçmesini sağlayın
                    * Oyuncuya ne seçmek istediğini sorun
                    * Satır 4 ve 5 için doğru değişkenleri yerlerine doldurun
                    * Hedy'nin beraberlik olup olmadığını kontrol edebilmesi için 6. satırı tamamlayın.
                example_code: |
                    ```
                    seçenekler {is} taş, kağıt, makas
                    bilgisayar_seçimi {is} _
                    seçim {is} _
                    {print} 'senin seçimin ' _
                    {print} 'bilgisayarın seçimi ' _
                    {if} _ {is} _ {print} 'berabere kaldınız!' {else} {print} 'berabere değil'
                    ```

                    Beraberlik olup olmadığını görmek için boşluklara doğru kodu girin.
            9:
                story_text: |
                    Bu seviyede `{if}` komutlarını iç içe geçirerek tüm taş, kağıt, makas oyununu programlayabilirsiniz.

                    ### Alıştırma
                    Kodu tamamlayabilir misiniz? Program her kombinasyon için kimin kazandığını söylemelidir.

                    **Ek Görev** Birden fazla oyun mu oynamak istiyorsunuz? Birden fazla tur oynayabilmek için kodu genişletin. Kullanıcıya kaç tur oynamak istediğini sormak için bir `{ask}` bile kullanabilirsiniz.
                example_code: |
                    ```
                    seçimler = taş, kağıt, makas
                    senin_seçimin = {ask} 'Sen neyi seçiyorsun?'
                    {print} 'Senin seçimin ' senin_seçimin
                    bilgisayarın_seçimi = seçimler {at} {random}
                    {print} 'Bilgisayarın seçimi ' bilgisayarın_seçimi
                    {if} bilgisayarın_seçimi {is} senin_seçimin
                        {print} 'Berabere'
                    {if} bilgisayarın_seçimi {is} taş
                        {if} senin_seçimin {is} kağıt
                            {print} 'Sen kazandın!'
                        {if} senin_seçimin {is} makas
                            {print} 'Kaybettin!'
                    # bu kodu tamamlayın
                    ```
            10:
                story_text: |
                    ### Alıştırma
                    Önceki seviyelerde, kendi taş kağıt makas oyununuzu bolca yaptınız. Bu kodu tamamlayıp oyunun çalışmasını sağlamak için `{for}` komutunu düzgün bir şekilde kullanabilir misiniz?
                example_code: |
                    ```
                    seçimler = _
                    oyuncular = _
                    {for} _
                    ```
            13:
                story_text: |
                    `{and}` komutu ile taş, kağıt, makas kodunuzu kısaltabilirsiniz! Örnek koda göz atın.

                    ### Alıştırma
                    Kodu, her zaman bir kazanan olacak şekilde tamamlayın. Her zaman bir kazananın yazdırıldığını doğrulamak için kodunuzu birkaç kez çalıştırın.
                example_code: |
                    ```
                    seçenekler = 'rock', 'paper', 'scissors'
                    senin_seçimin = {ask} 'Sen neyi seçiyorsun?'
                    bilgisayarın_seçimi = seçenekler {at} {random}
                    {print} 'Senin seçimin ' senin_seçimin
                    {print} 'Bilgisayarın seçimi ' bilgisayarın_seçimi
                    {if} bilgisayarın_seçimi {is} senin_seçimin
                        {print} 'Berabere'
                    {if} bilgisayarın_seçimi {is} 'taş' {and} senin_seçimin {is} 'kağıt'
                        {print} 'Sen kazandın!'
                    {if} bilgisayarın_seçimi {is} 'taş' {and} senin_seçimin {is} 'makas'
                        {print} 'Bilgisayar kazandı!'
                    _
                    ```
            15:
                story_text: |
                    ### Alıştırma
                    Bilgisayarı yenene kadar oynayın! Ama önce örnek kodu bitirin...
                example_code: |
                    ```
                    kazandı = 'hayır'
                    seçenekler = 'taş', 'kağıt', 'makas'
                    {while} kazandı == 'hayır'
                        senin_seçimin = {ask} 'Sen neyi seçiyorsun?'
                        bilgisayarın_seçimi = seçenekler {at} {random}
                        {print} 'Senin seçimin ' senin_seçimin
                        {print} 'Bilgisayarın seçimi' bilgisayarın_seçimi
                        {if} bilgisayarın_seçimi == senin_seçimin
                            {print} 'Berabere!'
                        {if} bilgisayarın_seçimi == 'taş' {and} senin_seçimin == 'makas'
                            {print} 'Kaybettin!'
                        {if} bilgisayarın_seçimi == 'taş' {and} senin_seçimin == 'kağıt'
                            {print} 'Sen kazandın!'
                            kazandı = 'evet'
                    _
                    ```
    rock_2:
        name: Taş, kağıt, makas 2
        default_save_name: rock_2
        description: Taş, kağıt, makasın 2. bölümü
        levels:
            2:
                story_text: |
                    Artık `{ask}` komutunu nasıl kullanacağınızı öğrendiğinize göre, taş, kağıt, makas kodunuzu da etkileşimli hale getirebilirsiniz!

                    ### Alıştırma
                    Taş, kağıt, makas kodunuza `{ask}` komutu ile bir soru ekleyerek kodu etkileşimli hale getirin.
                example_code: |
                    ```
                    seçim {is} _
                    {print} Benim seçimim seçim
                    ```
    secret:
        name: SüperCasus
        default_save_name: SüperCasus
        description: Kendi casus kodunuzu oluşturun
        levels:
            12:
                story_text: |
                    Bu macerada kendi süper casus kodunuzu oluşturabilirsiniz. Sadece doğru ajanın deşifre edebileceği bir mesaj kodlayın.
                    Düşman kodu kırmaya çalışırsa, zamanlarını boşa harcayarak bazı yanlış bilgiler elde edeceklerdir.

                    ### Alıştırma 1
                    Süper casusunuz için kendi gizli kodunuzu oluşturun ve her iki parçayı da yalnızca gerçek casusa iade edin.

                    ### Alıştırma 2
                    Koda üçüncü bir bileşen ekleyin, bir giysi parçası veya bir nesne gibi.
                example_code: |
                    ```
                    isim = {ask} 'Senin adın ne?'
                    {if} isim {is} '_'
                        a = 'Havaalanına git '
                    {else}
                        a = 'Tren istasyonuna git '
                    şifre = {ask} 'Şifre nedir?'
                    {if} şifre {is} _
                        b = 'yarın gece saat 02.00'de'
                    {else}
                        b = 'bugün sabah saat 10.00'da'
                    {print} _ _ _
                    ```
            13:
                story_text: |
                    Süpercasus kodunu `{and}` ile basitleştirebiliriz, böylece bize sadece bir `{if}` gerekir.

                    ### Alıştırma 1
                    Boşluklara doğru komutu doldurarak kodu tamamlayın. İpucu: Süper casus gizli bilgileri almadan önce HER İKİ soruya da doğru cevap vermelidir!

                    ### Alıştırma 2
                    Düşmanın kafasını daha da karıştırmak istiyoruz! Sahte cevaplardan oluşan bir liste oluşturun ve yanlış cevap verildiğinde rastgele birini seçin.
                example_code: |
                    ```
                    isim = {ask} 'Senin adın ne?'
                    şifre = {ask} 'Şifre nedir?'
                    {if} isim {is} 'Ajan007' _ şifre {is} 'ÇOKGİZLİ'
                        {print} 'Gece 02.00'de havaalanına git.'
                    {else}
                        {print} 'Sabah 10.00'da tren istasyonuna git.'
                     ```
    simon:
        name: Simon Says
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    Let's make a game of Simon Says! Simon Says is a memory game in which the player will be given a color. They have to repeat that color back.
                    If they get it right a color is added to the sequence, so they now have to remember 2 colors, then 3, then 4 etc. the game stops as soon as the player makes a mistake.

                    ### Exercise
                    In this first part of the Simon Says adventure, we'll let the computer pick a random color and add it to a list.

                    ***Make 2 lists*** First, make a list called `colors` and fill it with the colors red, yellow, green and blue.
                    Then make a list called `simon_sequence`. This list will be used as the answer.
                    At the start of the game this lists need to be empty. unfortunately, we can't create an empty list (yet), so we'll fill it with the words 'empty' and 'list' and we'll remove them from the list immediately.

                    ***Create a function that adds a color to the sequence*** Now that we have an empty list called simon_sequence, we can start filling it with random colors.
                    We do that with a function, so we can call it everytime there's a new level in our game. Create a function called `add_random_color`.
                    Then create the variable random_color and set it to a random color. Next, add this random color to the simon_sequence.

                    ***Create a function that shows the simon_sequence*** Start by naming the new function `show_simon_sequence` with `level` as an argument. Now we want to show as many colors as the level we are in (in level 1 you see 1 color, in level 2 you see 2 colors etc).
                    So we repeat `level` times, to print the `simon_sequence[i]`. Each time a color is shown, wait for 1 second and then clear the screen.

                    ***Test your program*** Before you go to the next level, test if the functions are working by calling both of the functions. If they're working you should see a random color in your output screen.
                    Remove this testing part of your code, copy the code and continue to the next tab to learn more about the simon says game!
                example_code: |
                    ```
                    # Make 2 lists
                    colors = _
                    _ = ['empty', 'list']
                    {remove} _ {from} simon_sequence
                    {remove} _

                    # Create a function that adds a color
                    _ add_random_color
                        _
                        {add} _

                    # Create a function that shows the simon_sequence
                    {define} _
                        {for} i {in} {range} 1 {to} _
                            {print} _
                            _
                            _

                    # Test your program
                    {call} _
                    {call} show_simon_sequence {with} 1
                    ```
    simon_2:
        name: Simon Says 2
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    We'll continue with our Simon Says game!

                    ### Exercise
                    ***Paste your code here*** Paste your code from the previous level here. Don't forget to remove the part that was just used for testing the functions.

                    ***Create a function that creates the player_sequence*** The list `player_sequence` is used to capture the answers of the player. First we define the function with the argument level.
                    Next, we ask level times what the color is that they choose. We call that variable `answer`. Then we add the variable `answer` to the list player_sequence.

                    ***Setting up the game*** Before we program the game in the next tab, we'll need some starting variables. First, we'll set the variable `level` to 1 and the variable `game_over` to False.
                    Then we make an introduction for the game. We'll print 'Welcome to Simon Says!' and clear the screen after 1 second.

                    ***Continue to the next tab to finish the game!**** Don't forget to copy your code and take it with you to the next tab.
                example_code: |
                    ```
                    # Paste your code here


                    # Create a function that creates the player_sequence
                    {define} _
                        {for} _
                            _ 'What is color number ' i '?'
                            {add} answer {to} _

                    # Set up
                    level = _
                    game_over = _
                    {print} _
                    _ 1
                    _
                    ```
    simon_3:
        name: Simon Says 3
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    In this tab we'll program the game of Simon Says!

                    ### Exercise
                    ***Paste your code*** Copy your code from the previous tab and paste it here.

                    ***Program the game*** We start by making sure the game goes on while the game isn't over. Then we print what level the player is on, we use the variable level for that. We only show that for 1 second and then we clear the screen again.
                    Now, we have to create the empty list player_sequence. We've already programmed how to fill the list, with our function `player_sequence`, but we never made the list itself. To create the list we use the same trick as we did in the previous tab.
                    We'll make a list with the words 'empty' and 'list' on it, and then we remove both these words. Next, we'll call all of the 3 functions that we've created.
                    Lastly, we'll have to check if the player gave the correct answers (so if the player_sequence and the simon_sequence are the same).
                    If that's the case, we'll compliment the player. Wait for 1 second and increase the level with 1.
                    Did the player give the wrong answer, we'll tell them and end the game by setting game_over to 'True'

                    ***Enjoy your game!*** Great job! Does your game not work? Use the ladybug button to debug your code!
                example_code: |
                    ```
                    # Paste your code here

                    # The game
                    {while} game_over _
                        {print} _
                        _
                        _
                        _ = ['empty', 'list']
                        {remove} _
                        {remove} _
                        {call} _
                        {call} _ {with} _
                        {call} _ {with} _
                        {if} player_sequence == _
                            _
                            _
                            _
                        {else}
                            _
                            game_over = _
                    ```
    sleep_command:
        name: '{sleep}'
        default_save_name: uyu_komutu
        description: uyku komutuna giriş
        levels:
            2:
                story_text: |
                    Bu seviyede kullanabileceğiniz bir diğer yeni komut, programınızı bir saniyeliğine duraklatan `{sleep}` komutudur. Eğer {sleep} komutunun arkasına bir sayı yazarsanız, program o kadar saniye duraklar.

                    ### Alıştırma
                    Bu yeni komutu, {sleep} komutunu en az 3 kez kullandığınız kendi kodunuzu oluşturarak uygulayın. Her {sleep} komutunda duraklama süresi farklı olsun.
                example_code: |
                    ```
                    {print} En sevdiğim renk...
                    {sleep} 2
                    {print} yeşil!
                    ```
    songs:
        name: Bir şarkı söyle!
        default_save_name: Şarkı
        description: Şarkı yazdır
        levels:
            6:
                story_text: |
                    Şarkılar genellikle çok sayıda tekrarlama içerir. Bazen bu tekrarlar saymaya da dayanır.
                    Örneğin, meşhur 'Bira şişeleri' şarkısı gibi. Bu şarkıyı biraz matematikle programlayabilirsiniz.

                    İpucu: Hedy'nin şarkıyı size söylemesini sağlamak için sesli okuma işlevini kullanın!

                    ### Alıştırma
                    Şimdi 2'den 7'ye kadar olan satırları kopyalayarak istediğiniz kadar tekrarlayabilirsiniz.
                example_code: |
                    ```
                    mısra = 99
                    {print} mısra ' şişe duvarda dizili'
                    {print} mısra ' bira şişesi'
                    {print} 'Bir tane indirip, kenara koyun'
                    mısra = mısra - 1
                    {print} mısra ' şişe duvarda dizili'
                    {sleep}
                    ```
                story_text_2: |
                    Bu çocuk şarkısı 5 küçük maymundan 1 maymuna doğru geri sayar.
                    Eğer 2 - 7. satırları kopyalar ve kodun altına yapıştırırsanız, tüm şarkıyı söyleyebilirsiniz!
                example_code_2: |
                    ```
                    sayı = 6
                    sayı = sayı - 1
                    {print} sayı ' küçük maymun yatağın üzerinde zıplıyor'
                    {print} 'Biri düştü ve kafasını çarptı.'
                    {print} 'Annem doktoru aradı ve doktor dedi ki'
                    {print} 'ARTIK YATAKTA ZIPLAYAN MAYMUN OLMASIN!'
                    {sleep}
                    ```
            7:
                story_text: |
                    Şarkılar genellikle çok fazla tekrarlama içerir. Örneğin. Bebek Köpekbalığı! Eğer söylerseniz, aynı şeyi söylemeye devam edersiniz:

                    Bebek Köpekbalığı tututudutudu <br>
                    Bebek Köpekbalığı tututudutudu <br>
                    Bebek Köpekbalığı tututudutudu <br>
                    Bebek Köpekbalığı

                    ### Alıştırma
                    Bebek Köpekbalığı şarkısını bir `{repeat}` ile yazdırabilir misiniz? Boşlukları değiştirerek kodu tamamlayın?
                    **Ek Görev** Bebek Köpekbalığı'ndan sonra elbette başka şarkılar da programlayabilirsiniz. Tekrarı olan birçok şarkı var!
                    Aklınıza bir şarkı daha geliyorsa yazdırabilir misiniz?
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Bebek Köpekbalığı tututudutudu'
                    {print} 'Bebek Köpekbalığı'
                    ```
            8:
                story_text: |
                    Önceki bir seviyede, 'Bira şişeleri' şarkısını programladınız. Ancak `{repeat}` komutu olmadan, dizeleri birçok kez kopyalamak zorunda kaldınız.
                    Bu seviyede, sadece basit bir satır ekleyerek şarkıyı 99 kez tekrarlayabilirsiniz!

                    ### Alıştırma
                    Boşluklara doğru komutu ekleyin ve kodu doğru şekilde girintileyin.
                example_code: |
                    ```
                    mısra = 99
                    _ 99 {times}
                    {print} mısra ' bira şişesi duvarda dizili'
                    {print} mısra ' bira şişesi'
                    {print} 'Bir tane indirin, kenara koyun.'
                    mısra = mısra - 1
                    {print} mısra ' bira şişesi duvarda dizili'
                    ```
            10:
                story_text: |
                    `{for}` ile tüm yavru köpekbalığı şarkısını (ailedeki diğer tüm köpekbalıkları da dahil olmak üzere) sadece 6 satırda yazdırabilirsiniz!

                    ### Alıştırma 1
                    Bir `{for}` komutu kullanarak yavru köpekbalığı kodunu daha da kısaltabilir misiniz? Örnek kodu tamamlayın.
                example_code: "```\naile = bebek, anne, baba, büyükanne, büyükbaba\n_ _ _ _ \n  {print} _\n```\n"
                story_text_2: |
                    ### Alıştırma 2
                    Beş küçük maymun yatakta zıplıyor şarkısını yazdırın. Eğer hatırlamıyorsanız metne bakın.

                    **Ek Görev** Ali babanın bir çiftliği var şarkısını yazdırın ve `{if}` kullanarak tüm hayvanların farklı bir ses çıkardığından emin olun.
                example_code_2: |
                    ```
                    maymunlar = 5, 4, 3, 2, 1
                    ```
            11:
                story_text: |
                    Bu seviyede `{for}` ile `{range}` kullanarak, 5 küçük maymun gibi, saymayı kullanan şarkılar yapabilirsiniz.

                    ### Alıştırma 1
                    Boşlukları doldurun ve kodu çalışır hale getirin! Şarkı metnini hatırlamıyorsanız, kendiniz arayın.

                    ### Alıştırma 2
                    Şarkının son satırı diğerlerinden farklıdır. Bu satırı `{for}` içine yazdırın ve doğru çalışması için bir `{if}` kullanın.
                example_code: |
                    ```
                    _ maymunlar _ _ 5 _ 1
                        {print} maymunlar ' küçük maymun yatağın üzerinde zıplıyor'
                        _
                    ```
            12:
                story_text: |
                    Bu şarkıda 'eğer mutluysan ve bunu biliyorsan, ellerini çırp' cümlesini programlamayı daha da kolaylaştırabiliriz. Çünkü tüm eylemleri bir değişkene koyabiliriz, bir göz atın:

                    ### Alıştırma
                    Şarkının doğru çalınması için her satıra doğru miktarda girinti ekleyebilir misiniz?
                    İpucu: Tüm satırların girintiye ihtiyacı yoktur
                example_code: |
                    ```
                    _ eylemler = 'ellerini çırp', 'ayaklarını yere vur', 'Yaşasın diye bağırın!'
                    _ {for} eylem {in} eylemler
                    _ {for} i {in} {range} 1 {to} 2
                    _ {print} 'eğer mutluysan ve bunu biliyorsan'
                    _ {print} eylem
                    _ {print} 'eğer mutluysan ve bunu biliyorsan ve gerçekten göstermek istiyorsan'
                    _ {print} 'eğer mutluysan ve bunu biliyorsan'
                    _ {print} eylem
                    ```
            13:
                story_text: |
                    In the previous adventure you have learned how to use an argument in a function, but did you know that you could combine them with {ask} commands as well?
                    In this example we have changed the 'My Bonnie' program and made it interactive. You are now asked where Bonnie is.
                example_code: |
                    ```
                    {define} song {with} place
                        {print} 'My Bonnie is ' place

                    chosen_place = {ask} 'Where do you want Bonnie to be?'
                    synonym = {ask} 'What is another word for that?'

                    {call} song {with} chosen_place
                    {call} song {with} synonym
                    {call} song {with} chosen_place
                    ```
            16:
                story_text: |
                    Bu seviyede Ali Babanın çiftliği gibi bir şarkıyı daha da hızlı bir şekilde programlayabilirsiniz. Sadece listede aynı yere koyarak doğru hayvanı doğru sese bağlayabilirsiniz.
                    Sarhoş Denizci de bu seviyede hızlı bir şekilde yapılır. Tüm şarkı için sadece 8 satıra ihtiyacınız var, bir göz atın!
                example_code: |
                    ```
                    hayvanlar = ['eşekleri', 'köpekleri', 'inekleri']
                    sesler = ['ai', 'hav', 'möö']
                    {for} i {in} {range} 1 {to} 3
                        hayvan = _
                        ses = _
                        {print} 'Ali Babanın bir çiftliği var'
                        {print} '...'
                        {print} 'çiftliğinde ' hayvan ' var'
                        {print} '...'
                        {print} ses ses ' diye bağırır'
                        {print} '...'
                        {print} '...'
                        {print} 'çiftliğinde Ali Babanın'
                        {print} '...'
                    ```

                    ```
                    satırlar = ['sarhoş bir denizciye ne yapmalı', 'paslı usturayla karnını traş etmeli', 'ayılana kadar uzun kayığa koymalı']
                    {for} satır {in} satırlar
                        {for} i {in} {range} 1 {to} 3
                            {print} satır
                        {print} 'sabah erkenden'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'hey heyy ve işte doğuyor'
                        {print} 'sabah erkenden'
                    ```
            18:
                story_text: |
                    Seviye 16'da listeleri kullanarak şarkılar yaptık. Ancak bu programlar bu seviyede artık düzgün çalışmazlar. Seviye 17'deki iki nokta üst üste ve seviye 18'deki parantezlerin hala eklenmesi gerekiyor.

                    ### Alıştırma 1
                    Sarhoş denizci şarkısı örnek kod olarak verilmiştir, ancak henüz çalışmamaktadır.
                    Her şeyin tekrar çalıştığından emin olabilir misiniz? Size yardımcı olmak için _bazı_ hataların yerlerine _ koyduk.

                    ### Alıştırma 2
                    Şimdi de 16. seviyedeki Ali Baba şarkınıza bakın ve düzeltin.
                example_code: |
                    ```
                    satırlar = ['sarhoş bir denizciye ne yapmalı', 'paslı usturayla karnını traş etmeli', 'ayılana kadar uzun kayığa koymalı']
                    {for} satır {in} satırlaar _
                        {for} i {in} {range} 1 {to} 3 _
                            {print} _ satır _
                        {print} 'sabah erkenden'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'hey heyy ve işte doğuyor'
                        {print} 'sabah erkenden'
                    ```
    songs_2:
        name: Sing a song! 2
        default_save_name: Song 2
        description: Sing a song 2
        levels:
            12:
                story_text: |
                    Songs contain a lot of repetition. We can capture it with a function!
                    ### Exercise
                    Look at the example code with the function. Fill out the two lines so the full song is printed.
                example_code: |
                    ```
                    {define} twinkle
                        {print} 'Twinkle'
                        {print} '...'

                    {call} twinkle
                    {print} 'Up above the world so high'
                    {print} 'Like a diamond in the sky'
                    {call} _
                    ```
            16:
                story_text: |
                    ### Exercise
                    Finish the nursery rhyme!
                example_code: |
                    ```
                    number = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
                    object = ['on his drum', 'on his shoe', 'on his knee', 'on his door', 'on his hive', 'on his sticks', 'up in heaven', 'on his gate', 'on his vine', 'once again']

                    _
                        {print} 'This old man'
                        {print} 'He played ' _
                        {print} 'He played knick-knack ' _
                        {print} 'With a knick-knack paddywhack'
                        {print} 'Give the dog a bone'
                        {print} 'This old man came rolling home'
                        {sleep} 8
                        {clear}
                    ```
                story_text_2: |
                    ### Exersice 2
                    Now create your own code for the nursery rhyme 'The wheels on the bus' on the same way!
                example_code_2: |
                    ```
                    object = ['wheels', 'doors', _]
                    movement = [ 'round and round', 'open and shut', _]
                    ```
    tic:
        name: Tic-Tac-Toe
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    Let's program a game of tic-tac-toe!

                    ### Exercise
                    In this adventure we'll start with creating an empty field.

                    ***Create a list called field*** This list will be our playing field. This list is filled with 9 dots, since there are no x's and o's yet at the start of our game.

                    ***Create a function that prints the field*** Firstly, clear the screen so the old playing fields will be removed. Then we print the first line of our Tic Tac Toe field. This line constists of the first 3 spots in our list field.
                    We have already programmed this line for you. Now finish the field by printing spot 4, 5, and 6 on the second row and spot 7, 8 and 9 in the third row.

                    ***Call the function that prints the field*** Now call the function.
                    <div class="w-full flex flex-row gap-2">
                        Run the code. Your output should look like this: <img src="https://github.com/hedyorg/hedy/assets/80678586/bcbd156e-4b48-4e82-84ae-f86d21b0cbcc" width="100">
                    </div>

                    ***Continue in the next tab*** In the next tab you'll learn how to program the game itself.
                example_code: |
                    ```
                    # Create a list called field
                    _ = ['.', '.', '.', '.', '.', '.', '.', '.', '.']

                    # Create a function that prints the field
                    {define} print_field
                        _
                        {print} 'TIC TAC TOE'
                        {print} field[1] field[2] field[3]
                        _
                        _

                    # Call the function
                    ```
            17:
                story_text: |
                    In the previous level you've learned how to make a tic-tac-toe game. The game works, but is quite annoying as it keeps asking you if you've won yet.
                    Now that we have the {elif} command, we can let the game decide if someone has won and it can stop asking us!

                    ### Exercise
                    ***Paste your code*** Paste your code from the previous level here and make it level 17 proof. In this level you've learned to use a colon everytime you create a block of code. Please add the colons in the correct spots.

                    ***Create a function that detects if someone's won*** We have started the function for you, paste it under the function `print_field` and finish the function. You can see that this first piece of code checks to see if spot 1, 2 and 3 are the same, because if they are you have 3 in a row.
                    It also checks if they are not a dot, because if they are, the line might have the same symbols on them, but that's just because it's still empty.
                    If all these conditions are met, the game is over and the winner is printed.
                    Finish this function with all possible ways to win. This means you have to make this for the other 2 rows, 3 columns and 2 diagonals.
                    If you've finished all the other options, the function should return the variable `game_over` so we can use it in our game.

                    ***Call the function in the game*** Go to the line `game_over = {ask} 'Did you win?'` and change it to `game_over = {call} detect_winner {with} field, sign`. Now the function will check if there's a winner and the game doesn't need to keep asking anymore!

                    ***Enjoy your game!*** Great job! You have finished the game! Enjoy playing it!

                example_code: |
                    ```
                    # Paste your code here and make it level 17 proof

                    # Create a function that detects if someone has won
                    {define} detect_winner {with} field, sign:
                        {if} field[1] == field[2] {and} field[2] == field[3] {and} field[1] != '.':
                            game_over = 'yes'
                            {print} 'Player ' sign 'wins!'
                        {elif}:
                            _
                        {else}:
                            game_over = 'no'
                    {return} _
                    ```
    tic_2:
        name: Tic-Tac-Toe 2
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    In the previous adventure you've learned how to create a playing field. Now you'll learn how to create the game!

                    ### Exercise
                    ***Paste your code*** Start by pasting your code from the previous adventure here.

                    ***Add variables*** Underneath your list called `field` we'll add 2 more variables that we'll need to program the game.
                    The variable `game_over` tells us if the game is over, and should be 'no' at the start of the game.
                    The variable `sign` tells us if it's the turn of player x or player o. Set the variable to 'x'.

                    ***The game*** First use a {while} command, to make sure the game keeps on playing the variable while game_over is set to no.
                    During the game, we first ask the player which spot they choose. Then we change the field with the number they chose into their sign.
                    Then we print the field again and we ask the player if they've won yet. Lastly we want to switch whose turn it is, so if the sign is 'x' it should be 'o' and the other way around.

                    ***Test your game*** Does your game work? Great, have fun playing the game! If not, use the ladybug button to debug your code.
                    You might have noticed one mistake in the code though, you can steal the other player's spot! If the other person chose spot 1, you could simply enter 1 after them and steal their spot.
                    That's not fair! Go to the next tab to learn how to fix this problem.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Add variables
                    game_over = _
                    sign = _

                    # The game
                    {while} _
                        choice = _ 'Player ' sign '_?'
                        field[choice] = _
                        _ print_field
                        game_over = {ask} _
                        {if} sign = 'o'
                            sign = _
                        _
                            sign = _
                    ```
    tic_3:
        name: Tic-Tac-Toe 3
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    You might have noticed one mistake in the code you've made in the previous adventure. You can steal the other player's spot! If the other person chose spot 1, you could simply enter 1 after them and steal their spot.
                    That's not fair! In this tab we'll fix that mistake.

                    ### Exercise
                    ***Paste your code here*** Paste your code from the previous adventure here.

                    ***Fix the mistake*** To fix the mistake we replace the line that says `field[choice] = sign`. This turns any spot that the player has chosen into their sign.
                    Go to the header that says 'Use this to fix the mistake' and finish the code. We first want to check if the chosen spot is still empty, so `if field[choice] = '.'`. If that is the case, you are allowed to take it.
                    Then we make an else command and print 'Sorry, this spot is already taken' if the spot is not empty. Lastly, we add a {sleep} command, so the players can actually read the text before it gets cleared again.
                    Now copy this piece of code and replace the line `field[choice] = sign` with this new piece of code.

                    ***Play your game!*** Now the game should work properly! Good job!
                    The only flaw is that you can get a bit annoyed that the game keeps asking you if you've won yet. Do you want to fix that? Go to level 17 and we'll fix it!
                example_code: |
                    ```
                    # Paste your code here

                    # Use this to fix the mistake
                    {if} _ = '.'
                        field[choice] = sign
                    {else}
                        {print} _
                        _
                    ```
    turtle:
        name: Kaplumbağa
        default_save_name: Kaplumbağa
        description: Kendi çiziminizi yapın
        levels:
            1:
                story_text: |
                    Hedy'yi çizim yapmak için de kullanabilirsiniz. Dönüşleri ve çizgileri birleştirerek bir kare veya merdiven yapabilirsiniz!

                    `{forward}` kullanarak ileriye doğru bir çizgi çizersiniz. Ardındaki sayı kaplumbağanın ne kadar yürüyeceğini belirler. `{turn} {right}` saat yönünde çeyrek tur döner, `{turn} {left}` saat yönünün tersine döner.

                    Geriye doğru gitmek istiyorsanız, `{forward}` komutunu eksili bir sayı ile kullanırsınız. Yani örneğin `{forward} -100`
                example_code: |
                    ```
                    {forward} 100
                    {turn} {left}
                    ```
                story_text_2: |
                    ### Alıştırma
                    Bu küçük bir merdivenin başlangıcı. Bunu beş basamaklı yapabilir misin?
                example_code_2: |
                    ```
                    {forward} 20
                    {turn} {right}
                    {forward} 20
                    {turn} {left}
                    {forward} 20
                    ```
            2:
                story_text: |
                    Bu seviyede, kaplumbağayı etkileşimli hale getirmek için değişkenler kullanabilirsiniz. Örneğin oyuncuya kaplumbağanın kaç adım atması gerektiğini sorabilirsiniz.
                example_code: |
                    ```
                    cevap {is} {ask} Kaplumbağa kaç adım atsın?
                    {forward} cevap
                    ```
                story_text_2: |
                    Ayrıca, 1. seviyede kaplumbağa sadece sola veya sağa dönebiliyordu. Bu biraz sıkıcı!
                    2. seviyede burnunu her yöne çevirebilir.

                    Bir çeyrek tur döndürmek için 90 kullanın. Buna derece diyoruz. Tam dönüş 360 derecedir.

                    ### Alıştırma
                    Bu kodla bir şekil oluşturabilir misiniz? Belki bir üçgen ya da daire?
                example_code_2: |
                    ```
                    {print} Şekiller çizdirmek
                    açı {is} 90
                    {turn} açı
                    {forward} 25
                    {turn} açı
                    {forward} 25
                    ```
            3:
                story_text: |
                    Bu seviyede, çizim kaplumbağamız ile `{at} {random}` kullanabilirsiniz. Rastgele bir seçim, kaplumbağanın her seferinde farklı bir yolda yürümesini sağlar.
                    Listeden bir değer seçmek için `{at} {random}` kullanın.
                    ### Alıştırma
                    Daha uzun rastgele bir yol oluşturmak için 2. ve 3. satırları kopyalayıp yapıştırabilir misiniz?
                example_code: |
                    ```
                    açılar {is} 10, 50, 90, 150, 250
                    {turn} açılar {at} {random}
                    {forward} 25
                    ```
            4:
                story_text: |
                    4. seviyede, `{print}` ve `{ask}` ile tırnak işareti kullanmanız gerekecek. Ayrıca çizim yaparken de!
                example_code: |
                    ```
                    {print} _ Çizim yapılıyor _
                    açı {is} 90
                    {turn} açı
                    {forward} 25
                    {turn} açı
                    {forward} 25
                    ```
                story_text_2: |
                    Ayrıca `{color}` komutu ile çizgilerin rengini de değiştirebilirsiniz. Örneğe göz atın.
                    Ayrıca bunun yanında çizim alanımız beyaz olduğundan `{color} {white}` komutunu kullanarak 'görünmez' çizgiler çizebilirsiniz. Çizime başlamadan önce kaplumbağayı ekranda herhangi bir yere taşımak için bu beyaz çizgileri kullanabilirsiniz.
                example_code_2: |
                    ```
                    {color} {white}
                    {forward} -80
                    {color} {green}
                    {forward} 50
                    {color} {yellow}
                    {forward} 50
                    {color} {red}
                    {forward} 50
                    ```
            5:
                story_text: |
                    5. seviyede, `{if}` ile bir seçim yapabilirsiniz. Örneğin farklı şekil türleri arasında.
                example_code: |
                    ```
                    {print} 'Çizim yapılıyor'
                    şekil {is} {ask} 'Kare mi yoksa üçgen mi istiyorsunuz?'
                    {if} şekil {is} üçgen açı {is} 120
                    {else} açı {is} 90
                    {turn} açı
                    {forward} 25
                    {turn} açı
                    {forward} 25
                    {turn} açı
                    {forward} 25
                    {turn} açı
                    {forward} 25
                    ```
                story_text_2: |
                    ### Alıştırma
                    Bu kodun çalışmasını sağlamak için kodun içine doğru sayıları doldurun.
                    Bunu yaptıktan sonra, geriye doğru seçeneğini eklemeyi deneyebilirsiniz.

                    **Ek Görev** 'Sol' ve 'sağ' kullanmak yerine, programı Kuzey, Doğu, Güney ve Batı ile yeniden oluşturun.
                    Bu şekilde Kuzeydoğu ve Güneybatı gibi daha fazla yön ekleyebilirsiniz.
                example_code_2: |
                    ```
                    yön {is} {ask} 'Sola mı, sağa mı, yoksa düz mü gitmek istiyorsunuz?'
                    {if} yön {is} sol {turn} _
                    {if} yön {is} sağ {turn} _
                    {forward} 100
                    ```
            6:
                story_text: |
                    Bu seviyede, farklı şekiller çizmek için hesaplamaları kullanabilirsiniz.
                    Okulda tam bir daire çizmenin 360 derece olduğunu öğrenmiş olabilirsiniz. Eğer öğrenmediyseniz, artık biliyorsunuz!
                    Bu yüzden bir kare için 90 derece kullanırsınız. 360'ın 4'e bölümü 90'dır.
                    Artık Hedy ile matematik yapabildiğimize göre, istediğimiz tüm şekilleri çizebiliriz!
                example_code: |
                    ```
                    açılar = {ask} 'Kaç tane açı istiyorsun?'
                    açı = 360 / açılar
                    {forward} 50
                    {turn} açı
                    {forward} 50
                    {turn} açı
                    {forward} 50
                    {turn} açı
                    {forward} 50
                    {turn} açı
                    {forward} 50
                    {turn} açı
                    {forward} 50
                    {turn} açı
                    ```
            8:
                story_text: |
                    Artık birkaç satırı tekrarlayabildiğimize göre, şekilleri daha kolay oluşturabiliriz.
                    Açıyı yalnızca bir kez ayarlamamız ve ardından bu değişkeni `{repeat}` içinde kullanmamız gerekir.

                    ### Alıştırma 1
                    Örnek kod bir kare oluşturur. Kodu, üçgen veya altıgen gibi başka bir şekil oluşturacak şekilde değiştirin.
                    Bu, iki kod satırında değişiklik yapılmasını gerektirir.
                    İpucu: Bir dairenin tamamı 360 derecedir.

                    ### Alıştırma 2
                    Şimdi en az iki çokgenden oluşan bir çizim oluşturun.
                example_code: |
                    ```
                    açı = 90
                    {repeat} 4 {times}
                        {turn} açı
                        {forward} 50
                    ```
                story_text_2: |
                    **Ek Görev** Artık farklı şekiller çizen programımızı geliştirebiliriz. Kodu tamamlayınca istediğiniz herhangi bir çokgeni çizebilirsiniz!
                example_code_2: |
                    ```
                    şekil = {ask} 'Kaç tane açı çizmeliyim?'
                    açı = 360 / şekil
                    {repeat} şekil {times}
                        {turn} _
                        {forward} _
                    ```
            9:
                story_text: |
                    Artık bir `{repeat}` içinde bir `{repeat}` kullanabildiğimize göre, daha karmaşık şekiller oluşturabiliriz.

                    ### Alıştırma 1
                    Bu kod üç tane siyah üçgen oluşturur, bunu beş pembe kareye dönüştürün.

                    **Ek Görev** En az iki farklı şekil türünden oluşan kendi seçtiğiniz bir şekil oluşturun.
                example_code: |
                    ```
                    {color} {black}
                    {repeat} 3 {times}
                        {repeat} 3 {times}
                            {forward} 10
                            {turn} 120
                        {color} {white}
                        {forward} 50
                        {color} {black}
                    ```
            10:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.
                    ### Exercise 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                     **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!
                    ### Exercise 2
                    The spiral is drawn outwards, make it go inwards?
                example_code: |
                    ```
                    {turn} 90
                    distances = 10, 20, 30, 40, 50, 60
                    {for} distance {in} distances
                        {forward} distance
                    ```
            12:
                story_text: |
                    We can use functions to draw more complex figures with less code.
                    ### Exercise 1
                    Fill the function so that three squares are created. If you want the image to look nicer, you can make the lines between the squares white.

                    ### Exercise 2
                    The code can be made even shorter. Place the final lines into a `{repeat}` so the figure remains the same.

                    ### Exercise 3
                    Create your own drawing with different figures.
                    Change both the number of figures with the `{repeat}` and the shape of the figures in the `{define}`
                example_code: |
                    ```
                    {define} square
                        {repeat} 4 {times}
                            {turn} _
                            {forward} _
                    {call} square
                    {forward} 50
                    {call} square
                    {forward} 50
                    {call} square
                    ```
    turtle_draw_it:
        name: Draw it!
        default_save_name: Draw it
        description: Draw this picture with the turtle
        levels:
            1:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                        Rectangle <img src="https://github.com/hedyorg/hedy/assets/80678586/77aa99d5-cd8f-4969-b49d-e8fed34ac550" width="100">
                        Square <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                        Stairs<img src="https://github.com/hedyorg/hedy/assets/80678586/d4301e62-ec66-4031-827c-7d21f73ba106" width="200">
                    </div>
            2:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/e974b62c-f0cf-445a-8bd4-5ad9f1f71204" width="100">
                    Arrow <img src="https://github.com/hedyorg/hedy/assets/80678586/803d8f42-9708-448c-82ea-d035697f08c9" width="150">
                    Boat <img src="https://github.com/hedyorg/hedy/assets/80678586/94ef7189-442a-4c8f-827d-12a69203c2e9" width="150">
                    </div>
            3:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/71e04d98-9545-4614-9caf-a5f179b756a1" width="150">
                    Star <img src="https://github.com/hedyorg/hedy/assets/80678586/421c4d28-cb99-424b-be26-dcae30d65c80" width="150">
                    Arrow <img src="https://github.com/hedyorg/hedy/assets/80678586/3cbebcae-5258-47c5-a6ac-e7ee36c1d1ce" width="200">
                    </div>
            4:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Colored Star <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Rainbow <img src="https://github.com/hedyorg/hedy/assets/80678586/2728b10f-9f7f-45ea-964e-5b284033e4f0" width="500">
                    Nested squares <img src="https://github.com/hedyorg/hedy/assets/80678586/f013f9fa-bc68-4c60-b778-2c457799d6f7" width="200">
                    </div>
                example_code: |
                    **Extra** Up for a real challenge? Make sure that the colors of these figures are selected randomly, so that each time you run your programs they'll look differently!

                    ```
                    colors {is} red, orange, yellow, green, blue, purple, pink, brown, gray, black
                    color _
                    ```
            5:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** Make only one code that lets the player decide which letter they'd like to see! And can you add even more letters?

                    <div class="w-full flex flex-row gap-2">
                    F <img src="https://github.com/hedyorg/hedy/assets/80678586/8a021b76-c24b-4e7c-b960-48d57f3bcb20" width="100">
                    E <img src="https://github.com/hedyorg/hedy/assets/80678586/12821803-6422-416a-8e36-9902d14e57a4" width="100">
                    L <img src="https://github.com/hedyorg/hedy/assets/80678586/3af6f919-7b67-4ee7-b923-11e56f2b6b24" width="100">
                    </div>
                example_code: |
                    Hint:
                    ```
                    chosen_letter {is} {ask} 'Which letter would you like to see? F, E or L?'
                    {if} _
                    ```
            6:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** Let the player decide which color the square should be.

                    ***Extra*** Can you make the letter of your own first name and the flag of your own country too?

                    <div class="w-full flex flex-row gap-2">
                    Square <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="150">
                    Letters <img src="https://github.com/hedyorg/hedy/assets/80678586/e75f4fa5-f1f5-4b48-806c-916c28e4e8ad" width="100">
                    Flag <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hint for the square:
                    ```
                    chosen_color = {ask} _
                    ```
            7:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Hexagon <img src="https://github.com/hedyorg/hedy/assets/80678586/92e492e1-1593-489b-aaf0-51d2a29755f4" width="200">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/3629a5e6-1f02-4851-aab9-c5430ba4a1f1" width="200">
                    Fan <img src="https://github.com/hedyorg/hedy/assets/80678586/1ba2ff71-1230-4fe3-8255-b2c504cf1b4e" width="200">
                    </div>
            8:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** The number in brackets indicates in how many lines of code this figure can be drawn. Can you do it in the same amount of lines?

                    <div class="w-full flex flex-row gap-2">
                    Square (3) <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                    Randomly colored star (5) <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Randomly colored spiral (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/9bcdb3f1-367d-4ae0-878f-d09005424a35" width="150">
                    </div>
            9:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** The number in brackets indicates in how many lines of code this figure can be drawn. Can you do it in the same amount of lines?

                    **Extra** Give the player a choice which country they would like to see the flag of.

                    <div class="w-full flex flex-row gap-2">
                    Cross (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/76e42c76-aa3f-4863-8eee-ead73c09a186" width="150">
                    Randomly colored nested squares (8) <img src="https://github.com/hedyorg/hedy/assets/80678586/17f878cc-e893-4c10-b32e-a09a50bf08de" width="200">
                    Flags <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hint for the nested squares:
                    ```
                    colors = red, blue, orange, yellow, pink, purple, green, brown, black
                    distance = 120
                    repeat 5 times
                    _
                    ```
                    Hint for the flags:
                    ```
                    country = ask 'which country would you like to see the flag of?'
                    if country is 'the Netherlands'
                        color_1 = red
                        color_2 = white
                        color_3 = blue
                    ```
            10:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Nested Hexagon <img src="https://github.com/hedyorg/hedy/assets/80678586/3629e908-3cd5-44ac-bbcd-1f1cceb15654" width="150">
                    Traffic lights  <img src="https://github.com/hedyorg/hedy/assets/80678586/edbbb608-5ff8-4349-85a6-e47809adde43" width="100">
                    </div>
                example_code: |
                    Hint Nested Hexagon:
                    ```
                    distances = 100, 80, 60, 40, 20
                    {for} distance {in} distances
                    _
                    ```

                    Hint Traffic Lights:
                    ```
                    colors = red, yellow, green
                    {for} chosen_color {in} colors
                        color _
                        {repeat} _
                    ```
                story_text_2: |
                    Christmas lights <img src="https://github.com/hedyorg/hedy/assets/80678586/9637ea6d-6edc-4d88-a6f7-10271bfc5371" width="500">
                example_code_2: |
                    Hint Christmas Lights:

                    Start by moving to the left side of the screen with an invisible white line. Then hang up the Christmas lights!
                    ```
                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 90

                    colors = red, blue, yellow, purple, green, orange, pink
                    {for} chosen_color {in} colors
                    _
                    ```
            11:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Beehive (6) <img src="https://github.com/hedyorg/hedy/assets/80678586/ec02469c-907b-4695-9382-d39a8f3c00ec" width="150">
                    Fan (5)  <img src="https://github.com/hedyorg/hedy/assets/80678586/a032ab35-c70c-4e67-9b4e-036a03ecce87" width="150">
                    Snowflake (13) <img src="https://github.com/hedyorg/hedy/assets/80678586/90f56bbb-86e5-448d-8aec-16f8c2c05cf2" width="150">
                    </div>
                example_code: |
                    Hint Beehive:
                    ```
                    {for} amount_of_combs {in} {range} 1 {to} _
                        {for} walls_of_one_comb {in} {range} 1 {to} _
                            {forward} _
                            {turn} _
                        {forward} _
                        {turn} _
                    ```

                    Hint Fan:
                    Start out like the fan you made in level 7. Or take a peak at the hint for the beehive, because the codes are very similar.

                    Hint Snowflake: Start by making one 'leg' and repeat it 6 times.
            12:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!
                    Hint: Bracelet designing program. Firstly, define a function **for each shape** you want to use on the bacelet. Then, add the shapes to the bacelet like this:
                    </div>
                    Bracelet Designing program <img src="https://github.com/hedyorg/hedy/assets/80678586/549d7f3a-c492-4b4a-b173-746eb3400951" width="500">
                example_code: |
                    ```
                    {define} draw_a_square
                    _

                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 180

                    {for} i {in} {range} 1 {to} 5
                        {color} gray
                        {forward} 100
                        shape = {ask} 'What kind of shape would you like next on the bracelet?'
                        chosen_color = {ask} 'In which color?'
                        {color} chosen_color
                        {if} shape = 'square'
                            {call} draw_a_square
                    ```
            13:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    Street in different sizes <img src="https://github.com/hedyorg/hedy/assets/80678586/cdae9d97-d5ef-46f3-8838-24fa7b5b1bec" width="300">
                    Colored street  <img src="https://github.com/hedyorg/hedy/assets/80678586/9893e0bd-c0f8-49bc-a5a7-217182407724" width="300">
                    Snow Storm <img src="https://github.com/hedyorg/hedy/assets/80678586/111b0a1b-b0e1-47c3-b032-81cea05e6bbc" width="300">
                example_code: |
                    Hint Street in different sizes
                    ```
                    {define} draw_a_house {with} size
                    _

                    {call} draw_a_house {with} 90
                    {call} draw_a_house {with} 60
                    {call} draw_a_house {with} 30
                    ```

                    Hint Colored street
                    ```
                    {define} draw_a_house {with} chosen_color
                    _
                    ```

                    Hint Snow Storm
                    ```
                    {define} draw_snowflake {with} length, color
                        _

                    numbers = 10, 20, 30
                    colors = _

                    {for} i {in} {range} 1 {to} 5
                        random_number = _
                        random_color = _
                        {call} draw_snowflake {with} random_number, random_color
                        {color} white
                        {turn} random_number * 5
                        {forward} 80
                    ```
            14:
                story_text: |
                    ### Exercise
                    Create a program that asks the player how many corners their figure should have and then creates that figure.
                    The figure in the image is the output when the player fills in 10.

                    <div class="w-full flex flex-row gap-2">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/ee32f40e-dea1-4e7c-a813-3ef63671254b" width="300">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/3621bf77-527d-41e8-a44f-c5a21bb4ffd2" width="200">
                    </div>
                example_code: |
                    ```
                    {define} calculate_degrees {with} amount_of_corners
                        _ 360 / amount_of_corners


                    {define} draw_figure {with} degrees
                        _
                            {forward} 400/amount_of_corners
                            {turn} _

                    amount_of_corners = {ask} _
                    degrees = {call} _ {with} _

                    {call} _ {with}
                    {call} _ {with}
                    ```
            15:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    Spiral <img src="https://github.com/hedyorg/hedy/assets/80678586/6943223c-018b-435b-a391-23723cc7a6ad" width="150">
                example_code: |
                    Spiral
                    ```
                    distance = 5
                    {while} distance < 200
                        distance = distance + 5
                         _
                    ```
                story_text_2: |
                    Fan <img src="https://github.com/hedyorg/hedy/assets/80678586/cb671065-b47b-49f0-b298-dcbcd2a5e28f" width="150">
                example_code_2: |
                    Fan
                    ```
                    {define} draw_a_square {with} side
                    _

                    i = 100
                    {while} i > 1
                        _ {with} i
                        _
                        i = i - 3
                    ```
                story_text_3: |
                    Star <img src="https://github.com/hedyorg/hedy/assets/80678586/17564e0a-63e1-4794-8d41-15ac8c1a5a93" width="150">
                example_code_3: |
                    Star
                    A star is usually drawn using 144-degree-turns. If you change this slightly to 143 degrees for example and repeat the pattern multiple times with a {while} loop you can make this figure.
    while_command:
        name: '{while}'
        default_save_name: iken_komutu
        description: iken
        levels:
            15:
                story_text: |-
                    Yeni bir döngü çeşidi öğreneceğiz, `{while}` döngüsü! Deyim doğru olduğu sürece döngüye devam ediyoruz.
                    Bu yüzden döngü içinde değeri değiştirmeyi unutmayın.

                    Örnek kodda, doğru bir cevap verilene kadar devam ediyoruz.
                    Doğru cevap hiç verilmezse, döngü asla sona ermez!
                example_code: |
                    ```
                    cevap = 0
                    {while} cevap != 25
                        cevap = {ask} '5 kere 5 kaç eder?'
                    {print} 'Doğru cevap verilmiştir'
                    ```
    years:
        name: Yeni Yıl
        default_save_name: Yeni Yıl Geri Sayımı
        description: Yeni Yıl için Geri Sayım!
        levels:
            11:
                story_text: |
                    Bu seviyede Yeni Yıl'a geri sayım yapmak için `{for}` sayı `{in}` `{range}` komutunu kullanabilirsiniz.

                    ### Alıştırma
                    Boşlukları doldurun ve kodu çalışır hale getirin!
                example_code: |
                    ```
                    {for} sayı {in} {range} _ {to} _
                        {print} sayı
                    {print} 'Yeni yılınız kutlu olsun!'
                    ```
