adventures:
    story:
        name: Historyjka
        default_save_name: Historyjka
        description: Stwórz krótką historyjkę
        levels:
            1:
                story_text: |
                    Na poziomie 1 możesz stworzyć opowieść z różnymi postaciami które stworzysz samodzielnie.

                    W pierwszej linii użyj polecenia `{ask}` i zapytaj kto będzie głównym bohaterem twojej opowieści.

                    Kolejne linie zacznij od polecenia `{print}` jeżeli chcesz wyświetlić tekst.
                    Użyj polecenia `{echo}` jeżeli chcesz aby imię twojego bohatera znalazło się na końcu wypowiedzi.
                example_code: |
                    ```
                    {ask} Głównym bohaterem historii jest
                    {print} Główny bohater idzie przez las
                    {echo} Jest troszkę przestraszony,
                    {print} Wszędzie słyszy jakieś dziwnie odgłosy
                    {print} Obawia się że to jest nawiedzony las
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Teraz stwórz własną historię z co najmniej sześciu (6) linii kodu.
                    Twoja historia nie może być taka sama jak przykładowy kod.
                    Użyj co najmniej jednego polecenia `{ask}` i jednego `{echo}`.
                    Możesz zrobić to na dowolny temat.
                    Jeśli nie możesz wymyślić tematu, skorzystaj z jednej z naszych opcji: wyjście do kina, mecz sportowy lub dzień w zoo.
            2:
                story_text: |
                    Na poziomie 2 twoja opowieść może być znacznie zabawniejsza. Imię głównego bohatera może pojawić się w dowolnym miejscu w zdaniu.

                    Trzeba będzie napisać nieco więcej kodu. Musisz zapytać o imię głównego bohatera, zanim będziesz mógł wykorzystać je w zdaniu.

                    Potem będziesz mógł użyć imienia w dowolnym miejscu w zdaniu.
                example_code: |-
                    ```
                    imię {is} {ask} Jak nazywa się główny bohater?
                    {print} imię biega teraz po lesie
                    {print} imię trochę się boi
                    {print} Nagle imię usłyszał dziwny dźwięk...
                    {sleep}
                    {print} imię obawia się, że las może być nawiedzony
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Teraz nadszedł czas, aby dodać zmienne do opowieści, którą stworzyłeś na poprzednim poziomie.
                    Przejdź do „Moje programy”, poszukaj przygody fabularnej poziomu 1 i skopiuj kod. Wklej kod na ekranie wprowadzania na tym poziomie.

                    Ten kod nie zadziała na tym poziomie, ponieważ nie używałeś jeszcze zmiennych.
                    Zmień polecenia `{ask}` i `{echo}` w swoim kodzie na poprawną formę, której nauczyłeś się na tym poziomie.

                    **Dodatkowo** Dodaj polecenie `{sleep}` do swojego kodu, aby zbudować napięcie w swojej historii.
            3:
                story_text: |
                    Na poziomie 3. Twoja historyjka może być jeszcze zabawniejsza. Możesz wybrać losowo potwora, zwierzę oraz inne utrudnienia, tak jak w przykładzie:
                example_code: |
                    ```
                    zwierzęta {is} 🦔, 🐿, 🦉, 🦇
                    {print} Teraz słyszy odgłos zwierzęta {at} {random}
                    ```
                story_text_2: |
                    Komenda `{add}` może się przydać w historyjce.
                example_code_2: |
                    ```
                    {print} On słyszy odgłos
                    zwierzęta {is} 🐿, 🦔, 🦇, 🦉
                    zwierzę {is} {ask} Co myślisz że to było?
                    {add} zwierzę {to_list} zwierzęta
                    {print} To był odgłos zwierzęta {at} {random}
                    ```
                story_text_3: |
                    To jest przykład polecenia `{remove}` w twojej opowieści.

                    ### Ćwiczenie
                    Skopiuj swoją opowieść z poprzednich poziomów na ten poziom.
                    Na tym poziomie nauczyłeś się 3 nowych komend `{at} {random}`, `{add} {to_list}` i `{remove} {from}`.
                    Dodaj nowe wiersze kodu do swojej historii, aby wszystkie nowe polecenia znalazły się w niej przynajmniej raz.
                example_code_3: |
                    ```
                    {print} Jego stał się zbyt ciężki.
                    {print} W środku była butelka wody, latarka i cegła.
                    plecak {is} woda, latarka, cegła
                    wyrzuc {is} {ask} Który przedmiot powinien wyrzucić?
                    {remove} wyrzuc {from} plecak
                    ```
            4:
                story_text: |
                    ### Ćwiczenie
                    Skopiuj przykładowy kod i popraw go dodając cudzysłowy do linii.

                    ### Ćwiczenie 2
                    Wróć do poprzedniego poziomu i skopiuj kod z opowieści. Spraw by kod działał w tym poziomie dodając cudzysłowy w odpowiednie miejsca.
                    Zwróć uwagę, że zmienne w twojej opowieści powinny być poza cudzysłowami. Podobnie jak w drugiej linii kodu przykładowego. W tej linii nazwa zmiennej wstawiona poza cudzysłowami.
                example_code: |
                    ```
                    imię {is} {ask}_ Jakie jest twoje imię? _
                    {print}  _ Głównym bohaterem jest _ imię
                    {print} imię _ idzie na spacer do lasu _
                    {print} imię _ nieco się boi _
                    zwierzęta {is} 🦔, 🐿, 🦉, 🦇
                    {print} _ Słyszy dźwięk _ zwierzęta {at} {random}
                    {print} name _ obawia się, że jest w nawiedzonym lesie _
                    ```
            5:
                story_text: |
                    W tym poziomie możesz zaprogramować różne zakończenia, które sprawią, że Twoja opowieść będzie jeszcze ciekawsza.
                    W przykładowym kodzie możesz zobaczyć 2 różne zakończenia.

                    ### Ćwiczenie 1
                    Napisz nową, krótką opowieść składającą się z 6 linii kodu na wybrany przez Ciebie temat.
                    Brak Ci pomysłów? Wybierz jeden z tych: superbohater, nudny dzień w szkole, opuszczeni na bezludnej wyspie.

                    Teraz daj graczowi wybór pomiędzy dobrym i złym zakończeniem, tak jak w kodzie przykładowym.
                    Zaprogramuj oba zakończenia.

                    ### Ćwiczenie 2
                    Skopiuj swoją opowieść przygodową z poprzednich poziomów.
                    Znajdź sposób by dodać przynajmniej 2 polecenia `{if}` oraz `{else}` do Twojej historii.
                    Mogą to być dobre lub złe zakończenia lub wymyślić inny sposób na użycie tych poleceń.
                example_code: |
                    ```
                    imię {is} {ask} 'Kto idzie przez las?'
                    {print} imię ' idzie przez las'
                    {print} imię ' spotyka potwora'
                    zakończenie {is} {ask} 'Czy chciałbyś dobre czy złe zakończenie?'
                    {if} zakończenie {is} dobre {print} imię ' wyciąga miecz i potwór ucieka'
                    {else} {print} 'Potwór zjada ' imię
                    ```
            7:
                story_text: "W niektórych opowieściach, bohaterowie czasem powtarzają wybrany zwrot kilka razy. Przykładem tego jest bohater wołający o pomoc lub też śpiewający piosenkę.\nMożesz stworzyć takie powtórzenia w swojej opowieści przy użyciu polecenia `{repeat}`.\n\nDodaj powtórzenia do Twojej opowieści. Wróć do swoich zapisanych programów i wybierz Twój program z opowieścią z poziomu 6 i \nznajdź linię zawierającą polecenie `{print}` i powtórz ją!\n"
                example_code: |
                    ```
                    {print} 'Książę wciąż wołał o pomoc'
                    {repeat} 5 {times} {print} 'Pomocy!'
                    {print} 'Dlaczego nikt mi nie pomaga?'
                    ```
            8:
                story_text: |
                    W tym poziomie masz możliwość napisania wielu linii kodu wewnątrz polecenia `{if}`. Dzięki temu możesz urozmaicić szczęśliwe i tragiczne zakończenia Twojej opowieści.

                    Przykładowy kod pokazuje dwa różne zakończenia; jedno, w którym bohaterowie skaczą w czasie przy użyciu maszyny czasu, a drugie, w którym tego nie robią.
                    Uzupełnij puste miejsca co najmniej jednym zdaniem na każde zakończenie.
                    **(Dodatkowo)** Utwórz dłuższą opowieść. Co się w niej dzieje? Możesz także dodać drugie polecenie `{ask}` z innymi opcjami.

                    Wróć do swoich zapisanych programów, wybierz program z opowieścią z poziomu 5. Napisz w nich dobre oraz złe zakończenia, każde z co najmniej trzema liniami kodu!
                example_code: |
                    ```
                    {print} 'O, nie! Tyranozaur Rex zbliża się!'
                    zakończenie = {ask} 'Czy chcesz zakończenie szczęśliwe czy smutne?'
                    {if} zakończenie {is} szczęśliwe
                        {print} 'W ostatnim momencie Richard wraca do maszyny czasu!'
                        {print} _
                    {else}
                        {print} 'O, nie! Richard jest zbyt wolny...'
                        {print} _
                    ```
            9:
                story_text: |
                    W tym poziomie możesz użyć poleceń `{if}` and `{repeat}` wewnątrz innych poleceń `{if}` oraz `{repeat}`.
                    Dzięki temu możesz jeszcze bardziej urozmaicić swoją opowieść.

                    ### Cwiczenie 1
                    Uzupełnij kod tak, aby polecenie `{if}` działało poprawnie.

                    ### Cwiczenie 2
                    Dodaj polecenie `{if}` oraz `{else}` do części opowiadania, gdzie Robin wraca do domu.

                    ### Cwiczenie 3
                    Wróć do swojej opowiadania z poziomu 8 i użyj co najmniej dwóch poleceń `{if}` wewnątrz innego polecenia `{if}`.
                example_code: |
                    ```
                    {print} 'Robin idzie wzdłuż ulicy'
                    lokalizacja = {ask} 'Czy Robin idzie do sklepu, czy wraca do domu?'
                    {if} lokalizacja {is} sklep
                        {print} 'Wchodzi do sklepu.'
                        {print} 'Robin widzi ciekawą książkę'
                        książka = {ask} 'Czy Robin kupuje książkę?'
                        {if} książka {is} tak
                        _ {print} 'Robin kupuje książkę i wraca do domu'
                        _ {else}
                        _ {print} 'Robin opuszcza sklep i wraca do domu'
                    {else}
                        {print} 'Robin wraca do domu'
                    ```
            10:
                story_text: |
                    W tym poziomie możesz użyć polecenia {for} w swojej opowieści. Dzięki tej komendzie możesz bardzo prosto zaprogramować część wierszyka "Sroczka kaszkę warzyła".

                    ### Ćwiczenie

                    Spójrz na <a href="https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf"> opowiadanie</a> jeśli go nie znasz i upewnij się, że jest wydrukowane tak jak w książce.
                example_code: "```\nanimals = _ , _ , _ \n{print} 'Brown bear, Brown bear'\n {print} 'What do you see?'\n```\n"
            12:
                story_text: |-
                    W tym poziomie cudzysłowy będą potrzebne, żeby przypisac wiele słów do jednej zmiennej.

                    ### Ćwiczenie

                    Weź opowieść z poprzedniego poziomu, dowolny poziom jest ok. Teraz upewnij się, że cudzysłowy są powstawiane w odpowiednich miejscach.
                example_code: |
                    ```
                    imię = 'Królowa Anglii'
                    {print} imię ' jadła kawałek ciasta, gdy nagle...'
                    ```
            13:
                story_text: |
                    Używając poleceń `{and}` oraz `{or}` możesz uczynić swoje opowieści bardziej wszechstronnymi. Możesz zadać dwa pytania i odpowiedzieć na kombinację odpowiedzi.

                    ### Ćwiczenie 1
                    Popatrz na przykładowy kod i dokończ go. Następnie dodaj co najmniej 2 polecenia `{if}` z poleceniami `{and}` lub `{or}`.

                    ### Ćwiczenie 2
                    Odnajdź opowieść z poprzedniego poziomu i dodaj jedno polecenie `{and}` lub `{or}`.
                example_code: "```\n{print} 'Nasz bohater idzie przez las'\n{print} 'Ścieżka rozdziela się'\nścieżka = {ask} 'Którą ścieżkę powinna wybrać?'\nbroń ={ask} 'Jaką broń wyciąga?'\n{if} ścieżka {is} 'lewo' {and} broń {is} 'miecz'\n\t_\n```\n"
            15:
                story_text: |
                    Przy użyciu pętli `{while}` możesz stworzyć jeszcze bardziej wciągające opowieści. Na przykład, możesz użyć `{while} gra {is} 'działa'` żeby kontynuować grę aż się zakończy.
                    Alternatywnie możesz napisać `{while} miecz {is} 'zagubiony'` żeby nie pozwolić graczowi kontynuować zanim znajdą miecz.

                    ### Exercise
                    The example code shows you how to use the `{while}` loop in a story. Now **think of your own scenario** in which the player has to find something before they can continue.
                example_code: "```\nklucze = 'zgubione'\n{print} 'Stoisz w ogrodzie i zgubiłeś swoje klucze.' \n{print} 'Gdzie chcesz ich poszukać?'\n{print} 'Możesz wybrać: drzewo, doniczka, kamień, skrzynka na listy'\n{while} klucze == 'zgubione'\n    miejsce = {ask} 'Gdzie chcesz popatrzeć?'\n    {if} miejsce == 'doniczka'\n        {print} 'Tutaj są!'\n        klucze = 'znalezione'\n    {else}\n        {print} 'Nie, nie ma ich w ' miejsce\n{print} 'Teraz możesz wejść do domu!'\n```\n"
            18:
                story_text: |
                    Napiszemy kolejną opowieść, ale teraz musimy użyć nawiasów z `{print}`.


                    ### Ćwiczenie 1
                    Stwórz opowieść składającą się z co najmniej 5 zdań. Nie musisz użyć 'imię' jeszcze.
                example_code: |
                    ```
                    {print}('Witamy w tej opowieści!')
                    ```
                story_text_2: |
                    ### Ćwiczenie 2
                    Przygotowaliśmy już dla ciebie polecenie `{input}`. Najpierw użyj zmiennej `imię` w twojej opowieści.
                    Następnie dodaj drugie polecenie `{ask}` i użyj również tej zmiennej.
                    Wskazówka: Pamiętaj o przecinkach w poleceniu `{print}` pomiędzy tekstem a zmiennymi!
                example_code_2: |
                    ```
                    imię = {input}("Jak się nazywasz?")
                    {print}('Witamy w tej opowieści!')
                    ```
    add_remove_command:
        name: '{add} {to} & {remove} {from}'
        default_save_name: add_remove_command
        description: introducing add to and remove from
        levels:
            3:
                story_text: |
                    ## Komenda {add} {to}
                    Możesz dodawać elementy  do listy używając komendy {add} {to}. Żeby dodać element do listy możesz po prostu wpisać: `{add} pingwin {to} zwierzęta` albo możesz użyć komendy `{ask}`, tak jak w przykładowym kodzie.
                example_code: |
                    ```
                    zwierzęta {is} pies, kot, kangur
                    ulubione {is} {ask} Jakie jest Twoje ulubione zwierzę?
                    {add} ulubione {to_list} zwierzęta
                    {print} Wybieram zwierzęta {at} {random}
                    ```
                story_text_2: |
                    ## Komenda {remove} {from}
                    Tak samo jak możemy dodawać elementy do listy, możemy je również usuwać. Robimy to za pomocą komendy `{remove} {from}`.
                example_code_2: |
                    ```
                    zwierzęta {is} pies, kot, kangur
                    nielubiane {is} {ask} Którego zwierzęcia nie lubisz?
                    {remove} nielubiane {from} zwierzęta
                    {print} Wybieram zwierzęta {at} {random}
                    ```
                story_text_3: |
                    ### Ćwiczenie
                    Wypróbuj nowe komendy w przykładzie z wirtualną restauracją. Dodaj smak, którego gracz oczekuje i usuń smak, na który ma alergię.
                example_code_3: |
                    ```
                    {print} Tajemniczy koktajl mleczny
                    smaki {is} truskawkowy, czekoladowy, waniliowy
                    oczekiwany {is} {ask} Jakiego smaku oczekujesz?
                    _
                    alergia {is} {ask} Na który smak masz alergię?
                    _
                    {print} Otrzymujesz koktajl o smaku {at} {random}
                    ```
    and_or_command:
        name: '{and} & {or}'
        default_save_name: and or
        description: introducing and or
        levels:
            13:
                story_text: |-
                    We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two `{if}`s but can use `{and}` and `{or}`.

                    If you use `{and}`, both statements, left and right of the `{and}` need to be true. We can also use `{or}`. Then only one statement needs to be correct.
                example_code: |
                    ```
                    name = {ask} 'what is your name?'
                    age = {ask} 'what is your age?'
                    {if} name {is} 'Hedy' {and} age {is} 2
                        {print} 'You are the real Hedy!'
                    ```
    ask_command:
        name: '{ask}'
        default_save_name: komenda_{ask}
        description: Introduction ask command
        levels:
            1:
                story_text: |
                    ## Komenda zapytaj
                    Skoro znasz się już komendę `{print}`, jesteś gotowy nauczyć się kolejnej metody: `{ask}`. Używając komendy `{ask}`, możesz zadać pytanie. Wypróbuj tego:
                example_code: |
                    ```
                    {print} Cześć!
                    {ask} Jak masz na imię?
                    ```
                story_text_2: |
                    ## Komenda dołącz
                    Jeśli chcesz aby komputer powtórzył odpowiedź, możesz użyć komendy `{echo}`. Odpowiedź zostanie wypisana na końcu zdania, czyli w tym przypadku po "cześć"
                example_code_2: |
                    ```
                    {print} Cześć!
                    {ask} Jak masz na imię?
                    {echo} cześć
                    ```
                story_text_3: |
                    ### Ćwiczenie
                    Wypróbuj komend `{ask}` i `{echo}`. Najpierw wypełnij puste miejsca, aby program zadziałał.
                    Następnie zadaj 2 kolejne pytania, używając komendy `{ask}`. Po każdym `{ask}` użyj `{echo}` aby wypisać odpowiedź na ekranie.
                example_code_3: |
                    ```
                    _ Jak się masz?
                    _
                    ```
            2:
                story_text: |
                    ## Komenda zapytaj
                    Teraz gdy potrafimy używać **zmiennych** w naszym kodzie, nie potrzebujemy już komendy `{echo}`.
                    Możemy używać zmiennych, aby zapisać odpowiedzi do naszych pytań i w ten sposób używać tych odpowiedzi w wielu miejscach w naszym kodzie.
                    Spróbuj tego:


                    W ten sposób Twój kod staje się interaktywny!
                example_code: |
                    ```
                    imię {is} {ask} Jak masz na imię?
                    {print} Cześć imię
                    wiek {is} {ask} Ile masz lat?
                    {print} imię ma wiek lat.
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    W poprzedniej zakładce przećwiczyliśmy ustawianie wartości zmiennych używając komendy `{is}`.
                    Utworzyłeś co najmniej 3 zmiennych i użyłeś ich z komendą `{print}`.
                    Teraz, zamiast ustawiać zmienne w kodzie, spróbuj uczynić je interaktywnymi, tak jak zrobiliśmy to powyżej.

                    Skopiuj kod z poprzedniej zakładki i uczyń zmienne interaktywnymi używając komendy `{ask}`.
                example_code_2: |
                    ```
                    ulubione_zwierzę {is} {ask} Jakie jest Twoje ulubione zwierzę?
                    {print} Lubię ulubione_zwierzę
                    ```
            18:
                story_text: The final change we will need to make to get Python code is changing `{ask}` into `{input}`.
                example_code: |
                    ```
                    {print}('My name is Hedy!')
                    name = {input}('What is your name?')
                    {print}('So your name is ', name)
                    ```
    blackjack:
        name: Blackjack
        default_save_name: Blackjack
        description: Spróbuj zdobyć jak największą ilość punktów ale mniejszą lub równą 21
        levels:
            17:
                story_text: |
                    Blackjack to prosta gra karciana, w której musisz zdobyć jak najwięcej 21 punktów. Dostajesz dwie karty. Każda karta ma swoją wartość liczbową, a figury (walet, królowa i król) są warte 10 punktów.
                    As jest wart 1 lub 11 punktów (do wyboru). Rozdający, twój przeciwnik, również otrzymuje dwie karty.
                    Jeśli chcesz, możesz zdobyć kolejną kartę, a jej punkty zostaną dodane do Twojej sumy. Rozdający może również wybrać inną kartę.
                    Uważaj, aby nie zdobyć więcej niż 21 punktów, ponieważ jeśli to zrobisz, przegrywasz!
                    Gracz, który zbliży się do liczby 21, nie przekraczając jej, wygrywa!

                    ### Exercise
                    In this adventure we code the first part of our Blackjack game. We'll create a function to calculate how many points a card is worth.

                    ***Set the variables***
                    Start by making a list of all the cards, from 2 to Ace. Next make a list of the face cards, so Jack, Queen and King. Then pick a random card from the list of cards to be card_1.

                    ***Create a function to calculate the points***
                    Create a function that calculates how many points a card is worth.
                    All the face cards are worth 10 points, the Ace is worth 11 and all the other cards are worth their numeral.
                    Return the variable `points` at the end of the function.

                    ***Test the function***
                    Test if your function is working properly. Finish the first print command by filling in which card you've drawn. Then finish the second line by calling the function with card_1.
                    Run the code a couple of times. Are you happy with the results? Great! Then you can remove the testing part and move on the the next tab!
                example_code: |
                    ```
                    {print} 'BLACKJACK'

                    # Set these variables
                    cards = _
                    face_cards = _
                    card_1 =

                    # Create a function to calculate the points
                    {define} calculate_points {with} card:
                        {if} card {in} face_cards:
                            points = _
                        {elif} _
                            _
                        {else}:
                            _
                        _ points

                    # Test your function
                    {print} 'Your card is a ' _
                    {print} 'That is worth ' _ ' points'.
                    ```
    blackjack_2:
        name: Blackjack 2
        default_save_name: Blackjack_2
        description: Blackjack part 2
        levels:
            17:
                story_text: |
                    ### Exercise
                    In this adventure we code the second part of our Blackjack game.

                    ***Paste your code from the previous adventure***
                    In the previous adventure you've started a list of variables and created a function to calculate how many points a card is worth. Copy your code and paste it here. Mind that you don't need the testing part, so if you haven't removed that yet, please do so now.

                    ***Add more variables***
                    You have already set the lists `cards` and `face_cards` and the variable `card_1`. Underneath those variables create 3 more variables: `card_2`, dealer_card_1` and `dealer_card_2`. These variables are all set to a random card from the list of cards.

                    ***Add up points***
                    To calculate how many points you have scored we call the function with card 1 and we do it again for card 2. Then we add both these scores together to get your total.
                    Do the same thing for the dealers points, but be sure to use the dealer's cards and not your own!

                    ***2 Aces***
                    You're doing great! Almost all scores can be calculated now. There is only one exception: 2 Aces. If you get 2 Aces, your total is 12 points and not 22 (because 22 points would be losing!). This of course also goes for the dealer.

                    ***Show the score***
                    Lastly, you want to tell the program to tell you which cards you have drawn and how many points that is. Then show which cards the dealer has and how many points they have.

                    ***Continue in the next tab***
                    Great! You have finished this part of the game! Copy your code and go to the next tab to learn how to ask for an extra card and to declare a winner.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Add these variables to the list of variables
                    card_2 = _
                    dealer_card_1 = _
                    dealer_card_2 = _

                    # Add up your points
                    your_points_1 = {call} _ {with} card_1
                    your_points_2 = _
                    your_total = _

                    # Add up the dealers points
                    dealer_points_1 = _
                    _
                    _

                    # 2 Aces
                    {if} card_1 == 'Ace' {and} _
                        your_total = 12
                    {if} dealer_card_1 _
                        dealer_total = _

                    # Show the score
                    {print} 'You have drawn a ' _ ' and a ' _ '. That is ' _ ' points'
                    {print} 'The dealer has drawn a ' _ ' and a ' _ '. That is ' _ ' points'
                    ```
    blackjack_3:
        name: Blackjack 3
        default_save_name: Blackjack_3
        description: Blackjack part 3
        levels:
            17:
                story_text: |
                    In the previous tabs you have learned how to draw 2 random cards for yourself and for the dealer and to calculate how many points you both got.
                    In this adventure we add the option to ask for an extra card for both you and the dealer.

                    ### Exercise
                    ***Paste your code from the previous adventure*** Firstly, copy your code from the previous tab and paste it here.

                    ***Extra card for you*** If you want, you can get an extra card to get your total as close to 21 as possible. First ask the player if they want an extra card.
                    If they do, pick a random card and print what they have drawn. If the card is not an Ace, you can call the function and add the points to your total.
                    In case the card is an Ace, you can't use the function, because the Ace can be either 1 point or 11 points, depending on how many points you already have earned.
                    If your total is less than 11, you want the ace to be 11 points (because this is closest to 21). So you add 11 points to your total.
                    If the total is more than or equal to 11, you want the ace to be 1 point (because you don't want more than 21 points). So you add 1 point to your total.
                    Lastly, print your new total of points.

                    ***Extra card for the dealer*** The dealer can also get an extra card. The dealer doesn't need to be asked, because they always get an extra card if their total is less than 17.
                    Copy the 'Extra card for you code' and paste it in the dealers section. Then change it to fit the dealer picking an extra card and getting points added to their total.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Extra card for you
                    hit = {ask} _
                    {if} hit == 'yes':
                        card_3 = _
                        {print} _
                        {if} card_3 _ 'Ace':
                            your_points_3 = _
                            your_total = _
                        {else}:
                           {if} your_total _
                                _
                            {else}:
                                _
                        {print} _

                    # Extra card for the dealer
                    {if} dealer_total < 17
                    _
                    ```
    blackjack_4:
        name: Blackjack 4
        default_save_name: Blackjack_4
        description: Blackjack part 4
        levels:
            17:
                story_text: |
                    In the last 3 adventures you have alsmost created a working blackjack game! The only thing left to do is to decide a winner!

                    ### Exercise
                    ***Paste your code from the previous adventure*** Start by pasting the code that you've made so far into your programming field.

                    ***Decide a winner***
                    Firstly, if you and the dealer have an equal amount of points, it's a draw.
                    Secondly, if the dealer has more than 21 points and you don't, you are the winner.
                    Thirdly, if both you and the dealer have less than 22 points, we have to see who came closest to 21. We do that by comparing who has the highest score. Is your total higher than the dealer's total, then you are the winner. If not, the dealer wins.
                    Lastly, in all other scenarios (e.g. you have more than 21 points and the dealer doesn't, or you both have more than 21 points) you are the loser.

                    ***Enjoy the game!***
                    Does your game work properly? Amazing! You have done a great job! Enjoy your game!
                    If it doesn't work right away, no worries, you might have made a mistake. Just keep calm and bebug your code using the ladybug button.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Decide a winner
                    {if} _
                        {print} 'Its a draw! Play again!'
                    {elif} _
                        {print} 'You win!'
                    {elif} _ :
                        {if} _:
                            {print} _
                        {else}:
                            {print} _
                    {else}:
                        _
                    ```
    calculator:
        name: Kalkulator
        default_save_name: Kalkulator
        description: Stwórz kalkulator
        levels:
            6:
                story_text: |
                    Teraz gdy umiesz już matematykę, możesz sam zrobić kalkulator!
                example_code: "```\nliczba_1 {is} {ask} 'Wpisz pierwszą liczbę:'\nliczba_2 {is} {ask} 'Wpisz drugą liczbę:'\npoprawna_odpowiedź = liczba_1 * liczba_2 \n{print} liczba_1 ' razy ' liczba_2 ' to ' poprawna_odpowiedź \n```\n"
                story_text_2: |
                    ### Ćwiczenie
                    Powyższy kalkulator obliczy odpowiedź za Ciebie, ale możesz również stworzyć program, aby sprawdzić swoje umiejętności matematyczne, jak ten:
                    Wypełnij puste miejsca, aby go dokończyć!
                example_code_2: |
                    ```
                    poprawna_odpowiedź = 11 * 27
                    odpowiedź = {ask} 'Ile to jest 11 razy 27?'
                    {if} odpowiedź {is} _ {print} 'good job!'
                    {else} {print} 'Źle! To było ' _.
                    ```
                story_text_3: |
                    Możesz też pozwolić komputerowi na samodzielne wykonywanie losowych sum za pomocą {random}.
                example_code_3: |
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number_1 = _
                    number_2 = _
                    correct_answer = number_1 * number_2
                    given_answer = 'What is ' number_1 ' times ' number_2 '?'
                    {if} _
                    {else} _
            9:
                story_text: |
                    W poziomie 6 stworzyłeś kalkulator, w tym poziomie możesz rozbudować ten kod tak, aby zadawał wiele pytań.

                    ### Ćwiczenie 1
                    Czy potrafisz dokończyć linię 10, aby program działał?

                    ### Ćwiczenie 2
                    Daj graczom informację zwrotną, gdy wprowadzą dobrą lub złą odpowiedź. Aby to osiągnąć, rozszerz swój program o `{else}`.
                example_code: "```\nwynik = 0\n{repeat} 10 {times}\n    liczby = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    liczba1= liczby {at} {random}\n    liczba2 = liczby {at} {random}\n    poprawna_odpowiedź = liczba1* liczba2 \n    {print} 'Ile jest ' liczba1 ' razy ' liczba2 '?'\n    odpowiedź = {ask} 'Wpisz tutaj swoją odpowiedź...'\n    {print} 'Twoja odpowiedź to'  odpowiedź\n    {if} _ {is} _\n        wynik = wynik + 1\n{print} 'Świetna robota! Twój wynik to... ' wynik ' na 10!\n```\n"
            10:
                story_text: |
                    This calculator game helps you practise your tables of multiplication!
                    ### Exercise
                    Fill in the blanks. We want this program to ask the player these questions:
                    ```
                    How much is 1 times 1?
                    How much is 1 times 2?
                    How much is 1 times 3?
                    How much is 2 times 1?
                    How much is 2 times 2?
                    How much is 2 times 3?
                    How much is 3 times 1?
                    How much is 3 times 2?
                    How much is 3 times 3?
                    _
                    ```
                example_code: |
                    ```
                    numbers = 1, 2, 3
                    {for} _
                        {for} _
                            answer = {ask} _
                            correct = number_1 * number_2
                            {if} answer {is} correct
                                {print} 'Great job!'
                            {else}
                                {print} 'That is wrong. The right answer is ' correct
                    ```
            11:
                story_text: |
                    Dzięki `{for}` można uprościć program ćwiczeniowy tabliczki mnożenia.

                    ### Ćwiczenie 1
                    Popraw przykładowy kod tak, aby drukował ładną tabliczkę mnożenia: <br> "1 razy 10 to 10", "2 razy 10 to 20" itd.

                    ### Ćwiczenie 2
                    Wróć do swojego kodu mnożenia na poziomie 10 i zmodyfikuj go tak, aby używał `{for}` i `{range}`.
                example_code: |
                    ```
                    liczba = 10
                    {for} i {in} {range} 1 do 10
                        {print} i * liczba
                    ```
            12:
                story_text: |
                    Teraz możesz zrobić kalkulator, który działa dla liczb dziesiętnych. Wypełnij puste miejsca, aby działał poprawnie!
                example_code: |
                    ```
                    liczba1 = {ask} 'Jaka jest pierwsza liczba?'
                    liczba2 = {ask} 'Jaka jest druga liczba?'
                    odpowiedź = _
                    {print} liczba1 ' plus ' liczba2 ' to ' odpowiedź
                    ```
            13:
                story_text: |
                    ### Ćwiczenie 1
                    Let's make the practice program a bit harder. The player now has to answers two questions correctly. Fill out the blanks to complete the program.

                    ### Ćwiczenie 2 dodatkowe
                    Sometimes, calculations have multiple correct answers. For example, 10 can be divided by 5 and by 2. So the question 'What number divides 10?' can be answered by 2 and by 5.
                    Ask for a calculation that has multiple correct answers, ask the player to answer it, and determine if it is correct using `{or}`.
                    Empty the programming field and create your own solution.
                example_code: |
                    ```
                    answer1 = {ask} 'What is 10 times 7?'
                    answer2 = {ask} 'What is 6 times 7?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
            14:
                story_text: |
                    In this adventure you will build a calculator that calculates your mean grade for you. If you get your calculator to work, you can move on to the next adventure, which allows you to add two extra features.

                    ### Exercise 1
                    Fill in the blanks to get the calculator to work.
                    * Start with the fourth line, add a question to figure out what grade the student got.
                    * In the fifth line you'll want to calculate the total of all grades, so the total = total + grade.
                    * Then we get to set the return value. We want to return the mean, so the total devided by the amount of tests (4).
                    * Lastly we finish the code by calling the function in line 8.

                    Did you get it? Awesome! Would you like to add even more to your calculator? **This adventure continues in the next tab!**
                example_code: |
                    ```
                    {define} calculate_mean_grade
                        total = 0
                        {for} i {in} {range} 1 {to} 4
                            grade = {ask} _
                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
                    ```

                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
            15:
                story_text: |
                    Możesz dodać pętlę `{while}` do gry w kalkulator, którą nauczyłeś się robić na poprzednim poziomie.
                    Dzięki temu gracz nie będzie mógł przejść do następnego pytania {if} udzielił błędnej odpowiedzi.

                    ### Exercise
                    Add the `{while}` loop in the function, ask the player what number_1 times number_2 is and print their answer.
                    Then `{call}` the function.
                example_code: |
                    ```
                    {define} new_question
                        numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        number_1 = numbers {at} {random}
                        number_2 = numbers {at} {random}
                        correct = number_1 * number_2
                        answer = 0
                        _
                        _
                        _
                        {print} 'Well done!'

                    {print} 'Give 10 correct answers to win!'
                    {for} i {in} {range} 1 {to} 10
                        _
                    {print} 'You win!'
                    ```
    calculator_2:
        name: Calculator 2
        default_save_name: Calculator 2
        description: Calculator 2
        levels:
            14:
                story_text: |
                    ### Exercise 2
                    **This is the second part of this adventure.** The adventure starts in the previous tab.
                    Of course, you don't always want to calculate the mean of 4 tests. You might want to calculate the mean of 10 tests or only 2...
                    We can fix this problem by adding the argument and variable 'amount_of_tests'.
                    * Start a new line on line 3. Set the amount_of_tests argument by asking the student how many tests they have made.
                    * Change the 4 in line 4 to the new argument amount_of_tests.
                    * Lastly, change the 4 in line 6 to amount_of_tests

                    Try out your new program. Does it work?

                    ### Exercise 3
                    Did you want to make your program even better? Great! In the previous program you could only calculate the mean grade of 1 subject, but it would be better if you could calculate the mean grade for all subjects you want!
                    We won't tell you how to do it, but we will give you one tip: Start your code in line 1 with: define calculate_mean_grade with subject.
                example_code: |
                    ```
                    # Use your own code from the previous adventure.
                    ```
    clear_command:
        name: '{clear}'
        default_save_name: clear_command
        description: clear command
        levels:
            4:
                story_text: |
                    Czas na nową komendę! Z komendą `{clear}` możesz wyczyścić cały tekst z ekranu. W ten sposób możesz zapobiec ścianie tekstu na Twoim ekranie.
                    Uważaj! Jeżeli używasz komendy `{clear}`, to pamiętaj nad nią użyć komendy `{sleep}`. W przeciwnym wypadku Hedy wyczyści Twój ekran zanim będziesz miał szansę cokolwiek przeczytać.
                example_code: |
                    ```
                    {print} '3'
                    {clear}
                    {print} '2'
                    {clear}
                    {print} '1'
                    {clear}
                    {print} 'wait for it...'
                    {sleep} 3
                    {clear}
                    {print} 'NIESPODZIANKA!'
                    ```
    debugging:
        name: debugging
        default_save_name: debugging
        description: debugging adventure
        levels:
            1:
                story_text: |-
                    Welcome to a debugging adventure. Debugging a code means getting rid of mistakes in the code.
                    That means that in these debugging adventures, we will show you code that does not work yet.
                    You will have to figure out what's wrong and correct the mistakes.

                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} I love programming
                    Do you love programming too?
                    {echo}
                    {print} What are your hobbies?
                    {echo} Your hobbies are
                    ```
            2:
                story_text: |-
                    Welcome to a debugging adventure. Debugging a code means getting rid of mistakes in the code.
                    That means that in these debugging adventures, we will give you a code that does not work yet.
                    You will have to figure out what's wrong and correct the mistakes.

                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    destination {ask} Where are you going on holidays?
                    {print} The flight to dstination leaves at 3 pm.
                    {ask} Did you check in your luggage yet?
                    {echo}
                    {print} Let me print your boarding pass for you.
                    {sleep}
                    Here you go! Have a nice trip!
                    ```
            3:
                story_text: |-
                    Welcome to a debugging adventure. Debugging a code means getting rid of mistakes in the code.
                    That means that in these debugging adventures, we will give you a code that does not work yet.
                    You will have to figure out what's wrong and correct the mistakes.

                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    movie_choices {is} dracula, fast and furious, home alone, barbie
                    chosen_movie {is} movies {at} {random}
                    {print} Tonight we will watch chosen _movies
                    like {ask} Do you like that movie?
                    {print} Tomorrow we will watch something else.
                    {add} chosen_movie {to} movie_choices
                    {print} Tomorrow we will watch tomorrows_movie
                    tomorrows_movie {is} movie_choices {at} {random}
                    I'll go get the popcorn! {print}
                    ```
            4:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to the online library!
                    {ask} What genre of books do you like?
                    {print} You like genre
                    author {is} {ask} 'Who's your favorite author?'
                    {print} 'author is your favorite author'
                    {print} Hmmm... i think you should try... books {at} {random}
                    ```
            5:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} Welcome to Swimming Pool Hedy!
                    class {is} {ask} 'Are you here to join a class today?'
                    {if} class yes
                    {print} 'Great! You're joining a class!
                    {print} {else} 'You will not be joining a class'
                    discount {is} 'Do you have a discount code?'
                    {if} discount {is} yes
                    discount_answer {is} {ask} 'What's your discount code?'
                    discount_codes = Senior4231, Student8786, NewMember6709
                    {if} discount_answer {is} {in} discount_cods
                    {print} 'That will be $3,50'
                    'That will be $5,50'
                    {print} 'Have a nice swim!'
                    ```
            6:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Vending machine'
                    chosen_product = {ask} 'Please select a product'
                    1_dollar_products = coke orange juice water
                    2_dollar_products = chocolate, cookie, museli bar
                    3dollar_prodcuts = potato chips, beef jerky, banana bread
                    {if} chosen {is} {in} 1_dollar_products
                    price = 1
                    {if} chosen_product {is} 2_dollar_products
                    price = 2
                    {else} chosen_product {in} 3_dollar_products
                    price = 3
                    amount_of_products = '{ask} How many of ' chosen_product would you like to have?'
                    total = price + amount_of_product
                    {print} 'That will be $' price 'please'
                    ```
            7:
                story_text: |-
                    ### Exercise
                    Surprise! This program looks more like an output than a code. And yet, we don't want you to just add `{print}` commands in front of each line.
                    Fix this program to turn it into the nursery rhyme 'Brother John (Frère Jaques)' by using the {repeat} command of course!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    Are you sleeping?
                    Brother John!
                    Morning bells are ringing!
                    Ding, dang, dong!
                    ```
            8:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to Manicures and Pedicures by Hedy'
                    bodypart = {ask} 'Are you getting your fingernails or toenails done today? Or both?'
                    {if} bodyparts {is} both
                            {print} That will be $25'
                            price = 25
                        {else}
                            {print} That will be $18'
                            price = 18
                    color = {ask} What color would you like?
                    sparkles = {ask} 'Would you like some sparkles with that?'
                    {if} sparkles {is} yes
                        {print} 'We charge $3 extra for that'
                    price = price + 3
                    {else} {print} 'No sparkles' {print} 'So no extra charge'
                    {sleep} 5
                    {print} 'All done! That will be $' price ' please!'
                    {print} 'Thank you! Byebye!'
                    ```
            9:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to our sandwich shop'
                    amount 'How many sandwiches would you like to buy?'
                    {repeat} amount {times}
                    {ask} {is} {ask} 'What kind or bread would you like your sandwich to be?'
                    types_of_bread {is} white, wheat, rye, garlic, gluten free
                    {if} chosen_bread in types_of_bread
                    {print} 'Lovely!'
                    {else}
                    'I'm sorry we don't sell that'
                    topping {is} {ask} 'What kind of topping would you like?'
                    sauce {is} {ask} 'What kind of sauce would you like?'
                    {print} One chosen_bread with topping and sauce.
                    price = amount * 6
                    {print} 'That will be 'price dollar' please'
                    ```

                    price = amount * 6
                    {print} 'That will be 'price dollar' please'
            10:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    names = Muad Hasan Samira Noura
                    activities = fly a kite, go swimming, go hiking, catch tan in the sun
                    {for} name {is} names
                    {print} At the beach name loves to activity at random
                    ```
            11:
                story_text: |-
                    ### Exercise
                    Debug this calender program. The output of this program is supposed to look like a list of dates.
                    For example:

                    ```
                    Hedy calender
                    Here are all the days of November
                    November 1
                    November 2
                    November 3
                    ```
                    And so on.

                    Mind that you have to test your code extra carefully for the month February, because the amount of days in this month changes in leap years.
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    print 'Hedy calender'
                    months_with_31 days = January, March, May, July, September, October, December
                    months_with_30_days = April, June, August, November
                    month = ask 'Which month would you like to see?'
                    if month in months_with_31_days
                        days = 31
                        if month in months_with30_days
                            days = 30
                    if month = February
                        leap_years = 2020, 2024, 2028, 2036, 2040, 2044, 2028
                        year = ask 'What year is it?'
                    if year in leap_years
                        days = 29
                    else
                        days = 28

                    print 'Here are all the days of ' moth
                    for i in range 1 to days
                        print month i
                    ```
            12:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define greet
                    greetings = 'Hello', 'Hi there', 'Goodevening'
                        print greetings at random

                    define take_order
                        food = ask 'What would you like to eat?'
                        print 'One food'
                        drink = 'What would you like to drink?'
                        print 'One ' drink
                        more = ask 'Would you like anything else?'
                            if more is 'no'
                        print 'Alright'
                            else
                            print 'And ' more
                    print 'Thank you'

                    print 'Welcome to our restaurant'
                    people = ask 'How many people are in your party tonight?'
                    for i in range 0 to people
                        call greet_costumer
                    ```
            13:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    defin movie_recommendation with name
                        action_movies == 'Die Hard', 'Fast and Furious', 'Inglorious Bastards'
                        romance_movies = 'Love Actually', 'The Notebook', 'Titanic'
                        comedy_movies = 'Mr Bean' 'Barbie''Deadpool'
                        kids_movies = 'Minions', 'Paddington', 'Encanto'
                        if name is 'Camila' or name is 'Manuel'
                            recommended_movie = kids_movie at random
                        if name is 'Pedro' or 'Gabriella'
                                mood = ask 'What you in the mood for?'
                            if mood is 'action'
                                recommended_movie = comedy_movies at random
                            if mood is 'romance'
                                recommended_movie = romance_movies
                        if mood is 'comedy'
                                recommended_movie = comedy_movies at random

                    print 'I would recommend ' recommended_movie ' for ' name

                    name = ask 'Who is watching?'
                    recommendation = ask 'Would you like a recommendation?'
                    if recommendaion is 'yes'
                    print movie_recommendation with name
                    else
                    print 'No problem!'
                    ```
            14:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define calculate_heartbeat
                        print 'Press your fingertips gently against the side of your neck'
                        print '(just under your jawline)'
                        print 'Count the number of beats you feel for 15 seconds'
                        beats == ask 'How many beats do you feel in 15 seconds?'
                        heartbeat = beats*4
                        print 'Your heartbeat is ' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print 'Your heartbeat seems fine'
                        else
                            if heartbeat > 60
                                print 'Your heartbeat seems to be too low'
                            if heartbeat < 100
                                print 'Your heartbeat seems to be too high'
                            print 'You might want to contact a medical professional'

                    measure_heartbeat = ask 'Would you like to measure your heartbeat?'
                    if measure_heartbeat = 'yes'
                        call measure_heartbeat
                    else
                        'no problem'
                    ```

                        print '(just under your jawline)'
                        print 'Count the number of beats you feel for 15 seconds'
                        beats == ask 'How many beats do you feel in 15 seconds?'
                        heartbeat = beats*4
                        print 'Your heartbeat is ' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print 'Your heartbeat seems fine'
                        else
                            if heartbeat > 60
                                print 'Your heartbeat seems to be too low'
                            if heartbeat < 100
                                print 'Your heartbeat seems to be too high'
                            print 'You might want to contact a medical professional'

                    measure_heartbeat = ask 'Would you like to measure your heartbeat?'
                    if measure_heartbeat = 'yes'
                        call measure_heartbeat
                    else
                        'no problem'
            15:
                story_text: |-
                    ### Exercise
                    Debug this random children's story. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    names = 'Tanya', 'Romy', 'Kayla', 'Aldrin', 'Ali'
                    verbs='walking', 'skipping', 'cycling', 'driving', 'running'
                    locations = 'on a mountaintop', 'in the supermarket', 'to the swimming pool'
                    hiding_spots = 'behind a tree', under a table', in a box'
                    sounds = 'a trumpet', 'a car crash', 'thunder'
                    causes_of_noise = 'a television', 'a kid with firecrackers', 'a magic elephant', 'a dream'

                    chosen_ name = names at random
                    chosen_verb = verbs at random
                    chosen_location = 'locations at random'
                    chosen_sounds = noises at random
                    chosen_spot = hiding_spots random
                    chosen_causes = causes_of_noise at random

                    print chosen_name ' was ' chosen_verb ' ' chosen_location
                    print 'when they suddenly heard a sound like ' sounds at random
                    print chosen_name ' looked around, but they couldn't discover where the noise came from'
                    print chosen_name ' hid ' chosen_spot'
                    print 'They tried to look around, but couldn't see anything from there'
                    hidden = 'yes'
                    while hidden = 'yes'
                        print chosen_name 'still didn't see anything'
                    answer = ask 'does ' chosen_name ' move from their hiding spot?'
                        if answer = 'yes'
                            hidden == 'no'
                    print 'chosen_name moved from' chosen_spot
                    print 'And then they saw it was just' chosen_cause
                    print chosen_name 'laughed and went on with their day'
                    print The End
                    ```
            16:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                    Tip: Make sure that you only see your score once in the end.
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    country = ['The Netherlands', 'Poland', 'Turkey', 'Zimbabwe', 'Thailand', 'Brasil', 'Peru', 'Australia', 'India', 'Romania' ]
                    capitals = 'Amsterdam', 'Warshaw' 'Istanbul', 'Harare', 'Bangkok', 'Brasilia', 'Lima', 'Canberra', 'New Delhi', 'Bucharest'
                    score = 0
                    for i in range 0 to 10
                        answer = ask 'What's the capital of ' countries[i]
                        correct = capital[i]
                        if answer = correct
                            print 'Correct!'
                        score = score + 1
                        else
                            print 'Wrong,' capitals[i] 'in the capital of' countries[i]
                        print 'You scored ' score ' out of 10'

                    ```
            17:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define food_order
                        toppings = ask 'pepperoni, tuna, veggie or cheese?'
                        size = ask 'big, medium or small?'
                        number_of_pizza = ask 'How many these pizzas would you like?'

                        print 'YOU ORDERED'
                        print number_of_pizzas ' size  ' topping ' pizza'

                    define drinks_order
                        drink = ask 'water, coke, icetea, lemonade or coffee?'
                        number_of_drinks = ask 'How many of these drinks would you like?'

                        print 'YOU ORDERED'
                        print number_of_drinks ' ' drink

                    'Welcome to Hedy pizza'
                    more_food = ask 'Would you like to order a pizza?'
                    while more_food = 'yes'
                        return food_order
                        more_food = ask 'Would you like to order a pizza?'
                    more_drinks = ask 'Would you like to order some drinks?'
                    while more_drinks == 'yes'
                        call drink_order
                        more_drinks == ask 'Would you like to order more drinks?'


                    print 'Thanks for ordering!'
                    ```
            18:
                story_text: |-
                    ### Exercise
                    Debug this Old MacDonald program from level 16. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    for i in range 1 to 3
                        animal = animals[i]
                        sound = sounds[i]
                        print 'Old MacDonald had a farm'
                        print 'E I E I O!'
                        print 'and on that farm he had a ' animal
                        print 'E I E I O!'
                        print 'with a ' sound sound ' here'
                        print 'and a ' sound sound ' there'
                        print 'here a ' sound
                        print 'there a ' sound
                        print 'everywhere a ' sound sound
                    ```
    default:
        name: Pierwsze kroki
        default_save_name: wstęp
        description: Wyjaśnienie poziomu
        levels:
            1:
                story_text: |
                    Witaj w Hedy! Na Poziomie 1 nauczysz się pisać historię.
                    Wypróbuj kod, naciskając zielony przycisk pod polem programowania.
                    Gotowe? Świetnie, możesz udać się do następnej zakładki i nauczyć pierwszej komendy!
                example_code: |
                    ```
                    {print} Hello world!
                    ```
            2:
                story_text: |
                    Congratulations! You've reached level 2. Hopefully you've already made some awesome codes!
                    In the first level you might've notice that the `{echo}` command can only save one bit of information at a time.
                    For example in the restaurant adventure, you could echo what the costumer wanted to eat, or what they wanted to drink, but not both in one sentence.

                    That changes in level 2. In level 2 you'll learn to work with variables, that allow you to save multiple pieces of information and print them in any place you want.
                    So let's go to the next tab!
                example_code: |
                    **Warning! This code does not work!**
                    In Hedy commands will change sometimes. `{echo}` for example only works in level 1. In this level you'll learn a better way to echo answers back.
                    ```
                    {print} Welcome at Hedy's
                    {ask} What would you like to eat?
                    {echo} So you want
                    {ask} what would you like to drink?
                    {echo} So you want
                    ```
            3:
                story_text: "Na poprzednim poziomie nauczyliśmy się czym są zmienna i jak możemy ich używać, żeby nasze przygody były bardziej interaktywne. \nAle... to nie jedyna rzecz, którą możemy zrobić ze zmiennymi! Zmienne mogą też być listami. \nA nawet możemy pozwolić Hedy, aby wybrała losowe słowo z listy, co pozwoli Ci stworzyć prawdziwe gry!\nSpójrzmy na kolejną zakładkę!\n"
            4:
                story_text: |
                    Na poprzednich poziomach ćwiczyliśmy używanie zmiennych, ale mogłaś napotkać się na jeden problem.
                    Mogłaś próbować odpalać tego typu kod:

                    Oczywiście chciałaś, aby wypisało się:

                    `Moje imię to Zosia`

                    Jednak Hedy wypisuje:

                    `Moje Zosia to Zosia`.

                    Na tym poziomie rozwiążemy ten problem używająć cudzysłowów.
                example_code: |
                    ```
                    imię {is} Zosia
                    {print} Moje imię to imię
                    ```
            5:
                story_text: |
                    W poprzednich poziomach nauczyliśmy się używać `{at} {random}`, które sprawiało, że gry wyglądały inaczej pomiędzy ich odpaleniami.
                    Ale to nie jest do końca interaktywne, ponieważ gracz nie ma wpływu co się stanie dalej w grze.

                    Na tym poziomie nauczyć się nowej komendy `{if}`, która pozwoli na dawanie różnych odpowiedzi w Twoich programach.
                    Dla przykładu, w ten sposób będziesz mógł zaprogramować hasło dla swojego komputera. Przejdźmy do kolejnej zakładki!
                example_code: |
                    ```
                    hasło {is} {ask} 'Jakie jest prawidłowe hasło?'
                    ```
            6:
                story_text: |
                    W tym poziomie nauczysz się czegoś nowego: od teraz możesz również liczyć.

                    Dodawanie jest proste, możesz je zapisać tak jak w matematyce: na przykład `5 + 5`. Odejmowanie też jest proste, to po prostu `5 - 5`.

                    Mnożenie jest trochę inne, ponieważ nie ma znaku mnożenia na twojej klawiaturze. Poszukaj, naprawdę go nie ma!
                    Z tego powodu mnożymy za pomocą gwiazdki nad 8: `5 * 5`. Czytaj to jako „5 razy 5”, tak lepiej zapamiętasz.
                example_code: |
                    ```
                    {print} '5 plus 5 to ' 5 + 5
                    {print} '5 minus 5 to ' 5 - 5
                    {print} '5 razy 5 to ' 5 * 5
                    ```
            7:
                story_text: |
                    Poziom 7 dodaje komendę `{repeat}`. `{repeat}` może być użyte po to, aby tę samą linie kodu wykonać wiele razy.
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy to zabawa!'
                    ```
            8:
                story_text: |
                    `{ask}` i `{print}` wciąż działają tak jak je poznałeś do tej pory. Ale `{if}`, `{else}` i `{repeat}` zmieniły się!
                    Od teraz możesz zgrupować kilka linii kodu, ale musisz wtedy *wciąć* ten kod.
                    To znaczy dodać cztery spacje na początku linii. Będziesz musiał również wciąć kod, kiedy będziesz chciał utworzyć blok złożony z tylko 1 linii.
                example_code: |
                    Zobacz jak działa polecenie `{repeat}`:
                    ```
                    {repeat} 5 {times}
                        {print} 'Cześć wszystkim'
                        {print} 'Całość powtórzona 5 razy'
                    ```
                    Zobacz jak działa polecenie `{if}` oraz `{else}`:

                    ```
                    imie {is} {ask} 'Jak masz na imię?'
                    {if} imie {is} Karol
                        {print} 'Cześć Karol'
                        {print} 'Możesz pograć na swoim komputerze!'
                    {else}
                        {print} 'INTRUZ!'
                        {print} 'Nie możesz używać tego komputera!'
                    ```
            9:
                story_text: |
                    Na tym poziomie możesz używać nie tylko wielu linii z poleceniem `{if}` oraz `{repeat}`, ale możesz używać ich łącznie!
                    W tym przykładzie możesz zobaczyć polecenie `{if}` wewnątrz pętli/polecenia `{repeat}`. Można też odwrotnie. Dodatkowo polecenie `{if}` jest dozwolone w innym poleceniu `{if}`. Możesz też wykorzystać pętle/polecenie `{repeat}` w innej pętli/poleceniu `{repeat}`.
                    Spróbuj samemu!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        jedzenie= {ask} 'Co byś zjadła?'
                        {if} jedzenie {is} pizza
                            {print} 'super!'
                        {else}
                            {print} 'pizza jest lepsza'
                    ```
            10:
                story_text: "W tym poziomie nauczysz się nowego polecenia/pętli `{for}`. Z poleceniem/pętlą `{for}`możesz tworzyć listy i możesz używać wszystkich elementów listy. \n`{for}` tworzy blok kodu, jak `{repeat}` i `{if}`  więc wszystkie linie w bloku muszą być wcięte, a więc zaczynać się spacjami."
                example_code: |
                    ```
                    zwierzęta {is} pies, kot, blobfish
                    {for} zwierzę {in} zwierzęta
                      {print} 'Moim ulubionym zwierzakiem jest ' zwierzę
                    ```
            11:
                story_text: |
                    You have reached level 11, you're doing great! In the higher levels, Hedy is focussing more and more on teaching you the programming language Python.
                    In Python there is no `{repeat}` command, but there is a command that works like {repeat}. Are you curious to find out how to say `{repeat}` in Python language? Quickly go on to find out!
            12:
                story_text: |-
                    **Ułamki dziesiętne**
                    Do tej pory Hedy nie pozwalał na zapisywanie ułamków dziesiętnych np. 1.5, ale od tej pory możesz już wykorzystać ułamki dziesiętne w swoich kodach. Pamiętaj że w komputerze wykorzystujemy  `.` do oddzielenia części ułamkowej od całkowitej.
                example_code: |
                    ```
                    {print} 'Dwa i pół plus dwa i pół to...'
                    {print} 2.5 + 2.5
                    ```

                    {print} 2.5 + 2.5
            13:
                story_text: |-
                    Nauczysz się teraz o `{and}` i `{or}`! Jeśli chcesz sprawdzić dwa wyrażenia, nie musisz używać dwóch poleceń `{if}`, w zamian możesz użyć `{and}` i `{or}`.

                    Jeśli użyjesz `{and}`, oba wyrażenia, przed i po `{and}`, muszą być prawdziwie. Można też użyć `{or}`. W takim przypadku wystarczy że jedno z wyrażeń będzie prawdziwe.
                example_code: |
                    ```
                    imię = {ask} 'Jak masz na imię?'
                    wiek = {ask} 'Ile masz lat?'
                    {if} imię {is} 'Hedy' {and} wiek {is} 2
                        {print} 'Naprawdę jesteś Hedy!'
                    ```
            14:
                story_text: |
                    W tej lekcji nauczymy się zastosowania nowych operatorów logicznych, które możesz pamiętać z lekcji matematyki: operatory `<` i `>`.
                    Operator `<` sprawdza czy pierwsza liczba jest mniejsza od drugiej liczby, na przykład wiek `<` 12 sprawdza czy wiek jest mniejszy niż 12.
                    Jeżeli chcesz sprawdzić czy pierwsza liczba jest mniejsza lub równa drugiej liczbie możesz użyć operator `<=`, na przykład wiek `<=` 11, który sprawdza czy wiek jest mniejszy lub równy 11.
                    Operator `>` sprawdza czy pierwsza liczba jest większa od drugiej liczby, na przykład punkty `>` 10 sprawdza czy punkty są większe od 10.
                    Jeżeli chcesz sprawdzić, czy pierwsza liczba jest większa lub równa drugiej liczbie możesz użyć `>=`, na przykład punkty `>=` 11, który sprawdza czy punkty są większe lub równe 11.
                    Możesz użyć tych operatorów logicznych w `{if}`, na przykład:
                example_code: |
                    ```
                    wiek = {ask} 'Ile masz lat?'
                    {if} wiek > 12
                        {print} 'Masz więcej lat niż ja!'
                    ```

                    {if} wiek < 13
                        {print} 'Jesteś młodszy niż ja!'
                    {else}
                        {print} 'Jesteś starszy niż ja!'
            15:
                story_text: "Tym razem nauczymy się nowego typu pętli - pętla `{while}`! Ta pętla będzie działać tak długo, jak warunek w pętli jest prawdziwy, \nwięc nie zapomnij zmienić wartości warunku w pętli.\n\nPętla kodzie przykładowym będzie działać aż poprawna odpowiedź zostanie podana.\nPętla nigdy się nie skończy, gdy poprawna odpowiedź nie zostanie podana!"
                example_code: |
                    ```
                    odpowiedź = 0
                    {while} odpowiedź != 25
                        odpowiedź = {ask} 'Ile jest 5 razy 5?'
                    {print} 'Dobra odpowiedź'
                    ```
            16:
                story_text: |-
                    Tym razem stworzymy listy w sposób podobny do Pythona. Te listy mają kwadratowe nawiasy dookoła listy! Dodatkowo, zostawimy też cudzysłowie dookoła każdego elementu listy tak jak się nauczyliśmy w poprzednich poziomach.
                    Nawiasów kwadratowych używamy również do wybrania konkretnego elementu z listy. Polecenie `{at}` nie może już być używane.
                example_code: |
                    ```
                    przyjaciele = ['Ahmed', 'Bogdan', 'Cayden']
                    szczęśliwe_liczby = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} 'szczęśliwa liczba ' przyjaciele[i]
                        {print} 'to ' szczęśliwe_liczby[i]
                    ```
            17:
                story_text: |-
                    Teraz zmienimy nieco wcięcia. Za każdym razem, gdy potrzebujemy wciąć kod, potrzebujemy `:` w linii przed wcięciem.

                    Na tym poziomie możesz też użyć nowej komendy: `{elif}`. `{elif}` to połączenie `{else}` i `{if}` i potrzebujesz go, gdy chcesz zrobić 3 (lub więcej!) opcji.
                    Sprawdź to!
            18:
                story_text: |-
                    Dotarliśmy do prawdziwego kodu Pythona! Oznacza to, że od teraz musimy używać nawiasów z `{print}` i `{range}`.
                    Oznacza to również, że jeśli używasz angielskich wersji poleceń możesz używać kodu Hedy z tego poziomu w dowolnym środowisku Pythona. Jeśli jeszcze tego nie zrobiłeś, możesz przełączyć język w menu poleceń, aby to zrobić.

                    {print}('Mam na imię ', imię)
    dice:
        name: Kostka do gry
        default_save_name: Kostka do gry
        description: Stwórz własną kostkę do gry
        levels:
            3:
                story_text: |
                    Na tym poziomie posiadamy możliwość wyboru z listy. Dzięki temu możemy pozwolić komputerowi wybrać jedną ze stron kostki.
                    Zerknij na gry, które masz w swojej szafie w domu.
                    Czy są tam gry z (specjalną) kostką? Możesz ją również skopiować przy pomocy tego kodu.
                    Na przykład kostka do gry Gąsienice z liczbami od 1 do 5 i wężem na niej.

                    ![Kostka do gry Gąsienice z liczbami od 1 do 5 i gąsienicą na niej](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    wybory {is} 1, 2, 3, 4, 5, dżdżownica
                    {print} Wyrzucono _ {at} {random}
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Kości w przykładzie powyżej są kośćmi do specjalnej gry. Czy możesz zrobić normalną kość do gry?
                    Lub inne specjalne kości z innej gry?
                example_code_2: |
                    ```
                    wybór {is} _
                    ```
            4:
                story_text: |
                    W tym poziomie możesz stworzyć kostki do gry. Ale tym razem spróbuj zrobić to samodzielnie, bez przykładowego kodu!

                    ### Ćwiczenie
                    Stwórz własne kostki do gry.
                    Wskazówka: Jeśli nie masz pojęcia jak stworzyć kostki do gry, spójrz na te z poprzedniego poziomu, ale nie zapomnij dodać cudzysłowów.
            5:
                story_text: |
                    Teraz dodamy polecenia `{if}` oraz `{else}` do naszych kości!

                    ### Ćwiczenie
                    Uzupełnij kod przykładowy tak, aby kod napisał „Możesz przestać rzucać” gdy wyrzucona zostanie gąsienica. W przypadku gdy zostanie wyrzucone coś innego powinien napisać „Musisz rzucić ponownie”.
                    **Dodatkowo** Może chcesz stworzyć kostkę do gry z całkowicie innej gry? To też jest w porządku! W takim razie wymyśl swoją własną reakcję. Na przykład „tak” dla 6 i „szkoda” dla czegoś innego.
                example_code: |
                    ```
                    wybory {is} 1, 2, 3, 4, 5, dżdżownica
                    rzut {is} wybory {at} {random}
                    {print} 'wyrzucono ' rzut
                    _ rzut {is} dżdżownica {print} 'Możesz przestać rzucać.'
                    _ {print} 'Musisz rzucić jeszcze raz!'
                    ```
            6:
                story_text: |
                    Na tym poziomie możesz zrobić kostkę do gry z Gąsienicą i nawet policzyć ile punktów wyrzuciłaś w sumie.
                    Wiedząc, że Gąsienica jest warta 5 punktów możesz teraz policzyć ile punktów wyrzuciłaś w sumie.
                    Ten kod policzy ilość punktów jednek kostki:

                    ### Ćwiczenie
                    Czy potrafisz napisać kod, który policzy sumę punkt na 8 kostkach? Aby to zrobić musisz skopiować kilka linijek kodu.
                example_code: |
                    ```
                    wybory = 1, 2, 3, 4, 5, gąsienica
                    punkty = 0
                    rzut = wybory {at} {random}
                    {print} 'wyrzuciłeś' rzut
                    {if} rzut {is} gąsienica punkty = punkty + 5 {else} punkty = punkty + rzut
                    {print} 'suma punktów to ' punkty
                    ```
                example_code_2: |
                    Czy udało ci się policzyć wynik dla 8 kostek? Wymagało to sporo kopiowania i wklejania, prawda? W poziomie 7 ułatwimy to!
            7:
                story_text: |
                    Na poziomie 5 już mogłeś zrobić kostkę do gry. Przy pomocy polecenia `{repeat}` możesz łatwo rzucić ręką pełną kostek.

                    ### Ćwiczenie
                    Spróbuj ukończyć przykładowy kod! **Dodatkowo** Zastanów się nad grą, którą znasz, i która wymaga kostki i zaprogramuj ją przy pomocy polecenia `{repeat}`.
                example_code: |
                    ```
                    wybory = 1, 2, 3, 4, 5, 6
                    _ _ _ _ _ _ _
                    ```
            10:
                story_text: |
                    Czy wszyscy zbyt długo rzucają kostką? Na tym poziomie możesz pozwolić Hedy rzucić wszystkimi kośćmi naraz!

                    ### Ćwiczenie
                    Zmień imiona na imiona swoich przyjaciół lub rodziny i dokończ kod, aby każdy z nich rzucił.
                example_code: |
                    ```
                    gracze = Ania, Jasiek, Kasia
                    wybory = 1, 2, 3, 4, 5, 6
                    _ _ _ _
                        {print} gracz ' wyrzucił ' wybory {at} {random}
                        {sleep}
                    ```
            15:
                story_text: |
                    ### Exercise
                    In this level you can create a little game in which you'll have to throw 6 as fast as possible.
                    We have started the code, it's up to you to get the game to work!

                    Firstly, add a `{while}` loop that checks if 6 has been thrown or not.
                    As long as you haven't thrown 6 already, throw the dice on a random number.
                    Print what the player has thrown.
                    Add a try to the amount of tries
                    Wait a second before you throw again, or - in case you've thrown a 6 - before the game ends.
                example_code: |
                    ```
                    options = 1, 2, 3, 4, 5, 6
                    {print} 'Throw 6 as fast as you can!'
                    thrown = 0
                    tries = 0
                    _
                    _
                    _
                    _
                    _
                    {print} 'Yes! You have thrown 6 in ' tries ' tries.'
                    ```
    dishes:
        name: Zmywanie?
        default_save_name: Zmywanie
        description: Użyj komputera, aby sprawdzić, kto zmywa naczynia
        levels:
            3:
                story_text: |
                    Czy często w domu kłócisz się o to, kto powinien dziś umyć naczynia lub wyczyścić kuwetę?
                    Możesz pozwolić komputerowi dokonać bardzo sprawiedliwego wyboru. Możesz to zaprogramować na tym poziomie!
                example_code: |
                    ```
                    ludzie {is} mama, tata, Emma, Sofia
                    {print} ludzie {at} {random} muszą zmywać naczynia
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Stwórz własną wersję programu zmywarki. Najpierw sporządź listę członków swojej rodziny.
                    Następnie pomyśl o zadaniu do wykonania i pozwól komputerowi zdecydować, kto ma wykonać zadanie za pomocą polecenia `{at} {random}`.

                    **Dodatkowo** Nie masz ochoty samodzielnie zmywać naczyń? Zhakuj program, usuwając swoją nazwę z listy za pomocą polecenia `{remove}` `{from}`.
            4:
                story_text: |
                    Korzystając z cudzysłowów możesz sprawić, że twój program o zmywaniu naczyń będzie jeszcze lepszy.

                    Najpierw uzupełnij puste miejsca symbolami lub poleceniami, tak by przykładowy program zaczął działać.
                    Udało Ci się? Super! Teraz skopiuj swój własny kod z poprzedniego poziomu i spraw by zaczął działać w tym poziomie dodając cudzysłowy w odpowiednich miejscach.
                example_code: |
                    ```
                    ludzie {is} mama, tata, Emma, Sophie
                    {print} _ naczynia są myte przez _
                    {sleep}
                    {print} ludzie {at} _
                    ```
            5:
                story_text: |
                    Dzięki poleceniu `{if}` możesz mieć teraz trochę więcej zabawy z wyborami w twoich programach. Możesz teraz sprawić, by twój program reagował na wybory podjęte przez komputer.
                    ### Ćwiczenie
                    Czy potrafisz dokończyć program, tak by wyświetlał "o, nie..." gdy jest Twoja kolej, a w przeciwnym przypadku wyświetlał „tak!”?
                    Nie zapomnij cudzysłowów!
                example_code: |
                    ```
                    ludzie {is} mama, tata, Agnieszka, Zosia
                    zmywarka {is} ludzie {at} {random}
                    _ kto_zmywa {is} Zosia {print} _ o, nie... Moja kolej zmywania naczyń _
                    _ {print} 'całe szczęście ' _ ' myje naczynia'
                    ````
            6:
                story_text: |
                    Jak często wszyscy będą zmywać naczynia? Czy to jest sprawiedliwe? Możesz to policzyć na tym poziomie.
                example_code: |
                    ```
                    ludzie = mama, tata, Emma, Sophie
                    emma_myła = 0
                    zmywa = ludzie {at} {random}
                    {print} 'Teraz zmywa ' zmywa
                    {if} zmywa {is} Emma emma_myła = emma_myła + 1
                    {print} 'Emma będzie zmywać naczynia w tym tygodniu ' emma_myła ' razy'
                    ```

                    Teraz możesz skopiować linie od 3 do 5 kilka razy (np. 7 razy dla całego tygodnia), aby ponownie obliczyć dla całego tygodnia.
                    Czy robisz kod dla całego tygodnia?
                story_text_2: |
                    W poprzednim programie jakbyś był bardzo pechowy to program mógłby Cię wybrać do mycia naczyń przez cały tydzien, a to nie jest sprawiedliwe!
                    Żeby stworzyć bardziej sprawiedliwy system możesz użyc polecenia `{remove}` żeby usunąć osobę z listy zaraz po wybraniu jej do mycia naczyń. Ty sposobem ta osoba już nie zostanie wybrana do mycia naczyń zanim wszyscy nie mieli okazji umyć naczyń.

                    Poniedziałek i wtorek zostały przygotowane dla Ciebie. Czy potrafisz dodać resztę tygodnia?
                    Czy potrafisz również wymyślić co zrobić gdy lista jest pusta?
                example_code_2: |
                    ```
                    ludzie = mama, tata, Agnieszka, ty
                    kto_zmywa = ludzie {at} {random}
                    {print} 'Naczynia w poniedziałek myje: ' kto_zmywa
                    {remove} kto_zmywa {from} ludzie
                    kto_zmywa = ludzie {at} {random}
                    {print} 'Naczynia we wtorek myje: ' kto_zmywa
                    {remove} kto_zmywa {from} ludzie
                    kto_zmywa = ludzie {at} {random}
                    ```
            7:
                story_text: |
                    Przy użyciu komendy `{repeat}` możesz powtórzyć fragmenty kodu. Możesz to wykorzystać do ustalenia kto będzie zmywał naczynia przez kilka dni!
                    ### Ćwiczenie
                    Użyj komendy `{repeat}` aby wylosować kto będzie mył naczynia przez cały tydzień. Każde puste miejsce musi być wypełnione jedną komendą lub liczbą!
                    **(dodatkowe ćwiczenie)** Czy możesz wymyślić inne prace domowe? Przygotuj kod, który wylosuje trzy prace domowe. Nie zapomnij napisać, o co chodzi!
                example_code: |
                    ```
                    ludzie = mamy, taty, Emmy, Sophie
                    {repeat} _ _ {print} 'Zmywanie naczyń jest zadaniem ' _ _ _
                    ```
            10:
                story_text: |
                    Na tym poziomie w prosty sposób ułożysz plan na cały tydzień!

                    ### Ćwiczenie
                    Dodaj drugie zadanie, takie jak odkurzanie lub sprzątanie, i upewnij się, że jest ono również podzielone na cały tydzień.
                    <br> **Dodatkowo** Program nie jest sprawiedliwy, można mieć pecha i zmywać cały tydzień. Jak uczynić program bardziej sprawiedliwym?
                example_code: |
                    ```
                    dni = Poniedziałek, Wtorek, Środa, Czwartek, Piątek, Sobota, Niedziela
                    imiona = mama, tata, Agnieszka, Zosia
                    {for} dzień {in} dni
                        {print} imiona {at} {random} ' myje naczynia w ' dzień
                    ```
    elif_command:
        name: '{elif}'
        default_save_name: elif
        description: elif
        levels:
            17:
                story_text: |
                    In this level you can also use a new command: `{elif}`. `{elif}` is a combination of the keywords `{else}` and `{if}` and you need it when you want to make 3 (or more!) options.
                    Check it out!
                example_code: |
                    ```
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
                    ```
    for_command:
        name: '{for}'
        default_save_name: for
        description: for command
        levels:
            10:
                story_text: |-
                    ## For
                    In this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.
                    `{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with 4 spaces.
                example_code: |
                    ```
                    animals = dog, cat, blobfish
                    {for} animal {in} animals
                        {print} 'I love ' animal
                    ```
                story_text_2: |
                    ### Exercise
                    Finish this code by adding `{for} action {in} actions` to line 2.
                example_code_2: |
                    ```
                    actions = clap your hands, stomp your feet, shout Hurray!
                    _
                        {repeat} 2 {times}
                            {print} 'If youre happy and you know it, ' action
                            {sleep} 2
                        {print} 'If youre happy and you know it, and you really want to show it'
                        {print} 'If youre happy and you know it, ' action
                        {sleep} 3
                    ```
            11:
                story_text: |-
                    Na tym poziomie dodajemy nową formę `{for}`. Na wcześniejszych poziomach używaliśmy `{for}` z listą, ale możemy też używać `{for}` z liczbami.
                    Robimy to, dodając nazwę zmiennej, następnie `{in}` `{range}`. Następnie wpisujemy liczbę, od której rozpoczniemy, `{to}` i liczbę, na której zakończymy.

                    Wypróbuj przykład, aby zobaczyć, co się stanie! Pamiętaj, na tym poziomie będziesz musiał użyć wcięć w wierszach poniżej instrukcji `{for}`.
                example_code: |
                    ```
                    {for} counter {in} {range} 1 {to} 10
                        {print} counter
                    {print} 'Ready or not. Here I come!'
                    ```
            17:
                story_text: |
                    Now we are going to change indentation a little bit. Every time that we need an indentation, we need `:` at the line before the indentation.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Ready or not, here I come!'
                    ```
            18:
                story_text: |
                    Lastly, we'll turn `{for} i {in} {range} 1 to 5` into real Python code, like this:
                example_code: |
                    ```
                    {for} i {in} {range}(1,5):
                        {print} (i)
                    ```
    fortune:
        name: Wróżka
        default_save_name: Wróżka
        description: Niech Hedy przewidzi przyszłość
        levels:
            1:
                story_text: |
                    Czy byłeś kiedyś w wesołym miasteczku i wróżka przepowiedziała Ci przyszłość? Albo czy kiedykolwiek grałeś magiczną ósemką?
                    Wtedy prawdopodobnie wiesz, że tak naprawdę nie mogą one przewidzieć twojej przyszłości, ale nadal jest to zabawne!

                    W najbliższych poziomach możesz nauczyć się jak stworzyć własną maszynę do wróżenia!
                    W poziomie 1 możesz zacząć łatwo, pozwalając Hedy przedstawić się jako wróżka i pozwolić jej odpowiedzieć {echo} odpowiedziami graczy.
                    Na przykład tak:
                example_code: |
                    ```
                    _ Witam, jestem Hedy, wróżka!
                    _ Kim jesteś?
                    _ Pozwól mi spojrzeć w moją kryształową kulę
                    _ Widzę... Widzę...
                    _ Twoje imię to
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Skopiuj przykładowy kod na ekran wprowadzania i wypełnij puste pola, aby kod działał.
                    **Dodatkowo** Zmień kod i pozwól wróżbitce nie tylko przewidzieć Twoje imię, ale także wiek, ulubioną drużynę sportową lub coś innego o sobie.
            3:
                story_text: |
                    Na poprzednich poziomach stworzyłeś swoją pierwszą maszynę do wróżenia, ale Hedy nie mogła niczego przewidzieć, tylko wykonać {echo}.
                    Na tym poziomie możesz użyć zmiennej i polecenia `{at} {random}`, aby Hedy naprawdę wybrała odpowiedź. Zobacz ten kod dla przykładu:
                example_code: "W tym przykładzie gracz może {ask} Hedy pytanie typu \"tak-nie\", a Hedy wybierze losowo odpowiedź za ciebie.\n```\n{print} Jestem wróżka Hedy!\npytanie {is} {ask} Co chcesz wiedzieć?\n{print} A więc chcesz wiedzieć czy: pytanie \nodpowiedzi {is} tak, nie, może\n{print} Moja szklana kula mówi że...\n{sleep} 2\n{print} odpowiedzi  {at} {random}\n```\n"
                story_text_2: |
                    ### Ćwiczenie
                    Teraz Hedy może odpowiedzieć tylko tak, nie lub może. Czy możesz dać Hedy więcej opcji odpowiedzi, np. 'zdecydowanie' lub 'zapytaj ponownie'.
            4:
                story_text: |
                    ### Exercise
                    We have removed all the quotation marks from this example code, can you add them in all the right places?

                    ### Exercise 2
                    Go back to the previous level and copy your fortune teller code. Make the code work in this level by adding quotation marks in the right spots.
                example_code: |
                    ```
                    _ Add the quotation marks to this code _
                    {print} Im Hedy the fortune teller!
                    question {is} {ask} What do you want to know?
                    {print} This is your question:  question
                    answers {is} yes, no, maybe
                    {print} My crystal ball says...
                    {sleep} 2
                    {print} answers {at} {random}
                    ```
            5:
                story_text: |
                    In this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!
                    By using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.
                    Check out this example to find out how.
                example_code: |
                    ```
                    {print} 'Jestem wróżka Hedy'
                    {print} 'Mogę przewidzie czy jutro wygrasz loterię!'
                    osoba {is} {ask} 'Kim jesteś?'
                    {if} osoba {is} Hedy {print} 'Zdecydowanie wygrasz!🤩' {else} {print} 'Złe wieści! Ktoś inny wygra!😭'
                    ```
            6:
                story_text: |
                    Na tym poziomie możesz używać matematyki w swoich przewidywaniach jako wróżbita. Pozwala to na tworzenie (zwariowanych) formuł do obliczania przyszłości.
                    Na przykład możesz obliczyć, w jaki sposób zdobędziesz bogactwo lub ile będziesz mieć dzieci, gdy dorośniesz.



                    ### Ćwiczenie
                    Czy możesz wymyślić własną (zwariowaną) maszynę do wróżenia?
                example_code: "```\n{print} 'Jestem Hedy - wróżka!'\n{print} 'Mogę przewidzieć, ile dzieci będziesz miał, gdy dorośniesz!'\nwiek = {ask} 'Ile masz lat?'\nrodzeństwo = {ask} 'Ile masz rodzeństwa?'\nwzrost = {ask} 'Ile masz wzrostu w centymetrach?'\nliczba_dzieci = wzrost / wiek\nliczba_dzieci = liczba_dzieci - rodzeństwo\n{print} 'Będziesz miał...'\n{sleep}\n{print} liczba_dzieci ' dzieci!'\n```\n\nJeśli poprzedni przykład nie był dla Ciebie wystarczająco zwariowany, spójrz na ten!\n```\n{print} 'Jestem Hedy - zwariowany wróżbita!'\n{print} 'Przewiduję, jak mądry jesteś!'\nnożna = {ask} 'W skali 1-10 jak bardzo kochasz piłkę nożną?'\nbanany = {ask} 'Ile bananów zjadłeś w tym tygodniu?'\nhigiena = {ask} 'Ile razy dzisiaj umyłaś ręce?'\nwynik = banany + higiena\nwynik = wynik * nożna \n{print} 'Jesteś ' nożna ' procentowo inteligentny.'\n```\n"
            7:
                story_text: |
                    Na tym poziomie możesz użyć komendy `{repeat}`, aby twoja maszyna przepowiedziała kilka losów jednocześnie.
                example_code: |
                    ```
                    {print} 'Jestem Hedy - wróżka!'
                    {print} 'Możesz zadać 3 pytania!'
                    {repeat} 3 {times} pytanie = {ask} 'Co chcesz wiedzieć?'
                    odpowiedź = tak, nie, może
                    {repeat} 3 {times} {print} 'Moja kryształowa kula mówi...' odpowiedź {at} {random}
                    ```
            8:
                story_text: |
                    Na poprzednich poziomach nauczyłeś się, jak użyć `{repeat}`, aby wróżka odpowiedziała na 3 pytania z rzędu, ale mieliśmy problem z wydrukowaniem pytań.
                    Teraz ten problem został rozwiązany dzięki nowemu sposobowi używania polecenia `{repeat}`.
                    W następnym przykładzie możesz poprosić wróżkę, aby zadała 3 pytania, a także je wydrukowała!

                    ### Ćwiczenie
                    Czy potrafisz wpisać odpowiednie polecenie w puste miejsca?
                example_code: |
                    ```
                    {print} 'Jestem Hedy - wróżka!'
                    {print} 'Możesz zadać mi 3 pytania'
                    odpowiedzi = tak, nie, może
                    _ _ _
                       pytanie = {ask} 'Co chcesz wiedzieć?'
                       {print} pytanie
                       {sleep}
                       {print} 'Moja kryształowa kula mówi...' odpowiedzi {at} {random}
                    ```
            10:
                story_text: |
                    Na tym poziomie nauczysz się programować grę MASH (dwór, mieszkanie, chałupa, dom). W tej grze możesz przewidzieć  jak będzie wyglądać przyszłość dla wszystkich graczy jednocześnie.

                    ### Ćwiczenie 1
                    Dodaj dwie nazwy do listy i zobacz, jak zmienia się wynik działania programu po jego uruchomieniu.
                example_code: |
                    ```
                    houses = mansion, apartment, shack, house
                    loves = nobody, a royal, their neighbour, their true love
                    pets = dog, cat, elephant
                    names = Jenna, Ryan, Jim
                    {for} name {in} names
                        {print} name ' lives in a ' houses {at} {random}
                        {print} name ' will marry ' loves {at} {random}
                        {print} name ' will get a ' pets {at} {random} ' as their pet.'
                        {sleep}
                    ```
            12:
                story_text: |
                    Na tym poziomie możesz tworzyć los wieloma słowami. Czy możesz dodać więcej różnych fortun do listy?
                example_code: |
                    ```
                    losy = 'poślizgniesz się na skórce od banana', _
                    {print} 'Zajrzę do mojej kryształowej kuli w poszukiwaniu twojej przyszłości.'
                    {print} 'Widzę... Widzę...'
                    {sleep}
                    {print} losy {at} {random}
                    ```
    functions:
        name: functions
        default_save_name: functions
        description: functions
        levels:
            12:
                story_text: |
                    In this level you'll learn how to use **functions**. A function is a block of code you can easily use multiple times. Using functions helps us organize pieces of code that we can use again and again.
                    To create a function, use `{define}` and give the function a name. Then put all the lines you want in the function in a indented block under the `{define}` line.
                    Leave one empty line in your code to make it look nice and neat. Great job! You have created a function!

                    Now, whenever we need that block of code, we just use <code>{call}</code> with the function's name to call it up! We don't have to type that block of code again.

                    Check out this example code of a game of Twister. The function 'turn' contains a block of code that chooses which limb should go where.

                    ### Exercise
                    Finish this code by setting the 2 variables chosen_limb and chosen_color.
                    Then, choose how many times you want to call the function to give the twister spinner a spin.

                    ### Exercise 2
                    Improve your code by adding a variable called 'people'. Use the variable to give all the players their own command in the game.
                    For example: 'Ahmed, right hand on green' or 'Jessica, left foot on yellow'.
                example_code: |
                    ```
                    sides = 'left', 'right'
                    limbs = 'hand', 'foot'
                    colors = 'red', 'blue', 'green', 'yellow'

                    {define} turn
                        chosen_side = sides {at} {random}
                        chosen_limb = limbs _
                        chosen_color = colors _
                        {print} chosen_side ' ' chosen_limb ' on ' chosen_color

                    {print} 'Lets play a game of Twister!'
                    {for} i {in} {range} 1 to _
                        {call} turn
                        {sleep} 2
                    ```
            13:
                story_text: |
                    Now that you've learned how to use functions, you'll learn how to use a function with an argument.
                    An **argument** is a variable that is used within a function. It is not used outside the function.

                    For example in this code we've programmed the first verse of the song 'My Bonnie is over the ocean'.
                    In this example code the argument `place` is used. Place is a variable that is only used in the function, so an argument.
                    To use `place` we have programmed the line `define song with place`.
                    When the function is called, computer will replace the argument `place`, with the piece of text after `call song with`.

                    ### Exercise
                    The next verse of this song goes:

                    Last night as I lay on my pillow
                    Last night as I lay on my bed
                    Last night as I lay on my pillow
                    I dreamed that my Bonnie is dead

                    Can you program this verse in the same way as the example?
                example_code: |
                    ```
                    {define} song {with} place
                        {print} 'My Bonnie is over the ' place

                    {call} song {with} 'ocean'
                    {call} song {with} 'sea'
                    {call} song {with} 'ocean'
                    ```
            14:
                story_text: |
                    In the previous levels you have learned to create functions and use arguments with them. Another great use of a function is to let it calculate something for you.
                    You can give the function a calculation and it will give you the answer of the calculation. This answer is called a **return value**.

                    For example, in this code the function calculate_new_price will calculate the new price of any item. It will give you the new price as a return value.

                    ### Exercise
                    Finish this code. We have already made the variable new_price for you, you only need to set it.
                    You should finish the line of code by calling the function that calculates the new price.
                example_code: |
                    ```
                    {define} calculate_new_price {with} amount, percentage
                        percentage = percentage / 100
                        discount_amount = amount * percentage
                        return amount - discount_amount

                    old_price = {ask} 'How much is on the price tag?'
                    discount = {ask} 'What percentage is the discount?'

                    new_price = _ calculate_new_price {with} old_price, _
                    {print} 'The new price is ' new_price ' dollar'
                    ```
            18:
                story_text: |
                    Let's make functions the Pythons way! To define a function, we no longer use:

                    `{define} name_function {with} argument_1, argument_2:`

                    but we use:

                    `{def} name_function(argument_1, argument_2):`.


                    If you don't want to use arguments, you just leave the space between the parantheses empty.
                    To call a function, we don't need the `{call}` command anymore. You just type the name of the function.
                example_code: |
                    ```
                    {def} calculate_score(answer, correct_answer):
                        {if} answer == correct_answer:
                            score = 1
                        {elif} answer == '?':
                            score = 0
                        {else}:
                            score = -1
                        {return} score

                    answer = {input} ('Where can you find the Eiffel Tower?')
                    correct_answer = 'Paris'
                    score = calculate_score(answer, correct_answer)
                    {print} ('Your score is... ', score)
                    ```
    guess_my_number:
        name: Guess my number
        default_save_name: guess my number
        description: guess my number
        levels:
            14:
                story_text: |
                    In this level you can program the game 'Guess my number'

                    ### Exercise
                    Fill in the correct symbols on the blanks to get the game to work.
                example_code: |
                    ```
                    {print} 'Guess my number'
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number = numbers {at} {random}
                    game = 'on'
                    {for} i {in} {range} 1 {to} 10
                        {if} game == 'on'
                            guess = {ask} 'Which number do you think it is?'
                            {if} guess _ number
                                {print} 'Lower!'
                            {if} guess _ number
                                {print} 'Higher!'
                            {if} guess _ number
                                {print} 'You win!'
                                game = 'over'
                    ```
    hangman:
        name: Hangman
        default_save_name: Hangman
        description: Guess the word
        levels:
            17:
                story_text: |
                    In this adventure we program a game of hangman. First we make some preparations, then we program the game and in the third part we add a drawing with the turtle.

                    ### Exercise
                    ***Set the variables*** In this game of hangman, Player 1 chooses an answer and Player 2 has to guess the letters in this answer.
                    To let the computer know all the letters in the word, we will turn the answer into a list of letters. We also do this with the guesses Player 2 makes.
                    We will start the game with 2 empty lists. We have made an empty list for the variable answer for you. Now make an empty list for guessed_letters as well.
                    Then we fill in how many mistakes were made. At the start of the game, this should be 0.
                    The variable `amount_letters` tells us how many letters are in the answer. Ask Player 1 to tell us how many letters their word has.
                    Lastly we tell the computer if the game is over. We use the variable `game_over` and set it to `False`.

                    ***Choosing the answer*** We want Player 1 to be able to choose the answer. We'll ask them, as many times as necessary, what the next letter is.
                    Then we add that letter to the answer. Lastly, we add an empty _ to the list of guessed letters, so we get as many _s as there are letters in the answer.

                    ***Player 2's turn***
                    Tell Player 2 its their turn. Then tell Player 2 how many letters there are in the answer. Finally, print the list of `guessed_letters`.

                    ***Go to the next tab*** Now that all the starting variables are set, we can start programming the game itself. Check out the next tab to learn how!
                example_code: |
                    ```
                    print 'Hangman!'

                    # Set the variables
                    answer = []
                    guessed_letters = _
                    mistakes_made = _
                    amount_letters = {ask} _
                    _ = 'False'

                    # Choosing the answer
                    {for} _
                        letter = {ask} 'Player 1, what is letter ' i '?'
                        _
                        {add} '_' {to} _

                    # Player 2 turn
                    print _
                    print _
                    print guessed_letters
                    ```
    hangman_2:
        name: Hangman 2
        default_save_name: Hangman_2
        description: Hangman 2
        levels:
            17:
                story_text: |
                    Now it's time to program the hangman game.

                    ### Exercise

                    ***Paste your code*** Copy your code from the previous tab and paste the code in the programming field.

                    ***The game*** This games continues playing until Player 2 is game over. Fill in the while command accordingly. Now, Player 2 is allowed to guess a letter, so ask Player 2 to guess a letter.
                    We need to check if their answer is correct, so check if their `guess` is (somewhere) in the (list) `answer`. Then we let the computer figure out which of the letter(s) is the guess. We have already programmed that part for you.
                    Next we want to compliment the player for finding a correct letter and we want to print the list `guessed_letters`, so the player can see their progress.

                    The next part we're going to program is what happens when the player has guessed all of the letters. So if their list of `guessed_letters` is the same as our list `answer`.
                    If the lists are the same, congratulate Player 2 with their victory and set the variable `game_over` to `True`.

                    Next we'll program what happens when Player 2 guesses wrong (so the `{else}` command). First, tell the player that their guess was wrong. Then increase the `mistakes_made` variable by 1.

                    For the last part we'll program what happens when Player 2 has made 10 mistakes. We'll print that Player 1 has won the game. Then we'll print the correct answer. And finally, we'll set our `game_over` variable to `True`, so the game stops.

                    ***Go to the next tab*** Amazing work! Your game is playable, but wouldn't it be fun if the hangman was actually drawn when Player 2 makes a mistake..?
                example_code: |
                    ```
                    # Paste your code here

                    # The game
                    {while} game_over _
                        guess = _
                        {if} _
                            {for} i {in} {range} 1 {to} amount_letters:
                                if answer[i] == guess:
                                    guessed_letters[i] = guess
                            {print} _
                            {if} guessed_letters == _:
                                {print} _
                                game_over = _
                        {else}:
                            {print} _
                            mistakes_made _
                            {if} _ == 10:
                                {print} _
                                {print} _
                                _
                    ```
    hangman_3:
        name: Hangman 3
        default_save_name: Hangman_3
        description: Hangman 3
        levels:
            17:
                story_text: |
                    In a game of hangman the mistakes are shown by drawing a part of the hangman each time a mistake has been made.
                    We now add those drawings with our turtle!

                    ### Exercise
                    ***Create a function that draws the hangman*** Create a function that draws the hangman in 10 steps. We have already made step 1 for you.

                    ***Test the function*** Test the function by calling the function with 10. If you are happy with the function, remove the line that calls the function for now. We will call the function when the player makes a mistake.

                    ***Paste your hangman game under your function*** Go back to the previous tab and copy your hangman game. Paste the game underneath your function.

                    ***Call the function when the player makes a mistake*** Under the line `mistakes_made = mistakes_made + 1` we will call the function. We want the turtle to take the same amount of steps as the player has made mistakes, so we call the function with `mistakes_made` as argument.

                    ***Enjoy your game!***
                    <div class="w-full flex flex-row gap-2">
                        The hangman could look like this <img src="https://github.com/hedyorg/hedy/assets/80678586/d385b691-5701-4342-b5d9-dfae1589c129" width="100">
                    </div>
                example_code: |
                    ```
                    # Create a function that draws the hangman
                    {define} draw_hangman {with} step:
                        {if} step == 1:
                            {color} white
                            {forward} -100
                            {turn} 90
                            {forward} -50
                            {color} black
                            {forward} 100
                            {forward} -50

                        {if} step == 2:
                            _
                    # Paste your hangman game here

                    ```
    harry_potter:
        name: Harry Potter
        default_save_name: Harry Potter
        description: Harry Potter adventures
        levels:
            10:
                story_text: |
                    ### Ćwiczenie
                    We can also make a Harry Potter themed fortune teller. Fill in blanks such that 9 lines are printed.
                    **Extra** Change the theme of the fortune teller into something else, such as your favorite book, film or tv show.
                example_code: |
                    ```
                    houses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    subjects = potions, defence against the dark arts, charms, transfiguration
                    fears = Voldemort, spiders, failing your OWL test
                    names = Harry, Ron, Hermione
                    _
                    _ {print} name ' is placed in ' houses {at} {random}
                    _ {print} name ' is great at ' subjects {at} {random}
                    _ {print} name 's greatest fear is ' fears {at} {random}
                    ```
    haunted:
        name: Nawiedzony dom
        default_save_name: Nawiedzony dom
        description: Ucieknij z nawiedzonego domu
        levels:
            1:
                story_text: |
                    W tej przygodzie pracujesz nad stworzeniem gry, w której musisz uciec z nawiedzonego domu wybierając właściwe drzwi.
                    Jeśli wybierzesz właściwe drzwi, przeżyjesz, ale jeśli nie, straszny potwór może...

                    W poziomie 1 zaczynamy naszą grę w nawiedzony dom przez wymyślenie strasznej historii i zapytania gracza jakiego potwora zobaczą w nawiedzonym domu.
                example_code: |
                    ```
                    {print} Jak się tu dostałem?
                    {print} Pamiętam, jak przyjaciel powiedział mi, że mam wejść do starej rezydencji...
                    {print} i nagle wszystko stało się czarne.
                    {print}  Ale jak wylądowałem na podłodze...?
                    {print} Strasznie boli mnie głowa, jakby ktoś walnął mnie kijem!
                    {print} Co to za dźwięk?
                    {print} O nie! Chyba nie jestem sam w tym domu!
                    {print} Muszę się stąd wydostać!
                    {print} Przede mną są 3 drzwi...
                    {ask} Które drzwi powinienem wybrać?
                    {echo} Wybieram drzwi
                    {print} ...?
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Skopiuj przykładowy kod na ekran wprowadzania, klikając żółty przycisk.
                    Teraz zakończ historię, dodając co najmniej 5 linii kodu.
                    Pamiętaj, aby każdą linię kodów rozpocząć od komendy `{print}`.
            2:
                story_text: |
                    W tym nawiedzonym domu możesz wybierać swoje potwory za pomocą emotikonów. Oczywiście możesz też użyć słów.
                example_code: |
                    ```
                    potwór_1 {is} 👻
                    potwór_2 {is} 🤡
                    potwór_3 {is} 👶
                    {print} Wchodzisz do nawiedzonego domu..
                    {print} Nagle widzisz potwór_1
                    {print} Uciekasz do innego pokoju, ale potwór_2 czeka na ciebie!
                    {print} O nie! Szybko idź do kuchni.
                    {print} Ale jak wchodzisz zaatakował ciebie potwór_3!
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    W powyższym przykładzie potwory są z góry określone. Więc za każdym razem, gdy uruchamiasz swój kod, dane wyjściowe są takie same.
                    Czy możesz dodać polecenia `{ask}`, aby uczynić nawiedzony dom interaktywnym i sprawić, by gracze wybierali napotkane potwory?
                example_code_2: |
                    ```
                    potwór_1 {is} _
                    potwór_2 {is} _
                    potwór_3 {is} _
                    {print} Wchodzisz do nawiedzonego domu..
                    {print} Nagle widzisz potwór_1
                    {print} Uciekasz do innego pokoju, ale potwór_2 czeka na ciebie!
                    {print} O nie! Szybko idź do kuchni.
                    {print} Ale jak wchodzisz zaatakował ciebie potwór_3!
                    ```
            3:
                story_text: |
                    Na poprzednich poziomach zrobiłeś wprowadzenie do gry w nawiedzony dom, ale jak mogłeś zauważyć, historia zawsze miała straszny koniec.
                    Na tym poziomie możesz uczynić swoją historię bardziej interaktywną, zmieniając wynik gry; czasami zostaniesz zjedzony, czasami uciekniesz!
                    Niech Hedy decyduje losowo!
                example_code: |
                    ```
                    _ Escape from the haunted house!
                    _ There are 3 doors in front of you...
                    _ _ _ Which door do you choose?
                    _ You picked door ... choice
                    monsters _ a zombie, a vampire, NOTHING YOUVE ESCAPED
                    _ You see...
                    {sleep}
                    _ _ _ _
                    ```
            4:
                story_text: |
                    Na tym poziomie nauczysz się używać cudzysłowów w swoich grach.
                    Czy potrafisz zmienić swój Nawiedzony Dom, aby był zgodny z poziomem 4?
                example_code: |
                    ```
                    {print} _ Uciekaj z nawiedzonego domu! _
                    {print} _ Przed tobą znajduje się 3 drzwi... _
                    wybór {is} {ask} _ Które drzwi wybierzesz? _
                    {print} Wybrałeś drzwi ... _ wybór
                    potwory {is} zombie, wampir, UCIEKŁEŚ
                    {print} Widzisz... _
                    {sleep}
                    {print} potwory {at} {random}
                     ```
            5:
                story_text: |
                    Aż do tego poziomu gra w nawiedzonym domu zawsze prosiła gracza o wybranie drzwi, ale jak zapewne zauważyłeś, tak naprawdę nie musieli odpowiadać poprawnie.
                    Jeśli gracz podał całkowicie losową odpowiedź, gra nadal działała, a gracz mógł nawet wygrać (mimo że nie wybrał drzwi).
                    Na tym poziomie możesz wygrać grę tylko wybierając te same drzwi, które losowo wybrała Hedy.

                    ### Ćwiczenie
                    Czy potrafisz znaleźć 4 brakujące słowa, aby uzupełnić kod?
                example_code: "```\n{print} 'Uciekaj z nawiedzonego domu!'\n{print} 'Przed tobą znajdują się 3 drzwi...'\ndrzwi {is} 1, 2, 3\npotwory {is} wilkołak, mumia, wampir, zombie\nwybrane_drzwi {is} {ask} 'Które drzwi wybierasz?'\n {print} 'Wybrałeś drzwi...' wybrane_drzwi \n{sleep}\npoprawne_drzwi {is} drzwi {at} {random}\n_ _ _ {print} 'Fantastycznie! Uciekłeś!'\n{else} {print} 'O nie! Zostałeś zjedzony przez...' potwory. {at} {random}\n```\n"
            9:
                story_text: |
                    Na tym poziomie możesz skorzystać ze wcięć, dzięki czemu nawiedzony dom stanie się jeszcze bardziej interaktywny!

                    ### Ćwiczenie
                    Teraz bardzo trudno jest wygrać tę grę, czy możesz ułatwić wygraną?
                    Zmień kod tak, aby zawierał tylko jedne błędne drzwi i dwoje prawidłowych drzwi zamiast jednych prawidłowych drzwi i dwóch niewłaściwych?
                    Wskazówka: oznacza to zmianę zmiennej poprawne_drzwi na niepoprawne_drzwi i zamianę kodu `{if}` i `{else}`.
                    I oczywiście możesz także zmienić historię i uczynić ją własną. Zmień potwory lub spraw, by był to wesoły teleturniej, w którym otrzymasz prezent!
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    player = alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    {repeat} 3 {times}
                        {if} player {is} alive
                            correct_door {is} doors {at} {random}
                            {print} 'There are 3 doors in front of you...'
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} chosen_door {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
            11:
                story_text: |
                    Na tym poziomie zmieniliśmy polecenie `{for}`, abyśmy mogli powiedzieć graczowi, gdzie się znajduje.

                    ### Ćwiczenie 1
                    Zakończ program, aby gracz wiedział, w którym pokoju się znajduje.

                    ### Ćwiczenie 2
                    Zmień program w przygodę, wykonując następujące kroki:

                    1. Zrób listę wyborów (takich jak: walcz lub uciekaj)
                    2. Upewnij się, że gracz może wybrać opcję za pomocą `{ask}`
                    3. Czy odpowiedź jest poprawna? Następnie mogą przejść do następnego potwora. Czy dali złą odpowiedź? Poinformuj gracza za pomocą `{print}`.

                    **Dodatkowo** Jeśli dokonasz złego wyboru, potwór nadal będzie widoczny! Jak mógłbyś to zmienić?
                example_code: |
                    ```
                    {print} 'Ucieknij z nawiedzonego domu!'
                    potwory = zombie, wampir, gigantyczny pająk
                    _
                        {print} 'Pokój ' i
                        potwór = potwory {at} {random}
                    ```
            14:
                story_text: |
                    ### Exercise
                    In this level you can use the `<` and `>` symbol to introduce lives to your game.
                    Make sure the player loses a life when they come across the wrong monster and that the game stops if you have no lives left.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house'
                    lives = 3
                    doors = 1, 2, 3
                    monsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'
                    {for} i {in} {range} 1 {to} 10
                        {if} lives _
                            good_door = doors {at} {random}
                            monster = monsters {at} {random}
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} good_door == chosen_door
                                {print} 'You have chosen the correct door'
                            {else}
                                {print} 'You see...' monster
                                {if} monster == 'a sleeping 3 headed dog'
                                    {print} 'Pffieuw.... Its asleep'
                                {else}
                                    {print} 'You lose one life'
                                    lives = _
                        {else}
                            {print} 'GAME OVER'
                    ```
            16:
                story_text: |
                    ### Exercise
                    This haunted house game uses the connection between the lists you can use in this level.
                    For example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.
                    Check out the code and fill in  `weapons[i]`, `monsters[i]` , `bad_fate[i]`, `good_fate[i]`, `hint[i]` on the correct blanks to get the code to work!
                example_code: |
                    ```
                    numbers = [1, 2, 3]
                    i = numbers[{random}]
                    hint = ['growling', 'a cackling laugh', 'fluttering batwings']
                    monsters = ['zombie', 'witch', 'vampire']
                    bad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']
                    good_fate = ['You throw the ham. The zombie is distracted and starts eating it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']
                    weapons = ['ham', 'lighter', 'garlic']
                    {print} 'You are standing in front of an old mansion'
                    {print} 'Something is not right here'
                    {print} 'You hear ' _
                    {print} 'You are going to explore it'
                    {print} 'You enter the kitchen and see a lighter, a raw ham and a garlic.'
                    your_weapon = {ask} 'What do you bring with you?'
                    {print} 'With your ' your_weapon ' you enter the living room'
                    {print} 'There you find a ' _
                    needed_weapon = _
                    {if} your_weapon == needed_weapon
                        {print} 'You use your ' your_weapon
                        {print} _
                        {print} 'YOU WIN!'
                    {else}
                        {print} 'You have chosen the wrong weapon...'
                        {print} _
                        {print} 'GAME OVER'
                    ```
    hotel:
        name: hotel
        default_save_name: hotel
        description: hotel
        levels:
            13:
                story_text: |
                    In the previous adventure you have learned how to use an argument in a function, and you've learned how to combine it with an {ask}.
                    You might have wondered why you would use functions, because the functions in the example were only one line of code.
                    Now we will show you what a bigger function looks like and we will use multiple agruments now as well. You'll see how much better it is to use a function once the function gets bigger.
                    Here is an example of a function with arguments combined with {ask} commands.
                example_code: |
                    ```
                    {define} welcome_message {with} title, last_name, country, room_number
                        {print} 'Welcome to Hotel Hedy, ' title ' ' last_name
                        nice_trip {is} {ask} 'Did you have a nice trip from, ' country '?'
                        {if} nice_trip {is} 'yes'
                            {print} 'Lovely!'
                        {else}
                            {print} 'Sorry to hear that.'
                            {print} 'Hopefully you can take a nice rest in you room.'
                        {print} 'Your room number is ' room_number

                    {print} 'Hello. Please fill in your information to check in.'
                    title = {ask} 'What is your title (mr, mrs, ms, dr, etc.)?'
                    name = {ask} 'What is you last name?'
                    homecountry = {ask} 'What country do you come from?'

                    {call} welcome_message {with} title, name, homecountry, 105
                    ```

                    title = {ask} 'What is your title (mr, mrs, ms, dr, etc.)?'
                    name = {ask} 'What is you last name?'
                    homecountry = {ask} 'What country do you come from?'

                    {call} welcome_message {with} title, name, homecountry, 105
    if_command:
        name: '{if} & {else}'
        default_save_name: if_command
        description: Introducing the if command
        levels:
            5:
                story_text: |
                    ## Jeżeli... inaczej...
                    W poziomie 5 pojawia się coś nowego `{if}`! Za pomocą `{if}` możesz wybrać pomiędzy dwoma opcjami.
                    Ten kod wyświetla „to miło”, jeśli wprowadzisz imię Hedy, w przeciwnym wypadku wyświetli „bu!”.
                    `{ask}` i `{print}` działają w dalszym ciągu tak jak w poziomie 4.
                example_code: |
                    ```
                    imię {is} {ask} 'jak masz na imię?'
                    {if} imię {is} Hedy {print} 'super' {else} {print} 'eh'
                    ```
                story_text_2: |
                    Czasami kod zawierający `{if}` staje się naprawdę długi i nie mieści się w linii. <br>
                    Wtedy możesz podzielić kod na dwie linie, zaczynając drugą linię od `{else}`, tak jak w przykładzie:
                example_code_2: |
                    ```
                    imię {is} {ask} 'jak masz na imię?'
                    {if} imię {is} Hedy {print} 'super'
                    {else} {print} 'eh'
                    ```
                story_text_3: |
                    ### Ćwiczenie
                    Spróbuj napisać własny kod używając `{if}` and `{else}`. Możesz użyć przykładowego kodu.
                example_code_3: |
                    ```
                    odpowiedź {is} {ask} '2 + 2 = ?'
                    _ _ _ 4 _ 'Dobra robota!'
                    _ _ 'Nie, 2 + 2 = 4'
                    ```
            8:
                story_text: |
                    ## If... Else...
                    You have learned to repeat a block of lines of code after a `{repeat}` command.
                    Now you can also use indentation to make blocks after a {if} or {else} command.
                    Check out the example code.

                    ### Ćwiczenie
                    Add an {else} command to the example code. Make a block of line using indentation. You do this by starting each line with 4 spaces.
                example_code: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name {is} Hedy
                        {print} 'Welcome Hedy'
                        {print} 'You can play on your computer!'
                    ```
            9:
                story_text: |
                    In this level you can also put an {if} command inside another {if} command.
                example_code: |
                    ```
                    continue = {ask} 'Do you want to continue?'
                    {if} continue = yes
                        sure = {ask} 'Are you sure?'
                        {if} sure {is} yes
                            {print} 'We will continue'
                        {else}
                            {print} 'You are not sure'
                    {else}
                        {print} 'You do not want to continue'
                    ```
    in_command:
        name: '{in}'
        default_save_name: in_command
        description: Introducing the in command
        levels:
            5:
                story_text: |
                    ## Listy
                    Aby sprawdzić czy coś jest obecne na liście, możemy użyć komendy `{in}`.
                    Ten kod wypisuje 'ładny' jeśli wprowadzimy 'zielony' albo 'żółty', a w przeciwnym razie wypisuje 'meh'.
                example_code: |
                    ```
                    ładne_kolory {is} zielony, żółty
                    wybrany_kolor {is} {ask} 'Jaki jest Twój ulubiony kolor?'
                    {if} wybrany_kolor {in} ładne_kolory {print} 'ładny!'
                    {else} {print} 'meh'
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Dokończ przykładowy kod wypełniająć puste miejsca komendami, których się nauczyłeś.
                    Po dokończeniu kodu, spróbuj stworzyć własny kod i użyj pytania, które wymyśliłeś sam.
                example_code_2: |
                    ```
                    zwierzęta {is} pies, krowa, owca
                    odpowiedź {is} {ask} 'Jakie jest Twoje ulubione zwierzę?'
                    _ odpowiedź _ animals _ 'Mine too!'
                    _ _ 'Moje ulubione zwierzęta to psy, krowy i owce'
                    ```
    is_command:
        name: '{is}'
        default_save_name: komenda_to
        description: Przedstawienie komendy to
        levels:
            2:
                story_text: |
                    ## Variables
                    You can name a word with `{is}`. This is called a **variable**. In this example we made a variable called name and a variable called age. You can use the word name anywhere in your code and it will be replaced by Hedy, like this:
                example_code: |
                    ```
                    name {is} Hedy
                    age {is} 15
                    {print} name is age years old
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Time to make your own variables!
                    In the example code we made an example of the variable `favorite_animal`. In line 1 the variable is set, and in line 2 we haved used the variable in a print command.
                    Firstly, finish our example by filling in your favorite animal in the blanks. Then make at least 3 of these codes yourself. Pick a variable, and set the variable with the {is} command. Then use it with a {print} command, just like we did.
                example_code_2: |
                    ```
                    favorite_animal {is} _
                    {print} I like favorite_animal
                    ```
            6:
                story_text: |
                    We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:
                example_code: |
                    ```
                    name = Hedy
                    answer = 20 + 4
                    ```
            14:
                story_text: |
                    We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.
                    The `<` checks if the first number is smaller than the second, for example age `<` 12 checks if age is smaller than 12.
                    If you want to check if the first number is smaller or equal to the second, you can use `<=`, for example age `<=` 11.
                    The `>` checks if the first number is bigger than the second, for example points `>` 10 checks if points is larger than 10.
                    If you want to check if the first number is bigger or equal to the second, you can use `>=`, for example points `>=` 11.
                    You use these comparisons in an `{if}`, like this:
                example_code: |
                    ```
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
                    ```
                story_text_2: |
                    From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:
                example_code_2: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name == 'Hedy'
                        {print} 'You are cool!'
                    ```
                story_text_3: |
                    You can also compare if something is *not* equal to something else using `!=` like this:
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name != 'Hedy'
                        {print} 'You are not Hedy'
                    ```

                    {if} age < 13
                        {print} 'You are younger than me!'
                    {else}
                        {print} 'You are older than me!'
    language:
        name: Język
        default_save_name: language
        description: Ćwicz słowa w języku obcym
        levels:
            5:
                story_text: |
                    Stwórz własny program do ćwiczenia słownictwa w nowym języku.

                    ### Ćwiczenie
                    Czy możesz zrobić ten program dla innego języka? A może możesz dodać więcej słów do francuskiego?
                example_code: |
                    ```
                    {print} 'Learn French!'
                    cat {is} {ask} '🐱'
                    {if} cat {is} chat {print} 'Terrific!'
                    {else} {print} 'No, cat is chat'
                    frog {is} {ask} '🐸'
                    {if} frog {is} grenouille {print} 'Super!'
                    {else} {print} 'No, frog is grenouille'
                    ```
            16:
                story_text: |
                    ### Exercise
                    Take a look at the example code. This is a program to practise French vocabulary. Now make your own program to practice your vocabulary in a new language.
                    If you don't know any other languages, you can use Google translate or you can use emojis and your native language.
                example_code: |
                    ```
                    french_words = ['bonjour', 'ordinateur', 'pomme de terre']
                    translation = ['hello', 'computer', 'potato']
                    score = 0
                    {for} i {in} {range} 1 {to} 3
                        answer = {ask} 'What does ' french_words[i] ' mean?'
                        correct = translation[i]
                        {if} answer == correct
                            {print} 'Correct!'
                            score = score + 1
                        {else}
                            {print} 'Wrong, ' french_words[i] ' means ' translation[i]
                    {print} 'You gave ' score ' correct answers.'
                    ```
    maths:
        name: maths
        default_save_name: maths
        description: Introducing maths
        levels:
            6:
                story_text: |
                    In this level you learn something new: you can now also calculate.

                    The plus is easy, you write it like with math: `5 + 5` for example. The minus also works fine, it is `5 - 5`.

                    The times is a bit different, because there is no times symbol on your keyboard. Just search, there really isn't!
                    That is why we multiply with the asterisk above 8: `5 * 5`. Read that as "5 times 5" that helps you remember it best.
                example_code: |
                    ```
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 minus 5 is ' 5 - 5
                    {print} '5 times 5 is ' 5 * 5
                    ```
            12:
                story_text: |-
                    **Decimal numbers**
                    So far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.
                example_code: |
                    ```
                    {print} 'Two and a half plus two and a half is...'
                    {print} 2.5 + 2.5
                    ```
                story_text_2: |-
                    **Maths with words**
                    In this level you can also do addition with words like this:
                example_code_2: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```

                    {print} 2.5 + 2.5
    music:
        name: music
        default_save_name: music
        description: Play a tune!
        levels:
            1:
                story_text: |-
                    In this level you'll learn how to use the `{play}` command to play a tune!

                    Type `{play}` followed by the note you want to play. The scale goes C-D-E-F-G-A-B.
                    As you can see there are 7 different letters, but we can play more than just 7 notes.
                    Type a number between 1 and 10 behind the letter to choose the scale, for example after B4 comes C5.
                    C1 is the lowest note you can play, C10 is the highest.

                    ### Exercise
                    Try out the example code and then play around with it! Can you create your own melody?
                    In the next level you'll learn how to play some existing songs.
                example_code: |-
                    ```
                    {play} C4
                    {play} D4
                    {play} E4
                    {play} F4
                    {play} G4
                    {play} A4
                    {play} B4
                    {play} C5
                    ```
            2:
                story_text: |
                    ### Exercise
                    Finish the songs! We have started the codes for some melodies.
                example_code: |
                    ```
                    {print} Old Mac Donald had a farm
                    {play} C5
                    {play} C5
                    {play} C5
                    {play} G4
                    {play} A4
                    {play} A4
                    {play} G4
                    ```
                story_text_2: As you can see, you can also use the `{sleep}` command to add a little pause in the song.
                example_code_2: |
                    ```
                    {print} Twinkle Twinkle Little Star
                    {play} C
                    {play} C
                    {play} G
                    {play} G
                    {play} A
                    {play} A
                    {play} G
                    {sleep} 1
                    {play} F
                    {play} F
                    ```
            3:
                story_text: |
                    Create a random melody!

                    ### Exercise
                    The example code creates a random melody, but it's very short and not many notes are used.
                    Add more notes to the list and create a longer melody by copying the last line a couple more times.
                example_code: |
                    ```
                    notes {is} A4, B4, C4
                    {play} notes {at} {random}
                    {play} notes {at} {random}
                    {play} notes {at} {random}
                    ```
            4:
                story_text: |
                    Use the `{clear}` command to create a karaoke machine!

                    ### Exercise
                    Finish the karaoke version of 'Mary had a little lamb'.
                    Then, create a karaoke version of any song you'd like!
                example_code: |
                    ```
                    {print} 'Mary had a little lamb'
                    {play} E
                    {play} D
                    {play} C
                    {play} D
                    {play} E
                    {play} E
                    {play} E
                    {clear}
                    {print} 'Little lamb, little lamb'
                    {play} D
                    {play} D
                    {play} D
                    {play} E
                    {play} E
                    {play} E
                    {clear}
                    {print} 'Mary had a little lamb'
                    {play} E
                    ```
            5:
                story_text: |
                    You don't always have to use the `{play}` command to play a whole song, sometimes you just want to play one note.
                    For example, if you want to make a quiz, you can play a happy high note if the answer is right and a sad low note if the answer is wrong.

                    ### Exercise
                    Finish the first question by adding a line of code that plays a C3 note if the wrong answer is given.
                    Then think of 3 more questions to add to this quiz.
                example_code: |
                    ```
                    answer {is} {ask} 'What is the capital of Zimbabwe?'
                    {if} answer {is} Harare {play} C6
                    _
                    ```
            6:
                story_text: "Instead of playing notes, you can also play numbers now. Simply type `{play} 1` for the lowest note, `{play} 70` for the highest note, or anything in between.\n\n### Exercise\n This calls for musical maths! Try out the example code a couple of times with different starting numbers. \nThen, see if you can compose a song using the numbers.\n"
                example_code: |
                    ```
                    number = {ask} 'Say a starting number between 1 and 67'
                    {print} number
                    {play} number
                    number = number + 1
                    {print} number
                    {play} number
                    number = number + 1
                    {print} number
                    {play} number
                    ```
            7:
                story_text: |
                    Using the `{repeat}` command can make your codes for melodies a lot shorter!

                    ### Exercise
                    Finish the code for Twinkle Twinkle Little Star by using the `{repeat}`command.
                    Then go back to the songs you've made in the previous levels. Can you shorten those codes too?
                example_code: |
                    ```
                    {print} 'Twinkle Twinkle Little Star'
                    {repeat} 2 {times} {play} C4
                    {repeat} 2 {times} {play} G4
                    _
                    ```
            8:
                story_text: |
                    Now that we can use the `{repeat}` command for multiple lines, we can make songs even more easily!

                    ### Exercise
                    Finish the song of Brother John (Frère Jacques). Don't forget to use `{repeat}`!
                example_code: |
                    ```
                    {print} 'Brother John'
                    {repeat} 2 {times}
                        {play} C
                        {play} D
                        {play} E
                        {play} C
                    {repeat} 2 {times}
                        {play} E
                        {play} F
                        {play} G
                        {sleep} 1
                    ```
            9:
                story_text: |
                    From this level on you can - among other things - use a {repeat} command inside a {repeat} command.
                    That makes songs like 'Happy birthday' even shorter!

                    ### Exercise
                    Finish the song!
                example_code: |
                    ```
                    first_time = yes
                    {repeat} 2 {times}
                        {repeat} 2 {times}
                            {play} C
                        {play} D
                        {play} C
                        {if} first_time {is} yes
                            {play} F
                            {play} E
                            first_time {is} no
                        {else}
                            _
                    ```
            12:
                story_text: |
                    Use functions in your songs! As you can see in the example code, you can make a function for each line of Twinkle Twinkle Little Star. Once you've programmed the first three lines, all you have to do is call the functions in the order you want them played in.

                    ### Exercise
                    Finish the song of Twinkle Twinkle Little Star.
                    Then look back at all the songs you've programmed in the levels before, can you make those codes better and shorter using functions too?
                example_code: |
                    ```
                    {define} first_line
                        {play} C
                        {play} C
                        {play} G
                        {play} G
                        {play} A
                        {play} A
                        {play} G
                        {sleep}

                    {define} second_line
                        {play} F
                        {play} F
                        {play} E
                        {play} E
                        {play} D
                        {play} D
                        {play} C
                        {sleep}

                    {define} third_line
                        {play} G
                        {play} G
                        {play} F
                        {play} F
                        {play} E
                        {play} E
                        {play} D
                        {sleep}

                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    ```
            13:
                story_text: |
                    You can use a function with an argument for songs that have line that are almost the same, but slightly different each time.
                    One example is the song 'Yankee Doodle'. The first 4 notes of the first lines are the same, but each time they are followed by a different couple of notes.

                    ### Exercise
                    Can you finish the song of Yankee Doodle?
                    Can you think of another song to program this way?
                example_code: |
                    ```
                    {print} 'Yankee Doodle'
                    {define} _ {with} note_1, note_2, note_3
                        {play} C4
                        {play} C4
                        {play} D4
                        {play} E4
                        {play} _
                        {play} _
                        {play} _

                    {call} line_1 {with} 29, 31, 30
                    {call} line_1 {with} 29, 28, 0
                    {call} line_1 {with} 32, 31, 30

                    {play} C4
                    {play} B3
                    {play} G3
                    {play} A3
                    {play} B3
                    {play} C4
                    {play} C4
                    ```
            14:
                story_text: |
                    You can program music for fun, but you can also use the musical notes to make something useful like a fire alarm!

                    ### Exercise
                    Make sure the fire alarm rings when there is a fire!
                example_code: |
                    ```
                    {define} fire_alarm
                        {print} 'FIRE!'
                        note = 40
                        {for} i {in} {range} 1 {to} 100
                            {if} note _ 50
                                note = note + 5
                                {play} _
                            {else}
                                note = 40

                    fire = {ask} 'Is there a fire?'
                    {if} fire _ 'yes'
                        {call} fire_alarm
                    ```
            15:
                story_text: |
                    **Warning** This adventure can become extremely annoying!
                    We can also use the {while} command to repeat a song forever.

                    ### Exercise
                    Finish the never-ending song.
                example_code: |
                    ```
                    {define} song
                        {play} _

                    yes_or_no = {ask} 'Do you want to hear my never-ending song?'
                    {while} yes_or_no = 'yes'
                        {call} song
                        {print} '🥳'
                    ```
            16:
                story_text: |
                    Upgrade your Old MacDonald code!

                    ### Exercise
                    Take your code from the 'Sing a Song' adventure and add musical notes to it!
                    You can make a function for each line in the song and call that function after the line is printed.
                    We defined the first line for you and called it in the code. Can you finish the whole song?
                example_code: |
                    ```
                    {define} line_1
                        {for} i {in} {range} 1 {to} 3
                            {play} G
                        {play} D
                        {for} i {in} {range} 1 {to} 2
                            {play} E
                        {play} D

                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    for i in range 1 to 3
                        animal = animals[i]
                        sound = sounds[i]
                        print 'Old MacDonald had a farm'
                        call line_1
                        print 'E I E I O!'
                        _
                    ```
            17:
                story_text: |
                    You can use the {elif} to create different options.

                    ### Exercise
                    Firstly, add colons to get the code to work.
                    Then finish this code by adding at least 2 other songs for other moods. For example a happy song and an angry song.
                example_code: |
                    ```
                    {define} scary_song
                        {for} i {in} {range} 1 {to} 3
                            {play} G
                        {play} E
                        {sleep} 2
                        {for} i {in} {range} 1 {to} 3
                            {play} F
                        {play} D

                    mood = {ask} 'Which emotion are you feeling?'
                    {if} mood {is} 'fear'
                        {call} scary_song
                    {elif} _
                    ```
            18:
                story_text: |
                    ### Exercise
                    Even in this last level of Hedy we can make some music! Be careful of all the syntax that is needed now.
                    Take a good look at how the functions are defined and called upon in the example code.
                    Finish the song!
                example_code: |
                    ```
                    {def} line_1():
                        {for} i {in} {range}(1, 5):
                            {play} A
                        {play} D
                        {play} F
                        {play} A

                    {def} line_2():
                        {for} i {in} {range}(1, 5):
                            {play} G
                        {play} C
                        {play} E
                        {play} G

                    {def} line_3():
                    _

                    {print} ('The drunken sailor')
                    {print} ('What shall we do with the drunken sailor?')
                    line_1()
                    line_2()
                    line_3()
                    {print} ('Early in the morning')
                    ```
    parrot:
        name: Papuga
        default_save_name: Papuga
        description: Stwórz swoja własną cyfrową papugę która powtórzy wszystko co powiesz!
        levels:
            1:
                story_text: |
                    Stwórz swoją własną cyfrową papugę która powtórzy wszystko co powiesz!
                example_code: |
                    ```
                    {print} Jestem papuga Hedy
                    {ask} Jak masz na imię?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Skopiuj przykładowy kod na ekran wprowadzania, klikając żółty przycisk.
                    Spraw, aby papuga zadała inne pytanie. Uzupełnij puste miejsca w przykładzie!
                    **Dodatkowo** Możesz także pozwolić papudze zadawać wiele pytań. Wpisz więcej wierszy kodu pod własnym kodem.
                example_code_2: |
                    ```
                    {print} Jestem papuga Hedy
                    {ask} _
                    {echo}
                    {echo}
            2:
                story_text: |
                    Stwórz swoją własną cyfrową papugę, która będzie po tobie powtarzać cokolwiek powiesz!
                example_code: |
                    ```
                    {print} Jestem papuga Hedy
                    imię {is} {ask} jak masz na imię?
                    {print} imię
                    {sleep}
                    {print} ara
                    {sleep}
                    {print} imię
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Możesz użyć zmiennych, aby papuga powiedziała więcej niż tylko twoje imię. Czy możesz uzupełnić kod?
            3:
                story_text: |
                    Naucz swoją papugę nowego słowa z poleceniem `{add}`.
                    ### Ćwiczenie
                    Czy potrafisz sprawić, żeby papuga powiedziała kilka słów?
                example_code: |
                    ```
                    słowa {is} ara, Hedy
                    {print} Naucz twoją papugę!
                    nowe_słowo {is} {ask} Jakiego słowa chcesz ja nauczyć?
                    {add} nowe_słowo {to_list} słowa
                    {print} 🧒 Powiedz nowe_słowo , Hedy!
                    {print} 🦜 słowa {at} {random}
                    ```
            4:
                story_text: |
                    W tym poziomie musimy użyć cudzysłowy z poleceniami `{ask}` and `{print}`.
                    ### Ćwiczenie
                    Dokończ kod poprzez dodanie cudzysłowów w pustych miejscach.
                example_code: |
                    ```
                    słowa {is} kra, Hedy
                    {print} _ Wytresuj swoją papugę! _
                    nowe_słowo {is} {ask} _ Jakie słowo chciałbyś ją nauczyć? _
                    {add} nowe_słowo {to_list} słowa
                    {print} _ 🧒 Powiedz _ nowe_słowo _, Hedy!_
                    {print} _ 🦜 _ słowa {at} {random}
                    ```
            5:
                story_text: |
                    Daj swojej papudze nagrodę jeżeli powie poprawne słowo.

                    ### Ćwiczenie
                    Dokończ kod uzupełniając 4 brakujące polecenia.
                example_code: |
                    ```
                    słowa {is} kra, Hedy
                    {print} 'Wytresuj swoją papugę!'
                    nowe_słowo {is} {ask} 'Jakie słowo chciałbyś ją nauczyć?'
                    {add} nowe_słowo {to_list} słowa
                    powiedziane_słowo {is} słowa {at} {random}
                    {print} '🧒 Powiedz ' nowe_słowo ', Hedy!'
                    {print} '🦜 ' powiedziane_słowo
                    _ powiedziane_słowo {is} nowe_słowo _ '🧒 Świetnie, Hedy! 🍪'
                    _ _ '🧒 Nie, Hedy! Powiedz ' nowe_słowo
                    ```
    piggybank:
        name: Skarbonka
        default_save_name: Skarbonka
        description: Policz swoje kieszonkowe!
        levels:
            12:
                story_text: |
                    W tej przygodzie nauczysz się, jak zrobić cyfrową skarbonkę.
                    Dokończ kod, aby obliczyć, ile masz pieniędzy i jak długo musisz oszczędzać, aby kupić to, co chcesz!
                example_code: "```\n{print} 'Cyfrowa skarbonka'\nżyczenie = {ask} 'Co chciałbyś kupić?'\ncena = {ask} 'Ile to kosztuje?'\nzaoszczędzone = {ask} 'Ile pieniędzy już zaoszczędziłeś?'\nkieszonkowe = {ask} 'Ile kieszonkowego dostajesz na tydzień?'\ndo_zaoszczędzenia = cena - zaoszczędzone\ntygodnie = do_zaoszczędzenia / kieszonkowe \n{print} 'Możesz kupić ' _ ' za ' _ ' tygodni.'\n```\n"
            14:
                story_text: |
                    ### Exercise
                    In this level you can let Hedy tell you if you have saved up enough money!
                    Finish this code by filling in the blanks!
                example_code: |
                    ```
                    _ calculate_budget with wish, money, allowance
                        to_save = wish - money
                        weeks = to_save / allowance
                        {if} wish _ money
                            {print} 'You need to save up some more!'
                            {print} 'Youll need ' weeks ' more weeks.'
                        {else}
                            {print} 'Great! You have enough'
                            {print} 'Lets go shopping!'

                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'

                    {call} calculate_budget with _, _, _
                    ```
    pressit:
        name: Naciśnięcia klawiszy
        default_save_name: Naciśnięty
        description: Spróbuj przypisać przycisk klawiatury do polecenia!
        levels:
            5:
                story_text: |
                    W tym poziomie pojawia się kolejne nowe polecenie: `{pressed}`!
                    Dzięki poleceniu `{pressed}` możesz użyć przycisków na swojej klawiaturze by kontrolować które linie zostaną użyte.

                    ### Ćwiczenie
                    Spójrz na przykładowy kod i dodaj jedną więcej linię która reaguje na naciśnięcie przycisku.
                example_code: |
                    ```
                    {print} 'Wolisz dobre (d) czy złe (z) zakończenie?'
                    {if} d {is} {pressed} {print} 'I żyli długo i szczęśliwie ❤'
                    {else} {print} 'Książę został zjedzony przez hipopotama 😭'
                    ```
                story_text_2: |
                    Możesz również przypisać polecenia żółwia do klawiszy.

                    ### Ćwiczenie
                    Skopiuj linie kilka razy by móc stworzyć większy rysunek.
                example_code_2: |
                    ```
                    {if} y {is} {pressed} {forward} 15
                    {else} {turn} 90
                    ```
            7:
                story_text: |
                    Skoro już nauczyłeś się polecenia `{repeat}` możesz naciskać klawisze wiele razy! Dzięki temu możesz sprawić, że żółw będzie chodził do przodu i obracał się.

                    ### Ćwiczenie
                    Przykładowy kod sprawdza tylko raz, czy klawisz jest naciśnięty. Zmień kod tak, aby można było naciskać klawisze wiele razy i użyj kodu, aby narysować coś ładnego.
                example_code: |
                    ```
                    {if} x {is} {pressed} {forward} 15 {else} {turn} 90
                    ```
            9:
                story_text: |-
                    Teraz gdy wiesz, jak łączyć instrukcje, możesz utworzyć narzędzie pisania bezwzrokowego za pomocą `{pressed}`.

                    ### Ćwiczenie
                    Dokończ kod. Za każdym razem program ma wybrać losową literę, którą należy nacisnąć. Otrzymujesz punkt za prawidłowy klawisz i odjęcie dwóch punktów za niewłaściwy klawisz.
                    **(extra)** Clear the screen after each letter, and show the user how many points they have scored.
                example_code: "```\npunkty = 1\nlitery = a, b, c, d, e\n{repeat} 10 {times}\n    litera = _ _ _\n    {print} 'Naciśnij literę ' litera \n    {if} litera {is} {pressed}\n    _\n    _\n    _\n```\n"
    print_command:
        name: '{print}'
        default_save_name: print
        description: Introduction print command
        levels:
            1:
                story_text: |
                    ## Komenda print
                    Możesz wypisać tekst na ekran używając komendy `{print}`.
                example_code: |
                    ```
                    {print} Cześć, programisto!
                    {print} Witamy w Hedy!
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    W Hedy natkniesz się na ćwiczenia w każdej przygodzie. Ćwiczenia pozwalają Tobie przećwiczyć nowe komendy i koncepty, oraz pozwalają Ci zmodyfikować przykłady zgodnie z Twoją wyobraźnią.
                    In Hedy you will find exercises in every adventure. An exercise allows you to practise the new commands and concepts, and lets you give your own twist to the example codes.
                    W tym ćwiczeniu widzisz różowy kursor. Musisz wypełnić przestrzeń kursora jakimś tekstem, aby kod można było odpalić.

                    Wypełnij pustą przestrzeń komendą `{print}`, a następnie dodaj pięć dodatkowych linii kodu. Każda linia musi zaczynać się od komendy `{print}`.
                    Miłej zabawy!
                example_code_2: |
                    ```
                    _ Cześć!
                    ```
            18:
                story_text: |-
                    We arrived at real Python code! That means we need to use parentheses with `{print}` and `{range}` from now on.
                    It also means you can use Hedy code from this level in any Python environment as long as you use the English commands. If you haven't until now, you can switch the toggle in the commands menu to do so.
                example_code: |
                    ```
                    {print}('Hello!')
                    {for} i {in} {range}(1, 10):
                        {print}('This is line ', i)
                    ```
                story_text_2: If you want to print more than one item, you need to separate them by commas.
                example_code_2: |
                    ```
                    temperature = 25
                    {print}('It is ', temperature, ' degrees outside')
                    ```

                    {print}('My name is ', name)
    quizmaster:
        name: Mistrz Quizu
        default_save_name: Mistrz Quizu
        description: Stwórz własny quiz!
        levels:
            14:
                story_text: |
                    W tej przygodzie możesz stworzyć własny quiz! Wypełnij puste pola, dodaj więcej pytań i ciesz się własnym quizem!
                    Możesz zrobić quiz o wszystkim, co lubisz: swoim hobby, ulubionym zwierzęciu, ulubionej książce lub w ogóle o czymkolwiek!
                example_code: |
                    ```
                    {print} 'Make your own quiz'
                    points_a = 0
                    points_b = 0
                    {print} 'Question'
                    {print} 'Answer option A'
                    {print} 'Answer option B'
                    answer = {ask} 'Which answer?'
                    {if} answer == 'A'
                        points_a = points_a + 1
                    {if} answer == 'B'
                        points_b = points_b + 1
                    {print} 'End of the quiz!'
                    {print} 'Lets see the results!'
                    {if} points_a > points_b
                        {print} 'You belong to the A club'
                    {if} points_b > points_a
                        {print} 'You belong to the B club'
                    ```
    quotation_marks:
        name: '''Cudzysłowy'''
        default_save_name: cudzysłowy
        description: Przedstawienie cudzysłowów
        levels:
            4:
                story_text: |
                    ## Cudzysłowy
                    W poziomie 4 `{ask}` i `{print}` zmieniły się.
                    Musisz umieścić w cudzysłowach tekst, który chcesz wyświetlić.
                    Jest to przydatne, ponieważ teraz możesz wyświetlić na ekranie wszystkie słowa, które chcesz. Również słowa, których użyłeś, aby przechować coś za pomocą `{is}`.
                    Większość języków programowania również używa cudzysłowów podczas wyświetlania tekstu, a więc jesteśmy o jeden krok bliżej prawdziwego programowania!
                example_code: |
                    ```
                    {print} 'Od teraz musimy używać cudzysłowów!'
                    odpowiedź {is} {ask} 'Czego musimy używać?'
                    {print} 'Musimy używać ' odpowiedź
                    ```
                story_text_2: |
                    ## Contractions
                    Important! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.
                    Make sure to remove those apostrophes and change the spelling to I am or What is.
                    Check out the example code to see the wrong way of using apostrophes.
                example_code_2: |
                    ```
                    _ This is the wrong way of using apostrophes _
                    {print} 'I'm babysitting my sister's kids'
                    {print} 'What's more fun than that?'
                    ```
            12:
                story_text: |
                    **All texts need to be in quotation marks**
                    For this level on you will also have to use quotation marks when storing a text with `=`:
                example_code: |
                    ```
                    name = 'Hedy the Robot'
                    {print} 'Hello ' name
                    ```
                story_text_2: |
                    **All items in lists need quotation marks too**
                    Lists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.
                    This allows you to save two words as 1 item on the list, for example 'Black Widow'.
                example_code_2: |
                    ```
                    superheroes = 'Spiderman', 'Batman', 'Black Widow'
                    {print} superheroes {at} {random}
                    ```
                story_text_3: |
                    **All text after `{if}` comparisons need quotation marks too**
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy the Robot'
                        {print} 'Hi there!'
                    ```
                story_text_4: |
                    **Numbers don't need quotation marks**
                    For numbers, you do not use quotation marks in the `=`:
                example_code_4: |
                    ```
                    score = 25
                    {print} 'You got ' score
                    ```
    random_command:
        name: '{random}'
        default_save_name: Komenda pozycja losowa
        description: Przedstawienie komendy pozycja losowa
        levels:
            3:
                story_text: |
                    ## Pozycja losowa
                    Na tym poziomie możesz przypisać do zmiennej listę. Możesz pozwolić komputerowi wybrać dowolny element z tej listy.
                    Możesz to zrobić za pomocą `{at} {random}`.
                example_code: |
                    ```
                    zwierzęta {is} psy, koty, kangury
                    {print} zwierzęta {at} {random}
                    ```
                story_text_2: |
                    Możesz też użyć komendy `{at} {random}` w połowie zdania.
                example_code_2: |
                    ```
                    jedzenie {is} kanapka, kawałek pizzy, burrito
                    {print} Dzisiaj na obiad jedzenie {at} {random} i kompot
                    ```
                story_text_3: |
                    ### Ćwiczenie
                    Wypróbuj komendę `{at} {random}` poprzez zrobienie własnego teleturnieju (jak w telewizji), w którym wybierasz drzwi albo walizkę i ona zawiera wielką nagrodę!
                    Czy uda Ci się to? Pierwsze linie kodu już są wypełnione.
                example_code_3: |
                    ```
                    {print} Wielki teleturniej!
                    {print} Przed Tobą 3 walizki...
                    wybór {is} {ask} Którą walizkę wybierasz?
                    nagroda {is} _
                    _
                    ```
            16:
                story_text: |-
                    We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
                    We use square brackets to point out a place in a list. For example: `friends[1]` is the first name on the list of friends, as you can see in the first part of the example code. The second part of the example code shows you that we can also match 2 lists using the variable i.
                example_code: |
                    ```
                    friends = ['Ahmed', 'Ben', 'Cayden']
                    {print} friends[1] ' is the first friend on the list.'
                    {print} friends[2] ' is the second friend on the list.'
                    {print} friends[3] ' is the third friend on the list.'
                    #now we will match 2 lists using the variable i
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} friends[i] 's lucky number is ' lucky_numbers[i]
                    ```
                story_text_2: |-
                    Now that you've learned to use the brackets in lists, you can also start using the {at} {random} command in the Python way!
                    You simply type the name of your list with `[random]` behind it!
                example_code_2: |-
                    ```
                    fruit = ['apple', 'banana', 'cherry']
                    {print} fruit[random]
                    ```
    repeat_command:
        name: '{repeat}'
        default_save_name: repeat_command
        description: repeat command
        levels:
            7:
                story_text: |
                    ## Repeat! Repeat! Repeat!
                    Level 7 adds the `{repeat}` command.  `{repeat}` can be used to execute one line of code multiple times. Like this:

                    ### Ćwiczenie
                    Play around with the repeat command. Can you make the happy birthday song in only 3 lines of code instead of 4 now?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy is fun!'
                    ```
            8:
                story_text: |
                    ### Repeat commands and indentation
                    In this level you can repeat multiple lines of code with only 1 repeat command.
                    You do this by making a block of lines that you want to repeat.
                    The lines in this block will need **indentation** .
                    That means putting four spaces at the beginning of each line. You will also have to indent when you just want to create a block of one line.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} 'Hello everyone'
                        {print} 'This is all repeated 5 times'
                    ```
            9:
                story_text: |
                    Great job! You've reached another new level! In the previous level you've learned to use multiple lines of code in an {if} or {repeat} command. But you can't yet combine the two...
                    Good news! In this level you will be allowed to put an {if} inside an {if}, or inside a {repeat} command. Putting a block of code inside another block of code is called nesting.                     ``` Putting a block of code inside another block of code is called nesting.
                example_code: |
                    ```
                    answer = {ask} 'Are you ready to learn something new?'
                    {if} answer {is} yes
                        {print} 'Great! You can learn to use the repeat command in the if command!'
                        {print} 'Hooray!'
                        {print} 'Hooray!'
                        {print} 'Hooray!'
                    {else}
                        {print} 'Maybe you should practice some more in the previous level'
    repeat_command_2:
        name: '{repeat} 2'
        default_save_name: repeat_command_2
        description: repeat command 2
        levels:
            7:
                story_text: |
                    ## Repeat with other commands and with variables
                    You have practiced the `{repeat}` command in combination with the `{print}` command now, but did you know you could also use other commands with `{repeat}` ?
                    In this example code you can see that `{repeat}` can also be used with an `{ask}`, `{if}` or `{else}` command.
                example_code: |
                    ```
                    {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                    {if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'
                    {else} {repeat} 3 {times} {print} 'You have learned something new!'
                    ```
                story_text_2: |
                    Another interesting thing you can so with the `{repeat}` command is using variables to set the amount of times something should be repeated. In the example code you can see that we first ask the person how old they are.
                    Then, in line 3, the question is repeated 'age' times. So we have used the variable 'age' with the `{repeat}` command.
                example_code_2: |
                    ```
                    {print} 'Yay! It is your birthday!'
                    age = {ask} 'How old are you now?'
                    {repeat} age {times} {print} 'Hip Hip Hurray!'
                    ```
            8:
                story_text: |
                    ### In the block or not?
                    In this level you have to think carefully which lines of code should be in the block and which shouldn't.
                    For example: If you want to sing the song *the muffin man*. You only want the line with 'the muffin man' to be repeated twice.
                    This means the last line shouldn't start with indentation as it doesn't belong to the block.
                    If you do start the last line with indentation the song will turn out wrong.

                    ## Ćwiczenie
                    Each line in the example code starts with a blank. Remove the blanks and try to figure out which line need indentation and which don't to make the muffin man song.
                example_code: |
                    ```
                    _ {print} 'Do you know the muffin man?'
                    _ {repeat} 2 {times}
                    _ {print} 'The muffin man'
                    _ {print} 'Do you know the muffin man, who lives on Drury Lane?'
                    ```
    restaurant:
        name: Restauracja
        default_save_name: Restauracja
        description: Stwórz swoją własną wirtualną restaurację
        levels:
            1:
                story_text: |
                    Na poziomie 1 możesz stworzyć swoją własną wirtualną restaurację i przyjmować zamówienia gości.
                story_text_2: |
                    ### Ćwiczenie
                    Skopiuj przykładowy kod na ekran wejściowy, klikając żółty przycisk.
                    Najpierw wpisz w puste miejsca właściwe polecenia, aby kod działał poprawnie.
                    Następnie dodaj co najmniej 4 kolejne linie kodu do programu restauracji.
                    Zapytaj klienta, co chciałby wypić i czy chce zapłacić gotówką, czy kartą.
                    Na koniec wymyśl jakiś miły sposób pożegnania się z klientem.
                example_code_2: "``` \n{print} Witaj w restauracji Hedy 🍟\n_ Co chcesz zamówić?\n {echo} A więc chcesz zamówić\n{print} Dziękuje za zamówienie!\n{print} Zaraz podamy!\n```\n"
            2:
                story_text: |
                    Na poziomie 2 możesz rozbudować swoją restaurację za pomocą zmiennych. Na poziomie 1 Hedy mogła wyświetlić {echo} zamówienie tylko raz i pamiętała tylko ostatnią zamówioną rzecz.
                    Teraz możesz używać zmiennych, a Hedy może zapamiętać zarówno co zamówiłeś do jedzenie, jak i do picia!
                example_code: |
                    ```
                    {print} Witamy w restauracji Hedy!
                    {print} Dziś serwujemy pizzę lub lasagne.
                    jedzenie {is} {ask} Co chciałbyś zjeść?
                    {print} Świetny wybór! Uwielbiam jedzenie!
                    dodatki {is} {ask} Chciałbyś do tego mięso czy warzywa?
                    {print} Juz przygotowuje jedzenie z dodatki!
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Skopiuj swój własny kod restauracji z poprzedniego poziomu do ekranu wejściowego poniżej.
                    Popraw kod zastępując komendy `{ask}` i `{echo}` i używając zmiennych, tak jak nauczyłeś się w tym poziomie.

                    Teraz gdy Twój kod znów działa, czas dodać coś jeszcze.
                    Spójrz na ostatnią linię przykładowego kodu: `{print} jedzenie z polewa jest w drodze!`.
                    W tej jednej linii zostały użyte 2 zmienne do stworzenia podsumowania zamówienia.
                    Teraz dodaj własne podsumowanie zamówionego przez klienta jedzenia i napojów.

                    **Dodatkowo** Teraz gdy nauczyłeś się używać zmiennych, możesz użyć tylu zmiennych w jednej linii, ile tylko zechcesz. Czy możesz dodać więcej zmiennych do swojego kodu, jak np. zjeść w lokalu lub na wynos, gotówką lub kartą, ze słomką lub bez itp?
            3:
                story_text: |
                    Masz problem z podjęciem decyzji, co chcesz zjeść na obiad? Możesz pozwolić Hedy wybrać za Ciebie!
                    Po prostu dodaj listę swoich ulubionych (lub najmniej ulubionych) potraw, a Hedy może losowo wybrać Twój obiad.
                    Możesz się też trochę zabawić, pozwalając Hedy wybrać także cenę za Twój obiad! Co dostaniesz?
                example_code: |
                    ```
                    dania {is} spaghetti, brukselka, hamburgery
                    {print} Dziś wieczorem będziesz miał dania {at} {random}!
                    ceny {is} 1 złoty, 10 złotych, 100 złotych
                    {print} To będzie ceny {at} {random} proszę.
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Teraz stwórz własną wersję losowej restauracji.
                    Zrób sam listę przystawek, dań głównych, deserów, napojów i cen.
                    Następnie użyj komend `{print}` i `{at} {random}`, aby powiedzieć klientowi, co będzie w jego menu dziś wieczorem.
                example_code_2: |
                    ```
                    {print} Witaj w swojej własnej, losowej restauracji!
                    przystawki {is} _
                    dania główne {is} _
                    desery {is} _
                    napoje {is} _
                    ceny {is} _
                    _
                    ```
            4:
                story_text: |
                    ### Exercise
                    Add the quotation marks to this code to make it work! Be careful: variables should not be in quotation marks.
                    Then, use the `{clear}` command to only show one line at a time in your output screen.

                    ### Exercise 2
                    Go back to the previous level and copy your restaurant code. Make the code work in this level by adding quotation marks in the right spots and add some `{clear}` commands.
                example_code: |
                    ```
                    _ Dodaj cudzysłów do tego kodu _
                    {print} Witamy w restauracji Chez Hedy!
                    {print} Dzisiaj serwujemy pizzę lub lasagnę.
                    jedzenie {is} {ask} Co chciałbyś zjeść?
                    {print} Świetny wybór! Uwielbiam jedzenie!
                    polewa {is} {ask} Czy chciałbyś na tym mięso lub warzywa?
                    {print} jedzenie z polewa jest w drodze!
                    napoje {is} {ask} Co chciałbyś do tego wypić?
                    {print} Dziękujemy za zamówienie.
                    {print} Twoje jedzenie i napoje będą na miejscu!
                    ```
            5:
                story_text: |
                    Na tym poziomie polecenie `{if}` pozwala Ci na `{ask}` (zapytanie) klientów i udzielanie różnych odpowiedzi.
                    W poniższym przykładzie widać, że można `{ask}` klienta `{if}` chce usłyszeć specjały, a Hedy może odpowiednio odpowiedzieć.
                example_code: |
                    ```
                    {print} 'Witamy w restauracji Chez Hedy!'
                    specjał {is} {ask} 'Czy chciałbyś usłyszeć nasze dzisiejsze specjały?'
                    {if} specjał {is} tak {print} 'Dzisiaj specjalnością jest kurczak piri piri i ryż.' {else} {print} 'Nie ma problemu.'
                    jedzenie {is} {ask} 'Co chciałbyś zjeść?'
                    {print} 'Jedno ' jedzenie ', zaraz się pojawi!'
                    napój {is} {ask} 'Co chciałbyś do tego pić?'
                    {if} napój {is} cola {print} 'Przepraszam, skończyła nam się cola!' {else} {print} 'Świetny wybór!'
                    cokolwiek {is} {ask} 'Czy chciałbyś coś jeszcze?'
                    {print} 'Pozwól, że powtórzę twoje zamówienie…'
                    {print} 'Jedno ' jedzenie
                    {if} napój {is} cola {print} 'i…' {else} {print} 'jeden ' napój
                    {if} cokolwiek {is} nie {print} 'To wszystko!' {else} {print} 'jeden ' cokolwiek
                    {print} 'Dziękujemy za zamówienie i smacznego!'
                    ```
            6:
                story_text: |
                    Na tym poziomie możesz użyć matematyki do obliczenia całkowitej ceny zamówienia klienta, co może sprawić, że Twoja wirtualna restauracja będzie bardziej realistyczna.
                example_code: |
                    Możesz utworzyć prosty kod restauracji, taki jak ten:
                    ```
                    {print} 'Witamy w restauracji Chez Hedy'
                    {print} 'Oto nasze menu:'
                    {print} 'Nasze dania główne to pizza, lasagne lub spaghetti'
                    główne = {ask} 'Które danie główne chcesz?'
                    cena = 0
                    {if} główne {is} pizza cena = 10
                    {if} główne {is} lasagne cena = 12
                    {if} główne {is} spaghetti cena = 8
                    {print} 'Zamówiłeś ' główne
                    {print} 'To będzie ' cena ' złotych.'
                    {print} 'Dziękuję, smacznego!'
                    ```
            7:
                story_text: |
                    Na tym poziomie nauczyłeś się używać polecenia `{repeat}` do powtórzenia linii kodu określoną ilość razy.
                    Możesz użyć tego w swojej restauracji do `{ask}` wielu osób, co chcą zjeść.

                    ### Ćwiczenie
                    Czy możesz uzupełnić kod? Hedy musi powtarzać to pytanie tyle razy, ilu jest ludzi. Więc jeśli jest 5 osób, pytanie należy zadać 5 razy.
                    **Dodatkowo** Rozszerz swój kod o więcej pytań, na przykład o napoje lub sos.
                example_code: |
                    ```
                    {print} 'Witamy w restauracji Chez Hedy'
                    osoby = {ask} 'Ile osób dzisiaj do nas dołącza?'
                    ```
            8:
                story_text: |
                    Na tym poziomie możesz rozbudować swoją wirtualną restaurację, powtarzając wiele linii kodu. W ten sposób:

                    ### Ćwiczenie
                    Ten kod można rozszerzyć o więcej pozycji w menu, na przykład oferując napoje i/lub wiele dań, lub deserów. Dodaj jeszcze co najmniej jeden element.
                    **Dodatkowo** Dodaj jeszcze więcej elementów, tyle opcji, ile chcesz!
                example_code: |
                    ```
                    {print} 'Witamy w Restauracji Chez Hedy!'
                    osoby = {ask} 'Ile osób dzisiaj do nas dołączy?'
                    {print} 'Świetnie!'
                    {repeat} osoby {times}
                        jedzenie = {ask} 'Co chcieliby Państwo zamówić?'
                        {print} jedzenie
                    {print} 'Dziękuję za zamówienie!'
                    {print} 'Smacznego!'
                    ```
            9:
                story_text: "Na tym poziomie możesz użyć wcięć, aby Twoja restauracja była bardziej realistyczna i zabawniejsza!\n\n### Ćwiczenie\nWcięcie zostało usunięte z przykładowego kodu.\nCzy potrafisz określić, ile wcięć potrzebuje każda linia, aby kod działał poprawnie?\nJeśli klient zamawia pizzę, Hedy nie powinna pytać, jakiego sosu chce klient.\n\n**Dodatkowo** Restauracja nie posiada wszystkich sosów. Sporządź listę dostępnych sosów i przy każdym zamówieniu napisz, czy je sprzedajesz. <br>\n**Dodatkowo** Pizze mają dodatki. Zapytaj klientów, czego chcą.<br>\n**Dodatkowo** Czy klienci chcą drinka? Zapytaj ich też! <br>                    \n"
                example_code: "```\n{print} 'Witamy w Restauracji Chez Hedy!'\nosoby = {ask} 'Ile osób dzisiaj do nas dołączy?'\n{print} 'Świetnie!'\ncena = 0\n{repeat} osoby {times}\n_ jedzenie = {ask} 'Co chciałbyś zamówić?'\n_ {print} jedzenie \n_ {if} jedzenie {is} frytki\n_ cena = cena + 3\n_ sos = {ask} 'Jaki sos chciałbyś mieć do swoich frytek?'\n_ {if} sos {is} nie\n_ {print} 'bez sosu'\n _ {else}\n_ cena = cena + 1\n_ {print} 'z ' sos\n_ {if} jedzenie {is} pizza\n _ cena = cena + 4\n{print} 'To będzie ' cena ' złotych.'\n{print} 'Smacznego!'\n```\n"
            10:
                story_text: |
                    Na tym poziomie nauczysz się, jak łatwo pytać o zamówienia na różne dania.

                    ### Ćwiczenie 1
                    Zakończ kod za pomocą `{ask}` w pustych miejscach, tak aby klient był pytany, co chce zjeść w ramach każdego dania.
                example_code: "```\ndania = przystawka, danie główne, deser\n{for} danie {in} dania \n    {print} 'Jakie jest Państwa zamówienie na ' danie '?'\n    _ \n    _\n```\n"
                story_text_2: |
                    ### Ćwiczenie
                    Oczywiście można też zamówić dla wielu osób!
                    Czy możesz dodać odpowiednią ilość wcięć przed każdą linią, aby kod działał poprawnie?
                    Wskazówka: niektóre wiersze w ogóle nie wymagają wcięcia.
                example_code_2: "```\n_ dania = przystawka, danie główne, deser\n_ imiona = Szymon, Anna\n_ {for} imię {in} imiona \n_ {for} danie {in} dania \n_ jedzenie = {ask} imię ', co chcesz zjeść jako swoje ' danie '?'\n_ {print} imię ' zamawia ' jedzenie ' jako ich ' danie\n```\n"
            11:
                story_text: |
                    Możemy użyć `{for}` z `{range}` do wypisania zamówień od wielu klientów w uporządkowany sposób.

                    ### Ćwiczenie
                    Dokończ kod restauracji, aby móc poprosić o zamówienie wielu osób. Za każdym razem drukuj numer zamówienia: 'Zamówienie 1', 'Zamówienie 2' itd.
                    Nie jesteś pewien, jak się do tego zabrać? Zerknij na swój kod poziomu 8.

                    **Dodatkowo** Na poziomie 9 restauracja stosowała również ceny. Tutaj też możesz to dodać!
                example_code: |
                    ```
                    {print} 'Witamy w Restauracji Hedy!'
                    osoby = {ask} 'Dla ilu osób chciałbyś zamówić?'
                    {print} 'Więc chcesz zamówić dla ' osoby ' osób.'
                    {print} 'Chodźmy!'
                    ```
            12:
                story_text: |
                    Od tego poziomu możesz używać liczb dziesiętnych, aby menu było bardziej realistyczne.

                    ### Ćwiczenie
                    Czy możesz wymyślić kod, aby dać znajomym i rodzinie 15% zniżki?
                example_code: |
                    ```
                    price = 0
                    food = {ask} 'What would you like to order?'
                    drink = {ask} 'What would you like to drink?'
                    {if} food {is} 'hamburger'
                        price = price + 6.50
                    {if} food {is} 'pizza'
                        price = price + 5.75
                    {if} drink {is} 'water'
                        price = price + 1.20
                    {if} drink {is} 'soda'
                        price = price + 2.35
                    {print} 'That will be ' price ' dollar, please'
                    ```
            13:
                story_text: |
                    Na tym poziomie możemy wykorzystać nowe komendy do ulepszenia naszej restauracji.
                    Używamy `{and}`, aby zobaczyć {if} dwie rzeczy są w obu przypadkach.
                example_code: |
                    ```
                    price = 10
                    food = {ask} 'What would you like to eat?'
                    drinks = {ask} 'What would you like to drink?'
                    {if} food {is} 'sandwich' {and} drinks {is} 'juice'
                        {print} 'Thats our discount menu'
                        price = price - 3
                    {print} 'That will be ' price ' dollars'
                    ```
            15:
                story_text: |
                    Dzięki `{while}` możesz mieć pewność, że Twoi klienci będą mogli dodawać zamówienia, dopóki ich nie skończą.
                    ### Exercise
                    Correctly add the `{while}` command to this code.
                example_code: "```\n{print} 'Witamy w McHedy'\nwięcej = 'tak'\n_\n    zamówienie = {ask} 'Co chcesz zamówić?'\n    {print} zamówienie \n    więcej = {ask} 'Czy chciałby Pan/Pani zamówić coś jeszcze?'\n{print} 'Dziękuję!'\n```\n"
    rock:
        name: Papier, kamień, nożyce
        default_save_name: Kamień
        description: Zrób własną grę w papier, kamień, nożyce
        levels:
            1:
                story_text: |
                    Na poziomie 1 możesz zacząć tworzyć grę papier, kamień, nożyce.

                    Za pomocą  `{ask}` możesz zapytać a za pomocą `{echo}` możesz powtórzyć co zostało wybrane.
                example_code: |
                    ```
                    {print} Co wybierasz?
                    {ask} wybierz: papier, kamień lub nożyce
                    {echo} a więc wybrałeś:
                    ```
                story_text_2: |
                    ### Wyzwanie
                    Zamiast używać słów, możesz również użyć emotikonów: ✊✋✌
                    Czy możesz poprawić kod, aby używać emotikonów?
                example_code_2: |
                    ```
                    {print} co wybierasz?
                    {ask} wybierz z _
                    {echo} a więć wybrałeś:
                    ```
            2:
                story_text: |
                    Na tym poziomie możesz poćwiczyć używanie zmiennych, dzięki będziesz mógł stworzyć grę w papier, kamień, nożyce w następnym poziomie!
                example_code: |
                    ```
                    _ {is} {ask} papier, kamień czy nożyce?
                    {print} Ja wybrałam _
                    ```
            3:
                story_text: |
                    Na tym poziomie możemy wprowadzać listy i wybierać z nich rzeczy.
                    Najpierw tworzysz listę za pomocą `{is}`. Następnie możesz pozwolić komputerowi wybrać coś z listy za pomocą `{at} {random}`.
                    Na przykład, możesz pozwolić komputerowi wybrać z listy papier, kamień lub nożyce.
                example_code: |
                    ```
                    możliwości {is} papier, kamień, nożyce
                    {print} możliwości  {at} {random}
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Skopiuj przykładowy kod i wypełnij puste pola, aby dodać dodatkowego gracza do tej gry.

                    **Dodatkowo** Teraz gracze nazywają się po prostu gracz 1 i gracz 2. Czy możesz dodać polecenia pytania (oczywiście ze zmiennymi), aby zapytać graczy o imiona?
                    W ten sposób możesz stworzyć taki wynik, na przykład: Jacek wybiera... papier
                example_code_2: |
                    ```
                    możliwości {is} papier, kamień, nożyce
                    {print} gracz 1 wybiera... możliwości  {at} {random}
                    {print} gracz 2 _
                    ```
            4:
                story_text: |
                    Na tym poziomie możemy dodatkowo zaprogramować kamień, papier, nożyce. Jeśli chcesz dodać tekst, tutaj również musisz użyć cudzysłowów.

                    ### Ćwiczenie
                    Fill in quotation marks on the blanks. Mind that the variable `choices` should be outside the quotes.
                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} _The computer chooses..._ choices {at} {random}
                    ```
            5:
                story_text: |
                    Na tym poziomie możemy ustalić, kto wygrał.
                    Do tego potrzebny jest nowy kod `{if}`.

                    Zapisz swój wybór pod wybraną nazwą i wybór komputera jako wybór komputera.
                    Następnie możesz użyć `{if}`, aby sprawdzić, czy są takie same, czy różne.
                    Dokończysz kod?
                example_code: |
                    ```
                    options {is} rock, paper, scissors
                    computer_choice {is} _
                    choice {is} {ask} 'What do you choose?'
                    {print} 'you chose ' _
                    {print} 'computer chose ' _
                    {if} _ {is} _ {print} 'tie!' {else} {print} 'no tie'
                    ```

                    Fill in the correct code on the blanks to see {if} it is a draw.
            9:
                story_text: "W tym poziomie można zaprogramować całą grę kamień, papier, nożyce poprzez zagnieżdżanie poleceń `{if}`. \n\n### Ćwiczenie\nCzy potrafisz dokończyć kod? Program musi powiedzieć, kto wygrał dla każdej kombinacji.\n\n**Dodatkowo** Chcesz zagrać w więcej niż jedną grę? Rozwiń kod tak, aby można było rozegrać wiele rund. Możesz nawet użyć `{ask}`, aby zapytać użytkownika, ile rund chce zagrać.\n"
                example_code: "```\nopcje = papier, kamień, nożyce\ntwój_wybór = {ask} 'Co wybierasz?'\n{print} 'Wybrałeś ' twój_wybór \nwybór_komputera = opcje {at} {random}\n{print} 'Komputer wybrał ' wybór_komputera \n{if} wybór_komputera {is} twój_wybór \n    {print} 'remis'\n{if} wybór_komputera {is} kamień\n    {if} twój_wybór  {is} papier\n        {print} 'Wygrałeś!'\n    {if} twój_wybór  {is} nożyce\n        {print} 'Przegrałeś!'\n#dokończ program\n```\n"
            10:
                story_text: |
                    Czujesz się zbyt leniwy, by samemu zagrać w grę? Pozwól Hedy zagrać w nią za Ciebie!
                    Wystarczy, że wypełnisz imiona graczy, a oni dostaną losowy wybór.

                    ### Ćwiczenie 1
                    Zakończ program, wypełniając listę nazwisk.

                    ### Ćwiczenie 2
                    Dodaj gracza komputerowego, który wybiera z każdym graczem.

                    **Dodatkowo** Wróć do swojego kodu i zdecyduj, kto wygrywa w każdej rundzie: komputer czy wymieniona osoba.
                example_code: |
                    ```
                    wybory = kamień, papier, nożyce
                    gracze = _
                    {for} gracz {in} gracze
                         {print} gracz ' wybiera ' wybory {at} {random}
                    ```
            13:
                story_text: |
                    Dzięki poleceniu `{and}` możesz skrócić swój kod kamień, papier, nożyce! Sprawdź poniższy przykładowy kod i spróbuj go dokończyć.
                example_code: |
                    ```
                    opcje = 'kamień', 'papier', 'nożyczki'
                    twój_wybór = {ask} 'Co wybierasz?'
                    wybór_komputera = opcje {at} {random}
                    {print} 'Ty wybrałeś ' twój_wybór
                    {print} 'Komputer wybrał ' wybór_komputera
                    {if} wybór_komputera {is} twój_wybór
                        {print} 'Remis'
                    {if} wybór_komputera {is} 'kamień' {and} twój_wybór {is} 'papier'
                        {print} 'Ty wygrałeś!'
                    {if} wybór_komputera {is} 'kamień' {and} twój_wybór {is} 'nożyczki'
                        {print} 'Komputer wygrał!'
                    _
                    ```
            15:
                story_text: |
                    ### Ćwiczenie
                    Graj, aż pokonasz komputer! Najpierw dokończ przykładowy kod...
                example_code: "```\nwygrana = 'nie'\nwybory = 'kamień', 'papier', 'nożyce'\n {while} wygrana == 'nie'\n    twój_wybór = {ask} 'Co wybierasz?'\n    wybór_komputera = wybory {at} {random}\n    {print} 'Ty wybrałeś' twój_wybór \n    {print} 'komputer wybrał ' wybór_komputera\n    {if}  wybór_komputera == twój_wybór\n        {print} 'Remis!'\n    {if} wybór_komputera == 'kamień' {and} twój_wybór == 'nożyce'\n        {print} 'Przegrywasz!'\n    {if} wybór_komputera == 'kamień' {and} twój_wybór == 'papier'\n        {print} 'Wygrywasz!'\n        wygrana = 'tak'\n_\n```\n"
    rock_2:
        name: Papier, kamień, nożyce 2
        default_save_name: Kamień_2
        description: Część 2 papier, kamień, nożyce
        levels:
            2:
                story_text: |
                    Znając komendę `{ask}` możemy uczynić naszą grę w papier, kamień, nożyce interaktywną!

                    ### Ćwiczenie
                    Uczyń grę w papier, kamień, nożyce interkatywną dodając komendę `{ask}` wraz z pytaniem.
                example_code: |
                    ```
                    wybór {is} _
                    {print} Wybrałam wybór
                    ```
    secret:
        name: Super Szpieg
        default_save_name: language
        description: Stwórz swój kod szpiegowski
        levels:
            12:
                story_text: |
                    W tej przygodzie możesz stworzyć swój własny kod superszpiegowski. Zaszyfruj wiadomość, którą może rozszyfrować tylko właściwy agent.
                    Jeśli wróg spróbuje złamać kod, otrzyma fałszywe informacje, aby zmarnować swój czas.

                    ### Ćwiczenie
                    Utwórz własny tajny kod dla swojego superszpiega. Czy możesz sprawić, by składał się z jeszcze większej liczby zmiennych?
                example_code: |
                    ```
                    imię = {ask} 'Jak masz na imię?'
                    if imię {is} 'Agent007'
                        a = 'Jedź na lotnisko '
                    {else}
                        a = 'Idź na dworzec kolejowy'
                    hasło = {ask} 'Jakie jest hasło?'
                    {if} hasło {is} 'TOPSECRET'
                        b = 'jutro o 02.00'
                    {else}
                        b = 'dziś o 10.00'
                    {print} a + b
                    ```
            13:
                story_text: |
                    Czy potrafisz wpisać właściwe polecenie w pustym miejscu? Mózg: Superszpieg musi poprawnie odpowiedzieć na OBA pytania, zanim zdobędzie poufne informacje!
                example_code: |
                    ```
                    imię = {ask} 'Jak masz na imię?'
                    hasło = {ask} 'Jakie jest twoje hasło?'
                    {if} imię {is} 'Agent007' _ hasło {is} 'TOPSECRET'
                        {print} 'Jedź na lotnisko o 02.00'
                    {else}
                        {print} 'Idź na dworzec o 10.00'
                     ```
    simon:
        name: Simon Says
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    Let's make a game of Simon Says! Simon Says is a memory game in which the player will be given a color. They have to repeat that color back.
                    If they get it right a color is added to the sequence, so they now have to remember 2 colors, then 3, then 4 etc. the game stops as soon as the player makes a mistake.

                    ### Exercise
                    In this first part of the Simon Says adventure, we'll let the computer pick a random color and add it to a list.

                    ***Make 2 lists*** First, make a list called `colors` and fill it with the colors red, yellow, green and blue.
                    Then make a list called `simon_sequence`. This list will be used as the answer.
                    At the start of the game this lists need to be empty. unfortunately, we can't create an empty list (yet), so we'll fill it with the words 'empty' and 'list' and we'll remove them from the list immediately.

                    ***Create a function that adds a color to the sequence*** Now that we have an empty list called simon_sequence, we can start filling it with random colors.
                    We do that with a function, so we can call it everytime there's a new level in our game. Create a function called `add_random_color`.
                    Then create the variable random_color and set it to a random color. Next, add this random color to the simon_sequence.

                    ***Create a function that shows the simon_sequence*** Start by naming the new function `show_simon_sequence` with `level` as an argument. Now we want to show as many colors as the level we are in (in level 1 you see 1 color, in level 2 you see 2 colors etc).
                    So we repeat `level` times, to print the `simon_sequence[i]`. Each time a color is shown, wait for 1 second and then clear the screen.

                    ***Test your program*** Before you go to the next level, test if the functions are working by calling both of the functions. If they're working you should see a random color in your output screen.
                    Remove this testing part of your code, copy the code and continue to the next tab to learn more about the simon says game!
                example_code: |
                    ```
                    # Make 2 lists
                    colors = _
                    _ = ['empty', 'list']
                    {remove} _ {from} simon_sequence
                    {remove} _

                    # Create a function that adds a color
                    _ add_random_color
                        _
                        {add} _

                    # Create a function that shows the simon_sequence
                    {define} _
                        {for} i {in} {range} 1 {to} _
                            {print} _
                            _
                            _

                    # Test your program
                    {call} _
                    {call} show_simon_sequence {with} 1
                    ```
    simon_2:
        name: Simon Says 2
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    We'll continue with our Simon Says game!

                    ### Exercise
                    ***Paste your code here*** Paste your code from the previous level here. Don't forget to remove the part that was just used for testing the functions.

                    ***Create a function that creates the player_sequence*** The list `player_sequence` is used to capture the answers of the player. First we define the function with the argument level.
                    Next, we ask level times what the color is that they choose. We call that variable `answer`. Then we add the variable `answer` to the list player_sequence.

                    ***Setting up the game*** Before we program the game in the next tab, we'll need some starting variables. First, we'll set the variable `level` to 1 and the variable `game_over` to False.
                    Then we make an introduction for the game. We'll print 'Welcome to Simon Says!' and clear the screen after 1 second.

                    ***Continue to the next tab to finish the game!**** Don't forget to copy your code and take it with you to the next tab.
                example_code: |
                    ```
                    # Paste your code here


                    # Create a function that creates the player_sequence
                    {define} _
                        {for} _
                            _ 'What is color number ' i '?'
                            {add} answer {to} _

                    # Set up
                    level = _
                    game_over = _
                    {print} _
                    _ 1
                    _
                    ```
    simon_3:
        name: Simon Says 3
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    In this tab we'll program the game of Simon Says!

                    ### Exercise
                    ***Paste your code*** Copy your code from the previous tab and paste it here.

                    ***Program the game*** We start by making sure the game goes on while the game isn't over. Then we print what level the player is on, we use the variable level for that. We only show that for 1 second and then we clear the screen again.
                    Now, we have to create the empty list player_sequence. We've already programmed how to fill the list, with our function `player_sequence`, but we never made the list itself. To create the list we use the same trick as we did in the previous tab.
                    We'll make a list with the words 'empty' and 'list' on it, and then we remove both these words. Next, we'll call all of the 3 functions that we've created.
                    Lastly, we'll have to check if the player gave the correct answers (so if the player_sequence and the simon_sequence are the same).
                    If that's the case, we'll compliment the player. Wait for 1 second and increase the level with 1.
                    Did the player give the wrong answer, we'll tell them and end the game by setting game_over to 'True'

                    ***Enjoy your game!*** Great job! Does your game not work? Use the ladybug button to debug your code!
                example_code: |
                    ```
                    # Paste your code here

                    # The game
                    {while} game_over _
                        {print} _
                        _
                        _
                        _ = ['empty', 'list']
                        {remove} _
                        {remove} _
                        {call} _
                        {call} _ {with} _
                        {call} _ {with} _
                        {if} player_sequence == _
                            _
                            _
                            _
                        {else}
                            _
                            game_over = _
                    ```
    sleep_command:
        name: '{sleep}'
        default_save_name: sleep_command
        description: introducing sleep command
        levels:
            2:
                story_text: |
                    ## Komenda {sleep}
                    Inną nową komendą jest `{sleep}`, która zatrzymuje Twój program na sekundę. Jeżeli wpiszesz jakąś liczbę zaraz za komendą `{sleep}`, to program zatrzyma się na taką ilość sekund.
                example_code: |
                    ```
                    {print} Moim ulubionym kolorem jest...
                    {sleep} 2
                    {print} zielony!
                    ```
    songs:
        name: Zaśpiewaj piosenkę!
        default_save_name: Piosenka
        description: Wyświetl piosenkę
        levels:
            6:
                story_text: "Piosenki często zawierają dużo powtórzeń. Czasami te powtórzenia opierają się na liczeniu. \nPrzykładem jest dobrze znana angielska piosenka \"Butelki Piwa\" (ang. bottles of beer). Możesz zaprogramować tą piosenkę z odrobiną matematyki.\n\nWskazówka: Użyj funkcji \"czytaj na głos\" żeby Hedy zaśpiewał tą piosenkę!\n\n### Ćwiczenie\nMożesz teraz powtórzyć linie od 2 do 7 ile razy chcesz poprzez skopiowanie tych linii.\n"
                example_code: |
                    ```
                    wers = 99
                    {print} wers ' butelek piwa na ścianie'
                    {print} wers ' butelek piwa'
                    {print} 'Weź jedną i przekaż ją dalej'
                    wers = wers - 1
                    {print} wers ' butelek piwa na ścianie'
                    {sleep}
                    ```
                story_text_2: |
                    Ta piosenka dla dzieci odlicza od 5 małych małpek do 1 małpki.
                    Możesz zaśpiewać całą piosenkę jeżeli skopiujesz linie od 2 do 7 i wkleisz je poniżej kodu.
                example_code_2: |
                    ```
                    numer = 6
                    numer = numer - 1
                    {print} 'Skakało na łóżku małych małpek ' numer
                    {print} 'Nagle jedna spadła i potłukła się'
                    {print} 'Mama do doktora dzwoni i słyszy, że'
                    {print} 'SKAKAĆ NA ŁÓŻKU ZABRONIONE JEST!'
                    {sleep}
                    ```
            7:
                story_text: |
                    Piosenki często zawierają dużo powtórzeń, na przykład: Dziecko Rekin (ang. Baby Shark)! Jeżeli ją zaśpiewasz to będziesz śpiewać ten w kółko ten sam tekst:

                    Baby Shark dududududududu <br>
                    Baby Shark dududududududu <br>
                    Baby Shark dududududududu <br>
                    Baby Shark

                    ### Ćwiczenie
                    Możesz napisać piosenkę Dziecko Rekin przy użyciu polecenia `{repeat}`. Dokończ kod uzupełniając puste miejsca.
                    **Dodatkowe ćwiczenie** Po napisaniu piosenki Dziecko rekin możesz zaprogramować inne piosenki. Jest dużo piosenek z powtarzającym się tekstem.
                    Czy pamiętasz przynajmniej o jednej takiej piosence, i czy potrafisz ją zaprogramować?
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Dziecko Rekin tututudutudu'
                    {print} 'Dziecko Rekin'
                    ```
            8:
                story_text: |
                    W poprzednich poziomach programowałeś piosenkę "Butelki Piwa" (ang. Bottles of Beer). Bez użycia polecenia `{repeat}` musiałeś wiele razy skopiować wersy piosenki.
                    Na tym poziomie możesz powtórzyć ten wers 99 razy poprzez dodanie jednej prostej linii kodu.

                    ### Ćwiczenie
                    Dodaj odpowiednie polecenia w puste miejsca i upewnij się, że kod ma poprawne wcięcia.
                example_code: |
                    ```
                    wers = 99
                    _ 99 {times}
                        {print} wers ' butelek piwa na ścianie'
                        {print} wers ' butelek piwa'
                        {print} 'Weź jedną i przekaż ją dalej'
                        wers = wers - 1
                        {print} wers ' butelek piwa na ścianie'
                    ```
            10:
                story_text: |
                    Dzięki `{for}` możesz wydrukować całą piosenkę „Baby Shark” (w tym wszystkie inne rekiny w rodzinie) w zaledwie 6 liniach!

                    ### Ćwiczenie 1
                    Czy możesz jeszcze bardziej skrócić kod „Baby Shark” za pomocą polecenia `{for}`? Dokończ przykładowy kod.
                example_code: "```\nrodzina = dziecko, mamusia, tatuś, babcia, dziadek\n_ _ _ _ \n  {print} _\n```\n"
                story_text_2: |
                    ### Ćwiczenie 2
                    Wypisz piosenkę „Pięć Małych Małpek skaczących po łóżku”. Wyszukaj tekst, jeśli go nie pamiętasz.

                    **Dodatkowo** Wydrukuj piosenkę „Stary MacDonald farmę miał” i upewnij się, że wszystkie zwierzęta wydają inny dźwięk, używając `{if}`.
                example_code_2: |
                    ```
                    małpki = 5, 4, 3, 2, 1
                    ```
            11:
                story_text: |
                    Na tym poziomie możesz użyć `{for}` z `{range}`, aby tworzyć piosenki, które wykorzystują liczenie, takie jak 5 małych małpek.

                    ### Ćwiczenie 1
                    Wypełnij puste pola i spraw, aby kod działał! Jeśli nie pamiętasz tekstu piosenki, poszukaj go sam.

                    ### Ćwiczenie 2
                    Ostatnia linijka piosenki różni się od pozostałych. Wydrukuj ten wiersz wewnątrz `{for}` i użyj `{if}`, aby działał poprawnie.
                example_code: |
                    ```
                    _ małpki _ _ 5 _ 1
                        {print} małpki 'małe małpki skaczące po łóżku'
                        _
                    ```
            12:
                story_text: |
                    W tej piosence jeszcze prościej zaprogramujemy 'jeśli jesteś dziś szczęśliwy w dłonie klaszcz'. To wszystko dzięki temu, że wszystkie akcje możemy przypisać do zmiennej. Zobacz jak:

                    ### Ćwiczenie
                    Czy potrafisz dodać odpowiednią długość wcięcia do każdej linii kodu żeby ta piosenka była zaśpiewana poprawnie?
                    Wskazówka: Nie wszystkie linie kodu wymagają wcięcia.
                example_code: |
                    ```
                    akcje = 'w dłonie klaszcz', 'tupnij tak', 'klepnij się'
                    {for} akcja {in} akcje
                        {for} i {in} {range} 1 {to} 2
                            {print} 'jeśli jesteś dziś szczęśliwy'
                            {print} akcja
                        {print} 'jeśli jesteś dziś szczęśliwy, w sercu pokój masz prawdziwy'
                        {print} 'jeśli jesteś dziś szczęśliwy'
                        {print} akcja
                    ```
            13:
                story_text: |
                    In the previous adventure you have learned how to use an argument in a function, but did you know that you could combine them with {ask} commands as well?
                    In this example we have changed the 'My Bonnie' program and made it interactive. You are now asked where Bonnie is.
                example_code: |
                    ```
                    {define} song {with} place
                        {print} 'My Bonnie is ' place

                    chosen_place = {ask} 'Where do you want Bonnie to be?'
                    synonym = {ask} 'What is another word for that?'

                    {call} song {with} chosen_place
                    {call} song {with} synonym
                    {call} song {with} chosen_place
                    ```
            16:
                story_text: |
                    Na tym poziomie możesz jeszcze szybciej zaprogramować utwór taki jak „Dziadek Fajną Farmę Miał”. Możesz połączyć odpowiednie zwierzę z odpowiednim dźwiękiem, po prostu umieszczając je w tym samym miejscu na liście.
                    „Morskie Opowieści” (ang.: Drunken Sailor) jest również szybko tworzony na tym poziomie. Potrzebujesz tylko 8 linii do całej piosenki, sprawdź to!
                example_code: |
                    ```
                    zwierzęta = ['Kurki', 'Krówki', 'Świnkę']
                    dźwięki = ['ko', 'muu', 'chrum']
                    {for} i {in} {range} 1 {to} 3
                        zwierzę = _
                        dźwięk = _
                        {print} 'Dziadek fajną farmę miał'
                        {print} 'ija ija oo!'
                        {print} zwierzę ' na niej hodował'
                        {print} 'ija ija oo!'
                        {print} zwierzę ' ' dźwięk dźwięk ' tu'
                        {print} 'i ' dźwięk dźwięk ' tam'
                        {print} dźwięk 'tu,'
                        {print} dźwięk ' tam,'
                        {print} 'ciągle tylko ' dźwięk dźwięk
                    ```

                    ```
                    wersy = ['Co zrobimy z pijanym marynarzem?', 'Zgolim mu brzuch żyletką tępą,', 'Wsadzim go w łódź aż wytrzeźwieje,']
                    {for} wers {in} wersy
                        {for} i {in} {range} 1 {to} 3
                            {print} wers
                        {print} 'Wcześnie o poranku!'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'Hej ho i już się wznosi,'
                        {print} 'Wcześnie o poranku!'
                    ```
            18:
                story_text: |
                    W poziomie 16 stworzyliśmy piosenki przy użyciu list. Te programy nie będą już działały poprawnie w tym poziomie. Dwukropki z poziomu 17 i nawiasy kwadratowe z poziomu 18 muszą zostać dodane.

                    ### Ćwiczenie 1
                    Piosenka o pijanym marynarzu ma przykładowy kod, ale jeszcze nie działa.
                    Czy możesz się upewnić, że wszystko znów zacznie działać? By Ci pomóc powstawialiśmy _ w _niektórych_ miejscach z błędami.

                    ### Ćwiczenie 2
                    Teraz znajdź swoją piosenkę o dziadku z farmą z poziomu 16 i popraw ją.
                example_code: |
                    ```
                    wersy = ['Co zrobimy z pijanym marynarzem?', 'Zgolim mu brzuch żyletką tępą,', 'Wsadzim go w łódź aż wytrzeźwieje,']
                    {for} wers {in} wersy _
                        {for} i {in} {range} 1 {to} 3 _
                            {print} _ wers _
                        {print} 'Wcześnie o poranku!'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'Hej ho i już się wznosi,'
                        {print} 'Wcześnie o poranku!'
                    ```
    songs_2:
        name: Sing a song! 2
        default_save_name: Song 2
        description: Sing a song 2
        levels:
            12:
                story_text: |
                    Songs contain a lot of repetition. We can capture it with a function!
                    ### Exercise
                    Look at the example code with the function. Fill out the two lines so the full song is printed.
                example_code: |
                    ```
                    {define} twinkle
                        {print} 'Twinkle'
                        {print} '...'

                    {call} twinkle
                    {print} 'Up above the world so high'
                    {print} 'Like a diamond in the sky'
                    {call} _
                    ```
            16:
                story_text: |
                    ### Exercise
                    Finish the nursery rhyme!
                example_code: |
                    ```
                    number = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
                    object = ['on his drum', 'on his shoe', 'on his knee', 'on his door', 'on his hive', 'on his sticks', 'up in heaven', 'on his gate', 'on his vine', 'once again']

                    _
                        {print} 'This old man'
                        {print} 'He played ' _
                        {print} 'He played knick-knack ' _
                        {print} 'With a knick-knack paddywhack'
                        {print} 'Give the dog a bone'
                        {print} 'This old man came rolling home'
                        {sleep} 8
                        {clear}
                    ```
                story_text_2: |
                    ### Exersice 2
                    Now create your own code for the nursery rhyme 'The wheels on the bus' on the same way!
                example_code_2: |
                    ```
                    object = ['wheels', 'doors', _]
                    movement = [ 'round and round', 'open and shut', _]
                    ```
    tic:
        name: Tic-Tac-Toe
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    Let's program a game of tic-tac-toe!

                    ### Exercise
                    In this adventure we'll start with creating an empty field.

                    ***Create a list called field*** This list will be our playing field. This list is filled with 9 dots, since there are no x's and o's yet at the start of our game.

                    ***Create a function that prints the field*** Firstly, clear the screen so the old playing fields will be removed. Then we print the first line of our Tic Tac Toe field. This line constists of the first 3 spots in our list field.
                    We have already programmed this line for you. Now finish the field by printing spot 4, 5, and 6 on the second row and spot 7, 8 and 9 in the third row.

                    ***Call the function that prints the field*** Now call the function.
                    <div class="w-full flex flex-row gap-2">
                        Run the code. Your output should look like this: <img src="https://github.com/hedyorg/hedy/assets/80678586/bcbd156e-4b48-4e82-84ae-f86d21b0cbcc" width="100">
                    </div>

                    ***Continue in the next tab*** In the next tab you'll learn how to program the game itself.
                example_code: |
                    ```
                    # Create a list called field
                    _ = ['.', '.', '.', '.', '.', '.', '.', '.', '.']

                    # Create a function that prints the field
                    {define} print_field
                        _
                        {print} 'TIC TAC TOE'
                        {print} field[1] field[2] field[3]
                        _
                        _

                    # Call the function
                    ```
            17:
                story_text: |
                    In the previous level you've learned how to make a tic-tac-toe game. The game works, but is quite annoying as it keeps asking you if you've won yet.
                    Now that we have the {elif} command, we can let the game decide if someone has won and it can stop asking us!

                    ### Exercise
                    ***Paste your code*** Paste your code from the previous level here and make it level 17 proof. In this level you've learned to use a colon everytime you create a block of code. Please add the colons in the correct spots.

                    ***Create a function that detects if someone's won*** We have started the function for you, paste it under the function `print_field` and finish the function. You can see that this first piece of code checks to see if spot 1, 2 and 3 are the same, because if they are you have 3 in a row.
                    It also checks if they are not a dot, because if they are, the line might have the same symbols on them, but that's just because it's still empty.
                    If all these conditions are met, the game is over and the winner is printed.
                    Finish this function with all possible ways to win. This means you have to make this for the other 2 rows, 3 columns and 2 diagonals.
                    If you've finished all the other options, the function should return the variable `game_over` so we can use it in our game.

                    ***Call the function in the game*** Go to the line `game_over = {ask} 'Did you win?'` and change it to `game_over = {call} detect_winner {with} field, sign`. Now the function will check if there's a winner and the game doesn't need to keep asking anymore!

                    ***Enjoy your game!*** Great job! You have finished the game! Enjoy playing it!

                example_code: |
                    ```
                    # Paste your code here and make it level 17 proof

                    # Create a function that detects if someone has won
                    {define} detect_winner {with} field, sign:
                        {if} field[1] == field[2] {and} field[2] == field[3] {and} field[1] != '.':
                            game_over = 'yes'
                            {print} 'Player ' sign 'wins!'
                        {elif}:
                            _
                        {else}:
                            game_over = 'no'
                    {return} _
                    ```
    tic_2:
        name: Tic-Tac-Toe 2
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    In the previous adventure you've learned how to create a playing field. Now you'll learn how to create the game!

                    ### Exercise
                    ***Paste your code*** Start by pasting your code from the previous adventure here.

                    ***Add variables*** Underneath your list called `field` we'll add 2 more variables that we'll need to program the game.
                    The variable `game_over` tells us if the game is over, and should be 'no' at the start of the game.
                    The variable `sign` tells us if it's the turn of player x or player o. Set the variable to 'x'.

                    ***The game*** First use a {while} command, to make sure the game keeps on playing the variable while game_over is set to no.
                    During the game, we first ask the player which spot they choose. Then we change the field with the number they chose into their sign.
                    Then we print the field again and we ask the player if they've won yet. Lastly we want to switch whose turn it is, so if the sign is 'x' it should be 'o' and the other way around.

                    ***Test your game*** Does your game work? Great, have fun playing the game! If not, use the ladybug button to debug your code.
                    You might have noticed one mistake in the code though, you can steal the other player's spot! If the other person chose spot 1, you could simply enter 1 after them and steal their spot.
                    That's not fair! Go to the next tab to learn how to fix this problem.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Add variables
                    game_over = _
                    sign = _

                    # The game
                    {while} _
                        choice = _ 'Player ' sign '_?'
                        field[choice] = _
                        _ print_field
                        game_over = {ask} _
                        {if} sign = 'o'
                            sign = _
                        _
                            sign = _
                    ```
    tic_3:
        name: Tic-Tac-Toe 3
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    You might have noticed one mistake in the code you've made in the previous adventure. You can steal the other player's spot! If the other person chose spot 1, you could simply enter 1 after them and steal their spot.
                    That's not fair! In this tab we'll fix that mistake.

                    ### Exercise
                    ***Paste your code here*** Paste your code from the previous adventure here.

                    ***Fix the mistake*** To fix the mistake we replace the line that says `field[choice] = sign`. This turns any spot that the player has chosen into their sign.
                    Go to the header that says 'Use this to fix the mistake' and finish the code. We first want to check if the chosen spot is still empty, so `if field[choice] = '.'`. If that is the case, you are allowed to take it.
                    Then we make an else command and print 'Sorry, this spot is already taken' if the spot is not empty. Lastly, we add a {sleep} command, so the players can actually read the text before it gets cleared again.
                    Now copy this piece of code and replace the line `field[choice] = sign` with this new piece of code.

                    ***Play your game!*** Now the game should work properly! Good job!
                    The only flaw is that you can get a bit annoyed that the game keeps asking you if you've won yet. Do you want to fix that? Go to level 17 and we'll fix it!
                example_code: |
                    ```
                    # Paste your code here

                    # Use this to fix the mistake
                    {if} _ = '.'
                        field[choice] = sign
                    {else}
                        {print} _
                        _
                    ```
    turtle:
        name: Żółw
        default_save_name: Żółw
        description: Stwórz swoje własne obrazki
        levels:
            1:
                story_text: |
                    Możesz wykorzystać Hedy także do rysowania.  Rysując linie i obracając żółwia, możesz narysować kwadrat lub gwiazdę!

                    Pisząć `{forward}` możesz narysować linie. Liczba zaraz po komendzie mówi o tym ile ma przejść żółw rysując linie..`{turn} {right}` obraca żółwia o ćwierć obrotu w prawo (zgodnie z ruchem wskazówek zegara), `{turn} {left}` obraca w lewo (przeciwnie do ruchu wskazówek zegara).

                    Jeśli chcesz przesunąć żółwia do tył, możesz wykorzystać komendę `{forward}` ale z ujemną liczba. Na przykład `{forward} -100`
                example_code: |
                    ```
                    {forward} 100
                    {turn} {left}
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    To jest początek schodków. Możesz sprawić aby miały 5 stopni?
                example_code_2: |
                    ```
                    {forward} 20
                    {turn} {right}
                    {forward} 20
                    {turn} {left}
                    {forward} 20
                    ```
            2:
                story_text: |
                    Na tym poziomie możesz używać zmiennych aby uczynić żółwia interaktywnym. Na przykład możesz zapytać użytkownika ile kroków ma zrobić twój żółw.
                example_code: |
                    ```
                    kroki {is} {ask} Ile kroków ma wykonać żółw?
                    {forward} kroki
                    ```
                story_text_2: |
                    Również na poziomie 1 żółw mógł skręcać tylko w lewo lub w prawo. To trochę nudne!
                    Na poziomie 2 może obracać się we wszystkich kierunkach.

                    Użyj liczby 90, aby obrócić o żółwia o ćwierć obrotu. Wielkość obrotu liczby w stopniach. Pełny obrót to 360 stopni.

                    ### Ćwiczenie
                    Czy możesz zrobić figurę za pomocą tego kodu? Może trójkąt lub okrąg?
                example_code_2: |
                    ```
                    {print} Rysowanie kształtu
                    kąt {is} 90
                    {turn} kąt
                    {forward} 25
                    {turn} kąt
                    {forward} 25
                    ```
            3:
                story_text: |
                    Na tym poziomie możesz użyć `{at} {random}` podczas rysowania żółwiem. Losowy wybór sprawia, że żółw za każdym razem idzie inną ścieżką.
                    Użyj `{at} {random}`, aby wybrać wartość z listy.
                    ### Ćwiczenie
                    Czy możesz skopiować i wkleić linie 2 i 3, żeby stwożyć dłuższą losową ścieżkę?
                example_code: |
                    ```
                    kąty {is} 10, 50, 90, 150, 250
                    {turn} kąty {at} {random}
                    {forward} 25
                    ```
            4:
                story_text: |
                    Na poziomie 4 musisz użyć cudzysłowów z poleceniami `{print}` oraz `{ask}`. To samo się dotyczy rysowania!
                example_code: |
                    ```
                    {print} _ Rysujemy figury _
                    kąt {is} 90
                    {turn} kąt
                    {forward} 25
                    {turn} kąt
                    {forward} 25
                    ```
                story_text_2: |
                    Możesz również zmienić kolor rysowanych linii przy użyciu polecenia `{color}`. Sprawdź przykładowy program.
                    Możesz również użyc polecenia `{color} {white}` żeby zrobić "niewidoczne" linie. Możesz użyć tych "niewidocznych" linii, żeby przesunąć żółwia w inne miejsce na ekranie zanim zaczniesz rysować.
                example_code_2: |
                    ```
                    {color} {white}
                    {forward} -80
                    {color} {green}
                    {forward} 50
                    {color} {yellow}
                    {forward} 50
                    {color} {red}
                    {forward} 50
                    ```
            5:
                story_text: |
                    Na poziomie 5 możesz dokonywać wyboru przy użyciu polecenia `{if}`. Przykładem takiego wyboru byłby wybór pomiędzy różnymi typami figur do narysowania.
                example_code: |
                    ```
                    {print} 'Rysowanie Figur'
                    figura {is} {ask} 'Chcesz kwadrat czy trójkąt?'
                    {if} figura {is} trójkąt kąt {is} 120
                    {else} kąt {is} 90
                    {turn} kąt
                    {forward} 25
                    {turn} kąt
                    {forward} 25
                    {turn} kąt
                    {forward} 25
                    {turn} kąt
                    {forward} 25
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Wpisz poprawne liczby w tym kodzie tak by zaczął działać.
                    Gdy to już zrobisz, możesz spróbować dodać możliwość cofania się.

                    **Dodatkowo** Zamiast używać „prawo” i „lewo” zmień program by używał „Północ”, „Wschód”, „Południe” i „Zachód”.
                    W ten sposób możesz dodać nawet więcej kierunków, jak na przykład, „Północny wschód” czy „Południowy zachód”.
                example_code_2: |
                    ```
                    kierunek {is} {ask} 'Chcesz iść w „prawo”, w „lewo” czy „naprzód”?'
                    {if} kierunek {is} lewo {turn} _
                    {if} kierunek {is} prawo {turn} _
                    {forward} 100
                    ```
            6:
                story_text: |
                    Na tym poziomie możesz użyć matematyki żeby narysować różne figury.
                    Być może pamiętasz ze szkoły, że obrócenie się dookoła jest tym samym co obrócenie się o 360 stopni. Jeżeli tego nie wiedziałeś to teraz już wiesz!
                    Z tego też powodu już wiesz dlaczego gdy rysujemy kwadrat to obracamy się o 90 stopni. Jako, że kwadrat ma cztery boki pod kątem prostym to znaczy że kąt pomiędzy nimi to 90 stopni - 360 stopni podzielone przez 4 (boki) to 90 stopni.
                    Dzięki temu, że w Hedy możesz przeprowadzać obliczenia matematyczne, możesz tez rysować wszystkie figury jakie tylko chcesz!
                example_code: "```\nkątów = {ask} 'Ile chcesz kątów?'\nkąt = 360 / kątów\n{forward} 50\n{turn} kąt\n{forward} 50\n{turn} kąt\n{forward} 50\n{turn} kąt\n{forward} 50\n{turn} kąt\n{forward} 50\n{turn} kąt\n{forward} 50 \n{turn} kąt\n```\n"
            8:
                story_text: |
                    Dzięki naszej nowo nabytej umiejętności powtarzania wielu linii kodu możemy rysować figury w jeszcze prostszy sposób.
                    Wystarczy, że ustawimy kąt tylko raz i potem użyjemy go jako zmienną wewnątrz polecenia `{repeat}`.

                    ### Ćwiczenie 1
                    Przykładowy kod tworzy kwadrat. Zmień kod tak, aby tworzył inną figurę, np. trójkąt lub sześciokąt.
                    Wymaga to zmiany w dwóch liniach kodu.
                    Podpowiedź: Całe koło to 360 stopni.

                    ### Ćwiczenie 2
                    Teraz stwórz rysunek składający się z co najmniej dwóch wielokątów.
                example_code: |
                    ```
                    kąt = 90
                    {repeat} 4 {times}
                        {turn} kąt
                        {forward} 50
                    ```
                story_text_2: |
                    **(dodatkowe zadanie)** Możemy teraz ulepszyć program, który rysuje różne figury. Donończ kod i możesz narysować dowolny wielokąt, który chcesz!
                example_code_2: |
                    ```
                    figura = {ask} 'Ile kątów mam narysować?'
                    kąt = 360 / figura
                    {repeat} figura {times}
                        {turn} _
                        {forward} _
                    ```
            9:
                story_text: |
                    Skoro potrafimy używać `{repeat}` wewnątrz `{repeat}`, możemy tworzyć bardziej złożone figury.

                    ### Ćwiczenie 1
                    Ten kod tworzy trzy czarne trójkąty, zmień to na pięć różowych kwadratów.

                    **(dodatkowe zadanie)** Stwórz własną figurę składającą się z co najmniej dwóch różnych kształtów.
                example_code: |
                    ```
                    {color} {black}
                    {repeat} 3 {times}
                        {repeat} 3 {times}
                            {forward} 10
                            {turn} 120
                        {color} {white}
                        {forward} 50
                        {color} {black}
                    ```
            10:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.
                    ### Ćwiczenie 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                     **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!
                    ### Ćwiczenie 2
                    The spiral is drawn outwards, make it go inwards?
                example_code: |
                    ```
                    {turn} 90
                    distances = 10, 20, 30, 40, 50, 60
                    {for} distance {in} distances
                        {forward} distance
                    ```
            12:
                story_text: |
                    We can use functions to draw more complex figures with less code.
                    ### Exercise 1
                    Fill the function so that three squares are created. If you want the image to look nicer, you can make the lines between the squares white.

                    ### Exercise 2
                    The code can be made even shorter. Place the final lines into a `{repeat}` so the figure remains the same.

                    ### Exercise 3
                    Create your own drawing with different figures.
                    Change both the number of figures with the `{repeat}` and the shape of the figures in the `{define}`
                example_code: |
                    ```
                    {define} square
                        {repeat} 4 {times}
                            {turn} _
                            {forward} _
                    {call} square
                    {forward} 50
                    {call} square
                    {forward} 50
                    {call} square
                    ```
    turtle_draw_it:
        name: Draw it!
        default_save_name: Draw it
        description: Draw this picture with the turtle
        levels:
            1:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                        Rectangle <img src="https://github.com/hedyorg/hedy/assets/80678586/77aa99d5-cd8f-4969-b49d-e8fed34ac550" width="100">
                        Square <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                        Stairs<img src="https://github.com/hedyorg/hedy/assets/80678586/d4301e62-ec66-4031-827c-7d21f73ba106" width="200">
                    </div>
            2:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/e974b62c-f0cf-445a-8bd4-5ad9f1f71204" width="100">
                    Arrow <img src="https://github.com/hedyorg/hedy/assets/80678586/803d8f42-9708-448c-82ea-d035697f08c9" width="150">
                    Boat <img src="https://github.com/hedyorg/hedy/assets/80678586/94ef7189-442a-4c8f-827d-12a69203c2e9" width="150">
                    </div>
            3:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/71e04d98-9545-4614-9caf-a5f179b756a1" width="150">
                    Star <img src="https://github.com/hedyorg/hedy/assets/80678586/421c4d28-cb99-424b-be26-dcae30d65c80" width="150">
                    Arrow <img src="https://github.com/hedyorg/hedy/assets/80678586/3cbebcae-5258-47c5-a6ac-e7ee36c1d1ce" width="200">
                    </div>
            4:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Colored Star <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Rainbow <img src="https://github.com/hedyorg/hedy/assets/80678586/2728b10f-9f7f-45ea-964e-5b284033e4f0" width="500">
                    Nested squares <img src="https://github.com/hedyorg/hedy/assets/80678586/f013f9fa-bc68-4c60-b778-2c457799d6f7" width="200">
                    </div>
                example_code: |
                    **Extra** Up for a real challenge? Make sure that the colors of these figures are selected randomly, so that each time you run your programs they'll look differently!

                    ```
                    colors {is} red, orange, yellow, green, blue, purple, pink, brown, gray, black
                    color _
                    ```
            5:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** Make only one code that lets the player decide which letter they'd like to see! And can you add even more letters?

                    <div class="w-full flex flex-row gap-2">
                    F <img src="https://github.com/hedyorg/hedy/assets/80678586/8a021b76-c24b-4e7c-b960-48d57f3bcb20" width="100">
                    E <img src="https://github.com/hedyorg/hedy/assets/80678586/12821803-6422-416a-8e36-9902d14e57a4" width="100">
                    L <img src="https://github.com/hedyorg/hedy/assets/80678586/3af6f919-7b67-4ee7-b923-11e56f2b6b24" width="100">
                    </div>
                example_code: |
                    Hint:
                    ```
                    chosen_letter {is} {ask} 'Which letter would you like to see? F, E or L?'
                    {if} _
                    ```
            6:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** Let the player decide which color the square should be.

                    ***Extra*** Can you make the letter of your own first name and the flag of your own country too?

                    <div class="w-full flex flex-row gap-2">
                    Square <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="150">
                    Letters <img src="https://github.com/hedyorg/hedy/assets/80678586/e75f4fa5-f1f5-4b48-806c-916c28e4e8ad" width="100">
                    Flag <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hint for the square:
                    ```
                    chosen_color = {ask} _
                    ```
            7:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Hexagon <img src="https://github.com/hedyorg/hedy/assets/80678586/92e492e1-1593-489b-aaf0-51d2a29755f4" width="200">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/3629a5e6-1f02-4851-aab9-c5430ba4a1f1" width="200">
                    Fan <img src="https://github.com/hedyorg/hedy/assets/80678586/1ba2ff71-1230-4fe3-8255-b2c504cf1b4e" width="200">
                    </div>
            8:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** The number in brackets indicates in how many lines of code this figure can be drawn. Can you do it in the same amount of lines?

                    <div class="w-full flex flex-row gap-2">
                    Square (3) <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                    Randomly colored star (5) <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Randomly colored spiral (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/9bcdb3f1-367d-4ae0-878f-d09005424a35" width="150">
                    </div>
            9:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** The number in brackets indicates in how many lines of code this figure can be drawn. Can you do it in the same amount of lines?

                    **Extra** Give the player a choice which country they would like to see the flag of.

                    <div class="w-full flex flex-row gap-2">
                    Cross (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/76e42c76-aa3f-4863-8eee-ead73c09a186" width="150">
                    Randomly colored nested squares (8) <img src="https://github.com/hedyorg/hedy/assets/80678586/17f878cc-e893-4c10-b32e-a09a50bf08de" width="200">
                    Flags <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hint for the nested squares:
                    ```
                    colors = red, blue, orange, yellow, pink, purple, green, brown, black
                    distance = 120
                    repeat 5 times
                    _
                    ```
                    Hint for the flags:
                    ```
                    country = ask 'which country would you like to see the flag of?'
                    if country is 'the Netherlands'
                        color_1 = red
                        color_2 = white
                        color_3 = blue
                    ```
            10:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Nested Hexagon <img src="https://github.com/hedyorg/hedy/assets/80678586/3629e908-3cd5-44ac-bbcd-1f1cceb15654" width="150">
                    Traffic lights  <img src="https://github.com/hedyorg/hedy/assets/80678586/edbbb608-5ff8-4349-85a6-e47809adde43" width="100">
                    </div>
                example_code: |
                    Hint Nested Hexagon:
                    ```
                    distances = 100, 80, 60, 40, 20
                    {for} distance {in} distances
                    _
                    ```

                    Hint Traffic Lights:
                    ```
                    colors = red, yellow, green
                    {for} chosen_color {in} colors
                        color _
                        {repeat} _
                    ```
                story_text_2: |
                    Christmas lights <img src="https://github.com/hedyorg/hedy/assets/80678586/9637ea6d-6edc-4d88-a6f7-10271bfc5371" width="500">
                example_code_2: |
                    Hint Christmas Lights:

                    Start by moving to the left side of the screen with an invisible white line. Then hang up the Christmas lights!
                    ```
                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 90

                    colors = red, blue, yellow, purple, green, orange, pink
                    {for} chosen_color {in} colors
                    _
                    ```
            11:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Beehive (6) <img src="https://github.com/hedyorg/hedy/assets/80678586/ec02469c-907b-4695-9382-d39a8f3c00ec" width="150">
                    Fan (5)  <img src="https://github.com/hedyorg/hedy/assets/80678586/a032ab35-c70c-4e67-9b4e-036a03ecce87" width="150">
                    Snowflake (13) <img src="https://github.com/hedyorg/hedy/assets/80678586/90f56bbb-86e5-448d-8aec-16f8c2c05cf2" width="150">
                    </div>
                example_code: |
                    Hint Beehive:
                    ```
                    {for} amount_of_combs {in} {range} 1 {to} _
                        {for} walls_of_one_comb {in} {range} 1 {to} _
                            {forward} _
                            {turn} _
                        {forward} _
                        {turn} _
                    ```

                    Hint Fan:
                    Start out like the fan you made in level 7. Or take a peak at the hint for the beehive, because the codes are very similar.

                    Hint Snowflake: Start by making one 'leg' and repeat it 6 times.
            12:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!
                    Hint: Bracelet designing program. Firstly, define a function **for each shape** you want to use on the bacelet. Then, add the shapes to the bacelet like this:
                    </div>
                    Bracelet Designing program <img src="https://github.com/hedyorg/hedy/assets/80678586/549d7f3a-c492-4b4a-b173-746eb3400951" width="500">
                example_code: |
                    ```
                    {define} draw_a_square
                    _

                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 180

                    {for} i {in} {range} 1 {to} 5
                        {color} gray
                        {forward} 100
                        shape = {ask} 'What kind of shape would you like next on the bracelet?'
                        chosen_color = {ask} 'In which color?'
                        {color} chosen_color
                        {if} shape = 'square'
                            {call} draw_a_square
                    ```
            13:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    Street in different sizes <img src="https://github.com/hedyorg/hedy/assets/80678586/cdae9d97-d5ef-46f3-8838-24fa7b5b1bec" width="300">
                    Colored street  <img src="https://github.com/hedyorg/hedy/assets/80678586/9893e0bd-c0f8-49bc-a5a7-217182407724" width="300">
                    Snow Storm <img src="https://github.com/hedyorg/hedy/assets/80678586/111b0a1b-b0e1-47c3-b032-81cea05e6bbc" width="300">
                example_code: |
                    Hint Street in different sizes
                    ```
                    {define} draw_a_house {with} size
                    _

                    {call} draw_a_house {with} 90
                    {call} draw_a_house {with} 60
                    {call} draw_a_house {with} 30
                    ```

                    Hint Colored street
                    ```
                    {define} draw_a_house {with} chosen_color
                    _
                    ```

                    Hint Snow Storm
                    ```
                    {define} draw_snowflake {with} length, color
                        _

                    numbers = 10, 20, 30
                    colors = _

                    {for} i {in} {range} 1 {to} 5
                        random_number = _
                        random_color = _
                        {call} draw_snowflake {with} random_number, random_color
                        {color} white
                        {turn} random_number * 5
                        {forward} 80
                    ```
            14:
                story_text: |
                    ### Ćwiczenie
                    Utwórz program, który zapyta gracza, ile rogów powinna mieć jego figurka, a następnie utworzy tę figurę.
                    Liczba na obrazku to wynik, gdy gracz wypełni 10.

                    <div class="w-full flex flex-row gap-2">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/ee32f40e-dea1-4e7c-a813-3ef63671254b" width="300">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/3621bf77-527d-41e8-a44f-c5a21bb4ffd2" width="200">
                    </div>
                example_code: |
                    ```
                    {define} calculate_degrees {with} amount_of_corners
                        _ 360 / amount_of_corners


                    {define} draw_figure {with} degrees
                        _
                            {forward} 400/amount_of_corners
                            {turn} _

                    amount_of_corners = {ask} _
                    degrees = {call} _ {with} _

                    {call} _ {with}
                    {call} _ {with}
                    ```
            15:
                story_text: |
                    ### Ćwiczenie
                    Odtwórz rysunki z żółwiem!

                    Spirala <img src="https://github.com/hedyorg/hedy/assets/80678586/6943223c-018b-435b-a391-23723cc7a6ad" width="150">
                example_code: |
                    Spirala
                    ```
                    distance = 5
                    {while} distance < 200
                        distance = distance + 5
                         _
                    ```
                story_text_2: |
                    Spirala <img src="https://github.com/hedyorg/hedy/assets/80678586/cb671065-b47b-49f0-b298-dcbcd2a5e28f" width="150">
                example_code_2: |
                    Fan
                    ```
                    {define} draw_a_square {with} side
                    _

                    i = 100
                    {while} i > 1
                        _ {with} i
                        _
                        i = i - 3
                    ```
                story_text_3: |
                    Star <img src="https://github.com/hedyorg/hedy/assets/80678586/17564e0a-63e1-4794-8d41-15ac8c1a5a93" width="150">
                example_code_3: |
                    Gwiazda
                    Gwiazdę rysuje się zwykle za pomocą obrotu o 144 stopnie. Jeśli zmienisz to nieco na przykład na 143 stopnie i powtórzysz wzór wiele razy z pętlą {while}, możesz wykonać tę figurę.
    while_command:
        name: '{while}'
        default_save_name: while_command
        description: while
        levels:
            15:
                story_text: |-
                    Nauczymy się innej pętli, pętli `{while}`! Kontynuujemy pętlę tak długo, jak długo stwierdzenie jest prawdziwe.
                    Nie zapomnij więc zmienić wartości w pętli.

                    W przykładowym kodzie kontynuujemy, aż zostanie podana poprawna odpowiedź.
                    Jeśli nigdy nie zostanie podana prawidłowa odpowiedź, pętla nigdy się nie kończy!
                example_code: |
                    ```
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
                    ```
    years:
        name: Nowy Rok
        default_save_name: Odliczanie do Nowego Roku
        description: Odliczanie do Nowego Roku!
        levels:
            11:
                story_text: |
                    Na tym poziomie możesz użyć komendy `{for}` liczba `{in}` `{range}`, aby odliczać czas do Nowego Roku.

                    ### Ćwiczenie
                    Wypełnij puste pola i spraw, aby kod działał!
                example_code: |
                    ```
                    {for} liczba {in} {range} _ {to} _
                        {print} liczba
                    {print} 'Szczęśliwego Nowego Roku!'
                    ```
